// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef BICEPS_MESSAGE_MODEL_HXX
#define BICEPS_MESSAGE_MODEL_HXX

#include "BICEPS_MessageModel-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ExtensionPoint.hxx"

#include "BICEPS_ParticipantModel.hxx"

namespace CDM
{
  class TransactionId: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >
  {
    public:
    // Constructors.
    //
    TransactionId (const ::xml_schema::UnsignedInt&);

    TransactionId (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    TransactionId (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    TransactionId (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    TransactionId (const TransactionId& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    virtual TransactionId*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~TransactionId ();
  };

  class InvocationState: public ::xml_schema::String
  {
    public:
    enum Value
    {
      Wait,
      Start,
      Cnclld,
      CnclldMan,
      Fin,
      FinMod,
      Fail
    };

    InvocationState (Value v);

    InvocationState (const char* v);

    InvocationState (const ::std::string& v);

    InvocationState (const ::xml_schema::String& v);

    InvocationState (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    InvocationState (const ::xercesc::DOMAttr& a,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    InvocationState (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    InvocationState (const InvocationState& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    virtual InvocationState*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    InvocationState&
    operator= (Value v);

    virtual
    operator Value () const
    {
      return _xsd_InvocationState_convert ();
    }

    protected:
    Value
    _xsd_InvocationState_convert () const;

    public:
    static const char* const _xsd_InvocationState_literals_[7];
    static const Value _xsd_InvocationState_indexes_[7];
  };

  class InvocationError: public ::xml_schema::String
  {
    public:
    enum Value
    {
      Unspec,
      Unkn,
      Inv,
      Oth
    };

    InvocationError (Value v);

    InvocationError (const char* v);

    InvocationError (const ::std::string& v);

    InvocationError (const ::xml_schema::String& v);

    InvocationError (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    InvocationError (const ::xercesc::DOMAttr& a,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    InvocationError (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    InvocationError (const InvocationError& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    virtual InvocationError*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    InvocationError&
    operator= (Value v);

    virtual
    operator Value () const
    {
      return _xsd_InvocationError_convert ();
    }

    protected:
    Value
    _xsd_InvocationError_convert () const;

    public:
    static const char* const _xsd_InvocationError_literals_[4];
    static const Value _xsd_InvocationError_indexes_[4];
  };

  class InvocationInfo: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::ExtensionType ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // TransactionId
    //
    typedef ::CDM::TransactionId TransactionIdType;
    typedef ::xsd::cxx::tree::traits< TransactionIdType, char > TransactionIdTraits;

    const TransactionIdType&
    TransactionId () const;

    TransactionIdType&
    TransactionId ();

    void
    TransactionId (const TransactionIdType& x);

    void
    TransactionId (::std::unique_ptr< TransactionIdType > p);

    // InvocationState
    //
    typedef ::CDM::InvocationState InvocationStateType;
    typedef ::xsd::cxx::tree::traits< InvocationStateType, char > InvocationStateTraits;

    const InvocationStateType&
    InvocationState () const;

    InvocationStateType&
    InvocationState ();

    void
    InvocationState (const InvocationStateType& x);

    void
    InvocationState (::std::unique_ptr< InvocationStateType > p);

    // InvocationError
    //
    typedef ::CDM::InvocationError InvocationErrorType;
    typedef ::xsd::cxx::tree::optional< InvocationErrorType > InvocationErrorOptional;
    typedef ::xsd::cxx::tree::traits< InvocationErrorType, char > InvocationErrorTraits;

    const InvocationErrorOptional&
    InvocationError () const;

    InvocationErrorOptional&
    InvocationError ();

    void
    InvocationError (const InvocationErrorType& x);

    void
    InvocationError (const InvocationErrorOptional& x);

    void
    InvocationError (::std::unique_ptr< InvocationErrorType > p);

    // InvocationErrorMessage
    //
    typedef ::CDM::LocalizedText InvocationErrorMessageType;
    typedef ::xsd::cxx::tree::sequence< InvocationErrorMessageType > InvocationErrorMessageSequence;
    typedef InvocationErrorMessageSequence::iterator InvocationErrorMessageIterator;
    typedef InvocationErrorMessageSequence::const_iterator InvocationErrorMessageConstIterator;
    typedef ::xsd::cxx::tree::traits< InvocationErrorMessageType, char > InvocationErrorMessageTraits;

    const InvocationErrorMessageSequence&
    InvocationErrorMessage () const;

    InvocationErrorMessageSequence&
    InvocationErrorMessage ();

    void
    InvocationErrorMessage (const InvocationErrorMessageSequence& s);

    // Constructors.
    //
    InvocationInfo (const TransactionIdType&,
                    const InvocationStateType&);

    InvocationInfo (::std::unique_ptr< TransactionIdType >,
                    ::std::unique_ptr< InvocationStateType >);

    InvocationInfo (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    InvocationInfo (const InvocationInfo& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual InvocationInfo*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    InvocationInfo&
    operator= (const InvocationInfo& x);

    virtual 
    ~InvocationInfo ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    ::xsd::cxx::tree::one< TransactionIdType > TransactionId_;
    ::xsd::cxx::tree::one< InvocationStateType > InvocationState_;
    InvocationErrorOptional InvocationError_;
    InvocationErrorMessageSequence InvocationErrorMessage_;
  };

  class AbstractGet: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::ExtensionType ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // Constructors.
    //
    AbstractGet ();

    AbstractGet (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    AbstractGet (const AbstractGet& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual AbstractGet*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractGet&
    operator= (const AbstractGet& x);

    virtual 
    ~AbstractGet ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
  };

  class AbstractGetResponse: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::ExtensionType ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // MdibVersion
    //
    typedef ::CDM::VersionCounter MdibVersionType;
    typedef ::xsd::cxx::tree::optional< MdibVersionType > MdibVersionOptional;
    typedef ::xsd::cxx::tree::traits< MdibVersionType, char > MdibVersionTraits;

    const MdibVersionOptional&
    MdibVersion () const;

    MdibVersionOptional&
    MdibVersion ();

    void
    MdibVersion (const MdibVersionType& x);

    void
    MdibVersion (const MdibVersionOptional& x);

    void
    MdibVersion (::std::unique_ptr< MdibVersionType > p);

    // SequenceId
    //
    typedef ::xml_schema::Uri SequenceIdType;
    typedef ::xsd::cxx::tree::traits< SequenceIdType, char > SequenceIdTraits;

    const SequenceIdType&
    SequenceId () const;

    SequenceIdType&
    SequenceId ();

    void
    SequenceId (const SequenceIdType& x);

    void
    SequenceId (::std::unique_ptr< SequenceIdType > p);

    // InstanceId
    //
    typedef ::xml_schema::UnsignedLong InstanceIdType;
    typedef ::xsd::cxx::tree::optional< InstanceIdType > InstanceIdOptional;
    typedef ::xsd::cxx::tree::traits< InstanceIdType, char > InstanceIdTraits;

    const InstanceIdOptional&
    InstanceId () const;

    InstanceIdOptional&
    InstanceId ();

    void
    InstanceId (const InstanceIdType& x);

    void
    InstanceId (const InstanceIdOptional& x);

    // Constructors.
    //
    AbstractGetResponse (const SequenceIdType&);

    AbstractGetResponse (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    AbstractGetResponse (const AbstractGetResponse& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual AbstractGetResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractGetResponse&
    operator= (const AbstractGetResponse& x);

    virtual 
    ~AbstractGetResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    MdibVersionOptional MdibVersion_;
    ::xsd::cxx::tree::one< SequenceIdType > SequenceId_;
    InstanceIdOptional InstanceId_;
  };

  class AbstractReportPart: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::ExtensionType ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // SourceMds
    //
    typedef ::CDM::HandleRef SourceMdsType;
    typedef ::xsd::cxx::tree::optional< SourceMdsType > SourceMdsOptional;
    typedef ::xsd::cxx::tree::traits< SourceMdsType, char > SourceMdsTraits;

    const SourceMdsOptional&
    SourceMds () const;

    SourceMdsOptional&
    SourceMds ();

    void
    SourceMds (const SourceMdsType& x);

    void
    SourceMds (const SourceMdsOptional& x);

    void
    SourceMds (::std::unique_ptr< SourceMdsType > p);

    // Constructors.
    //
    AbstractReportPart ();

    AbstractReportPart (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    AbstractReportPart (const AbstractReportPart& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    virtual AbstractReportPart*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractReportPart&
    operator= (const AbstractReportPart& x);

    virtual 
    ~AbstractReportPart ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    SourceMdsOptional SourceMds_;
  };

  class AbstractReport: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::ExtensionType ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // MdibVersion
    //
    typedef ::CDM::VersionCounter MdibVersionType;
    typedef ::xsd::cxx::tree::optional< MdibVersionType > MdibVersionOptional;
    typedef ::xsd::cxx::tree::traits< MdibVersionType, char > MdibVersionTraits;

    const MdibVersionOptional&
    MdibVersion () const;

    MdibVersionOptional&
    MdibVersion ();

    void
    MdibVersion (const MdibVersionType& x);

    void
    MdibVersion (const MdibVersionOptional& x);

    void
    MdibVersion (::std::unique_ptr< MdibVersionType > p);

    // SequenceId
    //
    typedef ::xml_schema::Uri SequenceIdType;
    typedef ::xsd::cxx::tree::traits< SequenceIdType, char > SequenceIdTraits;

    const SequenceIdType&
    SequenceId () const;

    SequenceIdType&
    SequenceId ();

    void
    SequenceId (const SequenceIdType& x);

    void
    SequenceId (::std::unique_ptr< SequenceIdType > p);

    // InstanceId
    //
    typedef ::xml_schema::UnsignedLong InstanceIdType;
    typedef ::xsd::cxx::tree::optional< InstanceIdType > InstanceIdOptional;
    typedef ::xsd::cxx::tree::traits< InstanceIdType, char > InstanceIdTraits;

    const InstanceIdOptional&
    InstanceId () const;

    InstanceIdOptional&
    InstanceId ();

    void
    InstanceId (const InstanceIdType& x);

    void
    InstanceId (const InstanceIdOptional& x);

    // Constructors.
    //
    AbstractReport (const SequenceIdType&);

    AbstractReport (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    AbstractReport (const AbstractReport& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual AbstractReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractReport&
    operator= (const AbstractReport& x);

    virtual 
    ~AbstractReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    MdibVersionOptional MdibVersion_;
    ::xsd::cxx::tree::one< SequenceIdType > SequenceId_;
    InstanceIdOptional InstanceId_;
  };

  class AbstractSet: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::ExtensionType ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // OperationHandleRef
    //
    typedef ::CDM::HandleRef OperationHandleRefType;
    typedef ::xsd::cxx::tree::traits< OperationHandleRefType, char > OperationHandleRefTraits;

    const OperationHandleRefType&
    OperationHandleRef () const;

    OperationHandleRefType&
    OperationHandleRef ();

    void
    OperationHandleRef (const OperationHandleRefType& x);

    void
    OperationHandleRef (::std::unique_ptr< OperationHandleRefType > p);

    // Constructors.
    //
    AbstractSet (const OperationHandleRefType&);

    AbstractSet (::std::unique_ptr< OperationHandleRefType >);

    AbstractSet (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    AbstractSet (const AbstractSet& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual AbstractSet*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractSet&
    operator= (const AbstractSet& x);

    virtual 
    ~AbstractSet ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    ::xsd::cxx::tree::one< OperationHandleRefType > OperationHandleRef_;
  };

  class AbstractSetResponse: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::ExtensionType ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // InvocationInfo
    //
    typedef ::CDM::InvocationInfo InvocationInfoType;
    typedef ::xsd::cxx::tree::traits< InvocationInfoType, char > InvocationInfoTraits;

    const InvocationInfoType&
    InvocationInfo () const;

    InvocationInfoType&
    InvocationInfo ();

    void
    InvocationInfo (const InvocationInfoType& x);

    void
    InvocationInfo (::std::unique_ptr< InvocationInfoType > p);

    // MdibVersion
    //
    typedef ::CDM::VersionCounter MdibVersionType;
    typedef ::xsd::cxx::tree::optional< MdibVersionType > MdibVersionOptional;
    typedef ::xsd::cxx::tree::traits< MdibVersionType, char > MdibVersionTraits;

    const MdibVersionOptional&
    MdibVersion () const;

    MdibVersionOptional&
    MdibVersion ();

    void
    MdibVersion (const MdibVersionType& x);

    void
    MdibVersion (const MdibVersionOptional& x);

    void
    MdibVersion (::std::unique_ptr< MdibVersionType > p);

    // SequenceId
    //
    typedef ::xml_schema::Uri SequenceIdType;
    typedef ::xsd::cxx::tree::traits< SequenceIdType, char > SequenceIdTraits;

    const SequenceIdType&
    SequenceId () const;

    SequenceIdType&
    SequenceId ();

    void
    SequenceId (const SequenceIdType& x);

    void
    SequenceId (::std::unique_ptr< SequenceIdType > p);

    // InstanceId
    //
    typedef ::xml_schema::UnsignedLong InstanceIdType;
    typedef ::xsd::cxx::tree::optional< InstanceIdType > InstanceIdOptional;
    typedef ::xsd::cxx::tree::traits< InstanceIdType, char > InstanceIdTraits;

    const InstanceIdOptional&
    InstanceId () const;

    InstanceIdOptional&
    InstanceId ();

    void
    InstanceId (const InstanceIdType& x);

    void
    InstanceId (const InstanceIdOptional& x);

    // Constructors.
    //
    AbstractSetResponse (const InvocationInfoType&,
                         const SequenceIdType&);

    AbstractSetResponse (::std::unique_ptr< InvocationInfoType >,
                         const SequenceIdType&);

    AbstractSetResponse (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    AbstractSetResponse (const AbstractSetResponse& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual AbstractSetResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractSetResponse&
    operator= (const AbstractSetResponse& x);

    virtual 
    ~AbstractSetResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    ::xsd::cxx::tree::one< InvocationInfoType > InvocationInfo_;
    MdibVersionOptional MdibVersion_;
    ::xsd::cxx::tree::one< SequenceIdType > SequenceId_;
    InstanceIdOptional InstanceId_;
  };

  class AbstractContextReport: public ::CDM::AbstractReport
  {
    public:
    // ReportPart
    //
    typedef ::CDM::ReportPart ReportPartType;
    typedef ::xsd::cxx::tree::sequence< ReportPartType > ReportPartSequence;
    typedef ReportPartSequence::iterator ReportPartIterator;
    typedef ReportPartSequence::const_iterator ReportPartConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportPartType, char > ReportPartTraits;

    const ReportPartSequence&
    ReportPart () const;

    ReportPartSequence&
    ReportPart ();

    void
    ReportPart (const ReportPartSequence& s);

    // Constructors.
    //
    AbstractContextReport (const SequenceIdType&);

    AbstractContextReport (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    AbstractContextReport (const AbstractContextReport& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual AbstractContextReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractContextReport&
    operator= (const AbstractContextReport& x);

    virtual 
    ~AbstractContextReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportPartSequence ReportPart_;
  };

  class VersionFrame: public ::xml_schema::Type
  {
    public:
    // Start
    //
    typedef ::CDM::ReferencedVersion StartType;
    typedef ::xsd::cxx::tree::optional< StartType > StartOptional;
    typedef ::xsd::cxx::tree::traits< StartType, char > StartTraits;

    const StartOptional&
    Start () const;

    StartOptional&
    Start ();

    void
    Start (const StartType& x);

    void
    Start (const StartOptional& x);

    void
    Start (::std::unique_ptr< StartType > p);

    // End
    //
    typedef ::CDM::ReferencedVersion EndType;
    typedef ::xsd::cxx::tree::optional< EndType > EndOptional;
    typedef ::xsd::cxx::tree::traits< EndType, char > EndTraits;

    const EndOptional&
    End () const;

    EndOptional&
    End ();

    void
    End (const EndType& x);

    void
    End (const EndOptional& x);

    void
    End (::std::unique_ptr< EndType > p);

    // Constructors.
    //
    VersionFrame ();

    VersionFrame (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    VersionFrame (const VersionFrame& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    virtual VersionFrame*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VersionFrame&
    operator= (const VersionFrame& x);

    virtual 
    ~VersionFrame ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    StartOptional Start_;
    EndOptional End_;
  };

  class TimeFrame: public ::xml_schema::Type
  {
    public:
    // Start
    //
    typedef ::CDM::Timestamp StartType;
    typedef ::xsd::cxx::tree::optional< StartType > StartOptional;
    typedef ::xsd::cxx::tree::traits< StartType, char > StartTraits;

    const StartOptional&
    Start () const;

    StartOptional&
    Start ();

    void
    Start (const StartType& x);

    void
    Start (const StartOptional& x);

    void
    Start (::std::unique_ptr< StartType > p);

    // End
    //
    typedef ::CDM::Timestamp EndType;
    typedef ::xsd::cxx::tree::optional< EndType > EndOptional;
    typedef ::xsd::cxx::tree::traits< EndType, char > EndTraits;

    const EndOptional&
    End () const;

    EndOptional&
    End ();

    void
    End (const EndType& x);

    void
    End (const EndOptional& x);

    void
    End (::std::unique_ptr< EndType > p);

    // Constructors.
    //
    TimeFrame ();

    TimeFrame (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    TimeFrame (const TimeFrame& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    virtual TimeFrame*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    TimeFrame&
    operator= (const TimeFrame& x);

    virtual 
    ~TimeFrame ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    StartOptional Start_;
    EndOptional End_;
  };

  class AbstractMetricReport: public ::CDM::AbstractReport
  {
    public:
    // ReportPart
    //
    typedef ::CDM::ReportPart1 ReportPartType;
    typedef ::xsd::cxx::tree::sequence< ReportPartType > ReportPartSequence;
    typedef ReportPartSequence::iterator ReportPartIterator;
    typedef ReportPartSequence::const_iterator ReportPartConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportPartType, char > ReportPartTraits;

    const ReportPartSequence&
    ReportPart () const;

    ReportPartSequence&
    ReportPart ();

    void
    ReportPart (const ReportPartSequence& s);

    // Constructors.
    //
    AbstractMetricReport (const SequenceIdType&);

    AbstractMetricReport (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    AbstractMetricReport (const AbstractMetricReport& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual AbstractMetricReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractMetricReport&
    operator= (const AbstractMetricReport& x);

    virtual 
    ~AbstractMetricReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportPartSequence ReportPart_;
  };

  class AbstractComponentReport: public ::CDM::AbstractReport
  {
    public:
    // ReportPart
    //
    typedef ::CDM::ReportPart2 ReportPartType;
    typedef ::xsd::cxx::tree::sequence< ReportPartType > ReportPartSequence;
    typedef ReportPartSequence::iterator ReportPartIterator;
    typedef ReportPartSequence::const_iterator ReportPartConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportPartType, char > ReportPartTraits;

    const ReportPartSequence&
    ReportPart () const;

    ReportPartSequence&
    ReportPart ();

    void
    ReportPart (const ReportPartSequence& s);

    // Constructors.
    //
    AbstractComponentReport (const SequenceIdType&);

    AbstractComponentReport (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    AbstractComponentReport (const AbstractComponentReport& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    virtual AbstractComponentReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractComponentReport&
    operator= (const AbstractComponentReport& x);

    virtual 
    ~AbstractComponentReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportPartSequence ReportPart_;
  };

  class AbstractAlertReport: public ::CDM::AbstractReport
  {
    public:
    // ReportPart
    //
    typedef ::CDM::ReportPart3 ReportPartType;
    typedef ::xsd::cxx::tree::sequence< ReportPartType > ReportPartSequence;
    typedef ReportPartSequence::iterator ReportPartIterator;
    typedef ReportPartSequence::const_iterator ReportPartConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportPartType, char > ReportPartTraits;

    const ReportPartSequence&
    ReportPart () const;

    ReportPartSequence&
    ReportPart ();

    void
    ReportPart (const ReportPartSequence& s);

    // Constructors.
    //
    AbstractAlertReport (const SequenceIdType&);

    AbstractAlertReport (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    AbstractAlertReport (const AbstractAlertReport& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual AbstractAlertReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractAlertReport&
    operator= (const AbstractAlertReport& x);

    virtual 
    ~AbstractAlertReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportPartSequence ReportPart_;
  };

  class AbstractOperationalStateReport: public ::CDM::AbstractReport
  {
    public:
    // ReportPart
    //
    typedef ::CDM::ReportPart4 ReportPartType;
    typedef ::xsd::cxx::tree::sequence< ReportPartType > ReportPartSequence;
    typedef ReportPartSequence::iterator ReportPartIterator;
    typedef ReportPartSequence::const_iterator ReportPartConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportPartType, char > ReportPartTraits;

    const ReportPartSequence&
    ReportPart () const;

    ReportPartSequence&
    ReportPart ();

    void
    ReportPart (const ReportPartSequence& s);

    // Constructors.
    //
    AbstractOperationalStateReport (const SequenceIdType&);

    AbstractOperationalStateReport (const ::xercesc::DOMElement& e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    AbstractOperationalStateReport (const AbstractOperationalStateReport& x,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    virtual AbstractOperationalStateReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractOperationalStateReport&
    operator= (const AbstractOperationalStateReport& x);

    virtual 
    ~AbstractOperationalStateReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportPartSequence ReportPart_;
  };

  class DescriptionModificationType: public ::xml_schema::String
  {
    public:
    enum Value
    {
      Crt,
      Upt,
      Del
    };

    DescriptionModificationType (Value v);

    DescriptionModificationType (const char* v);

    DescriptionModificationType (const ::std::string& v);

    DescriptionModificationType (const ::xml_schema::String& v);

    DescriptionModificationType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    DescriptionModificationType (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    DescriptionModificationType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    DescriptionModificationType (const DescriptionModificationType& x,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    virtual DescriptionModificationType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DescriptionModificationType&
    operator= (Value v);

    virtual
    operator Value () const
    {
      return _xsd_DescriptionModificationType_convert ();
    }

    protected:
    Value
    _xsd_DescriptionModificationType_convert () const;

    public:
    static const char* const _xsd_DescriptionModificationType_literals_[3];
    static const Value _xsd_DescriptionModificationType_indexes_[3];
  };

  class RetrievabilityMethod: public ::xml_schema::String
  {
    public:
    enum Value
    {
      Get,
      Per,
      Ep,
      Strm
    };

    RetrievabilityMethod (Value v);

    RetrievabilityMethod (const char* v);

    RetrievabilityMethod (const ::std::string& v);

    RetrievabilityMethod (const ::xml_schema::String& v);

    RetrievabilityMethod (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    RetrievabilityMethod (const ::xercesc::DOMAttr& a,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    RetrievabilityMethod (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    RetrievabilityMethod (const RetrievabilityMethod& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual RetrievabilityMethod*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    RetrievabilityMethod&
    operator= (Value v);

    virtual
    operator Value () const
    {
      return _xsd_RetrievabilityMethod_convert ();
    }

    protected:
    Value
    _xsd_RetrievabilityMethod_convert () const;

    public:
    static const char* const _xsd_RetrievabilityMethod_literals_[4];
    static const Value _xsd_RetrievabilityMethod_indexes_[4];
  };

  class RetrievabilityInfo: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::ExtensionType ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // Method
    //
    typedef ::CDM::RetrievabilityMethod MethodType;
    typedef ::xsd::cxx::tree::traits< MethodType, char > MethodTraits;

    const MethodType&
    Method () const;

    MethodType&
    Method ();

    void
    Method (const MethodType& x);

    void
    Method (::std::unique_ptr< MethodType > p);

    // UpdatePeriod
    //
    typedef ::xml_schema::Duration UpdatePeriodType;
    typedef ::xsd::cxx::tree::optional< UpdatePeriodType > UpdatePeriodOptional;
    typedef ::xsd::cxx::tree::traits< UpdatePeriodType, char > UpdatePeriodTraits;

    const UpdatePeriodOptional&
    UpdatePeriod () const;

    UpdatePeriodOptional&
    UpdatePeriod ();

    void
    UpdatePeriod (const UpdatePeriodType& x);

    void
    UpdatePeriod (const UpdatePeriodOptional& x);

    void
    UpdatePeriod (::std::unique_ptr< UpdatePeriodType > p);

    // Constructors.
    //
    RetrievabilityInfo (const MethodType&);

    RetrievabilityInfo (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    RetrievabilityInfo (const RetrievabilityInfo& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    virtual RetrievabilityInfo*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    RetrievabilityInfo&
    operator= (const RetrievabilityInfo& x);

    virtual 
    ~RetrievabilityInfo ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    ::xsd::cxx::tree::one< MethodType > Method_;
    UpdatePeriodOptional UpdatePeriod_;
  };

  class GetMdib: public ::CDM::AbstractGet
  {
    public:
    // Constructors.
    //
    GetMdib ();

    GetMdib (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    GetMdib (const GetMdib& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    virtual GetMdib*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~GetMdib ();
  };

  class GetMdibResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // Mdib
    //
    typedef ::CDM::Mdib MdibType;
    typedef ::xsd::cxx::tree::traits< MdibType, char > MdibTraits;

    const MdibType&
    Mdib () const;

    MdibType&
    Mdib ();

    void
    Mdib (const MdibType& x);

    void
    Mdib (::std::unique_ptr< MdibType > p);

    // Constructors.
    //
    GetMdibResponse (const SequenceIdType&,
                     const MdibType&);

    GetMdibResponse (const SequenceIdType&,
                     ::std::unique_ptr< MdibType >);

    GetMdibResponse (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    GetMdibResponse (const GetMdibResponse& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    virtual GetMdibResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetMdibResponse&
    operator= (const GetMdibResponse& x);

    virtual 
    ~GetMdibResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MdibType > Mdib_;
  };

  class GetMdDescription: public ::CDM::AbstractGet
  {
    public:
    // HandleRef
    //
    typedef ::CDM::HandleRef HandleRefType;
    typedef ::xsd::cxx::tree::sequence< HandleRefType > HandleRefSequence;
    typedef HandleRefSequence::iterator HandleRefIterator;
    typedef HandleRefSequence::const_iterator HandleRefConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleRefType, char > HandleRefTraits;

    const HandleRefSequence&
    HandleRef () const;

    HandleRefSequence&
    HandleRef ();

    void
    HandleRef (const HandleRefSequence& s);

    // Constructors.
    //
    GetMdDescription ();

    GetMdDescription (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    GetMdDescription (const GetMdDescription& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual GetMdDescription*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetMdDescription&
    operator= (const GetMdDescription& x);

    virtual 
    ~GetMdDescription ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    HandleRefSequence HandleRef_;
  };

  class GetMdDescriptionResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // MdDescription
    //
    typedef ::CDM::MdDescription MdDescriptionType;
    typedef ::xsd::cxx::tree::traits< MdDescriptionType, char > MdDescriptionTraits;

    const MdDescriptionType&
    MdDescription () const;

    MdDescriptionType&
    MdDescription ();

    void
    MdDescription (const MdDescriptionType& x);

    void
    MdDescription (::std::unique_ptr< MdDescriptionType > p);

    // Constructors.
    //
    GetMdDescriptionResponse (const SequenceIdType&,
                              const MdDescriptionType&);

    GetMdDescriptionResponse (const SequenceIdType&,
                              ::std::unique_ptr< MdDescriptionType >);

    GetMdDescriptionResponse (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    GetMdDescriptionResponse (const GetMdDescriptionResponse& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    virtual GetMdDescriptionResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetMdDescriptionResponse&
    operator= (const GetMdDescriptionResponse& x);

    virtual 
    ~GetMdDescriptionResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MdDescriptionType > MdDescription_;
  };

  class GetMdState: public ::CDM::AbstractGet
  {
    public:
    // HandleRef
    //
    typedef ::CDM::HandleRef HandleRefType;
    typedef ::xsd::cxx::tree::sequence< HandleRefType > HandleRefSequence;
    typedef HandleRefSequence::iterator HandleRefIterator;
    typedef HandleRefSequence::const_iterator HandleRefConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleRefType, char > HandleRefTraits;

    const HandleRefSequence&
    HandleRef () const;

    HandleRefSequence&
    HandleRef ();

    void
    HandleRef (const HandleRefSequence& s);

    // Constructors.
    //
    GetMdState ();

    GetMdState (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    GetMdState (const GetMdState& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    virtual GetMdState*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetMdState&
    operator= (const GetMdState& x);

    virtual 
    ~GetMdState ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    HandleRefSequence HandleRef_;
  };

  class GetMdStateResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // MdState
    //
    typedef ::CDM::MdState MdStateType;
    typedef ::xsd::cxx::tree::traits< MdStateType, char > MdStateTraits;

    const MdStateType&
    MdState () const;

    MdStateType&
    MdState ();

    void
    MdState (const MdStateType& x);

    void
    MdState (::std::unique_ptr< MdStateType > p);

    // Constructors.
    //
    GetMdStateResponse (const SequenceIdType&,
                        const MdStateType&);

    GetMdStateResponse (const SequenceIdType&,
                        ::std::unique_ptr< MdStateType >);

    GetMdStateResponse (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    GetMdStateResponse (const GetMdStateResponse& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    virtual GetMdStateResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetMdStateResponse&
    operator= (const GetMdStateResponse& x);

    virtual 
    ~GetMdStateResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MdStateType > MdState_;
  };

  class GetContextStates: public ::CDM::AbstractGet
  {
    public:
    // HandleRef
    //
    typedef ::CDM::HandleRef HandleRefType;
    typedef ::xsd::cxx::tree::sequence< HandleRefType > HandleRefSequence;
    typedef HandleRefSequence::iterator HandleRefIterator;
    typedef HandleRefSequence::const_iterator HandleRefConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleRefType, char > HandleRefTraits;

    const HandleRefSequence&
    HandleRef () const;

    HandleRefSequence&
    HandleRef ();

    void
    HandleRef (const HandleRefSequence& s);

    // Constructors.
    //
    GetContextStates ();

    GetContextStates (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    GetContextStates (const GetContextStates& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual GetContextStates*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetContextStates&
    operator= (const GetContextStates& x);

    virtual 
    ~GetContextStates ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    HandleRefSequence HandleRef_;
  };

  class GetContextStatesResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // ContextState
    //
    typedef ::CDM::AbstractContextState ContextStateType;
    typedef ::xsd::cxx::tree::sequence< ContextStateType > ContextStateSequence;
    typedef ContextStateSequence::iterator ContextStateIterator;
    typedef ContextStateSequence::const_iterator ContextStateConstIterator;
    typedef ::xsd::cxx::tree::traits< ContextStateType, char > ContextStateTraits;

    const ContextStateSequence&
    ContextState () const;

    ContextStateSequence&
    ContextState ();

    void
    ContextState (const ContextStateSequence& s);

    // Constructors.
    //
    GetContextStatesResponse (const SequenceIdType&);

    GetContextStatesResponse (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    GetContextStatesResponse (const GetContextStatesResponse& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    virtual GetContextStatesResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetContextStatesResponse&
    operator= (const GetContextStatesResponse& x);

    virtual 
    ~GetContextStatesResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ContextStateSequence ContextState_;
  };

  class SetContextState: public ::CDM::AbstractSet
  {
    public:
    // ProposedContextState
    //
    typedef ::CDM::AbstractContextState ProposedContextStateType;
    typedef ::xsd::cxx::tree::sequence< ProposedContextStateType > ProposedContextStateSequence;
    typedef ProposedContextStateSequence::iterator ProposedContextStateIterator;
    typedef ProposedContextStateSequence::const_iterator ProposedContextStateConstIterator;
    typedef ::xsd::cxx::tree::traits< ProposedContextStateType, char > ProposedContextStateTraits;

    const ProposedContextStateSequence&
    ProposedContextState () const;

    ProposedContextStateSequence&
    ProposedContextState ();

    void
    ProposedContextState (const ProposedContextStateSequence& s);

    // Constructors.
    //
    SetContextState (const OperationHandleRefType&);

    SetContextState (::std::unique_ptr< OperationHandleRefType >);

    SetContextState (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    SetContextState (const SetContextState& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    virtual SetContextState*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SetContextState&
    operator= (const SetContextState& x);

    virtual 
    ~SetContextState ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ProposedContextStateSequence ProposedContextState_;
  };

  class SetContextStateResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    SetContextStateResponse (const InvocationInfoType&,
                             const SequenceIdType&);

    SetContextStateResponse (::std::unique_ptr< InvocationInfoType >,
                             const SequenceIdType&);

    SetContextStateResponse (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    SetContextStateResponse (const SetContextStateResponse& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    virtual SetContextStateResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~SetContextStateResponse ();
  };

  class ReportPart: public ::CDM::AbstractReportPart
  {
    public:
    // ContextState
    //
    typedef ::CDM::AbstractContextState ContextStateType;
    typedef ::xsd::cxx::tree::sequence< ContextStateType > ContextStateSequence;
    typedef ContextStateSequence::iterator ContextStateIterator;
    typedef ContextStateSequence::const_iterator ContextStateConstIterator;
    typedef ::xsd::cxx::tree::traits< ContextStateType, char > ContextStateTraits;

    const ContextStateSequence&
    ContextState () const;

    ContextStateSequence&
    ContextState ();

    void
    ContextState (const ContextStateSequence& s);

    // Constructors.
    //
    ReportPart ();

    ReportPart (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    ReportPart (const ReportPart& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    virtual ReportPart*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ReportPart&
    operator= (const ReportPart& x);

    virtual 
    ~ReportPart ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ContextStateSequence ContextState_;
  };

  class PeriodicContextReport: public ::CDM::AbstractContextReport
  {
    public:
    // Constructors.
    //
    PeriodicContextReport (const SequenceIdType&);

    PeriodicContextReport (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    PeriodicContextReport (const PeriodicContextReport& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual PeriodicContextReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~PeriodicContextReport ();
  };

  class EpisodicContextReport: public ::CDM::AbstractContextReport
  {
    public:
    // Constructors.
    //
    EpisodicContextReport (const SequenceIdType&);

    EpisodicContextReport (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    EpisodicContextReport (const EpisodicContextReport& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual EpisodicContextReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~EpisodicContextReport ();
  };

  class GetLocalizedText: public ::CDM::AbstractGet
  {
    public:
    // Ref
    //
    typedef ::CDM::LocalizedTextRef RefType;
    typedef ::xsd::cxx::tree::traits< RefType, char > RefTraits;

    const RefType&
    Ref () const;

    RefType&
    Ref ();

    void
    Ref (const RefType& x);

    void
    Ref (::std::unique_ptr< RefType > p);

    // Version
    //
    typedef ::CDM::ReferencedVersion VersionType;
    typedef ::xsd::cxx::tree::optional< VersionType > VersionOptional;
    typedef ::xsd::cxx::tree::traits< VersionType, char > VersionTraits;

    const VersionOptional&
    Version () const;

    VersionOptional&
    Version ();

    void
    Version (const VersionType& x);

    void
    Version (const VersionOptional& x);

    void
    Version (::std::unique_ptr< VersionType > p);

    // Lang
    //
    typedef ::xml_schema::Language LangType;
    typedef ::xsd::cxx::tree::sequence< LangType > LangSequence;
    typedef LangSequence::iterator LangIterator;
    typedef LangSequence::const_iterator LangConstIterator;
    typedef ::xsd::cxx::tree::traits< LangType, char > LangTraits;

    const LangSequence&
    Lang () const;

    LangSequence&
    Lang ();

    void
    Lang (const LangSequence& s);

    // Constructors.
    //
    GetLocalizedText (const RefType&);

    GetLocalizedText (::std::unique_ptr< RefType >);

    GetLocalizedText (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    GetLocalizedText (const GetLocalizedText& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual GetLocalizedText*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetLocalizedText&
    operator= (const GetLocalizedText& x);

    virtual 
    ~GetLocalizedText ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< RefType > Ref_;
    VersionOptional Version_;
    LangSequence Lang_;
  };

  class GetLocalizedTextResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // Text
    //
    typedef ::CDM::Text TextType;
    typedef ::xsd::cxx::tree::sequence< TextType > TextSequence;
    typedef TextSequence::iterator TextIterator;
    typedef TextSequence::const_iterator TextConstIterator;
    typedef ::xsd::cxx::tree::traits< TextType, char > TextTraits;

    const TextSequence&
    Text () const;

    TextSequence&
    Text ();

    void
    Text (const TextSequence& s);

    // Constructors.
    //
    GetLocalizedTextResponse (const SequenceIdType&);

    GetLocalizedTextResponse (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    GetLocalizedTextResponse (const GetLocalizedTextResponse& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    virtual GetLocalizedTextResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetLocalizedTextResponse&
    operator= (const GetLocalizedTextResponse& x);

    virtual 
    ~GetLocalizedTextResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    TextSequence Text_;
  };

  class GetSupportedLanguages: public ::CDM::AbstractGet
  {
    public:
    // Constructors.
    //
    GetSupportedLanguages ();

    GetSupportedLanguages (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    GetSupportedLanguages (const GetSupportedLanguages& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual GetSupportedLanguages*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~GetSupportedLanguages ();
  };

  class GetSupportedLanguagesResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // Lang
    //
    typedef ::xml_schema::Language LangType;
    typedef ::xsd::cxx::tree::sequence< LangType > LangSequence;
    typedef LangSequence::iterator LangIterator;
    typedef LangSequence::const_iterator LangConstIterator;
    typedef ::xsd::cxx::tree::traits< LangType, char > LangTraits;

    const LangSequence&
    Lang () const;

    LangSequence&
    Lang ();

    void
    Lang (const LangSequence& s);

    // Constructors.
    //
    GetSupportedLanguagesResponse (const SequenceIdType&);

    GetSupportedLanguagesResponse (const ::xercesc::DOMElement& e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    GetSupportedLanguagesResponse (const GetSupportedLanguagesResponse& x,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    virtual GetSupportedLanguagesResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetSupportedLanguagesResponse&
    operator= (const GetSupportedLanguagesResponse& x);

    virtual 
    ~GetSupportedLanguagesResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    LangSequence Lang_;
  };

  class GetDescriptorsFromArchive: public ::CDM::AbstractGet
  {
    public:
    // DescriptorRevisions
    //
    typedef ::CDM::VersionFrame DescriptorRevisionsType;
    typedef ::xsd::cxx::tree::optional< DescriptorRevisionsType > DescriptorRevisionsOptional;
    typedef ::xsd::cxx::tree::traits< DescriptorRevisionsType, char > DescriptorRevisionsTraits;

    const DescriptorRevisionsOptional&
    DescriptorRevisions () const;

    DescriptorRevisionsOptional&
    DescriptorRevisions ();

    void
    DescriptorRevisions (const DescriptorRevisionsType& x);

    void
    DescriptorRevisions (const DescriptorRevisionsOptional& x);

    void
    DescriptorRevisions (::std::unique_ptr< DescriptorRevisionsType > p);

    // TimeFrame
    //
    typedef ::CDM::TimeFrame TimeFrameType;
    typedef ::xsd::cxx::tree::optional< TimeFrameType > TimeFrameOptional;
    typedef ::xsd::cxx::tree::traits< TimeFrameType, char > TimeFrameTraits;

    const TimeFrameOptional&
    TimeFrame () const;

    TimeFrameOptional&
    TimeFrame ();

    void
    TimeFrame (const TimeFrameType& x);

    void
    TimeFrame (const TimeFrameOptional& x);

    void
    TimeFrame (::std::unique_ptr< TimeFrameType > p);

    // Handle
    //
    typedef ::CDM::HandleRef HandleType;
    typedef ::xsd::cxx::tree::sequence< HandleType > HandleSequence;
    typedef HandleSequence::iterator HandleIterator;
    typedef HandleSequence::const_iterator HandleConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

    const HandleSequence&
    Handle () const;

    HandleSequence&
    Handle ();

    void
    Handle (const HandleSequence& s);

    // Constructors.
    //
    GetDescriptorsFromArchive ();

    GetDescriptorsFromArchive (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    GetDescriptorsFromArchive (const GetDescriptorsFromArchive& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    virtual GetDescriptorsFromArchive*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetDescriptorsFromArchive&
    operator= (const GetDescriptorsFromArchive& x);

    virtual 
    ~GetDescriptorsFromArchive ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DescriptorRevisionsOptional DescriptorRevisions_;
    TimeFrameOptional TimeFrame_;
    HandleSequence Handle_;
  };

  class GetDescriptorsFromArchiveResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // Descriptor
    //
    typedef ::CDM::AbstractDescriptor DescriptorType;
    typedef ::xsd::cxx::tree::sequence< DescriptorType > DescriptorSequence;
    typedef DescriptorSequence::iterator DescriptorIterator;
    typedef DescriptorSequence::const_iterator DescriptorConstIterator;
    typedef ::xsd::cxx::tree::traits< DescriptorType, char > DescriptorTraits;

    const DescriptorSequence&
    Descriptor () const;

    DescriptorSequence&
    Descriptor ();

    void
    Descriptor (const DescriptorSequence& s);

    // Constructors.
    //
    GetDescriptorsFromArchiveResponse (const SequenceIdType&);

    GetDescriptorsFromArchiveResponse (const ::xercesc::DOMElement& e,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

    GetDescriptorsFromArchiveResponse (const GetDescriptorsFromArchiveResponse& x,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

    virtual GetDescriptorsFromArchiveResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetDescriptorsFromArchiveResponse&
    operator= (const GetDescriptorsFromArchiveResponse& x);

    virtual 
    ~GetDescriptorsFromArchiveResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DescriptorSequence Descriptor_;
  };

  class GetStatesFromArchive: public ::CDM::AbstractGet
  {
    public:
    // StateRevisions
    //
    typedef ::CDM::VersionFrame StateRevisionsType;
    typedef ::xsd::cxx::tree::optional< StateRevisionsType > StateRevisionsOptional;
    typedef ::xsd::cxx::tree::traits< StateRevisionsType, char > StateRevisionsTraits;

    const StateRevisionsOptional&
    StateRevisions () const;

    StateRevisionsOptional&
    StateRevisions ();

    void
    StateRevisions (const StateRevisionsType& x);

    void
    StateRevisions (const StateRevisionsOptional& x);

    void
    StateRevisions (::std::unique_ptr< StateRevisionsType > p);

    // TimeFrame
    //
    typedef ::CDM::TimeFrame TimeFrameType;
    typedef ::xsd::cxx::tree::optional< TimeFrameType > TimeFrameOptional;
    typedef ::xsd::cxx::tree::traits< TimeFrameType, char > TimeFrameTraits;

    const TimeFrameOptional&
    TimeFrame () const;

    TimeFrameOptional&
    TimeFrame ();

    void
    TimeFrame (const TimeFrameType& x);

    void
    TimeFrame (const TimeFrameOptional& x);

    void
    TimeFrame (::std::unique_ptr< TimeFrameType > p);

    // Handle
    //
    typedef ::CDM::HandleRef HandleType;
    typedef ::xsd::cxx::tree::sequence< HandleType > HandleSequence;
    typedef HandleSequence::iterator HandleIterator;
    typedef HandleSequence::const_iterator HandleConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

    const HandleSequence&
    Handle () const;

    HandleSequence&
    Handle ();

    void
    Handle (const HandleSequence& s);

    // Constructors.
    //
    GetStatesFromArchive ();

    GetStatesFromArchive (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    GetStatesFromArchive (const GetStatesFromArchive& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual GetStatesFromArchive*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetStatesFromArchive&
    operator= (const GetStatesFromArchive& x);

    virtual 
    ~GetStatesFromArchive ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    StateRevisionsOptional StateRevisions_;
    TimeFrameOptional TimeFrame_;
    HandleSequence Handle_;
  };

  class GetStatesFromArchiveResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // State
    //
    typedef ::CDM::AbstractState StateType;
    typedef ::xsd::cxx::tree::sequence< StateType > StateSequence;
    typedef StateSequence::iterator StateIterator;
    typedef StateSequence::const_iterator StateConstIterator;
    typedef ::xsd::cxx::tree::traits< StateType, char > StateTraits;

    const StateSequence&
    State () const;

    StateSequence&
    State ();

    void
    State (const StateSequence& s);

    // Constructors.
    //
    GetStatesFromArchiveResponse (const SequenceIdType&);

    GetStatesFromArchiveResponse (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    GetStatesFromArchiveResponse (const GetStatesFromArchiveResponse& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    virtual GetStatesFromArchiveResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetStatesFromArchiveResponse&
    operator= (const GetStatesFromArchiveResponse& x);

    virtual 
    ~GetStatesFromArchiveResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    StateSequence State_;
  };

  class SetValue: public ::CDM::AbstractSet
  {
    public:
    // RequestedNumericValue
    //
    typedef ::xml_schema::Decimal RequestedNumericValueType;
    typedef ::xsd::cxx::tree::traits< RequestedNumericValueType, char, ::xsd::cxx::tree::schema_type::decimal > RequestedNumericValueTraits;

    const RequestedNumericValueType&
    RequestedNumericValue () const;

    RequestedNumericValueType&
    RequestedNumericValue ();

    void
    RequestedNumericValue (const RequestedNumericValueType& x);

    // Constructors.
    //
    SetValue (const OperationHandleRefType&,
              const RequestedNumericValueType&);

    SetValue (::std::unique_ptr< OperationHandleRefType >,
              const RequestedNumericValueType&);

    SetValue (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    SetValue (const SetValue& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual SetValue*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SetValue&
    operator= (const SetValue& x);

    virtual 
    ~SetValue ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< RequestedNumericValueType > RequestedNumericValue_;
  };

  class SetValueResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    SetValueResponse (const InvocationInfoType&,
                      const SequenceIdType&);

    SetValueResponse (::std::unique_ptr< InvocationInfoType >,
                      const SequenceIdType&);

    SetValueResponse (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    SetValueResponse (const SetValueResponse& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual SetValueResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~SetValueResponse ();
  };

  class SetString: public ::CDM::AbstractSet
  {
    public:
    // RequestedStringValue
    //
    typedef ::xml_schema::String RequestedStringValueType;
    typedef ::xsd::cxx::tree::traits< RequestedStringValueType, char > RequestedStringValueTraits;

    const RequestedStringValueType&
    RequestedStringValue () const;

    RequestedStringValueType&
    RequestedStringValue ();

    void
    RequestedStringValue (const RequestedStringValueType& x);

    void
    RequestedStringValue (::std::unique_ptr< RequestedStringValueType > p);

    // Constructors.
    //
    SetString (const OperationHandleRefType&,
               const RequestedStringValueType&);

    SetString (::std::unique_ptr< OperationHandleRefType >,
               ::std::unique_ptr< RequestedStringValueType >);

    SetString (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    SetString (const SetString& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    virtual SetString*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SetString&
    operator= (const SetString& x);

    virtual 
    ~SetString ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< RequestedStringValueType > RequestedStringValue_;
  };

  class SetStringResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    SetStringResponse (const InvocationInfoType&,
                       const SequenceIdType&);

    SetStringResponse (::std::unique_ptr< InvocationInfoType >,
                       const SequenceIdType&);

    SetStringResponse (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    SetStringResponse (const SetStringResponse& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    virtual SetStringResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~SetStringResponse ();
  };

  class Activate: public ::CDM::AbstractSet
  {
    public:
    // Argument
    //
    typedef ::CDM::Argument ArgumentType;
    typedef ::xsd::cxx::tree::sequence< ArgumentType > ArgumentSequence;
    typedef ArgumentSequence::iterator ArgumentIterator;
    typedef ArgumentSequence::const_iterator ArgumentConstIterator;
    typedef ::xsd::cxx::tree::traits< ArgumentType, char > ArgumentTraits;

    const ArgumentSequence&
    Argument () const;

    ArgumentSequence&
    Argument ();

    void
    Argument (const ArgumentSequence& s);

    // Constructors.
    //
    Activate (const OperationHandleRefType&);

    Activate (::std::unique_ptr< OperationHandleRefType >);

    Activate (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    Activate (const Activate& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual Activate*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Activate&
    operator= (const Activate& x);

    virtual 
    ~Activate ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ArgumentSequence Argument_;
  };

  class ActivateResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    ActivateResponse (const InvocationInfoType&,
                      const SequenceIdType&);

    ActivateResponse (::std::unique_ptr< InvocationInfoType >,
                      const SequenceIdType&);

    ActivateResponse (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    ActivateResponse (const ActivateResponse& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual ActivateResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~ActivateResponse ();
  };

  class SetAlertState: public ::CDM::AbstractSet
  {
    public:
    // ProposedAlertState
    //
    typedef ::CDM::AbstractAlertState ProposedAlertStateType;
    typedef ::xsd::cxx::tree::traits< ProposedAlertStateType, char > ProposedAlertStateTraits;

    const ProposedAlertStateType&
    ProposedAlertState () const;

    ProposedAlertStateType&
    ProposedAlertState ();

    void
    ProposedAlertState (const ProposedAlertStateType& x);

    void
    ProposedAlertState (::std::unique_ptr< ProposedAlertStateType > p);

    // Constructors.
    //
    SetAlertState (const OperationHandleRefType&,
                   const ProposedAlertStateType&);

    SetAlertState (const OperationHandleRefType&,
                   ::std::unique_ptr< ProposedAlertStateType >);

    SetAlertState (::std::unique_ptr< OperationHandleRefType >,
                   ::std::unique_ptr< ProposedAlertStateType >);

    SetAlertState (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    SetAlertState (const SetAlertState& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    virtual SetAlertState*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SetAlertState&
    operator= (const SetAlertState& x);

    virtual 
    ~SetAlertState ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ProposedAlertStateType > ProposedAlertState_;
  };

  class SetAlertStateResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    SetAlertStateResponse (const InvocationInfoType&,
                           const SequenceIdType&);

    SetAlertStateResponse (::std::unique_ptr< InvocationInfoType >,
                           const SequenceIdType&);

    SetAlertStateResponse (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    SetAlertStateResponse (const SetAlertStateResponse& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual SetAlertStateResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~SetAlertStateResponse ();
  };

  class SetComponentState: public ::CDM::AbstractSet
  {
    public:
    // ProposedComponentState
    //
    typedef ::CDM::AbstractDeviceComponentState ProposedComponentStateType;
    typedef ::xsd::cxx::tree::sequence< ProposedComponentStateType > ProposedComponentStateSequence;
    typedef ProposedComponentStateSequence::iterator ProposedComponentStateIterator;
    typedef ProposedComponentStateSequence::const_iterator ProposedComponentStateConstIterator;
    typedef ::xsd::cxx::tree::traits< ProposedComponentStateType, char > ProposedComponentStateTraits;

    const ProposedComponentStateSequence&
    ProposedComponentState () const;

    ProposedComponentStateSequence&
    ProposedComponentState ();

    void
    ProposedComponentState (const ProposedComponentStateSequence& s);

    // Constructors.
    //
    SetComponentState (const OperationHandleRefType&);

    SetComponentState (::std::unique_ptr< OperationHandleRefType >);

    SetComponentState (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    SetComponentState (const SetComponentState& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    virtual SetComponentState*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SetComponentState&
    operator= (const SetComponentState& x);

    virtual 
    ~SetComponentState ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ProposedComponentStateSequence ProposedComponentState_;
  };

  class SetComponentStateResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    SetComponentStateResponse (const InvocationInfoType&,
                               const SequenceIdType&);

    SetComponentStateResponse (::std::unique_ptr< InvocationInfoType >,
                               const SequenceIdType&);

    SetComponentStateResponse (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    SetComponentStateResponse (const SetComponentStateResponse& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    virtual SetComponentStateResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~SetComponentStateResponse ();
  };

  class SetMetricState: public ::CDM::AbstractSet
  {
    public:
    // ProposedMetricState
    //
    typedef ::CDM::AbstractMetricState ProposedMetricStateType;
    typedef ::xsd::cxx::tree::sequence< ProposedMetricStateType > ProposedMetricStateSequence;
    typedef ProposedMetricStateSequence::iterator ProposedMetricStateIterator;
    typedef ProposedMetricStateSequence::const_iterator ProposedMetricStateConstIterator;
    typedef ::xsd::cxx::tree::traits< ProposedMetricStateType, char > ProposedMetricStateTraits;

    const ProposedMetricStateSequence&
    ProposedMetricState () const;

    ProposedMetricStateSequence&
    ProposedMetricState ();

    void
    ProposedMetricState (const ProposedMetricStateSequence& s);

    // Constructors.
    //
    SetMetricState (const OperationHandleRefType&);

    SetMetricState (::std::unique_ptr< OperationHandleRefType >);

    SetMetricState (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    SetMetricState (const SetMetricState& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual SetMetricState*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SetMetricState&
    operator= (const SetMetricState& x);

    virtual 
    ~SetMetricState ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ProposedMetricStateSequence ProposedMetricState_;
  };

  class SetMetricStateResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    SetMetricStateResponse (const InvocationInfoType&,
                            const SequenceIdType&);

    SetMetricStateResponse (::std::unique_ptr< InvocationInfoType >,
                            const SequenceIdType&);

    SetMetricStateResponse (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    SetMetricStateResponse (const SetMetricStateResponse& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    virtual SetMetricStateResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~SetMetricStateResponse ();
  };

  class OperationInvokedReport: public ::CDM::AbstractReport
  {
    public:
    // ReportPart
    //
    typedef ::CDM::ReportPart5 ReportPartType;
    typedef ::xsd::cxx::tree::sequence< ReportPartType > ReportPartSequence;
    typedef ReportPartSequence::iterator ReportPartIterator;
    typedef ReportPartSequence::const_iterator ReportPartConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportPartType, char > ReportPartTraits;

    const ReportPartSequence&
    ReportPart () const;

    ReportPartSequence&
    ReportPart ();

    void
    ReportPart (const ReportPartSequence& s);

    // Constructors.
    //
    OperationInvokedReport (const SequenceIdType&);

    OperationInvokedReport (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    OperationInvokedReport (const OperationInvokedReport& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    virtual OperationInvokedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    OperationInvokedReport&
    operator= (const OperationInvokedReport& x);

    virtual 
    ~OperationInvokedReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportPartSequence ReportPart_;
  };

  class GetContainmentTree: public ::CDM::AbstractGet
  {
    public:
    // HandleRef
    //
    typedef ::CDM::HandleRef HandleRefType;
    typedef ::xsd::cxx::tree::sequence< HandleRefType > HandleRefSequence;
    typedef HandleRefSequence::iterator HandleRefIterator;
    typedef HandleRefSequence::const_iterator HandleRefConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleRefType, char > HandleRefTraits;

    const HandleRefSequence&
    HandleRef () const;

    HandleRefSequence&
    HandleRef ();

    void
    HandleRef (const HandleRefSequence& s);

    // Constructors.
    //
    GetContainmentTree ();

    GetContainmentTree (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    GetContainmentTree (const GetContainmentTree& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    virtual GetContainmentTree*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetContainmentTree&
    operator= (const GetContainmentTree& x);

    virtual 
    ~GetContainmentTree ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    HandleRefSequence HandleRef_;
  };

  class GetContainmentTreeResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // ContainmentTree
    //
    typedef ::CDM::ContainmentTree ContainmentTreeType;
    typedef ::xsd::cxx::tree::traits< ContainmentTreeType, char > ContainmentTreeTraits;

    const ContainmentTreeType&
    ContainmentTree () const;

    ContainmentTreeType&
    ContainmentTree ();

    void
    ContainmentTree (const ContainmentTreeType& x);

    void
    ContainmentTree (::std::unique_ptr< ContainmentTreeType > p);

    // Constructors.
    //
    GetContainmentTreeResponse (const SequenceIdType&,
                                const ContainmentTreeType&);

    GetContainmentTreeResponse (const SequenceIdType&,
                                ::std::unique_ptr< ContainmentTreeType >);

    GetContainmentTreeResponse (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

    GetContainmentTreeResponse (const GetContainmentTreeResponse& x,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

    virtual GetContainmentTreeResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetContainmentTreeResponse&
    operator= (const GetContainmentTreeResponse& x);

    virtual 
    ~GetContainmentTreeResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ContainmentTreeType > ContainmentTree_;
  };

  class GetDescriptor: public ::CDM::AbstractGet
  {
    public:
    // HandleRef
    //
    typedef ::CDM::HandleRef HandleRefType;
    typedef ::xsd::cxx::tree::sequence< HandleRefType > HandleRefSequence;
    typedef HandleRefSequence::iterator HandleRefIterator;
    typedef HandleRefSequence::const_iterator HandleRefConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleRefType, char > HandleRefTraits;

    const HandleRefSequence&
    HandleRef () const;

    HandleRefSequence&
    HandleRef ();

    void
    HandleRef (const HandleRefSequence& s);

    // Constructors.
    //
    GetDescriptor ();

    GetDescriptor (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    GetDescriptor (const GetDescriptor& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    virtual GetDescriptor*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetDescriptor&
    operator= (const GetDescriptor& x);

    virtual 
    ~GetDescriptor ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    HandleRefSequence HandleRef_;
  };

  class GetDescriptorResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // Descriptor
    //
    typedef ::CDM::AbstractDescriptor DescriptorType;
    typedef ::xsd::cxx::tree::sequence< DescriptorType > DescriptorSequence;
    typedef DescriptorSequence::iterator DescriptorIterator;
    typedef DescriptorSequence::const_iterator DescriptorConstIterator;
    typedef ::xsd::cxx::tree::traits< DescriptorType, char > DescriptorTraits;

    const DescriptorSequence&
    Descriptor () const;

    DescriptorSequence&
    Descriptor ();

    void
    Descriptor (const DescriptorSequence& s);

    // Constructors.
    //
    GetDescriptorResponse (const SequenceIdType&);

    GetDescriptorResponse (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    GetDescriptorResponse (const GetDescriptorResponse& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual GetDescriptorResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetDescriptorResponse&
    operator= (const GetDescriptorResponse& x);

    virtual 
    ~GetDescriptorResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DescriptorSequence Descriptor_;
  };

  class ReportPart1: public ::CDM::AbstractReportPart
  {
    public:
    // MetricState
    //
    typedef ::CDM::AbstractMetricState MetricStateType;
    typedef ::xsd::cxx::tree::sequence< MetricStateType > MetricStateSequence;
    typedef MetricStateSequence::iterator MetricStateIterator;
    typedef MetricStateSequence::const_iterator MetricStateConstIterator;
    typedef ::xsd::cxx::tree::traits< MetricStateType, char > MetricStateTraits;

    const MetricStateSequence&
    MetricState () const;

    MetricStateSequence&
    MetricState ();

    void
    MetricState (const MetricStateSequence& s);

    // Constructors.
    //
    ReportPart1 ();

    ReportPart1 (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    ReportPart1 (const ReportPart1& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual ReportPart1*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ReportPart1&
    operator= (const ReportPart1& x);

    virtual 
    ~ReportPart1 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    MetricStateSequence MetricState_;
  };

  class EpisodicMetricReport: public ::CDM::AbstractMetricReport
  {
    public:
    // Constructors.
    //
    EpisodicMetricReport (const SequenceIdType&);

    EpisodicMetricReport (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    EpisodicMetricReport (const EpisodicMetricReport& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual EpisodicMetricReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~EpisodicMetricReport ();
  };

  class PeriodicMetricReport: public ::CDM::AbstractMetricReport
  {
    public:
    // Constructors.
    //
    PeriodicMetricReport (const SequenceIdType&);

    PeriodicMetricReport (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    PeriodicMetricReport (const PeriodicMetricReport& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual PeriodicMetricReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~PeriodicMetricReport ();
  };

  class ReportPart2: public ::CDM::AbstractReportPart
  {
    public:
    // ComponentState
    //
    typedef ::CDM::AbstractDeviceComponentState ComponentStateType;
    typedef ::xsd::cxx::tree::sequence< ComponentStateType > ComponentStateSequence;
    typedef ComponentStateSequence::iterator ComponentStateIterator;
    typedef ComponentStateSequence::const_iterator ComponentStateConstIterator;
    typedef ::xsd::cxx::tree::traits< ComponentStateType, char > ComponentStateTraits;

    const ComponentStateSequence&
    ComponentState () const;

    ComponentStateSequence&
    ComponentState ();

    void
    ComponentState (const ComponentStateSequence& s);

    // Constructors.
    //
    ReportPart2 ();

    ReportPart2 (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    ReportPart2 (const ReportPart2& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual ReportPart2*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ReportPart2&
    operator= (const ReportPart2& x);

    virtual 
    ~ReportPart2 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ComponentStateSequence ComponentState_;
  };

  class EpisodicComponentReport: public ::CDM::AbstractComponentReport
  {
    public:
    // Constructors.
    //
    EpisodicComponentReport (const SequenceIdType&);

    EpisodicComponentReport (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    EpisodicComponentReport (const EpisodicComponentReport& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    virtual EpisodicComponentReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~EpisodicComponentReport ();
  };

  class PeriodicComponentReport: public ::CDM::AbstractComponentReport
  {
    public:
    // Constructors.
    //
    PeriodicComponentReport (const SequenceIdType&);

    PeriodicComponentReport (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    PeriodicComponentReport (const PeriodicComponentReport& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    virtual PeriodicComponentReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~PeriodicComponentReport ();
  };

  class ReportPart3: public ::CDM::AbstractReportPart
  {
    public:
    // AlertState
    //
    typedef ::CDM::AbstractAlertState AlertStateType;
    typedef ::xsd::cxx::tree::sequence< AlertStateType > AlertStateSequence;
    typedef AlertStateSequence::iterator AlertStateIterator;
    typedef AlertStateSequence::const_iterator AlertStateConstIterator;
    typedef ::xsd::cxx::tree::traits< AlertStateType, char > AlertStateTraits;

    const AlertStateSequence&
    AlertState () const;

    AlertStateSequence&
    AlertState ();

    void
    AlertState (const AlertStateSequence& s);

    // Constructors.
    //
    ReportPart3 ();

    ReportPart3 (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    ReportPart3 (const ReportPart3& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual ReportPart3*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ReportPart3&
    operator= (const ReportPart3& x);

    virtual 
    ~ReportPart3 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    AlertStateSequence AlertState_;
  };

  class EpisodicAlertReport: public ::CDM::AbstractAlertReport
  {
    public:
    // Constructors.
    //
    EpisodicAlertReport (const SequenceIdType&);

    EpisodicAlertReport (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    EpisodicAlertReport (const EpisodicAlertReport& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual EpisodicAlertReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~EpisodicAlertReport ();
  };

  class PeriodicAlertReport: public ::CDM::AbstractAlertReport
  {
    public:
    // Constructors.
    //
    PeriodicAlertReport (const SequenceIdType&);

    PeriodicAlertReport (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    PeriodicAlertReport (const PeriodicAlertReport& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual PeriodicAlertReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~PeriodicAlertReport ();
  };

  class ReportPart4: public ::CDM::AbstractReportPart
  {
    public:
    // OperationState
    //
    typedef ::CDM::AbstractOperationState OperationStateType;
    typedef ::xsd::cxx::tree::sequence< OperationStateType > OperationStateSequence;
    typedef OperationStateSequence::iterator OperationStateIterator;
    typedef OperationStateSequence::const_iterator OperationStateConstIterator;
    typedef ::xsd::cxx::tree::traits< OperationStateType, char > OperationStateTraits;

    const OperationStateSequence&
    OperationState () const;

    OperationStateSequence&
    OperationState ();

    void
    OperationState (const OperationStateSequence& s);

    // Constructors.
    //
    ReportPart4 ();

    ReportPart4 (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    ReportPart4 (const ReportPart4& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual ReportPart4*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ReportPart4&
    operator= (const ReportPart4& x);

    virtual 
    ~ReportPart4 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    OperationStateSequence OperationState_;
  };

  class EpisodicOperationalStateReport: public ::CDM::AbstractOperationalStateReport
  {
    public:
    // Constructors.
    //
    EpisodicOperationalStateReport (const SequenceIdType&);

    EpisodicOperationalStateReport (const ::xercesc::DOMElement& e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    EpisodicOperationalStateReport (const EpisodicOperationalStateReport& x,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    virtual EpisodicOperationalStateReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~EpisodicOperationalStateReport ();
  };

  class PeriodicOperationalStateReport: public ::CDM::AbstractOperationalStateReport
  {
    public:
    // Constructors.
    //
    PeriodicOperationalStateReport (const SequenceIdType&);

    PeriodicOperationalStateReport (const ::xercesc::DOMElement& e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    PeriodicOperationalStateReport (const PeriodicOperationalStateReport& x,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    virtual PeriodicOperationalStateReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~PeriodicOperationalStateReport ();
  };

  class SystemErrorReport: public ::CDM::AbstractReport
  {
    public:
    // ReportPart
    //
    typedef ::CDM::ReportPart6 ReportPartType;
    typedef ::xsd::cxx::tree::sequence< ReportPartType > ReportPartSequence;
    typedef ReportPartSequence::iterator ReportPartIterator;
    typedef ReportPartSequence::const_iterator ReportPartConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportPartType, char > ReportPartTraits;

    const ReportPartSequence&
    ReportPart () const;

    ReportPartSequence&
    ReportPart ();

    void
    ReportPart (const ReportPartSequence& s);

    // Constructors.
    //
    SystemErrorReport (const SequenceIdType&);

    SystemErrorReport (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    SystemErrorReport (const SystemErrorReport& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    virtual SystemErrorReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SystemErrorReport&
    operator= (const SystemErrorReport& x);

    virtual 
    ~SystemErrorReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportPartSequence ReportPart_;
  };

  class DescriptionModificationReport: public ::CDM::AbstractReport
  {
    public:
    // ReportPart
    //
    typedef ::CDM::ReportPart7 ReportPartType;
    typedef ::xsd::cxx::tree::sequence< ReportPartType > ReportPartSequence;
    typedef ReportPartSequence::iterator ReportPartIterator;
    typedef ReportPartSequence::const_iterator ReportPartConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportPartType, char > ReportPartTraits;

    const ReportPartSequence&
    ReportPart () const;

    ReportPartSequence&
    ReportPart ();

    void
    ReportPart (const ReportPartSequence& s);

    // Constructors.
    //
    DescriptionModificationReport (const SequenceIdType&);

    DescriptionModificationReport (const ::xercesc::DOMElement& e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    DescriptionModificationReport (const DescriptionModificationReport& x,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    virtual DescriptionModificationReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DescriptionModificationReport&
    operator= (const DescriptionModificationReport& x);

    virtual 
    ~DescriptionModificationReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportPartSequence ReportPart_;
  };

  class WaveformStream: public ::CDM::AbstractReport
  {
    public:
    // State
    //
    typedef ::CDM::RealTimeSampleArrayMetricState StateType;
    typedef ::xsd::cxx::tree::sequence< StateType > StateSequence;
    typedef StateSequence::iterator StateIterator;
    typedef StateSequence::const_iterator StateConstIterator;
    typedef ::xsd::cxx::tree::traits< StateType, char > StateTraits;

    const StateSequence&
    State () const;

    StateSequence&
    State ();

    void
    State (const StateSequence& s);

    // Constructors.
    //
    WaveformStream (const SequenceIdType&);

    WaveformStream (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    WaveformStream (const WaveformStream& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual WaveformStream*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    WaveformStream&
    operator= (const WaveformStream& x);

    virtual 
    ~WaveformStream ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    StateSequence State_;
  };

  class ObservedValueStream: public ::CDM::AbstractReport
  {
    public:
    // Value
    //
    typedef ::CDM::Value ValueType;
    typedef ::xsd::cxx::tree::sequence< ValueType > ValueSequence;
    typedef ValueSequence::iterator ValueIterator;
    typedef ValueSequence::const_iterator ValueConstIterator;
    typedef ::xsd::cxx::tree::traits< ValueType, char > ValueTraits;

    const ValueSequence&
    Value () const;

    ValueSequence&
    Value ();

    void
    Value (const ValueSequence& s);

    // Constructors.
    //
    ObservedValueStream (const SequenceIdType&);

    ObservedValueStream (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    ObservedValueStream (const ObservedValueStream& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual ObservedValueStream*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ObservedValueStream&
    operator= (const ObservedValueStream& x);

    virtual 
    ~ObservedValueStream ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ValueSequence Value_;
  };

  class Retrievability: public ::xml_schema::Type
  {
    public:
    // By
    //
    typedef ::CDM::RetrievabilityInfo ByType;
    typedef ::xsd::cxx::tree::sequence< ByType > BySequence;
    typedef BySequence::iterator ByIterator;
    typedef BySequence::const_iterator ByConstIterator;
    typedef ::xsd::cxx::tree::traits< ByType, char > ByTraits;

    const BySequence&
    By () const;

    BySequence&
    By ();

    void
    By (const BySequence& s);

    // Constructors.
    //
    Retrievability ();

    Retrievability (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    Retrievability (const Retrievability& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual Retrievability*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Retrievability&
    operator= (const Retrievability& x);

    virtual 
    ~Retrievability ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    BySequence By_;
  };

  class Text: public ::xml_schema::String
  {
    public:
    // Lang
    //
    typedef ::xml_schema::Language LangType;
    typedef ::xsd::cxx::tree::optional< LangType > LangOptional;
    typedef ::xsd::cxx::tree::traits< LangType, char > LangTraits;

    const LangOptional&
    Lang () const;

    LangOptional&
    Lang ();

    void
    Lang (const LangType& x);

    void
    Lang (const LangOptional& x);

    void
    Lang (::std::unique_ptr< LangType > p);

    // Constructors.
    //
    Text ();

    Text (const char*);

    Text (const ::std::string&);

    Text (const ::xml_schema::String&);

    Text (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    Text (const Text& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    virtual Text*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Text&
    operator= (const Text& x);

    virtual 
    ~Text ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    LangOptional Lang_;
  };

  class Argument: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::ExtensionType ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // ArgValue
    //
    typedef ::xml_schema::SimpleType ArgValueType;
    typedef ::xsd::cxx::tree::traits< ArgValueType, char > ArgValueTraits;

    const ArgValueType&
    ArgValue () const;

    ArgValueType&
    ArgValue ();

    void
    ArgValue (const ArgValueType& x);

    void
    ArgValue (::std::unique_ptr< ArgValueType > p);

    // Constructors.
    //
    Argument (const ArgValueType&);

    Argument (::std::unique_ptr< ArgValueType >);

    Argument (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    Argument (const Argument& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual Argument*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Argument&
    operator= (const Argument& x);

    virtual 
    ~Argument ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    ::xsd::cxx::tree::one< ArgValueType > ArgValue_;
  };

  class ReportPart5: public ::CDM::AbstractReportPart
  {
    public:
    // InvocationInfo
    //
    typedef ::CDM::InvocationInfo InvocationInfoType;
    typedef ::xsd::cxx::tree::traits< InvocationInfoType, char > InvocationInfoTraits;

    const InvocationInfoType&
    InvocationInfo () const;

    InvocationInfoType&
    InvocationInfo ();

    void
    InvocationInfo (const InvocationInfoType& x);

    void
    InvocationInfo (::std::unique_ptr< InvocationInfoType > p);

    // OperationHandleRef
    //
    typedef ::CDM::HandleRef OperationHandleRefType;
    typedef ::xsd::cxx::tree::traits< OperationHandleRefType, char > OperationHandleRefTraits;

    const OperationHandleRefType&
    OperationHandleRef () const;

    OperationHandleRefType&
    OperationHandleRef ();

    void
    OperationHandleRef (const OperationHandleRefType& x);

    void
    OperationHandleRef (::std::unique_ptr< OperationHandleRefType > p);

    // OperationTarget
    //
    typedef ::CDM::HandleRef OperationTargetType;
    typedef ::xsd::cxx::tree::optional< OperationTargetType > OperationTargetOptional;
    typedef ::xsd::cxx::tree::traits< OperationTargetType, char > OperationTargetTraits;

    const OperationTargetOptional&
    OperationTarget () const;

    OperationTargetOptional&
    OperationTarget ();

    void
    OperationTarget (const OperationTargetType& x);

    void
    OperationTarget (const OperationTargetOptional& x);

    void
    OperationTarget (::std::unique_ptr< OperationTargetType > p);

    // Constructors.
    //
    ReportPart5 (const InvocationInfoType&,
                 const OperationHandleRefType&);

    ReportPart5 (::std::unique_ptr< InvocationInfoType >,
                 const OperationHandleRefType&);

    ReportPart5 (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    ReportPart5 (const ReportPart5& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual ReportPart5*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ReportPart5&
    operator= (const ReportPart5& x);

    virtual 
    ~ReportPart5 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< InvocationInfoType > InvocationInfo_;
    ::xsd::cxx::tree::one< OperationHandleRefType > OperationHandleRef_;
    OperationTargetOptional OperationTarget_;
  };

  class ReportPart6: public ::CDM::AbstractReportPart
  {
    public:
    // ErrorCode
    //
    typedef ::CDM::CodedValue ErrorCodeType;
    typedef ::xsd::cxx::tree::traits< ErrorCodeType, char > ErrorCodeTraits;

    const ErrorCodeType&
    ErrorCode () const;

    ErrorCodeType&
    ErrorCode ();

    void
    ErrorCode (const ErrorCodeType& x);

    void
    ErrorCode (::std::unique_ptr< ErrorCodeType > p);

    // ErrorInfo
    //
    typedef ::CDM::LocalizedText ErrorInfoType;
    typedef ::xsd::cxx::tree::optional< ErrorInfoType > ErrorInfoOptional;
    typedef ::xsd::cxx::tree::traits< ErrorInfoType, char > ErrorInfoTraits;

    const ErrorInfoOptional&
    ErrorInfo () const;

    ErrorInfoOptional&
    ErrorInfo ();

    void
    ErrorInfo (const ErrorInfoType& x);

    void
    ErrorInfo (const ErrorInfoOptional& x);

    void
    ErrorInfo (::std::unique_ptr< ErrorInfoType > p);

    // Constructors.
    //
    ReportPart6 (const ErrorCodeType&);

    ReportPart6 (::std::unique_ptr< ErrorCodeType >);

    ReportPart6 (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    ReportPart6 (const ReportPart6& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual ReportPart6*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ReportPart6&
    operator= (const ReportPart6& x);

    virtual 
    ~ReportPart6 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ErrorCodeType > ErrorCode_;
    ErrorInfoOptional ErrorInfo_;
  };

  class ReportPart7: public ::CDM::AbstractReportPart
  {
    public:
    // Descriptor
    //
    typedef ::CDM::AbstractDescriptor DescriptorType;
    typedef ::xsd::cxx::tree::sequence< DescriptorType > DescriptorSequence;
    typedef DescriptorSequence::iterator DescriptorIterator;
    typedef DescriptorSequence::const_iterator DescriptorConstIterator;
    typedef ::xsd::cxx::tree::traits< DescriptorType, char > DescriptorTraits;

    const DescriptorSequence&
    Descriptor () const;

    DescriptorSequence&
    Descriptor ();

    void
    Descriptor (const DescriptorSequence& s);

    // State
    //
    typedef ::CDM::AbstractState StateType;
    typedef ::xsd::cxx::tree::sequence< StateType > StateSequence;
    typedef StateSequence::iterator StateIterator;
    typedef StateSequence::const_iterator StateConstIterator;
    typedef ::xsd::cxx::tree::traits< StateType, char > StateTraits;

    const StateSequence&
    State () const;

    StateSequence&
    State ();

    void
    State (const StateSequence& s);

    // ParentDescriptor
    //
    typedef ::CDM::HandleRef ParentDescriptorType;
    typedef ::xsd::cxx::tree::optional< ParentDescriptorType > ParentDescriptorOptional;
    typedef ::xsd::cxx::tree::traits< ParentDescriptorType, char > ParentDescriptorTraits;

    const ParentDescriptorOptional&
    ParentDescriptor () const;

    ParentDescriptorOptional&
    ParentDescriptor ();

    void
    ParentDescriptor (const ParentDescriptorType& x);

    void
    ParentDescriptor (const ParentDescriptorOptional& x);

    void
    ParentDescriptor (::std::unique_ptr< ParentDescriptorType > p);

    // ModificationType
    //
    typedef ::CDM::DescriptionModificationType ModificationTypeType;
    typedef ::xsd::cxx::tree::optional< ModificationTypeType > ModificationTypeOptional;
    typedef ::xsd::cxx::tree::traits< ModificationTypeType, char > ModificationTypeTraits;

    const ModificationTypeOptional&
    ModificationType () const;

    ModificationTypeOptional&
    ModificationType ();

    void
    ModificationType (const ModificationTypeType& x);

    void
    ModificationType (const ModificationTypeOptional& x);

    void
    ModificationType (::std::unique_ptr< ModificationTypeType > p);

    // Constructors.
    //
    ReportPart7 ();

    ReportPart7 (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    ReportPart7 (const ReportPart7& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual ReportPart7*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ReportPart7&
    operator= (const ReportPart7& x);

    virtual 
    ~ReportPart7 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DescriptorSequence Descriptor_;
    StateSequence State_;
    ParentDescriptorOptional ParentDescriptor_;
    ModificationTypeOptional ModificationType_;
  };

  class Value: public ::xml_schema::Type
  {
    public:
    // Value
    //
    typedef ::CDM::SampleArrayValue Value1Type;
    typedef ::xsd::cxx::tree::optional< Value1Type > Value1Optional;
    typedef ::xsd::cxx::tree::traits< Value1Type, char > Value1Traits;

    const Value1Optional&
    Value1 () const;

    Value1Optional&
    Value1 ();

    void
    Value1 (const Value1Type& x);

    void
    Value1 (const Value1Optional& x);

    void
    Value1 (::std::unique_ptr< Value1Type > p);

    // Metric
    //
    typedef ::CDM::HandleRef MetricType;
    typedef ::xsd::cxx::tree::traits< MetricType, char > MetricTraits;

    const MetricType&
    Metric () const;

    MetricType&
    Metric ();

    void
    Metric (const MetricType& x);

    void
    Metric (::std::unique_ptr< MetricType > p);

    // Constructors.
    //
    Value (const MetricType&);

    Value (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    Value (const Value& x,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    virtual Value*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Value&
    operator= (const Value& x);

    virtual 
    ~Value ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    Value1Optional Value1_;
    ::xsd::cxx::tree::one< MetricType > Metric_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace CDM
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (const ::std::string& uri,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (const ::std::string& uri,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (::std::istream& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (::std::istream& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (::xercesc::InputSource& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (::xercesc::InputSource& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdib >
  GetMdib_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (const ::std::string& uri,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (const ::std::string& uri,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (::std::istream& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (::std::istream& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (::xercesc::InputSource& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (::xercesc::InputSource& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdibResponse >
  GetMdibResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescription >
  GetMdDescription_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (const ::std::string& uri,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (const ::std::string& uri,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (::std::istream& is,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (::std::istream& is,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (const ::xercesc::DOMDocument& d,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdDescriptionResponse >
  GetMdDescriptionResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (const ::std::string& uri,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (const ::std::string& uri,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (::std::istream& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (::std::istream& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (::xercesc::InputSource& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (::xercesc::InputSource& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdState >
  GetMdState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (const ::std::string& uri,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (const ::std::string& uri,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (::std::istream& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (::std::istream& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (::xercesc::InputSource& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (::xercesc::InputSource& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMdStateResponse >
  GetMdStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (const ::std::string& uri,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (const ::std::string& uri,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (const ::xercesc::DOMDocument& d,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (const ::std::string& uri,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (const ::std::string& uri,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::xercesc::InputSource& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::xercesc::InputSource& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (const ::std::string& uri,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (const ::std::string& uri,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::xercesc::InputSource& is,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::xercesc::InputSource& is,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (const ::xercesc::DOMDocument& d,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (const ::std::string& uri,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (const ::std::string& uri,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (::std::istream& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (::std::istream& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (::xercesc::InputSource& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (::xercesc::InputSource& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextReport >
  PeriodicContextReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (const ::std::string& uri,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (const ::std::string& uri,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (::std::istream& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (::std::istream& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (::xercesc::InputSource& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (::xercesc::InputSource& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextReport >
  EpisodicContextReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedText >
  GetLocalizedText_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (const ::std::string& uri,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (const ::std::string& uri,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (::std::istream& is,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (::std::istream& is,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (const ::xercesc::DOMDocument& d,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetLocalizedTextResponse >
  GetLocalizedTextResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (const ::std::string& uri,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (const ::std::string& uri,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (::std::istream& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (::std::istream& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (::xercesc::InputSource& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (::xercesc::InputSource& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguages >
  GetSupportedLanguages_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (const ::std::string& uri,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (const ::std::string& uri,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (::std::istream& is,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (::std::istream& is,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (::xercesc::InputSource& is,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (::xercesc::InputSource& is,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetSupportedLanguagesResponse >
  GetSupportedLanguagesResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (const ::std::string& uri,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (const ::std::string& uri,
                              ::xml_schema::ErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (::std::istream& is,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (::std::istream& is,
                              ::xml_schema::ErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::ErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (::xercesc::InputSource& is,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (::xercesc::InputSource& is,
                              ::xml_schema::ErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (const ::xercesc::DOMDocument& d,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchive >
  GetDescriptorsFromArchive_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (const ::std::string& uri,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (const ::std::string& uri,
                                      ::xml_schema::ErrorHandler& eh,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (::std::istream& is,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (::std::istream& is,
                                      ::xml_schema::ErrorHandler& eh,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::ErrorHandler& eh,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (::xercesc::InputSource& is,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (::xercesc::InputSource& is,
                                      ::xml_schema::ErrorHandler& eh,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorsFromArchiveResponse >
  GetDescriptorsFromArchiveResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::Flags f = 0,
                                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (const ::std::string& uri,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (const ::std::string& uri,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (::std::istream& is,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (::std::istream& is,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (::xercesc::InputSource& is,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (::xercesc::InputSource& is,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchive >
  GetStatesFromArchive_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (const ::std::string& uri,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (const ::std::string& uri,
                                 ::xml_schema::ErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (::std::istream& is,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (::std::istream& is,
                                 ::xml_schema::ErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::ErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (::xercesc::InputSource& is,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (::xercesc::InputSource& is,
                                 ::xml_schema::ErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetStatesFromArchiveResponse >
  GetStatesFromArchiveResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (const ::std::string& uri,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (const ::std::string& uri,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::xercesc::InputSource& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::xercesc::InputSource& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (const ::std::string& uri,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (const ::std::string& uri,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::xercesc::InputSource& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::xercesc::InputSource& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (const ::std::string& uri,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (const ::std::string& uri,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::xercesc::InputSource& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::xercesc::InputSource& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (const ::std::string& uri,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (const ::std::string& uri,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::xercesc::InputSource& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::xercesc::InputSource& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (const ::std::string& uri,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (const ::std::string& uri,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (::std::istream& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (::std::istream& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (::xercesc::InputSource& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (::xercesc::InputSource& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentState >
  SetComponentState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (const ::std::string& uri,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (const ::std::string& uri,
                              ::xml_schema::ErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (::std::istream& is,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (::std::istream& is,
                              ::xml_schema::ErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::ErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (::xercesc::InputSource& is,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (::xercesc::InputSource& is,
                              ::xml_schema::ErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (const ::xercesc::DOMDocument& d,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetComponentStateResponse >
  SetComponentStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::Flags f = 0,
                              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (const ::std::string& uri,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (const ::std::string& uri,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (::std::istream& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (::std::istream& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (::xercesc::InputSource& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (::xercesc::InputSource& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricState >
  SetMetricState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (const ::std::string& uri,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (const ::std::string& uri,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (::std::istream& is,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (::std::istream& is,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (::xercesc::InputSource& is,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (::xercesc::InputSource& is,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetMetricStateResponse >
  SetMetricStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (const ::std::string& uri,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (const ::std::string& uri,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::xercesc::InputSource& is,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::xercesc::InputSource& is,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (const ::std::string& uri,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (const ::std::string& uri,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::xercesc::InputSource& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::xercesc::InputSource& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (const ::std::string& uri,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (const ::std::string& uri,
                               ::xml_schema::ErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               ::xml_schema::ErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::ErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::xercesc::InputSource& is,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::xercesc::InputSource& is,
                               ::xml_schema::ErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (const ::xercesc::DOMDocument& d,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (const ::std::string& uri,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (const ::std::string& uri,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::xercesc::InputSource& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::xercesc::InputSource& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (const ::std::string& uri,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (const ::std::string& uri,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::xercesc::InputSource& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::xercesc::InputSource& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (const ::std::string& uri,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (const ::std::string& uri,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::xercesc::InputSource& is,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::xercesc::InputSource& is,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (const ::std::string& uri,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (const ::std::string& uri,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::xercesc::InputSource& is,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::xercesc::InputSource& is,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (const ::std::string& uri,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (const ::std::string& uri,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (::std::istream& is,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (::std::istream& is,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (::xercesc::InputSource& is,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (::xercesc::InputSource& is,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (const ::xercesc::DOMDocument& d,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicComponentReport >
  EpisodicComponentReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (const ::std::string& uri,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (const ::std::string& uri,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (::std::istream& is,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (::std::istream& is,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (::xercesc::InputSource& is,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (::xercesc::InputSource& is,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (const ::xercesc::DOMDocument& d,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicComponentReport >
  PeriodicComponentReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (const ::std::string& uri,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (const ::std::string& uri,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::xercesc::InputSource& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::xercesc::InputSource& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (const ::std::string& uri,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (const ::std::string& uri,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::xercesc::InputSource& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::xercesc::InputSource& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (const ::std::string& uri,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (const ::std::string& uri,
                                   ::xml_schema::ErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (::std::istream& is,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (::std::istream& is,
                                   ::xml_schema::ErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::ErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (::xercesc::InputSource& is,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (::xercesc::InputSource& is,
                                   ::xml_schema::ErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicOperationalStateReport >
  EpisodicOperationalStateReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (const ::std::string& uri,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (const ::std::string& uri,
                                   ::xml_schema::ErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (::std::istream& is,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (::std::istream& is,
                                   ::xml_schema::ErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::ErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (::xercesc::InputSource& is,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (::xercesc::InputSource& is,
                                   ::xml_schema::ErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicOperationalStateReport >
  PeriodicOperationalStateReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::Flags f = 0,
                                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (const ::std::string& uri,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (const ::std::string& uri,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::xercesc::InputSource& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::xercesc::InputSource& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (const ::std::string& uri,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (const ::std::string& uri,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (::std::istream& is,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (::std::istream& is,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (::xercesc::InputSource& is,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (::xercesc::InputSource& is,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::DescriptionModificationReport >
  DescriptionModificationReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (const ::std::string& uri,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (const ::std::string& uri,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::xercesc::InputSource& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::xercesc::InputSource& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (const ::std::string& uri,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (const ::std::string& uri,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (::std::istream& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (::xercesc::InputSource& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (::xercesc::InputSource& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObservedValueStream >
  ObservedValueStream_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (const ::std::string& uri,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (const ::std::string& uri,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::xercesc::InputSource& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::xercesc::InputSource& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace CDM
{
  void
  operator<< (::xercesc::DOMElement&, const TransactionId&);

  void
  operator<< (::xercesc::DOMAttr&, const TransactionId&);

  void
  operator<< (::xml_schema::ListStream&,
              const TransactionId&);

  void
  operator<< (::xercesc::DOMElement&, const InvocationState&);

  void
  operator<< (::xercesc::DOMAttr&, const InvocationState&);

  void
  operator<< (::xml_schema::ListStream&,
              const InvocationState&);

  void
  operator<< (::xercesc::DOMElement&, const InvocationError&);

  void
  operator<< (::xercesc::DOMAttr&, const InvocationError&);

  void
  operator<< (::xml_schema::ListStream&,
              const InvocationError&);

  void
  operator<< (::xercesc::DOMElement&, const InvocationInfo&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractGet&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractGetResponse&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractReportPart&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractReport&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractSet&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractSetResponse&);

  // Serialize to std::ostream.
  //

  void
  GetMdib_ (::std::ostream& os,
            const ::CDM::GetMdib& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  void
  GetMdib_ (::std::ostream& os,
            const ::CDM::GetMdib& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  void
  GetMdib_ (::std::ostream& os,
            const ::CDM::GetMdib& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetMdib_ (::xercesc::XMLFormatTarget& ft,
            const ::CDM::GetMdib& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  void
  GetMdib_ (::xercesc::XMLFormatTarget& ft,
            const ::CDM::GetMdib& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  void
  GetMdib_ (::xercesc::XMLFormatTarget& ft,
            const ::CDM::GetMdib& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetMdib_ (::xercesc::DOMDocument& d,
            const ::CDM::GetMdib& x,
            ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMdib_ (const ::CDM::GetMdib& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetMdibResponse_ (::std::ostream& os,
                    const ::CDM::GetMdibResponse& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  GetMdibResponse_ (::std::ostream& os,
                    const ::CDM::GetMdibResponse& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  GetMdibResponse_ (::std::ostream& os,
                    const ::CDM::GetMdibResponse& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetMdibResponse_ (::xercesc::XMLFormatTarget& ft,
                    const ::CDM::GetMdibResponse& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  GetMdibResponse_ (::xercesc::XMLFormatTarget& ft,
                    const ::CDM::GetMdibResponse& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  GetMdibResponse_ (::xercesc::XMLFormatTarget& ft,
                    const ::CDM::GetMdibResponse& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetMdibResponse_ (::xercesc::DOMDocument& d,
                    const ::CDM::GetMdibResponse& x,
                    ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMdibResponse_ (const ::CDM::GetMdibResponse& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetMdDescription_ (::std::ostream& os,
                     const ::CDM::GetMdDescription& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetMdDescription_ (::std::ostream& os,
                     const ::CDM::GetMdDescription& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetMdDescription_ (::std::ostream& os,
                     const ::CDM::GetMdDescription& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetMdDescription_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetMdDescription& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetMdDescription_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetMdDescription& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetMdDescription_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetMdDescription& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetMdDescription_ (::xercesc::DOMDocument& d,
                     const ::CDM::GetMdDescription& x,
                     ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMdDescription_ (const ::CDM::GetMdDescription& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetMdDescriptionResponse_ (::std::ostream& os,
                             const ::CDM::GetMdDescriptionResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetMdDescriptionResponse_ (::std::ostream& os,
                             const ::CDM::GetMdDescriptionResponse& x, 
                             ::xml_schema::ErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetMdDescriptionResponse_ (::std::ostream& os,
                             const ::CDM::GetMdDescriptionResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetMdDescriptionResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetMdDescriptionResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetMdDescriptionResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetMdDescriptionResponse& x, 
                             ::xml_schema::ErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetMdDescriptionResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetMdDescriptionResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetMdDescriptionResponse_ (::xercesc::DOMDocument& d,
                             const ::CDM::GetMdDescriptionResponse& x,
                             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMdDescriptionResponse_ (const ::CDM::GetMdDescriptionResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetMdState_ (::std::ostream& os,
               const ::CDM::GetMdState& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

  void
  GetMdState_ (::std::ostream& os,
               const ::CDM::GetMdState& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

  void
  GetMdState_ (::std::ostream& os,
               const ::CDM::GetMdState& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetMdState_ (::xercesc::XMLFormatTarget& ft,
               const ::CDM::GetMdState& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

  void
  GetMdState_ (::xercesc::XMLFormatTarget& ft,
               const ::CDM::GetMdState& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

  void
  GetMdState_ (::xercesc::XMLFormatTarget& ft,
               const ::CDM::GetMdState& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetMdState_ (::xercesc::DOMDocument& d,
               const ::CDM::GetMdState& x,
               ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMdState_ (const ::CDM::GetMdState& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetMdStateResponse_ (::std::ostream& os,
                       const ::CDM::GetMdStateResponse& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetMdStateResponse_ (::std::ostream& os,
                       const ::CDM::GetMdStateResponse& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetMdStateResponse_ (::std::ostream& os,
                       const ::CDM::GetMdStateResponse& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetMdStateResponse_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::GetMdStateResponse& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetMdStateResponse_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::GetMdStateResponse& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetMdStateResponse_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::GetMdStateResponse& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetMdStateResponse_ (::xercesc::DOMDocument& d,
                       const ::CDM::GetMdStateResponse& x,
                       ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMdStateResponse_ (const ::CDM::GetMdStateResponse& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetContextStates_ (::std::ostream& os,
                     const ::CDM::GetContextStates& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetContextStates_ (::std::ostream& os,
                     const ::CDM::GetContextStates& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetContextStates_ (::std::ostream& os,
                     const ::CDM::GetContextStates& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetContextStates_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetContextStates& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetContextStates_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetContextStates& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetContextStates_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetContextStates& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetContextStates_ (::xercesc::DOMDocument& d,
                     const ::CDM::GetContextStates& x,
                     ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetContextStates_ (const ::CDM::GetContextStates& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetContextStatesResponse_ (::std::ostream& os,
                             const ::CDM::GetContextStatesResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetContextStatesResponse_ (::std::ostream& os,
                             const ::CDM::GetContextStatesResponse& x, 
                             ::xml_schema::ErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetContextStatesResponse_ (::std::ostream& os,
                             const ::CDM::GetContextStatesResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetContextStatesResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetContextStatesResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetContextStatesResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetContextStatesResponse& x, 
                             ::xml_schema::ErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetContextStatesResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetContextStatesResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetContextStatesResponse_ (::xercesc::DOMDocument& d,
                             const ::CDM::GetContextStatesResponse& x,
                             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetContextStatesResponse_ (const ::CDM::GetContextStatesResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetContextState_ (::std::ostream& os,
                    const ::CDM::SetContextState& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  SetContextState_ (::std::ostream& os,
                    const ::CDM::SetContextState& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  SetContextState_ (::std::ostream& os,
                    const ::CDM::SetContextState& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetContextState_ (::xercesc::XMLFormatTarget& ft,
                    const ::CDM::SetContextState& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  SetContextState_ (::xercesc::XMLFormatTarget& ft,
                    const ::CDM::SetContextState& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  SetContextState_ (::xercesc::XMLFormatTarget& ft,
                    const ::CDM::SetContextState& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetContextState_ (::xercesc::DOMDocument& d,
                    const ::CDM::SetContextState& x,
                    ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetContextState_ (const ::CDM::SetContextState& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetContextStateResponse_ (::std::ostream& os,
                            const ::CDM::SetContextStateResponse& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  SetContextStateResponse_ (::std::ostream& os,
                            const ::CDM::SetContextStateResponse& x, 
                            ::xml_schema::ErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  SetContextStateResponse_ (::std::ostream& os,
                            const ::CDM::SetContextStateResponse& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetContextStateResponse_ (::xercesc::XMLFormatTarget& ft,
                            const ::CDM::SetContextStateResponse& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  SetContextStateResponse_ (::xercesc::XMLFormatTarget& ft,
                            const ::CDM::SetContextStateResponse& x, 
                            ::xml_schema::ErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  SetContextStateResponse_ (::xercesc::XMLFormatTarget& ft,
                            const ::CDM::SetContextStateResponse& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetContextStateResponse_ (::xercesc::DOMDocument& d,
                            const ::CDM::SetContextStateResponse& x,
                            ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetContextStateResponse_ (const ::CDM::SetContextStateResponse& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const AbstractContextReport&);

  // Serialize to std::ostream.
  //

  void
  PeriodicContextReport_ (::std::ostream& os,
                          const ::CDM::PeriodicContextReport& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  PeriodicContextReport_ (::std::ostream& os,
                          const ::CDM::PeriodicContextReport& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  PeriodicContextReport_ (::std::ostream& os,
                          const ::CDM::PeriodicContextReport& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  PeriodicContextReport_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::PeriodicContextReport& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  PeriodicContextReport_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::PeriodicContextReport& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  PeriodicContextReport_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::PeriodicContextReport& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  PeriodicContextReport_ (::xercesc::DOMDocument& d,
                          const ::CDM::PeriodicContextReport& x,
                          ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  PeriodicContextReport_ (const ::CDM::PeriodicContextReport& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  EpisodicContextReport_ (::std::ostream& os,
                          const ::CDM::EpisodicContextReport& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  EpisodicContextReport_ (::std::ostream& os,
                          const ::CDM::EpisodicContextReport& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  EpisodicContextReport_ (::std::ostream& os,
                          const ::CDM::EpisodicContextReport& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  EpisodicContextReport_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::EpisodicContextReport& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  EpisodicContextReport_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::EpisodicContextReport& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  EpisodicContextReport_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::EpisodicContextReport& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  EpisodicContextReport_ (::xercesc::DOMDocument& d,
                          const ::CDM::EpisodicContextReport& x,
                          ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  EpisodicContextReport_ (const ::CDM::EpisodicContextReport& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetLocalizedText_ (::std::ostream& os,
                     const ::CDM::GetLocalizedText& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetLocalizedText_ (::std::ostream& os,
                     const ::CDM::GetLocalizedText& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetLocalizedText_ (::std::ostream& os,
                     const ::CDM::GetLocalizedText& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetLocalizedText_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetLocalizedText& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetLocalizedText_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetLocalizedText& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetLocalizedText_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetLocalizedText& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetLocalizedText_ (::xercesc::DOMDocument& d,
                     const ::CDM::GetLocalizedText& x,
                     ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetLocalizedText_ (const ::CDM::GetLocalizedText& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetLocalizedTextResponse_ (::std::ostream& os,
                             const ::CDM::GetLocalizedTextResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetLocalizedTextResponse_ (::std::ostream& os,
                             const ::CDM::GetLocalizedTextResponse& x, 
                             ::xml_schema::ErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetLocalizedTextResponse_ (::std::ostream& os,
                             const ::CDM::GetLocalizedTextResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetLocalizedTextResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetLocalizedTextResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetLocalizedTextResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetLocalizedTextResponse& x, 
                             ::xml_schema::ErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetLocalizedTextResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetLocalizedTextResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetLocalizedTextResponse_ (::xercesc::DOMDocument& d,
                             const ::CDM::GetLocalizedTextResponse& x,
                             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetLocalizedTextResponse_ (const ::CDM::GetLocalizedTextResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetSupportedLanguages_ (::std::ostream& os,
                          const ::CDM::GetSupportedLanguages& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  GetSupportedLanguages_ (::std::ostream& os,
                          const ::CDM::GetSupportedLanguages& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  GetSupportedLanguages_ (::std::ostream& os,
                          const ::CDM::GetSupportedLanguages& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetSupportedLanguages_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::GetSupportedLanguages& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  GetSupportedLanguages_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::GetSupportedLanguages& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  GetSupportedLanguages_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::GetSupportedLanguages& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetSupportedLanguages_ (::xercesc::DOMDocument& d,
                          const ::CDM::GetSupportedLanguages& x,
                          ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetSupportedLanguages_ (const ::CDM::GetSupportedLanguages& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetSupportedLanguagesResponse_ (::std::ostream& os,
                                  const ::CDM::GetSupportedLanguagesResponse& x, 
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  void
  GetSupportedLanguagesResponse_ (::std::ostream& os,
                                  const ::CDM::GetSupportedLanguagesResponse& x, 
                                  ::xml_schema::ErrorHandler& eh,
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  void
  GetSupportedLanguagesResponse_ (::std::ostream& os,
                                  const ::CDM::GetSupportedLanguagesResponse& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetSupportedLanguagesResponse_ (::xercesc::XMLFormatTarget& ft,
                                  const ::CDM::GetSupportedLanguagesResponse& x, 
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  void
  GetSupportedLanguagesResponse_ (::xercesc::XMLFormatTarget& ft,
                                  const ::CDM::GetSupportedLanguagesResponse& x, 
                                  ::xml_schema::ErrorHandler& eh,
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  void
  GetSupportedLanguagesResponse_ (::xercesc::XMLFormatTarget& ft,
                                  const ::CDM::GetSupportedLanguagesResponse& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetSupportedLanguagesResponse_ (::xercesc::DOMDocument& d,
                                  const ::CDM::GetSupportedLanguagesResponse& x,
                                  ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetSupportedLanguagesResponse_ (const ::CDM::GetSupportedLanguagesResponse& x, 
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const VersionFrame&);

  void
  operator<< (::xercesc::DOMElement&, const TimeFrame&);

  // Serialize to std::ostream.
  //

  void
  GetDescriptorsFromArchive_ (::std::ostream& os,
                              const ::CDM::GetDescriptorsFromArchive& x, 
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::Flags f = 0);

  void
  GetDescriptorsFromArchive_ (::std::ostream& os,
                              const ::CDM::GetDescriptorsFromArchive& x, 
                              ::xml_schema::ErrorHandler& eh,
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::Flags f = 0);

  void
  GetDescriptorsFromArchive_ (::std::ostream& os,
                              const ::CDM::GetDescriptorsFromArchive& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetDescriptorsFromArchive_ (::xercesc::XMLFormatTarget& ft,
                              const ::CDM::GetDescriptorsFromArchive& x, 
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::Flags f = 0);

  void
  GetDescriptorsFromArchive_ (::xercesc::XMLFormatTarget& ft,
                              const ::CDM::GetDescriptorsFromArchive& x, 
                              ::xml_schema::ErrorHandler& eh,
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::Flags f = 0);

  void
  GetDescriptorsFromArchive_ (::xercesc::XMLFormatTarget& ft,
                              const ::CDM::GetDescriptorsFromArchive& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetDescriptorsFromArchive_ (::xercesc::DOMDocument& d,
                              const ::CDM::GetDescriptorsFromArchive& x,
                              ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetDescriptorsFromArchive_ (const ::CDM::GetDescriptorsFromArchive& x, 
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetDescriptorsFromArchiveResponse_ (::std::ostream& os,
                                      const ::CDM::GetDescriptorsFromArchiveResponse& x, 
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::Flags f = 0);

  void
  GetDescriptorsFromArchiveResponse_ (::std::ostream& os,
                                      const ::CDM::GetDescriptorsFromArchiveResponse& x, 
                                      ::xml_schema::ErrorHandler& eh,
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::Flags f = 0);

  void
  GetDescriptorsFromArchiveResponse_ (::std::ostream& os,
                                      const ::CDM::GetDescriptorsFromArchiveResponse& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetDescriptorsFromArchiveResponse_ (::xercesc::XMLFormatTarget& ft,
                                      const ::CDM::GetDescriptorsFromArchiveResponse& x, 
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::Flags f = 0);

  void
  GetDescriptorsFromArchiveResponse_ (::xercesc::XMLFormatTarget& ft,
                                      const ::CDM::GetDescriptorsFromArchiveResponse& x, 
                                      ::xml_schema::ErrorHandler& eh,
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::Flags f = 0);

  void
  GetDescriptorsFromArchiveResponse_ (::xercesc::XMLFormatTarget& ft,
                                      const ::CDM::GetDescriptorsFromArchiveResponse& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetDescriptorsFromArchiveResponse_ (::xercesc::DOMDocument& d,
                                      const ::CDM::GetDescriptorsFromArchiveResponse& x,
                                      ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetDescriptorsFromArchiveResponse_ (const ::CDM::GetDescriptorsFromArchiveResponse& x, 
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetStatesFromArchive_ (::std::ostream& os,
                         const ::CDM::GetStatesFromArchive& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  GetStatesFromArchive_ (::std::ostream& os,
                         const ::CDM::GetStatesFromArchive& x, 
                         ::xml_schema::ErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  GetStatesFromArchive_ (::std::ostream& os,
                         const ::CDM::GetStatesFromArchive& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetStatesFromArchive_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::GetStatesFromArchive& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  GetStatesFromArchive_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::GetStatesFromArchive& x, 
                         ::xml_schema::ErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  GetStatesFromArchive_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::GetStatesFromArchive& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetStatesFromArchive_ (::xercesc::DOMDocument& d,
                         const ::CDM::GetStatesFromArchive& x,
                         ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetStatesFromArchive_ (const ::CDM::GetStatesFromArchive& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetStatesFromArchiveResponse_ (::std::ostream& os,
                                 const ::CDM::GetStatesFromArchiveResponse& x, 
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  void
  GetStatesFromArchiveResponse_ (::std::ostream& os,
                                 const ::CDM::GetStatesFromArchiveResponse& x, 
                                 ::xml_schema::ErrorHandler& eh,
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  void
  GetStatesFromArchiveResponse_ (::std::ostream& os,
                                 const ::CDM::GetStatesFromArchiveResponse& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetStatesFromArchiveResponse_ (::xercesc::XMLFormatTarget& ft,
                                 const ::CDM::GetStatesFromArchiveResponse& x, 
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  void
  GetStatesFromArchiveResponse_ (::xercesc::XMLFormatTarget& ft,
                                 const ::CDM::GetStatesFromArchiveResponse& x, 
                                 ::xml_schema::ErrorHandler& eh,
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  void
  GetStatesFromArchiveResponse_ (::xercesc::XMLFormatTarget& ft,
                                 const ::CDM::GetStatesFromArchiveResponse& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetStatesFromArchiveResponse_ (::xercesc::DOMDocument& d,
                                 const ::CDM::GetStatesFromArchiveResponse& x,
                                 ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetStatesFromArchiveResponse_ (const ::CDM::GetStatesFromArchiveResponse& x, 
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetValue_ (::std::ostream& os,
             const ::CDM::SetValue& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SetValue_ (::std::ostream& os,
             const ::CDM::SetValue& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SetValue_ (::std::ostream& os,
             const ::CDM::SetValue& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetValue_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::SetValue& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SetValue_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::SetValue& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SetValue_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::SetValue& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetValue_ (::xercesc::DOMDocument& d,
             const ::CDM::SetValue& x,
             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetValue_ (const ::CDM::SetValue& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetValueResponse_ (::std::ostream& os,
                     const ::CDM::SetValueResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  SetValueResponse_ (::std::ostream& os,
                     const ::CDM::SetValueResponse& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  SetValueResponse_ (::std::ostream& os,
                     const ::CDM::SetValueResponse& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetValueResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::SetValueResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  SetValueResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::SetValueResponse& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  SetValueResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::SetValueResponse& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetValueResponse_ (::xercesc::DOMDocument& d,
                     const ::CDM::SetValueResponse& x,
                     ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetValueResponse_ (const ::CDM::SetValueResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetString_ (::std::ostream& os,
              const ::CDM::SetString& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  void
  SetString_ (::std::ostream& os,
              const ::CDM::SetString& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  void
  SetString_ (::std::ostream& os,
              const ::CDM::SetString& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetString_ (::xercesc::XMLFormatTarget& ft,
              const ::CDM::SetString& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  void
  SetString_ (::xercesc::XMLFormatTarget& ft,
              const ::CDM::SetString& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  void
  SetString_ (::xercesc::XMLFormatTarget& ft,
              const ::CDM::SetString& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetString_ (::xercesc::DOMDocument& d,
              const ::CDM::SetString& x,
              ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetString_ (const ::CDM::SetString& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetStringResponse_ (::std::ostream& os,
                      const ::CDM::SetStringResponse& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SetStringResponse_ (::std::ostream& os,
                      const ::CDM::SetStringResponse& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SetStringResponse_ (::std::ostream& os,
                      const ::CDM::SetStringResponse& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetStringResponse_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SetStringResponse& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SetStringResponse_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SetStringResponse& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SetStringResponse_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SetStringResponse& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetStringResponse_ (::xercesc::DOMDocument& d,
                      const ::CDM::SetStringResponse& x,
                      ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetStringResponse_ (const ::CDM::SetStringResponse& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Activate_ (::std::ostream& os,
             const ::CDM::Activate& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  Activate_ (::std::ostream& os,
             const ::CDM::Activate& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  Activate_ (::std::ostream& os,
             const ::CDM::Activate& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Activate_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::Activate& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  Activate_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::Activate& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  Activate_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::Activate& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Activate_ (::xercesc::DOMDocument& d,
             const ::CDM::Activate& x,
             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Activate_ (const ::CDM::Activate& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  ActivateResponse_ (::std::ostream& os,
                     const ::CDM::ActivateResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  ActivateResponse_ (::std::ostream& os,
                     const ::CDM::ActivateResponse& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  ActivateResponse_ (::std::ostream& os,
                     const ::CDM::ActivateResponse& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ActivateResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::ActivateResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  ActivateResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::ActivateResponse& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  ActivateResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::ActivateResponse& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ActivateResponse_ (::xercesc::DOMDocument& d,
                     const ::CDM::ActivateResponse& x,
                     ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  ActivateResponse_ (const ::CDM::ActivateResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetAlertState_ (::std::ostream& os,
                  const ::CDM::SetAlertState& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  SetAlertState_ (::std::ostream& os,
                  const ::CDM::SetAlertState& x, 
                  ::xml_schema::ErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  SetAlertState_ (::std::ostream& os,
                  const ::CDM::SetAlertState& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetAlertState_ (::xercesc::XMLFormatTarget& ft,
                  const ::CDM::SetAlertState& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  SetAlertState_ (::xercesc::XMLFormatTarget& ft,
                  const ::CDM::SetAlertState& x, 
                  ::xml_schema::ErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  SetAlertState_ (::xercesc::XMLFormatTarget& ft,
                  const ::CDM::SetAlertState& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetAlertState_ (::xercesc::DOMDocument& d,
                  const ::CDM::SetAlertState& x,
                  ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetAlertState_ (const ::CDM::SetAlertState& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetAlertStateResponse_ (::std::ostream& os,
                          const ::CDM::SetAlertStateResponse& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  SetAlertStateResponse_ (::std::ostream& os,
                          const ::CDM::SetAlertStateResponse& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  SetAlertStateResponse_ (::std::ostream& os,
                          const ::CDM::SetAlertStateResponse& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetAlertStateResponse_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::SetAlertStateResponse& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  SetAlertStateResponse_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::SetAlertStateResponse& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  SetAlertStateResponse_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::SetAlertStateResponse& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetAlertStateResponse_ (::xercesc::DOMDocument& d,
                          const ::CDM::SetAlertStateResponse& x,
                          ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetAlertStateResponse_ (const ::CDM::SetAlertStateResponse& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetComponentState_ (::std::ostream& os,
                      const ::CDM::SetComponentState& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SetComponentState_ (::std::ostream& os,
                      const ::CDM::SetComponentState& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SetComponentState_ (::std::ostream& os,
                      const ::CDM::SetComponentState& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetComponentState_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SetComponentState& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SetComponentState_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SetComponentState& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SetComponentState_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SetComponentState& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetComponentState_ (::xercesc::DOMDocument& d,
                      const ::CDM::SetComponentState& x,
                      ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetComponentState_ (const ::CDM::SetComponentState& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetComponentStateResponse_ (::std::ostream& os,
                              const ::CDM::SetComponentStateResponse& x, 
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::Flags f = 0);

  void
  SetComponentStateResponse_ (::std::ostream& os,
                              const ::CDM::SetComponentStateResponse& x, 
                              ::xml_schema::ErrorHandler& eh,
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::Flags f = 0);

  void
  SetComponentStateResponse_ (::std::ostream& os,
                              const ::CDM::SetComponentStateResponse& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetComponentStateResponse_ (::xercesc::XMLFormatTarget& ft,
                              const ::CDM::SetComponentStateResponse& x, 
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::Flags f = 0);

  void
  SetComponentStateResponse_ (::xercesc::XMLFormatTarget& ft,
                              const ::CDM::SetComponentStateResponse& x, 
                              ::xml_schema::ErrorHandler& eh,
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::Flags f = 0);

  void
  SetComponentStateResponse_ (::xercesc::XMLFormatTarget& ft,
                              const ::CDM::SetComponentStateResponse& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetComponentStateResponse_ (::xercesc::DOMDocument& d,
                              const ::CDM::SetComponentStateResponse& x,
                              ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetComponentStateResponse_ (const ::CDM::SetComponentStateResponse& x, 
                              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                              ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetMetricState_ (::std::ostream& os,
                   const ::CDM::SetMetricState& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  SetMetricState_ (::std::ostream& os,
                   const ::CDM::SetMetricState& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  SetMetricState_ (::std::ostream& os,
                   const ::CDM::SetMetricState& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetMetricState_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::SetMetricState& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  SetMetricState_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::SetMetricState& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  SetMetricState_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::SetMetricState& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetMetricState_ (::xercesc::DOMDocument& d,
                   const ::CDM::SetMetricState& x,
                   ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetMetricState_ (const ::CDM::SetMetricState& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetMetricStateResponse_ (::std::ostream& os,
                           const ::CDM::SetMetricStateResponse& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  SetMetricStateResponse_ (::std::ostream& os,
                           const ::CDM::SetMetricStateResponse& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  SetMetricStateResponse_ (::std::ostream& os,
                           const ::CDM::SetMetricStateResponse& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetMetricStateResponse_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::SetMetricStateResponse& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  SetMetricStateResponse_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::SetMetricStateResponse& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  SetMetricStateResponse_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::SetMetricStateResponse& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetMetricStateResponse_ (::xercesc::DOMDocument& d,
                           const ::CDM::SetMetricStateResponse& x,
                           ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetMetricStateResponse_ (const ::CDM::SetMetricStateResponse& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  OperationInvokedReport_ (::std::ostream& os,
                           const ::CDM::OperationInvokedReport& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationInvokedReport_ (::std::ostream& os,
                           const ::CDM::OperationInvokedReport& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationInvokedReport_ (::std::ostream& os,
                           const ::CDM::OperationInvokedReport& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  OperationInvokedReport_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::OperationInvokedReport& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationInvokedReport_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::OperationInvokedReport& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationInvokedReport_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::OperationInvokedReport& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  OperationInvokedReport_ (::xercesc::DOMDocument& d,
                           const ::CDM::OperationInvokedReport& x,
                           ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OperationInvokedReport_ (const ::CDM::OperationInvokedReport& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetContainmentTree_ (::std::ostream& os,
                       const ::CDM::GetContainmentTree& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetContainmentTree_ (::std::ostream& os,
                       const ::CDM::GetContainmentTree& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetContainmentTree_ (::std::ostream& os,
                       const ::CDM::GetContainmentTree& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetContainmentTree_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::GetContainmentTree& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetContainmentTree_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::GetContainmentTree& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetContainmentTree_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::GetContainmentTree& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetContainmentTree_ (::xercesc::DOMDocument& d,
                       const ::CDM::GetContainmentTree& x,
                       ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetContainmentTree_ (const ::CDM::GetContainmentTree& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetContainmentTreeResponse_ (::std::ostream& os,
                               const ::CDM::GetContainmentTreeResponse& x, 
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  void
  GetContainmentTreeResponse_ (::std::ostream& os,
                               const ::CDM::GetContainmentTreeResponse& x, 
                               ::xml_schema::ErrorHandler& eh,
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  void
  GetContainmentTreeResponse_ (::std::ostream& os,
                               const ::CDM::GetContainmentTreeResponse& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetContainmentTreeResponse_ (::xercesc::XMLFormatTarget& ft,
                               const ::CDM::GetContainmentTreeResponse& x, 
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  void
  GetContainmentTreeResponse_ (::xercesc::XMLFormatTarget& ft,
                               const ::CDM::GetContainmentTreeResponse& x, 
                               ::xml_schema::ErrorHandler& eh,
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  void
  GetContainmentTreeResponse_ (::xercesc::XMLFormatTarget& ft,
                               const ::CDM::GetContainmentTreeResponse& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetContainmentTreeResponse_ (::xercesc::DOMDocument& d,
                               const ::CDM::GetContainmentTreeResponse& x,
                               ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetContainmentTreeResponse_ (const ::CDM::GetContainmentTreeResponse& x, 
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetDescriptor_ (::std::ostream& os,
                  const ::CDM::GetDescriptor& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  GetDescriptor_ (::std::ostream& os,
                  const ::CDM::GetDescriptor& x, 
                  ::xml_schema::ErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  GetDescriptor_ (::std::ostream& os,
                  const ::CDM::GetDescriptor& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetDescriptor_ (::xercesc::XMLFormatTarget& ft,
                  const ::CDM::GetDescriptor& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  GetDescriptor_ (::xercesc::XMLFormatTarget& ft,
                  const ::CDM::GetDescriptor& x, 
                  ::xml_schema::ErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  GetDescriptor_ (::xercesc::XMLFormatTarget& ft,
                  const ::CDM::GetDescriptor& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetDescriptor_ (::xercesc::DOMDocument& d,
                  const ::CDM::GetDescriptor& x,
                  ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetDescriptor_ (const ::CDM::GetDescriptor& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetDescriptorResponse_ (::std::ostream& os,
                          const ::CDM::GetDescriptorResponse& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  GetDescriptorResponse_ (::std::ostream& os,
                          const ::CDM::GetDescriptorResponse& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  GetDescriptorResponse_ (::std::ostream& os,
                          const ::CDM::GetDescriptorResponse& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetDescriptorResponse_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::GetDescriptorResponse& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  GetDescriptorResponse_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::GetDescriptorResponse& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  GetDescriptorResponse_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::GetDescriptorResponse& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetDescriptorResponse_ (::xercesc::DOMDocument& d,
                          const ::CDM::GetDescriptorResponse& x,
                          ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetDescriptorResponse_ (const ::CDM::GetDescriptorResponse& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const AbstractMetricReport&);

  // Serialize to std::ostream.
  //

  void
  EpisodicMetricReport_ (::std::ostream& os,
                         const ::CDM::EpisodicMetricReport& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  EpisodicMetricReport_ (::std::ostream& os,
                         const ::CDM::EpisodicMetricReport& x, 
                         ::xml_schema::ErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  EpisodicMetricReport_ (::std::ostream& os,
                         const ::CDM::EpisodicMetricReport& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  EpisodicMetricReport_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::EpisodicMetricReport& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  EpisodicMetricReport_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::EpisodicMetricReport& x, 
                         ::xml_schema::ErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  EpisodicMetricReport_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::EpisodicMetricReport& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  EpisodicMetricReport_ (::xercesc::DOMDocument& d,
                         const ::CDM::EpisodicMetricReport& x,
                         ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  EpisodicMetricReport_ (const ::CDM::EpisodicMetricReport& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  PeriodicMetricReport_ (::std::ostream& os,
                         const ::CDM::PeriodicMetricReport& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  PeriodicMetricReport_ (::std::ostream& os,
                         const ::CDM::PeriodicMetricReport& x, 
                         ::xml_schema::ErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  PeriodicMetricReport_ (::std::ostream& os,
                         const ::CDM::PeriodicMetricReport& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  PeriodicMetricReport_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::PeriodicMetricReport& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  PeriodicMetricReport_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::PeriodicMetricReport& x, 
                         ::xml_schema::ErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  PeriodicMetricReport_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::PeriodicMetricReport& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  PeriodicMetricReport_ (::xercesc::DOMDocument& d,
                         const ::CDM::PeriodicMetricReport& x,
                         ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  PeriodicMetricReport_ (const ::CDM::PeriodicMetricReport& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const AbstractComponentReport&);

  // Serialize to std::ostream.
  //

  void
  EpisodicComponentReport_ (::std::ostream& os,
                            const ::CDM::EpisodicComponentReport& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  EpisodicComponentReport_ (::std::ostream& os,
                            const ::CDM::EpisodicComponentReport& x, 
                            ::xml_schema::ErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  EpisodicComponentReport_ (::std::ostream& os,
                            const ::CDM::EpisodicComponentReport& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  EpisodicComponentReport_ (::xercesc::XMLFormatTarget& ft,
                            const ::CDM::EpisodicComponentReport& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  EpisodicComponentReport_ (::xercesc::XMLFormatTarget& ft,
                            const ::CDM::EpisodicComponentReport& x, 
                            ::xml_schema::ErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  EpisodicComponentReport_ (::xercesc::XMLFormatTarget& ft,
                            const ::CDM::EpisodicComponentReport& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  EpisodicComponentReport_ (::xercesc::DOMDocument& d,
                            const ::CDM::EpisodicComponentReport& x,
                            ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  EpisodicComponentReport_ (const ::CDM::EpisodicComponentReport& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  PeriodicComponentReport_ (::std::ostream& os,
                            const ::CDM::PeriodicComponentReport& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  PeriodicComponentReport_ (::std::ostream& os,
                            const ::CDM::PeriodicComponentReport& x, 
                            ::xml_schema::ErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  PeriodicComponentReport_ (::std::ostream& os,
                            const ::CDM::PeriodicComponentReport& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  PeriodicComponentReport_ (::xercesc::XMLFormatTarget& ft,
                            const ::CDM::PeriodicComponentReport& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  PeriodicComponentReport_ (::xercesc::XMLFormatTarget& ft,
                            const ::CDM::PeriodicComponentReport& x, 
                            ::xml_schema::ErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  PeriodicComponentReport_ (::xercesc::XMLFormatTarget& ft,
                            const ::CDM::PeriodicComponentReport& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  PeriodicComponentReport_ (::xercesc::DOMDocument& d,
                            const ::CDM::PeriodicComponentReport& x,
                            ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  PeriodicComponentReport_ (const ::CDM::PeriodicComponentReport& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const AbstractAlertReport&);

  // Serialize to std::ostream.
  //

  void
  EpisodicAlertReport_ (::std::ostream& os,
                        const ::CDM::EpisodicAlertReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  EpisodicAlertReport_ (::std::ostream& os,
                        const ::CDM::EpisodicAlertReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  EpisodicAlertReport_ (::std::ostream& os,
                        const ::CDM::EpisodicAlertReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  EpisodicAlertReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::EpisodicAlertReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  EpisodicAlertReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::EpisodicAlertReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  EpisodicAlertReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::EpisodicAlertReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  EpisodicAlertReport_ (::xercesc::DOMDocument& d,
                        const ::CDM::EpisodicAlertReport& x,
                        ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  EpisodicAlertReport_ (const ::CDM::EpisodicAlertReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  PeriodicAlertReport_ (::std::ostream& os,
                        const ::CDM::PeriodicAlertReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  PeriodicAlertReport_ (::std::ostream& os,
                        const ::CDM::PeriodicAlertReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  PeriodicAlertReport_ (::std::ostream& os,
                        const ::CDM::PeriodicAlertReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  PeriodicAlertReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::PeriodicAlertReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  PeriodicAlertReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::PeriodicAlertReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  PeriodicAlertReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::PeriodicAlertReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  PeriodicAlertReport_ (::xercesc::DOMDocument& d,
                        const ::CDM::PeriodicAlertReport& x,
                        ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  PeriodicAlertReport_ (const ::CDM::PeriodicAlertReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const AbstractOperationalStateReport&);

  // Serialize to std::ostream.
  //

  void
  EpisodicOperationalStateReport_ (::std::ostream& os,
                                   const ::CDM::EpisodicOperationalStateReport& x, 
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::Flags f = 0);

  void
  EpisodicOperationalStateReport_ (::std::ostream& os,
                                   const ::CDM::EpisodicOperationalStateReport& x, 
                                   ::xml_schema::ErrorHandler& eh,
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::Flags f = 0);

  void
  EpisodicOperationalStateReport_ (::std::ostream& os,
                                   const ::CDM::EpisodicOperationalStateReport& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  EpisodicOperationalStateReport_ (::xercesc::XMLFormatTarget& ft,
                                   const ::CDM::EpisodicOperationalStateReport& x, 
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::Flags f = 0);

  void
  EpisodicOperationalStateReport_ (::xercesc::XMLFormatTarget& ft,
                                   const ::CDM::EpisodicOperationalStateReport& x, 
                                   ::xml_schema::ErrorHandler& eh,
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::Flags f = 0);

  void
  EpisodicOperationalStateReport_ (::xercesc::XMLFormatTarget& ft,
                                   const ::CDM::EpisodicOperationalStateReport& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  EpisodicOperationalStateReport_ (::xercesc::DOMDocument& d,
                                   const ::CDM::EpisodicOperationalStateReport& x,
                                   ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  EpisodicOperationalStateReport_ (const ::CDM::EpisodicOperationalStateReport& x, 
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  PeriodicOperationalStateReport_ (::std::ostream& os,
                                   const ::CDM::PeriodicOperationalStateReport& x, 
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::Flags f = 0);

  void
  PeriodicOperationalStateReport_ (::std::ostream& os,
                                   const ::CDM::PeriodicOperationalStateReport& x, 
                                   ::xml_schema::ErrorHandler& eh,
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::Flags f = 0);

  void
  PeriodicOperationalStateReport_ (::std::ostream& os,
                                   const ::CDM::PeriodicOperationalStateReport& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  PeriodicOperationalStateReport_ (::xercesc::XMLFormatTarget& ft,
                                   const ::CDM::PeriodicOperationalStateReport& x, 
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::Flags f = 0);

  void
  PeriodicOperationalStateReport_ (::xercesc::XMLFormatTarget& ft,
                                   const ::CDM::PeriodicOperationalStateReport& x, 
                                   ::xml_schema::ErrorHandler& eh,
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::Flags f = 0);

  void
  PeriodicOperationalStateReport_ (::xercesc::XMLFormatTarget& ft,
                                   const ::CDM::PeriodicOperationalStateReport& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  PeriodicOperationalStateReport_ (::xercesc::DOMDocument& d,
                                   const ::CDM::PeriodicOperationalStateReport& x,
                                   ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  PeriodicOperationalStateReport_ (const ::CDM::PeriodicOperationalStateReport& x, 
                                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                   ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SystemErrorReport_ (::std::ostream& os,
                      const ::CDM::SystemErrorReport& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SystemErrorReport_ (::std::ostream& os,
                      const ::CDM::SystemErrorReport& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SystemErrorReport_ (::std::ostream& os,
                      const ::CDM::SystemErrorReport& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SystemErrorReport_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SystemErrorReport& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SystemErrorReport_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SystemErrorReport& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SystemErrorReport_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SystemErrorReport& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SystemErrorReport_ (::xercesc::DOMDocument& d,
                      const ::CDM::SystemErrorReport& x,
                      ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SystemErrorReport_ (const ::CDM::SystemErrorReport& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const DescriptionModificationType&);

  void
  operator<< (::xercesc::DOMAttr&, const DescriptionModificationType&);

  void
  operator<< (::xml_schema::ListStream&,
              const DescriptionModificationType&);

  // Serialize to std::ostream.
  //

  void
  DescriptionModificationReport_ (::std::ostream& os,
                                  const ::CDM::DescriptionModificationReport& x, 
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  void
  DescriptionModificationReport_ (::std::ostream& os,
                                  const ::CDM::DescriptionModificationReport& x, 
                                  ::xml_schema::ErrorHandler& eh,
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  void
  DescriptionModificationReport_ (::std::ostream& os,
                                  const ::CDM::DescriptionModificationReport& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  DescriptionModificationReport_ (::xercesc::XMLFormatTarget& ft,
                                  const ::CDM::DescriptionModificationReport& x, 
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  void
  DescriptionModificationReport_ (::xercesc::XMLFormatTarget& ft,
                                  const ::CDM::DescriptionModificationReport& x, 
                                  ::xml_schema::ErrorHandler& eh,
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  void
  DescriptionModificationReport_ (::xercesc::XMLFormatTarget& ft,
                                  const ::CDM::DescriptionModificationReport& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  DescriptionModificationReport_ (::xercesc::DOMDocument& d,
                                  const ::CDM::DescriptionModificationReport& x,
                                  ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  DescriptionModificationReport_ (const ::CDM::DescriptionModificationReport& x, 
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  WaveformStream_ (::std::ostream& os,
                   const ::CDM::WaveformStream& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  WaveformStream_ (::std::ostream& os,
                   const ::CDM::WaveformStream& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  WaveformStream_ (::std::ostream& os,
                   const ::CDM::WaveformStream& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  WaveformStream_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::WaveformStream& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  WaveformStream_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::WaveformStream& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  WaveformStream_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::WaveformStream& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  WaveformStream_ (::xercesc::DOMDocument& d,
                   const ::CDM::WaveformStream& x,
                   ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  WaveformStream_ (const ::CDM::WaveformStream& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  ObservedValueStream_ (::std::ostream& os,
                        const ::CDM::ObservedValueStream& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObservedValueStream_ (::std::ostream& os,
                        const ::CDM::ObservedValueStream& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObservedValueStream_ (::std::ostream& os,
                        const ::CDM::ObservedValueStream& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ObservedValueStream_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::ObservedValueStream& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObservedValueStream_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::ObservedValueStream& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObservedValueStream_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::ObservedValueStream& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ObservedValueStream_ (::xercesc::DOMDocument& d,
                        const ::CDM::ObservedValueStream& x,
                        ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  ObservedValueStream_ (const ::CDM::ObservedValueStream& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const RetrievabilityMethod&);

  void
  operator<< (::xercesc::DOMAttr&, const RetrievabilityMethod&);

  void
  operator<< (::xml_schema::ListStream&,
              const RetrievabilityMethod&);

  void
  operator<< (::xercesc::DOMElement&, const RetrievabilityInfo&);

  // Serialize to std::ostream.
  //

  void
  Retrievability_ (::std::ostream& os,
                   const ::CDM::Retrievability& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  Retrievability_ (::std::ostream& os,
                   const ::CDM::Retrievability& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  Retrievability_ (::std::ostream& os,
                   const ::CDM::Retrievability& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Retrievability_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::Retrievability& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  Retrievability_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::Retrievability& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  Retrievability_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::Retrievability& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Retrievability_ (::xercesc::DOMDocument& d,
                   const ::CDM::Retrievability& x,
                   ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Retrievability_ (const ::CDM::Retrievability& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const GetMdib&);

  void
  operator<< (::xercesc::DOMElement&, const GetMdibResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetMdDescription&);

  void
  operator<< (::xercesc::DOMElement&, const GetMdDescriptionResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetMdState&);

  void
  operator<< (::xercesc::DOMElement&, const GetMdStateResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetContextStates&);

  void
  operator<< (::xercesc::DOMElement&, const GetContextStatesResponse&);

  void
  operator<< (::xercesc::DOMElement&, const SetContextState&);

  void
  operator<< (::xercesc::DOMElement&, const SetContextStateResponse&);

  void
  operator<< (::xercesc::DOMElement&, const ReportPart&);

  void
  operator<< (::xercesc::DOMElement&, const PeriodicContextReport&);

  void
  operator<< (::xercesc::DOMElement&, const EpisodicContextReport&);

  void
  operator<< (::xercesc::DOMElement&, const GetLocalizedText&);

  void
  operator<< (::xercesc::DOMElement&, const GetLocalizedTextResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetSupportedLanguages&);

  void
  operator<< (::xercesc::DOMElement&, const GetSupportedLanguagesResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetDescriptorsFromArchive&);

  void
  operator<< (::xercesc::DOMElement&, const GetDescriptorsFromArchiveResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetStatesFromArchive&);

  void
  operator<< (::xercesc::DOMElement&, const GetStatesFromArchiveResponse&);

  void
  operator<< (::xercesc::DOMElement&, const SetValue&);

  void
  operator<< (::xercesc::DOMElement&, const SetValueResponse&);

  void
  operator<< (::xercesc::DOMElement&, const SetString&);

  void
  operator<< (::xercesc::DOMElement&, const SetStringResponse&);

  void
  operator<< (::xercesc::DOMElement&, const Activate&);

  void
  operator<< (::xercesc::DOMElement&, const ActivateResponse&);

  void
  operator<< (::xercesc::DOMElement&, const SetAlertState&);

  void
  operator<< (::xercesc::DOMElement&, const SetAlertStateResponse&);

  void
  operator<< (::xercesc::DOMElement&, const SetComponentState&);

  void
  operator<< (::xercesc::DOMElement&, const SetComponentStateResponse&);

  void
  operator<< (::xercesc::DOMElement&, const SetMetricState&);

  void
  operator<< (::xercesc::DOMElement&, const SetMetricStateResponse&);

  void
  operator<< (::xercesc::DOMElement&, const OperationInvokedReport&);

  void
  operator<< (::xercesc::DOMElement&, const GetContainmentTree&);

  void
  operator<< (::xercesc::DOMElement&, const GetContainmentTreeResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetDescriptor&);

  void
  operator<< (::xercesc::DOMElement&, const GetDescriptorResponse&);

  void
  operator<< (::xercesc::DOMElement&, const ReportPart1&);

  void
  operator<< (::xercesc::DOMElement&, const EpisodicMetricReport&);

  void
  operator<< (::xercesc::DOMElement&, const PeriodicMetricReport&);

  void
  operator<< (::xercesc::DOMElement&, const ReportPart2&);

  void
  operator<< (::xercesc::DOMElement&, const EpisodicComponentReport&);

  void
  operator<< (::xercesc::DOMElement&, const PeriodicComponentReport&);

  void
  operator<< (::xercesc::DOMElement&, const ReportPart3&);

  void
  operator<< (::xercesc::DOMElement&, const EpisodicAlertReport&);

  void
  operator<< (::xercesc::DOMElement&, const PeriodicAlertReport&);

  void
  operator<< (::xercesc::DOMElement&, const ReportPart4&);

  void
  operator<< (::xercesc::DOMElement&, const EpisodicOperationalStateReport&);

  void
  operator<< (::xercesc::DOMElement&, const PeriodicOperationalStateReport&);

  void
  operator<< (::xercesc::DOMElement&, const SystemErrorReport&);

  void
  operator<< (::xercesc::DOMElement&, const DescriptionModificationReport&);

  void
  operator<< (::xercesc::DOMElement&, const WaveformStream&);

  void
  operator<< (::xercesc::DOMElement&, const ObservedValueStream&);

  void
  operator<< (::xercesc::DOMElement&, const Retrievability&);

  void
  operator<< (::xercesc::DOMElement&, const Text&);

  void
  operator<< (::xercesc::DOMElement&, const Argument&);

  void
  operator<< (::xercesc::DOMElement&, const ReportPart5&);

  void
  operator<< (::xercesc::DOMElement&, const ReportPart6&);

  void
  operator<< (::xercesc::DOMElement&, const ReportPart7&);

  void
  operator<< (::xercesc::DOMElement&, const Value&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // BICEPS_MESSAGE_MODEL_HXX
