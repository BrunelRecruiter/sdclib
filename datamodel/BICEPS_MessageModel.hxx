// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef BICEPS_MESSAGE_MODEL_HXX
#define BICEPS_MESSAGE_MODEL_HXX

#include "BICEPS_MessageModel-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ExtensionPoint.hxx"

#include "BICEPS_DomainModel.hxx"

namespace CDM
{
  class AbstractGet: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::Extension ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // Constructors.
    //
    AbstractGet ();

    AbstractGet (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    AbstractGet (const AbstractGet& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual AbstractGet*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractGet&
    operator= (const AbstractGet& x);

    virtual 
    ~AbstractGet ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
  };

  class AbstractGetResponse: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::Extension ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // MDIBVersion
    //
    typedef ::CDM::VersionCounter MDIBVersionType;
    typedef ::xsd::cxx::tree::traits< MDIBVersionType, char > MDIBVersionTraits;

    const MDIBVersionType&
    MDIBVersion () const;

    MDIBVersionType&
    MDIBVersion ();

    void
    MDIBVersion (const MDIBVersionType& x);

    void
    MDIBVersion (::std::unique_ptr< MDIBVersionType > p);

    // Constructors.
    //
    AbstractGetResponse (const MDIBVersionType&);

    AbstractGetResponse (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    AbstractGetResponse (const AbstractGetResponse& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual AbstractGetResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractGetResponse&
    operator= (const AbstractGetResponse& x);

    virtual 
    ~AbstractGetResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    ::xsd::cxx::tree::one< MDIBVersionType > MDIBVersion_;
  };

  class GetLocalizedText: public ::CDM::AbstractGet
  {
    public:
    // Ref
    //
    typedef ::CDM::LocalizedTextRef RefType;
    typedef ::xsd::cxx::tree::traits< RefType, char > RefTraits;

    const RefType&
    Ref () const;

    RefType&
    Ref ();

    void
    Ref (const RefType& x);

    void
    Ref (::std::unique_ptr< RefType > p);

    // Version
    //
    typedef ::CDM::ReferencedVersion VersionType;
    typedef ::xsd::cxx::tree::optional< VersionType > VersionOptional;
    typedef ::xsd::cxx::tree::traits< VersionType, char > VersionTraits;

    const VersionOptional&
    Version () const;

    VersionOptional&
    Version ();

    void
    Version (const VersionType& x);

    void
    Version (const VersionOptional& x);

    void
    Version (::std::unique_ptr< VersionType > p);

    // Lang
    //
    typedef ::xml_schema::Language LangType;
    typedef ::xsd::cxx::tree::sequence< LangType > LangSequence;
    typedef LangSequence::iterator LangIterator;
    typedef LangSequence::const_iterator LangConstIterator;
    typedef ::xsd::cxx::tree::traits< LangType, char > LangTraits;

    const LangSequence&
    Lang () const;

    LangSequence&
    Lang ();

    void
    Lang (const LangSequence& s);

    // Constructors.
    //
    GetLocalizedText (const RefType&);

    GetLocalizedText (::std::unique_ptr< RefType >);

    GetLocalizedText (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    GetLocalizedText (const GetLocalizedText& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual GetLocalizedText*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetLocalizedText&
    operator= (const GetLocalizedText& x);

    virtual 
    ~GetLocalizedText ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< RefType > Ref_;
    VersionOptional Version_;
    LangSequence Lang_;
  };

  class GetLocalizedTextResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // Text
    //
    typedef ::CDM::Text TextType;
    typedef ::xsd::cxx::tree::sequence< TextType > TextSequence;
    typedef TextSequence::iterator TextIterator;
    typedef TextSequence::const_iterator TextConstIterator;
    typedef ::xsd::cxx::tree::traits< TextType, char > TextTraits;

    const TextSequence&
    Text () const;

    TextSequence&
    Text ();

    void
    Text (const TextSequence& s);

    // Constructors.
    //
    GetLocalizedTextResponse (const MDIBVersionType&);

    GetLocalizedTextResponse (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    GetLocalizedTextResponse (const GetLocalizedTextResponse& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    virtual GetLocalizedTextResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetLocalizedTextResponse&
    operator= (const GetLocalizedTextResponse& x);

    virtual 
    ~GetLocalizedTextResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    TextSequence Text_;
  };

  class GetSupportedLanguages: public ::CDM::AbstractGet
  {
    public:
    // Constructors.
    //
    GetSupportedLanguages ();

    GetSupportedLanguages (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    GetSupportedLanguages (const GetSupportedLanguages& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual GetSupportedLanguages*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~GetSupportedLanguages ();
  };

  class GetSupportedLanguagesResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // Lang
    //
    typedef ::xml_schema::Language LangType;
    typedef ::xsd::cxx::tree::sequence< LangType > LangSequence;
    typedef LangSequence::iterator LangIterator;
    typedef LangSequence::const_iterator LangConstIterator;
    typedef ::xsd::cxx::tree::traits< LangType, char > LangTraits;

    const LangSequence&
    Lang () const;

    LangSequence&
    Lang ();

    void
    Lang (const LangSequence& s);

    // Constructors.
    //
    GetSupportedLanguagesResponse (const MDIBVersionType&);

    GetSupportedLanguagesResponse (const ::xercesc::DOMElement& e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    GetSupportedLanguagesResponse (const GetSupportedLanguagesResponse& x,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    virtual GetSupportedLanguagesResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetSupportedLanguagesResponse&
    operator= (const GetSupportedLanguagesResponse& x);

    virtual 
    ~GetSupportedLanguagesResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    LangSequence Lang_;
  };

  class GetDescriptorsFromArchive: public ::CDM::AbstractGet
  {
    public:
    // DescriptorRevision
    //
    typedef ::CDM::ReferencedVersion DescriptorRevisionType;
    typedef ::xsd::cxx::tree::optional< DescriptorRevisionType > DescriptorRevisionOptional;
    typedef ::xsd::cxx::tree::traits< DescriptorRevisionType, char > DescriptorRevisionTraits;

    const DescriptorRevisionOptional&
    DescriptorRevision () const;

    DescriptorRevisionOptional&
    DescriptorRevision ();

    void
    DescriptorRevision (const DescriptorRevisionType& x);

    void
    DescriptorRevision (const DescriptorRevisionOptional& x);

    void
    DescriptorRevision (::std::unique_ptr< DescriptorRevisionType > p);

    // TimeFrame
    //
    typedef ::CDM::TimeFrame TimeFrameType;
    typedef ::xsd::cxx::tree::optional< TimeFrameType > TimeFrameOptional;
    typedef ::xsd::cxx::tree::traits< TimeFrameType, char > TimeFrameTraits;

    const TimeFrameOptional&
    TimeFrame () const;

    TimeFrameOptional&
    TimeFrame ();

    void
    TimeFrame (const TimeFrameType& x);

    void
    TimeFrame (const TimeFrameOptional& x);

    void
    TimeFrame (::std::unique_ptr< TimeFrameType > p);

    // Handle
    //
    typedef ::CDM::HandleRef HandleType;
    typedef ::xsd::cxx::tree::sequence< HandleType > HandleSequence;
    typedef HandleSequence::iterator HandleIterator;
    typedef HandleSequence::const_iterator HandleConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

    const HandleSequence&
    Handle () const;

    HandleSequence&
    Handle ();

    void
    Handle (const HandleSequence& s);

    // Constructors.
    //
    GetDescriptorsFromArchive ();

    GetDescriptorsFromArchive (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    GetDescriptorsFromArchive (const GetDescriptorsFromArchive& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    virtual GetDescriptorsFromArchive*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetDescriptorsFromArchive&
    operator= (const GetDescriptorsFromArchive& x);

    virtual 
    ~GetDescriptorsFromArchive ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DescriptorRevisionOptional DescriptorRevision_;
    TimeFrameOptional TimeFrame_;
    HandleSequence Handle_;
  };

  class GetDescriptorsFromArchiveResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // Descriptor
    //
    typedef ::CDM::AbstractDescriptor DescriptorType;
    typedef ::xsd::cxx::tree::sequence< DescriptorType > DescriptorSequence;
    typedef DescriptorSequence::iterator DescriptorIterator;
    typedef DescriptorSequence::const_iterator DescriptorConstIterator;
    typedef ::xsd::cxx::tree::traits< DescriptorType, char > DescriptorTraits;

    const DescriptorSequence&
    Descriptor () const;

    DescriptorSequence&
    Descriptor ();

    void
    Descriptor (const DescriptorSequence& s);

    // Constructors.
    //
    GetDescriptorsFromArchiveResponse (const MDIBVersionType&);

    GetDescriptorsFromArchiveResponse (const ::xercesc::DOMElement& e,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

    GetDescriptorsFromArchiveResponse (const GetDescriptorsFromArchiveResponse& x,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

    virtual GetDescriptorsFromArchiveResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetDescriptorsFromArchiveResponse&
    operator= (const GetDescriptorsFromArchiveResponse& x);

    virtual 
    ~GetDescriptorsFromArchiveResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DescriptorSequence Descriptor_;
  };

  class GetStatesFromArchive: public ::CDM::AbstractGet
  {
    public:
    // StateRevision
    //
    typedef ::CDM::ReferencedVersion StateRevisionType;
    typedef ::xsd::cxx::tree::traits< StateRevisionType, char > StateRevisionTraits;

    const StateRevisionType&
    StateRevision () const;

    StateRevisionType&
    StateRevision ();

    void
    StateRevision (const StateRevisionType& x);

    void
    StateRevision (::std::unique_ptr< StateRevisionType > p);

    // TimeFrame
    //
    typedef ::CDM::TimeFrame TimeFrameType;
    typedef ::xsd::cxx::tree::optional< TimeFrameType > TimeFrameOptional;
    typedef ::xsd::cxx::tree::traits< TimeFrameType, char > TimeFrameTraits;

    const TimeFrameOptional&
    TimeFrame () const;

    TimeFrameOptional&
    TimeFrame ();

    void
    TimeFrame (const TimeFrameType& x);

    void
    TimeFrame (const TimeFrameOptional& x);

    void
    TimeFrame (::std::unique_ptr< TimeFrameType > p);

    // Handle
    //
    typedef ::CDM::HandleRef HandleType;
    typedef ::xsd::cxx::tree::sequence< HandleType > HandleSequence;
    typedef HandleSequence::iterator HandleIterator;
    typedef HandleSequence::const_iterator HandleConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleType, char > HandleTraits;

    const HandleSequence&
    Handle () const;

    HandleSequence&
    Handle ();

    void
    Handle (const HandleSequence& s);

    // Constructors.
    //
    GetStatesFromArchive (const StateRevisionType&);

    GetStatesFromArchive (::std::unique_ptr< StateRevisionType >);

    GetStatesFromArchive (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    GetStatesFromArchive (const GetStatesFromArchive& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual GetStatesFromArchive*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetStatesFromArchive&
    operator= (const GetStatesFromArchive& x);

    virtual 
    ~GetStatesFromArchive ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< StateRevisionType > StateRevision_;
    TimeFrameOptional TimeFrame_;
    HandleSequence Handle_;
  };

  class GetStatesFromArchiveResponse: public ::CDM::AbstractGet
  {
    public:
    // State
    //
    typedef ::CDM::AbstractState StateType;
    typedef ::xsd::cxx::tree::sequence< StateType > StateSequence;
    typedef StateSequence::iterator StateIterator;
    typedef StateSequence::const_iterator StateConstIterator;
    typedef ::xsd::cxx::tree::traits< StateType, char > StateTraits;

    const StateSequence&
    State () const;

    StateSequence&
    State ();

    void
    State (const StateSequence& s);

    // Constructors.
    //
    GetStatesFromArchiveResponse ();

    GetStatesFromArchiveResponse (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    GetStatesFromArchiveResponse (const GetStatesFromArchiveResponse& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    virtual GetStatesFromArchiveResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetStatesFromArchiveResponse&
    operator= (const GetStatesFromArchiveResponse& x);

    virtual 
    ~GetStatesFromArchiveResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    StateSequence State_;
  };

  class TimeFrame: public ::xml_schema::Type
  {
    public:
    // Start
    //
    typedef ::CDM::Timestamp StartType;
    typedef ::xsd::cxx::tree::optional< StartType > StartOptional;
    typedef ::xsd::cxx::tree::traits< StartType, char > StartTraits;

    const StartOptional&
    Start () const;

    StartOptional&
    Start ();

    void
    Start (const StartType& x);

    void
    Start (const StartOptional& x);

    void
    Start (::std::unique_ptr< StartType > p);

    // End
    //
    typedef ::CDM::Timestamp EndType;
    typedef ::xsd::cxx::tree::optional< EndType > EndOptional;
    typedef ::xsd::cxx::tree::traits< EndType, char > EndTraits;

    const EndOptional&
    End () const;

    EndOptional&
    End ();

    void
    End (const EndType& x);

    void
    End (const EndOptional& x);

    void
    End (::std::unique_ptr< EndType > p);

    // Constructors.
    //
    TimeFrame ();

    TimeFrame (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    TimeFrame (const TimeFrame& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    virtual TimeFrame*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    TimeFrame&
    operator= (const TimeFrame& x);

    virtual 
    ~TimeFrame ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    StartOptional Start_;
    EndOptional End_;
  };

  class TransactionID: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >
  {
    public:
    // Constructors.
    //
    TransactionID (const ::xml_schema::UnsignedInt&);

    TransactionID (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    TransactionID (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    TransactionID (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    TransactionID (const TransactionID& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    virtual TransactionID*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~TransactionID ();
  };

  class InvocationState: public ::xml_schema::String
  {
    public:
    enum Value
    {
      Wait,
      Start,
      Cnclld,
      CnclldMan,
      Fin,
      Fail
    };

    InvocationState (Value v);

    InvocationState (const char* v);

    InvocationState (const ::std::string& v);

    InvocationState (const ::xml_schema::String& v);

    InvocationState (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    InvocationState (const ::xercesc::DOMAttr& a,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    InvocationState (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    InvocationState (const InvocationState& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    virtual InvocationState*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    InvocationState&
    operator= (Value v);

    virtual
    operator Value () const
    {
      return _xsd_InvocationState_convert ();
    }

    protected:
    Value
    _xsd_InvocationState_convert () const;

    public:
    static const char* const _xsd_InvocationState_literals_[6];
    static const Value _xsd_InvocationState_indexes_[6];
  };

  class ArgumentType: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::Extension ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // ArgValue
    //
    typedef ::xml_schema::SimpleType ArgValueType;
    typedef ::xsd::cxx::tree::traits< ArgValueType, char > ArgValueTraits;

    const ArgValueType&
    ArgValue () const;

    ArgValueType&
    ArgValue ();

    void
    ArgValue (const ArgValueType& x);

    void
    ArgValue (::std::unique_ptr< ArgValueType > p);

    // Constructors.
    //
    ArgumentType (const ArgValueType&);

    ArgumentType (::std::unique_ptr< ArgValueType >);

    ArgumentType (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    ArgumentType (const ArgumentType& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    virtual ArgumentType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ArgumentType&
    operator= (const ArgumentType& x);

    virtual 
    ~ArgumentType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    ::xsd::cxx::tree::one< ArgValueType > ArgValue_;
  };

  class AbstractSet: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::Extension ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // OperationHandleRef
    //
    typedef ::CDM::HandleRef OperationHandleRefType;
    typedef ::xsd::cxx::tree::traits< OperationHandleRefType, char > OperationHandleRefTraits;

    const OperationHandleRefType&
    OperationHandleRef () const;

    OperationHandleRefType&
    OperationHandleRef ();

    void
    OperationHandleRef (const OperationHandleRefType& x);

    void
    OperationHandleRef (::std::unique_ptr< OperationHandleRefType > p);

    // Constructors.
    //
    AbstractSet (const OperationHandleRefType&);

    AbstractSet (::std::unique_ptr< OperationHandleRefType >);

    AbstractSet (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    AbstractSet (const AbstractSet& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual AbstractSet*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractSet&
    operator= (const AbstractSet& x);

    virtual 
    ~AbstractSet ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    ::xsd::cxx::tree::one< OperationHandleRefType > OperationHandleRef_;
  };

  class AbstractSetResponse: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::Extension ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // TransactionId
    //
    typedef ::CDM::TransactionID TransactionIdType;
    typedef ::xsd::cxx::tree::traits< TransactionIdType, char > TransactionIdTraits;

    const TransactionIdType&
    TransactionId () const;

    TransactionIdType&
    TransactionId ();

    void
    TransactionId (const TransactionIdType& x);

    void
    TransactionId (::std::unique_ptr< TransactionIdType > p);

    // InvocationState
    //
    typedef ::CDM::InvocationState InvocationStateType;
    typedef ::xsd::cxx::tree::traits< InvocationStateType, char > InvocationStateTraits;

    const InvocationStateType&
    InvocationState () const;

    InvocationStateType&
    InvocationState ();

    void
    InvocationState (const InvocationStateType& x);

    void
    InvocationState (::std::unique_ptr< InvocationStateType > p);

    // OperationError
    //
    typedef ::CDM::InvocationError OperationErrorType;
    typedef ::xsd::cxx::tree::optional< OperationErrorType > OperationErrorOptional;
    typedef ::xsd::cxx::tree::traits< OperationErrorType, char > OperationErrorTraits;

    const OperationErrorOptional&
    OperationError () const;

    OperationErrorOptional&
    OperationError ();

    void
    OperationError (const OperationErrorType& x);

    void
    OperationError (const OperationErrorOptional& x);

    void
    OperationError (::std::unique_ptr< OperationErrorType > p);

    // OperationErrorMessage
    //
    typedef ::xml_schema::String OperationErrorMessageType;
    typedef ::xsd::cxx::tree::optional< OperationErrorMessageType > OperationErrorMessageOptional;
    typedef ::xsd::cxx::tree::traits< OperationErrorMessageType, char > OperationErrorMessageTraits;

    const OperationErrorMessageOptional&
    OperationErrorMessage () const;

    OperationErrorMessageOptional&
    OperationErrorMessage ();

    void
    OperationErrorMessage (const OperationErrorMessageType& x);

    void
    OperationErrorMessage (const OperationErrorMessageOptional& x);

    void
    OperationErrorMessage (::std::unique_ptr< OperationErrorMessageType > p);

    // MDIBVersion
    //
    typedef ::CDM::VersionCounter MDIBVersionType;
    typedef ::xsd::cxx::tree::traits< MDIBVersionType, char > MDIBVersionTraits;

    const MDIBVersionType&
    MDIBVersion () const;

    MDIBVersionType&
    MDIBVersion ();

    void
    MDIBVersion (const MDIBVersionType& x);

    void
    MDIBVersion (::std::unique_ptr< MDIBVersionType > p);

    // Constructors.
    //
    AbstractSetResponse (const TransactionIdType&,
                         const InvocationStateType&,
                         const MDIBVersionType&);

    AbstractSetResponse (::std::unique_ptr< TransactionIdType >,
                         ::std::unique_ptr< InvocationStateType >,
                         const MDIBVersionType&);

    AbstractSetResponse (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    AbstractSetResponse (const AbstractSetResponse& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual AbstractSetResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractSetResponse&
    operator= (const AbstractSetResponse& x);

    virtual 
    ~AbstractSetResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    ::xsd::cxx::tree::one< TransactionIdType > TransactionId_;
    ::xsd::cxx::tree::one< InvocationStateType > InvocationState_;
    OperationErrorOptional OperationError_;
    OperationErrorMessageOptional OperationErrorMessage_;
    ::xsd::cxx::tree::one< MDIBVersionType > MDIBVersion_;
  };

  class AbstractReport: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::Extension ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // MDIBVersion
    //
    typedef ::CDM::VersionCounter MDIBVersionType;
    typedef ::xsd::cxx::tree::traits< MDIBVersionType, char > MDIBVersionTraits;

    const MDIBVersionType&
    MDIBVersion () const;

    MDIBVersionType&
    MDIBVersion ();

    void
    MDIBVersion (const MDIBVersionType& x);

    void
    MDIBVersion (::std::unique_ptr< MDIBVersionType > p);

    // Constructors.
    //
    AbstractReport (const MDIBVersionType&);

    AbstractReport (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    AbstractReport (const AbstractReport& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual AbstractReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractReport&
    operator= (const AbstractReport& x);

    virtual 
    ~AbstractReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    ::xsd::cxx::tree::one< MDIBVersionType > MDIBVersion_;
  };

  class AbstractReportPart: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::Extension ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // SourceMDS
    //
    typedef ::CDM::HandleRef SourceMDSType;
    typedef ::xsd::cxx::tree::optional< SourceMDSType > SourceMDSOptional;
    typedef ::xsd::cxx::tree::traits< SourceMDSType, char > SourceMDSTraits;

    const SourceMDSOptional&
    SourceMDS () const;

    SourceMDSOptional&
    SourceMDS ();

    void
    SourceMDS (const SourceMDSType& x);

    void
    SourceMDS (const SourceMDSOptional& x);

    void
    SourceMDS (::std::unique_ptr< SourceMDSType > p);

    // Constructors.
    //
    AbstractReportPart ();

    AbstractReportPart (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    AbstractReportPart (const AbstractReportPart& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    virtual AbstractReportPart*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractReportPart&
    operator= (const AbstractReportPart& x);

    virtual 
    ~AbstractReportPart ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    SourceMDSOptional SourceMDS_;
  };

  class MetricReportPart: public ::CDM::AbstractReportPart
  {
    public:
    // MetricState
    //
    typedef ::CDM::AbstractMetricState MetricStateType;
    typedef ::xsd::cxx::tree::sequence< MetricStateType > MetricStateSequence;
    typedef MetricStateSequence::iterator MetricStateIterator;
    typedef MetricStateSequence::const_iterator MetricStateConstIterator;
    typedef ::xsd::cxx::tree::traits< MetricStateType, char > MetricStateTraits;

    const MetricStateSequence&
    MetricState () const;

    MetricStateSequence&
    MetricState ();

    void
    MetricState (const MetricStateSequence& s);

    // Constructors.
    //
    MetricReportPart ();

    MetricReportPart (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    MetricReportPart (const MetricReportPart& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual MetricReportPart*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    MetricReportPart&
    operator= (const MetricReportPart& x);

    virtual 
    ~MetricReportPart ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    MetricStateSequence MetricState_;
  };

  class AbstractMetricReport: public ::CDM::AbstractReport
  {
    public:
    // ReportPart
    //
    typedef ::CDM::MetricReportPart ReportPartType;
    typedef ::xsd::cxx::tree::sequence< ReportPartType > ReportPartSequence;
    typedef ReportPartSequence::iterator ReportPartIterator;
    typedef ReportPartSequence::const_iterator ReportPartConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportPartType, char > ReportPartTraits;

    const ReportPartSequence&
    ReportPart () const;

    ReportPartSequence&
    ReportPart ();

    void
    ReportPart (const ReportPartSequence& s);

    // Constructors.
    //
    AbstractMetricReport (const MDIBVersionType&);

    AbstractMetricReport (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    AbstractMetricReport (const AbstractMetricReport& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual AbstractMetricReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractMetricReport&
    operator= (const AbstractMetricReport& x);

    virtual 
    ~AbstractMetricReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportPartSequence ReportPart_;
  };

  class AlertReportPart: public ::CDM::AbstractReportPart
  {
    public:
    // AlertState
    //
    typedef ::CDM::AbstractAlertState AlertStateType;
    typedef ::xsd::cxx::tree::sequence< AlertStateType > AlertStateSequence;
    typedef AlertStateSequence::iterator AlertStateIterator;
    typedef AlertStateSequence::const_iterator AlertStateConstIterator;
    typedef ::xsd::cxx::tree::traits< AlertStateType, char > AlertStateTraits;

    const AlertStateSequence&
    AlertState () const;

    AlertStateSequence&
    AlertState ();

    void
    AlertState (const AlertStateSequence& s);

    // Constructors.
    //
    AlertReportPart ();

    AlertReportPart (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    AlertReportPart (const AlertReportPart& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    virtual AlertReportPart*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AlertReportPart&
    operator= (const AlertReportPart& x);

    virtual 
    ~AlertReportPart ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    AlertStateSequence AlertState_;
  };

  class AbstractAlertReport: public ::CDM::AbstractReport
  {
    public:
    // AlertReportDetail
    //
    typedef ::CDM::AlertReportPart AlertReportDetailType;
    typedef ::xsd::cxx::tree::sequence< AlertReportDetailType > AlertReportDetailSequence;
    typedef AlertReportDetailSequence::iterator AlertReportDetailIterator;
    typedef AlertReportDetailSequence::const_iterator AlertReportDetailConstIterator;
    typedef ::xsd::cxx::tree::traits< AlertReportDetailType, char > AlertReportDetailTraits;

    const AlertReportDetailSequence&
    AlertReportDetail () const;

    AlertReportDetailSequence&
    AlertReportDetail ();

    void
    AlertReportDetail (const AlertReportDetailSequence& s);

    // Constructors.
    //
    AbstractAlertReport (const MDIBVersionType&);

    AbstractAlertReport (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    AbstractAlertReport (const AbstractAlertReport& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual AbstractAlertReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractAlertReport&
    operator= (const AbstractAlertReport& x);

    virtual 
    ~AbstractAlertReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    AlertReportDetailSequence AlertReportDetail_;
  };

  class ContextChangedReportPart: public ::CDM::AbstractReportPart
  {
    public:
    // ChangedContextState
    //
    typedef ::CDM::HandleRef ChangedContextStateType;
    typedef ::xsd::cxx::tree::sequence< ChangedContextStateType > ChangedContextStateSequence;
    typedef ChangedContextStateSequence::iterator ChangedContextStateIterator;
    typedef ChangedContextStateSequence::const_iterator ChangedContextStateConstIterator;
    typedef ::xsd::cxx::tree::traits< ChangedContextStateType, char > ChangedContextStateTraits;

    const ChangedContextStateSequence&
    ChangedContextState () const;

    ChangedContextStateSequence&
    ChangedContextState ();

    void
    ChangedContextState (const ChangedContextStateSequence& s);

    // Constructors.
    //
    ContextChangedReportPart ();

    ContextChangedReportPart (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    ContextChangedReportPart (const ContextChangedReportPart& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    virtual ContextChangedReportPart*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ContextChangedReportPart&
    operator= (const ContextChangedReportPart& x);

    virtual 
    ~ContextChangedReportPart ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ChangedContextStateSequence ChangedContextState_;
  };

  class AbstractContextChangedReport: public ::CDM::AbstractReport
  {
    public:
    // ReportPart
    //
    typedef ::CDM::ContextChangedReportPart ReportPartType;
    typedef ::xsd::cxx::tree::sequence< ReportPartType > ReportPartSequence;
    typedef ReportPartSequence::iterator ReportPartIterator;
    typedef ReportPartSequence::const_iterator ReportPartConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportPartType, char > ReportPartTraits;

    const ReportPartSequence&
    ReportPart () const;

    ReportPartSequence&
    ReportPart ();

    void
    ReportPart (const ReportPartSequence& s);

    // Constructors.
    //
    AbstractContextChangedReport (const MDIBVersionType&);

    AbstractContextChangedReport (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    AbstractContextChangedReport (const AbstractContextChangedReport& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    virtual AbstractContextChangedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    AbstractContextChangedReport&
    operator= (const AbstractContextChangedReport& x);

    virtual 
    ~AbstractContextChangedReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportPartSequence ReportPart_;
  };

  class InvocationError: public ::xml_schema::String
  {
    public:
    enum Value
    {
      Unspec,
      Unkn,
      Inv,
      Oth
    };

    InvocationError (Value v);

    InvocationError (const char* v);

    InvocationError (const ::std::string& v);

    InvocationError (const ::xml_schema::String& v);

    InvocationError (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    InvocationError (const ::xercesc::DOMAttr& a,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    InvocationError (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    InvocationError (const InvocationError& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    virtual InvocationError*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    InvocationError&
    operator= (Value v);

    virtual
    operator Value () const
    {
      return _xsd_InvocationError_convert ();
    }

    protected:
    Value
    _xsd_InvocationError_convert () const;

    public:
    static const char* const _xsd_InvocationError_literals_[4];
    static const Value _xsd_InvocationError_indexes_[4];
  };

  class OperationDescriptionModificationReportPart: public ::CDM::AbstractReportPart
  {
    public:
    // OperationDescription
    //
    typedef ::CDM::AbstractOperationDescriptor OperationDescriptionType;
    typedef ::xsd::cxx::tree::sequence< OperationDescriptionType > OperationDescriptionSequence;
    typedef OperationDescriptionSequence::iterator OperationDescriptionIterator;
    typedef OperationDescriptionSequence::const_iterator OperationDescriptionConstIterator;
    typedef ::xsd::cxx::tree::traits< OperationDescriptionType, char > OperationDescriptionTraits;

    const OperationDescriptionSequence&
    OperationDescription () const;

    OperationDescriptionSequence&
    OperationDescription ();

    void
    OperationDescription (const OperationDescriptionSequence& s);

    // Constructors.
    //
    OperationDescriptionModificationReportPart ();

    OperationDescriptionModificationReportPart (const ::xercesc::DOMElement& e,
                                                ::xml_schema::Flags f = 0,
                                                ::xml_schema::Container* c = 0);

    OperationDescriptionModificationReportPart (const OperationDescriptionModificationReportPart& x,
                                                ::xml_schema::Flags f = 0,
                                                ::xml_schema::Container* c = 0);

    virtual OperationDescriptionModificationReportPart*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    OperationDescriptionModificationReportPart&
    operator= (const OperationDescriptionModificationReportPart& x);

    virtual 
    ~OperationDescriptionModificationReportPart ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    OperationDescriptionSequence OperationDescription_;
  };

  class OperationDescriptionModificationReport: public ::CDM::AbstractReport
  {
    public:
    // ReportDetail
    //
    typedef ::CDM::OperationDescriptionModificationReportPart ReportDetailType;
    typedef ::xsd::cxx::tree::sequence< ReportDetailType > ReportDetailSequence;
    typedef ReportDetailSequence::iterator ReportDetailIterator;
    typedef ReportDetailSequence::const_iterator ReportDetailConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportDetailType, char > ReportDetailTraits;

    const ReportDetailSequence&
    ReportDetail () const;

    ReportDetailSequence&
    ReportDetail ();

    void
    ReportDetail (const ReportDetailSequence& s);

    // Constructors.
    //
    OperationDescriptionModificationReport (const MDIBVersionType&);

    OperationDescriptionModificationReport (const ::xercesc::DOMElement& e,
                                            ::xml_schema::Flags f = 0,
                                            ::xml_schema::Container* c = 0);

    OperationDescriptionModificationReport (const OperationDescriptionModificationReport& x,
                                            ::xml_schema::Flags f = 0,
                                            ::xml_schema::Container* c = 0);

    virtual OperationDescriptionModificationReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    OperationDescriptionModificationReport&
    operator= (const OperationDescriptionModificationReport& x);

    virtual 
    ~OperationDescriptionModificationReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportDetailSequence ReportDetail_;
  };

  class OperationInvokedReportPart: public ::CDM::AbstractReportPart
  {
    public:
    // TransactionId
    //
    typedef ::CDM::TransactionID TransactionIdType;
    typedef ::xsd::cxx::tree::traits< TransactionIdType, char > TransactionIdTraits;

    const TransactionIdType&
    TransactionId () const;

    TransactionIdType&
    TransactionId ();

    void
    TransactionId (const TransactionIdType& x);

    void
    TransactionId (::std::unique_ptr< TransactionIdType > p);

    // OperationHandleRef
    //
    typedef ::CDM::HandleRef OperationHandleRefType;
    typedef ::xsd::cxx::tree::traits< OperationHandleRefType, char > OperationHandleRefTraits;

    const OperationHandleRefType&
    OperationHandleRef () const;

    OperationHandleRefType&
    OperationHandleRef ();

    void
    OperationHandleRef (const OperationHandleRefType& x);

    void
    OperationHandleRef (::std::unique_ptr< OperationHandleRefType > p);

    // OperationTarget
    //
    typedef ::CDM::HandleRef OperationTargetType;
    typedef ::xsd::cxx::tree::optional< OperationTargetType > OperationTargetOptional;
    typedef ::xsd::cxx::tree::traits< OperationTargetType, char > OperationTargetTraits;

    const OperationTargetOptional&
    OperationTarget () const;

    OperationTargetOptional&
    OperationTarget ();

    void
    OperationTarget (const OperationTargetType& x);

    void
    OperationTarget (const OperationTargetOptional& x);

    void
    OperationTarget (::std::unique_ptr< OperationTargetType > p);

    // OperationState
    //
    typedef ::CDM::InvocationState OperationStateType;
    typedef ::xsd::cxx::tree::traits< OperationStateType, char > OperationStateTraits;

    const OperationStateType&
    OperationState () const;

    OperationStateType&
    OperationState ();

    void
    OperationState (const OperationStateType& x);

    void
    OperationState (::std::unique_ptr< OperationStateType > p);

    // OperationError
    //
    typedef ::CDM::InvocationError OperationErrorType;
    typedef ::xsd::cxx::tree::optional< OperationErrorType > OperationErrorOptional;
    typedef ::xsd::cxx::tree::traits< OperationErrorType, char > OperationErrorTraits;

    const OperationErrorOptional&
    OperationError () const;

    OperationErrorOptional&
    OperationError ();

    void
    OperationError (const OperationErrorType& x);

    void
    OperationError (const OperationErrorOptional& x);

    void
    OperationError (::std::unique_ptr< OperationErrorType > p);

    // OperationErrorMessage
    //
    typedef ::xml_schema::String OperationErrorMessageType;
    typedef ::xsd::cxx::tree::optional< OperationErrorMessageType > OperationErrorMessageOptional;
    typedef ::xsd::cxx::tree::traits< OperationErrorMessageType, char > OperationErrorMessageTraits;

    const OperationErrorMessageOptional&
    OperationErrorMessage () const;

    OperationErrorMessageOptional&
    OperationErrorMessage ();

    void
    OperationErrorMessage (const OperationErrorMessageType& x);

    void
    OperationErrorMessage (const OperationErrorMessageOptional& x);

    void
    OperationErrorMessage (::std::unique_ptr< OperationErrorMessageType > p);

    // Constructors.
    //
    OperationInvokedReportPart (const TransactionIdType&,
                                const OperationHandleRefType&,
                                const OperationStateType&);

    OperationInvokedReportPart (::std::unique_ptr< TransactionIdType >,
                                ::std::unique_ptr< OperationHandleRefType >,
                                ::std::unique_ptr< OperationStateType >);

    OperationInvokedReportPart (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

    OperationInvokedReportPart (const OperationInvokedReportPart& x,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

    virtual OperationInvokedReportPart*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    OperationInvokedReportPart&
    operator= (const OperationInvokedReportPart& x);

    virtual 
    ~OperationInvokedReportPart ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< TransactionIdType > TransactionId_;
    ::xsd::cxx::tree::one< OperationHandleRefType > OperationHandleRef_;
    OperationTargetOptional OperationTarget_;
    ::xsd::cxx::tree::one< OperationStateType > OperationState_;
    OperationErrorOptional OperationError_;
    OperationErrorMessageOptional OperationErrorMessage_;
  };

  class OperationalStateChangedReportPart: public ::CDM::AbstractReportPart
  {
    public:
    // Operation
    //
    typedef ::CDM::OperationState OperationType;
    typedef ::xsd::cxx::tree::sequence< OperationType > OperationSequence;
    typedef OperationSequence::iterator OperationIterator;
    typedef OperationSequence::const_iterator OperationConstIterator;
    typedef ::xsd::cxx::tree::traits< OperationType, char > OperationTraits;

    const OperationSequence&
    Operation () const;

    OperationSequence&
    Operation ();

    void
    Operation (const OperationSequence& s);

    // Constructors.
    //
    OperationalStateChangedReportPart ();

    OperationalStateChangedReportPart (const ::xercesc::DOMElement& e,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

    OperationalStateChangedReportPart (const OperationalStateChangedReportPart& x,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

    virtual OperationalStateChangedReportPart*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    OperationalStateChangedReportPart&
    operator= (const OperationalStateChangedReportPart& x);

    virtual 
    ~OperationalStateChangedReportPart ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    OperationSequence Operation_;
  };

  class DescriptionModificationType: public ::xml_schema::String
  {
    public:
    enum Value
    {
      Crt,
      Upt,
      Del
    };

    DescriptionModificationType (Value v);

    DescriptionModificationType (const char* v);

    DescriptionModificationType (const ::std::string& v);

    DescriptionModificationType (const ::xml_schema::String& v);

    DescriptionModificationType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    DescriptionModificationType (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    DescriptionModificationType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    DescriptionModificationType (const DescriptionModificationType& x,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    virtual DescriptionModificationType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DescriptionModificationType&
    operator= (Value v);

    virtual
    operator Value () const
    {
      return _xsd_DescriptionModificationType_convert ();
    }

    protected:
    Value
    _xsd_DescriptionModificationType_convert () const;

    public:
    static const char* const _xsd_DescriptionModificationType_literals_[3];
    static const Value _xsd_DescriptionModificationType_indexes_[3];
  };

  class DescriptionModificationReportPart: public ::CDM::AbstractReportPart
  {
    public:
    // Descriptor
    //
    typedef ::CDM::AbstractDescriptor DescriptorType;
    typedef ::xsd::cxx::tree::traits< DescriptorType, char > DescriptorTraits;

    const DescriptorType&
    Descriptor () const;

    DescriptorType&
    Descriptor ();

    void
    Descriptor (const DescriptorType& x);

    void
    Descriptor (::std::unique_ptr< DescriptorType > p);

    // ParentDescriptor
    //
    typedef ::CDM::HandleRef ParentDescriptorType;
    typedef ::xsd::cxx::tree::traits< ParentDescriptorType, char > ParentDescriptorTraits;

    const ParentDescriptorType&
    ParentDescriptor () const;

    ParentDescriptorType&
    ParentDescriptor ();

    void
    ParentDescriptor (const ParentDescriptorType& x);

    void
    ParentDescriptor (::std::unique_ptr< ParentDescriptorType > p);

    // ModificationType
    //
    typedef ::CDM::DescriptionModificationType ModificationTypeType;
    typedef ::xsd::cxx::tree::optional< ModificationTypeType > ModificationTypeOptional;
    typedef ::xsd::cxx::tree::traits< ModificationTypeType, char > ModificationTypeTraits;

    const ModificationTypeOptional&
    ModificationType () const;

    ModificationTypeOptional&
    ModificationType ();

    void
    ModificationType (const ModificationTypeType& x);

    void
    ModificationType (const ModificationTypeOptional& x);

    void
    ModificationType (::std::unique_ptr< ModificationTypeType > p);

    // Constructors.
    //
    DescriptionModificationReportPart (const DescriptorType&,
                                       const ParentDescriptorType&);

    DescriptionModificationReportPart (::std::unique_ptr< DescriptorType >,
                                       const ParentDescriptorType&);

    DescriptionModificationReportPart (const ::xercesc::DOMElement& e,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

    DescriptionModificationReportPart (const DescriptionModificationReportPart& x,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

    virtual DescriptionModificationReportPart*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DescriptionModificationReportPart&
    operator= (const DescriptionModificationReportPart& x);

    virtual 
    ~DescriptionModificationReportPart ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< DescriptorType > Descriptor_;
    ::xsd::cxx::tree::one< ParentDescriptorType > ParentDescriptor_;
    ModificationTypeOptional ModificationType_;
  };

  class DescriptionModificationReport: public ::CDM::AbstractReport
  {
    public:
    // ReportDetail
    //
    typedef ::CDM::DescriptionModificationReportPart ReportDetailType;
    typedef ::xsd::cxx::tree::sequence< ReportDetailType > ReportDetailSequence;
    typedef ReportDetailSequence::iterator ReportDetailIterator;
    typedef ReportDetailSequence::const_iterator ReportDetailConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportDetailType, char > ReportDetailTraits;

    const ReportDetailSequence&
    ReportDetail () const;

    ReportDetailSequence&
    ReportDetail ();

    void
    ReportDetail (const ReportDetailSequence& s);

    // Constructors.
    //
    DescriptionModificationReport (const MDIBVersionType&);

    DescriptionModificationReport (const ::xercesc::DOMElement& e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    DescriptionModificationReport (const DescriptionModificationReport& x,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    virtual DescriptionModificationReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DescriptionModificationReport&
    operator= (const DescriptionModificationReport& x);

    virtual 
    ~DescriptionModificationReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportDetailSequence ReportDetail_;
  };

  class MDSModificationReportPart: public ::CDM::AbstractReportPart
  {
    public:
    // MDS
    //
    typedef ::CDM::AbstractMDSDescriptor MDSType;
    typedef ::xsd::cxx::tree::sequence< MDSType > MDSSequence;
    typedef MDSSequence::iterator MDSIterator;
    typedef MDSSequence::const_iterator MDSConstIterator;
    typedef ::xsd::cxx::tree::traits< MDSType, char > MDSTraits;

    const MDSSequence&
    MDS () const;

    MDSSequence&
    MDS ();

    void
    MDS (const MDSSequence& s);

    // Constructors.
    //
    MDSModificationReportPart ();

    MDSModificationReportPart (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    MDSModificationReportPart (const MDSModificationReportPart& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    virtual MDSModificationReportPart*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    MDSModificationReportPart&
    operator= (const MDSModificationReportPart& x);

    virtual 
    ~MDSModificationReportPart ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    MDSSequence MDS_;
  };

  class MDSModificationReport: public ::CDM::AbstractReport
  {
    public:
    // ReportDetail
    //
    typedef ::CDM::MDSModificationReportPart ReportDetailType;
    typedef ::xsd::cxx::tree::sequence< ReportDetailType > ReportDetailSequence;
    typedef ReportDetailSequence::iterator ReportDetailIterator;
    typedef ReportDetailSequence::const_iterator ReportDetailConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportDetailType, char > ReportDetailTraits;

    const ReportDetailSequence&
    ReportDetail () const;

    ReportDetailSequence&
    ReportDetail ();

    void
    ReportDetail (const ReportDetailSequence& s);

    // Constructors.
    //
    MDSModificationReport (const MDIBVersionType&);

    MDSModificationReport (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    MDSModificationReport (const MDSModificationReport& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual MDSModificationReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    MDSModificationReport&
    operator= (const MDSModificationReport& x);

    virtual 
    ~MDSModificationReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportDetailSequence ReportDetail_;
  };

  class SystemErrorReportReportPart: public ::CDM::AbstractReportPart
  {
    public:
    // ErrorCode
    //
    typedef ::CDM::CodedValue ErrorCodeType;
    typedef ::xsd::cxx::tree::traits< ErrorCodeType, char > ErrorCodeTraits;

    const ErrorCodeType&
    ErrorCode () const;

    ErrorCodeType&
    ErrorCode ();

    void
    ErrorCode (const ErrorCodeType& x);

    void
    ErrorCode (::std::unique_ptr< ErrorCodeType > p);

    // ErrorInfo
    //
    typedef ::xml_schema::String ErrorInfoType;
    typedef ::xsd::cxx::tree::optional< ErrorInfoType > ErrorInfoOptional;
    typedef ::xsd::cxx::tree::traits< ErrorInfoType, char > ErrorInfoTraits;

    const ErrorInfoOptional&
    ErrorInfo () const;

    ErrorInfoOptional&
    ErrorInfo ();

    void
    ErrorInfo (const ErrorInfoType& x);

    void
    ErrorInfo (const ErrorInfoOptional& x);

    void
    ErrorInfo (::std::unique_ptr< ErrorInfoType > p);

    // Constructors.
    //
    SystemErrorReportReportPart (const ErrorCodeType&);

    SystemErrorReportReportPart (::std::unique_ptr< ErrorCodeType >);

    SystemErrorReportReportPart (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    SystemErrorReportReportPart (const SystemErrorReportReportPart& x,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    virtual SystemErrorReportReportPart*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SystemErrorReportReportPart&
    operator= (const SystemErrorReportReportPart& x);

    virtual 
    ~SystemErrorReportReportPart ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ErrorCodeType > ErrorCode_;
    ErrorInfoOptional ErrorInfo_;
  };

  class StreamElement: public ::xml_schema::Type
  {
    public:
    // Value
    //
    typedef ::CDM::AbstractMetricValue ValueType;
    typedef ::xsd::cxx::tree::optional< ValueType > ValueOptional;
    typedef ::xsd::cxx::tree::traits< ValueType, char > ValueTraits;

    const ValueOptional&
    Value () const;

    ValueOptional&
    Value ();

    void
    Value (const ValueType& x);

    void
    Value (const ValueOptional& x);

    void
    Value (::std::unique_ptr< ValueType > p);

    // Metric
    //
    typedef ::CDM::HandleRef MetricType;
    typedef ::xsd::cxx::tree::traits< MetricType, char > MetricTraits;

    const MetricType&
    Metric () const;

    MetricType&
    Metric ();

    void
    Metric (const MetricType& x);

    void
    Metric (::std::unique_ptr< MetricType > p);

    // Constructors.
    //
    StreamElement (const MetricType&);

    StreamElement (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    StreamElement (const StreamElement& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    virtual StreamElement*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    StreamElement&
    operator= (const StreamElement& x);

    virtual 
    ~StreamElement ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ValueOptional Value_;
    ::xsd::cxx::tree::one< MetricType > Metric_;
  };

  class MetricRetrievability: public ::xml_schema::String
  {
    public:
    enum Value
    {
      Get,
      Per,
      Ep,
      Strm
    };

    MetricRetrievability (Value v);

    MetricRetrievability (const char* v);

    MetricRetrievability (const ::std::string& v);

    MetricRetrievability (const ::xml_schema::String& v);

    MetricRetrievability (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    MetricRetrievability (const ::xercesc::DOMAttr& a,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    MetricRetrievability (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    MetricRetrievability (const MetricRetrievability& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual MetricRetrievability*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    MetricRetrievability&
    operator= (Value v);

    virtual
    operator Value () const
    {
      return _xsd_MetricRetrievability_convert ();
    }

    protected:
    Value
    _xsd_MetricRetrievability_convert () const;

    public:
    static const char* const _xsd_MetricRetrievability_literals_[4];
    static const Value _xsd_MetricRetrievability_indexes_[4];
  };

  class GetMDIB: public ::CDM::AbstractGet
  {
    public:
    // Constructors.
    //
    GetMDIB ();

    GetMDIB (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    GetMDIB (const GetMDIB& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    virtual GetMDIB*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~GetMDIB ();
  };

  class GetMDIBResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // MDIB
    //
    typedef ::CDM::MDIB MDIBType;
    typedef ::xsd::cxx::tree::traits< MDIBType, char > MDIBTraits;

    const MDIBType&
    MDIB () const;

    MDIBType&
    MDIB ();

    void
    MDIB (const MDIBType& x);

    void
    MDIB (::std::unique_ptr< MDIBType > p);

    // Constructors.
    //
    GetMDIBResponse (const MDIBVersionType&,
                     const MDIBType&);

    GetMDIBResponse (const MDIBVersionType&,
                     ::std::unique_ptr< MDIBType >);

    GetMDIBResponse (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    GetMDIBResponse (const GetMDIBResponse& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    virtual GetMDIBResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetMDIBResponse&
    operator= (const GetMDIBResponse& x);

    virtual 
    ~GetMDIBResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MDIBType > MDIB_;
  };

  class GetMDDescription: public ::CDM::AbstractGet
  {
    public:
    // HandleRef
    //
    typedef ::CDM::HandleRef HandleRefType;
    typedef ::xsd::cxx::tree::sequence< HandleRefType > HandleRefSequence;
    typedef HandleRefSequence::iterator HandleRefIterator;
    typedef HandleRefSequence::const_iterator HandleRefConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleRefType, char > HandleRefTraits;

    const HandleRefSequence&
    HandleRef () const;

    HandleRefSequence&
    HandleRef ();

    void
    HandleRef (const HandleRefSequence& s);

    // Constructors.
    //
    GetMDDescription ();

    GetMDDescription (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    GetMDDescription (const GetMDDescription& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual GetMDDescription*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetMDDescription&
    operator= (const GetMDDescription& x);

    virtual 
    ~GetMDDescription ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    HandleRefSequence HandleRef_;
  };

  class GetMDDescriptionResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // StaticDescription
    //
    typedef ::CDM::MDDescription StaticDescriptionType;
    typedef ::xsd::cxx::tree::traits< StaticDescriptionType, char > StaticDescriptionTraits;

    const StaticDescriptionType&
    StaticDescription () const;

    StaticDescriptionType&
    StaticDescription ();

    void
    StaticDescription (const StaticDescriptionType& x);

    void
    StaticDescription (::std::unique_ptr< StaticDescriptionType > p);

    // Constructors.
    //
    GetMDDescriptionResponse (const MDIBVersionType&,
                              const StaticDescriptionType&);

    GetMDDescriptionResponse (const MDIBVersionType&,
                              ::std::unique_ptr< StaticDescriptionType >);

    GetMDDescriptionResponse (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    GetMDDescriptionResponse (const GetMDDescriptionResponse& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    virtual GetMDDescriptionResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetMDDescriptionResponse&
    operator= (const GetMDDescriptionResponse& x);

    virtual 
    ~GetMDDescriptionResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< StaticDescriptionType > StaticDescription_;
  };

  class GetMDState: public ::CDM::AbstractGet
  {
    public:
    // HandleRef
    //
    typedef ::CDM::HandleRef HandleRefType;
    typedef ::xsd::cxx::tree::sequence< HandleRefType > HandleRefSequence;
    typedef HandleRefSequence::iterator HandleRefIterator;
    typedef HandleRefSequence::const_iterator HandleRefConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleRefType, char > HandleRefTraits;

    const HandleRefSequence&
    HandleRef () const;

    HandleRefSequence&
    HandleRef ();

    void
    HandleRef (const HandleRefSequence& s);

    // Constructors.
    //
    GetMDState ();

    GetMDState (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    GetMDState (const GetMDState& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    virtual GetMDState*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetMDState&
    operator= (const GetMDState& x);

    virtual 
    ~GetMDState ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    HandleRefSequence HandleRef_;
  };

  class GetMDStateResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // MDState
    //
    typedef ::CDM::MDState MDStateType;
    typedef ::xsd::cxx::tree::traits< MDStateType, char > MDStateTraits;

    const MDStateType&
    MDState () const;

    MDStateType&
    MDState ();

    void
    MDState (const MDStateType& x);

    void
    MDState (::std::unique_ptr< MDStateType > p);

    // Constructors.
    //
    GetMDStateResponse (const MDIBVersionType&,
                        const MDStateType&);

    GetMDStateResponse (const MDIBVersionType&,
                        ::std::unique_ptr< MDStateType >);

    GetMDStateResponse (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    GetMDStateResponse (const GetMDStateResponse& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    virtual GetMDStateResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetMDStateResponse&
    operator= (const GetMDStateResponse& x);

    virtual 
    ~GetMDStateResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MDStateType > MDState_;
  };

  class GetContextStates: public ::CDM::AbstractGet
  {
    public:
    // HandleRef
    //
    typedef ::CDM::HandleRef HandleRefType;
    typedef ::xsd::cxx::tree::sequence< HandleRefType > HandleRefSequence;
    typedef HandleRefSequence::iterator HandleRefIterator;
    typedef HandleRefSequence::const_iterator HandleRefConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleRefType, char > HandleRefTraits;

    const HandleRefSequence&
    HandleRef () const;

    HandleRefSequence&
    HandleRef ();

    void
    HandleRef (const HandleRefSequence& s);

    // Constructors.
    //
    GetContextStates ();

    GetContextStates (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    GetContextStates (const GetContextStates& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual GetContextStates*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetContextStates&
    operator= (const GetContextStates& x);

    virtual 
    ~GetContextStates ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    HandleRefSequence HandleRef_;
  };

  class GetContextStatesResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // ContextState
    //
    typedef ::CDM::AbstractContextState ContextStateType;
    typedef ::xsd::cxx::tree::sequence< ContextStateType > ContextStateSequence;
    typedef ContextStateSequence::iterator ContextStateIterator;
    typedef ContextStateSequence::const_iterator ContextStateConstIterator;
    typedef ::xsd::cxx::tree::traits< ContextStateType, char > ContextStateTraits;

    const ContextStateSequence&
    ContextState () const;

    ContextStateSequence&
    ContextState ();

    void
    ContextState (const ContextStateSequence& s);

    // Constructors.
    //
    GetContextStatesResponse (const MDIBVersionType&);

    GetContextStatesResponse (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    GetContextStatesResponse (const GetContextStatesResponse& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    virtual GetContextStatesResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetContextStatesResponse&
    operator= (const GetContextStatesResponse& x);

    virtual 
    ~GetContextStatesResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ContextStateSequence ContextState_;
  };

  class GetContainmentTree: public ::CDM::AbstractGet
  {
    public:
    // HandleRef
    //
    typedef ::CDM::HandleRef HandleRefType;
    typedef ::xsd::cxx::tree::sequence< HandleRefType > HandleRefSequence;
    typedef HandleRefSequence::iterator HandleRefIterator;
    typedef HandleRefSequence::const_iterator HandleRefConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleRefType, char > HandleRefTraits;

    const HandleRefSequence&
    HandleRef () const;

    HandleRefSequence&
    HandleRef ();

    void
    HandleRef (const HandleRefSequence& s);

    // Constructors.
    //
    GetContainmentTree ();

    GetContainmentTree (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    GetContainmentTree (const GetContainmentTree& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    virtual GetContainmentTree*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetContainmentTree&
    operator= (const GetContainmentTree& x);

    virtual 
    ~GetContainmentTree ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    HandleRefSequence HandleRef_;
  };

  class GetContainmentTreeResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // ContainmentTree
    //
    typedef ::CDM::ContainmentTree ContainmentTreeType;
    typedef ::xsd::cxx::tree::traits< ContainmentTreeType, char > ContainmentTreeTraits;

    const ContainmentTreeType&
    ContainmentTree () const;

    ContainmentTreeType&
    ContainmentTree ();

    void
    ContainmentTree (const ContainmentTreeType& x);

    void
    ContainmentTree (::std::unique_ptr< ContainmentTreeType > p);

    // Constructors.
    //
    GetContainmentTreeResponse (const MDIBVersionType&,
                                const ContainmentTreeType&);

    GetContainmentTreeResponse (const MDIBVersionType&,
                                ::std::unique_ptr< ContainmentTreeType >);

    GetContainmentTreeResponse (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

    GetContainmentTreeResponse (const GetContainmentTreeResponse& x,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

    virtual GetContainmentTreeResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetContainmentTreeResponse&
    operator= (const GetContainmentTreeResponse& x);

    virtual 
    ~GetContainmentTreeResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ContainmentTreeType > ContainmentTree_;
  };

  class GetDescriptor: public ::CDM::AbstractGet
  {
    public:
    // HandleRef
    //
    typedef ::CDM::HandleRef HandleRefType;
    typedef ::xsd::cxx::tree::sequence< HandleRefType > HandleRefSequence;
    typedef HandleRefSequence::iterator HandleRefIterator;
    typedef HandleRefSequence::const_iterator HandleRefConstIterator;
    typedef ::xsd::cxx::tree::traits< HandleRefType, char > HandleRefTraits;

    const HandleRefSequence&
    HandleRef () const;

    HandleRefSequence&
    HandleRef ();

    void
    HandleRef (const HandleRefSequence& s);

    // Constructors.
    //
    GetDescriptor ();

    GetDescriptor (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    GetDescriptor (const GetDescriptor& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    virtual GetDescriptor*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetDescriptor&
    operator= (const GetDescriptor& x);

    virtual 
    ~GetDescriptor ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    HandleRefSequence HandleRef_;
  };

  class GetDescriptorResponse: public ::CDM::AbstractGetResponse
  {
    public:
    // Descriptor
    //
    typedef ::CDM::AbstractDescriptor DescriptorType;
    typedef ::xsd::cxx::tree::sequence< DescriptorType > DescriptorSequence;
    typedef DescriptorSequence::iterator DescriptorIterator;
    typedef DescriptorSequence::const_iterator DescriptorConstIterator;
    typedef ::xsd::cxx::tree::traits< DescriptorType, char > DescriptorTraits;

    const DescriptorSequence&
    Descriptor () const;

    DescriptorSequence&
    Descriptor ();

    void
    Descriptor (const DescriptorSequence& s);

    // Constructors.
    //
    GetDescriptorResponse (const MDIBVersionType&);

    GetDescriptorResponse (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    GetDescriptorResponse (const GetDescriptorResponse& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual GetDescriptorResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    GetDescriptorResponse&
    operator= (const GetDescriptorResponse& x);

    virtual 
    ~GetDescriptorResponse ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DescriptorSequence Descriptor_;
  };

  class Text: public ::xml_schema::String
  {
    public:
    // Lang
    //
    typedef ::xml_schema::Language LangType;
    typedef ::xsd::cxx::tree::optional< LangType > LangOptional;
    typedef ::xsd::cxx::tree::traits< LangType, char > LangTraits;

    const LangOptional&
    Lang () const;

    LangOptional&
    Lang ();

    void
    Lang (const LangType& x);

    void
    Lang (const LangOptional& x);

    void
    Lang (::std::unique_ptr< LangType > p);

    // Constructors.
    //
    Text ();

    Text (const char*);

    Text (const ::std::string&);

    Text (const ::xml_schema::String&);

    Text (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    Text (const Text& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    virtual Text*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Text&
    operator= (const Text& x);

    virtual 
    ~Text ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    LangOptional Lang_;
  };

  class SetRange: public ::CDM::AbstractSet
  {
    public:
    // RequestedRange
    //
    typedef ::CDM::Range RequestedRangeType;
    typedef ::xsd::cxx::tree::traits< RequestedRangeType, char > RequestedRangeTraits;

    const RequestedRangeType&
    RequestedRange () const;

    RequestedRangeType&
    RequestedRange ();

    void
    RequestedRange (const RequestedRangeType& x);

    void
    RequestedRange (::std::unique_ptr< RequestedRangeType > p);

    // Constructors.
    //
    SetRange (const OperationHandleRefType&,
              const RequestedRangeType&);

    SetRange (const OperationHandleRefType&,
              ::std::unique_ptr< RequestedRangeType >);

    SetRange (::std::unique_ptr< OperationHandleRefType >,
              ::std::unique_ptr< RequestedRangeType >);

    SetRange (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    SetRange (const SetRange& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual SetRange*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SetRange&
    operator= (const SetRange& x);

    virtual 
    ~SetRange ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< RequestedRangeType > RequestedRange_;
  };

  class SetRangeResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    SetRangeResponse (const TransactionIdType&,
                      const InvocationStateType&,
                      const MDIBVersionType&);

    SetRangeResponse (::std::unique_ptr< TransactionIdType >,
                      ::std::unique_ptr< InvocationStateType >,
                      const MDIBVersionType&);

    SetRangeResponse (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    SetRangeResponse (const SetRangeResponse& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual SetRangeResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~SetRangeResponse ();
  };

  class SetValue: public ::CDM::AbstractSet
  {
    public:
    // RequestedNumericValue
    //
    typedef ::xml_schema::Decimal RequestedNumericValueType;
    typedef ::xsd::cxx::tree::traits< RequestedNumericValueType, char, ::xsd::cxx::tree::schema_type::decimal > RequestedNumericValueTraits;

    const RequestedNumericValueType&
    RequestedNumericValue () const;

    RequestedNumericValueType&
    RequestedNumericValue ();

    void
    RequestedNumericValue (const RequestedNumericValueType& x);

    // Constructors.
    //
    SetValue (const OperationHandleRefType&,
              const RequestedNumericValueType&);

    SetValue (::std::unique_ptr< OperationHandleRefType >,
              const RequestedNumericValueType&);

    SetValue (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    SetValue (const SetValue& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual SetValue*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SetValue&
    operator= (const SetValue& x);

    virtual 
    ~SetValue ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< RequestedNumericValueType > RequestedNumericValue_;
  };

  class SetValueResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    SetValueResponse (const TransactionIdType&,
                      const InvocationStateType&,
                      const MDIBVersionType&);

    SetValueResponse (::std::unique_ptr< TransactionIdType >,
                      ::std::unique_ptr< InvocationStateType >,
                      const MDIBVersionType&);

    SetValueResponse (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    SetValueResponse (const SetValueResponse& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual SetValueResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~SetValueResponse ();
  };

  class SetString: public ::CDM::AbstractSet
  {
    public:
    // RequestedStringValue
    //
    typedef ::xml_schema::String RequestedStringValueType;
    typedef ::xsd::cxx::tree::traits< RequestedStringValueType, char > RequestedStringValueTraits;

    const RequestedStringValueType&
    RequestedStringValue () const;

    RequestedStringValueType&
    RequestedStringValue ();

    void
    RequestedStringValue (const RequestedStringValueType& x);

    void
    RequestedStringValue (::std::unique_ptr< RequestedStringValueType > p);

    // Constructors.
    //
    SetString (const OperationHandleRefType&,
               const RequestedStringValueType&);

    SetString (::std::unique_ptr< OperationHandleRefType >,
               ::std::unique_ptr< RequestedStringValueType >);

    SetString (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    SetString (const SetString& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    virtual SetString*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SetString&
    operator= (const SetString& x);

    virtual 
    ~SetString ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< RequestedStringValueType > RequestedStringValue_;
  };

  class SetStringResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    SetStringResponse (const TransactionIdType&,
                       const InvocationStateType&,
                       const MDIBVersionType&);

    SetStringResponse (::std::unique_ptr< TransactionIdType >,
                       ::std::unique_ptr< InvocationStateType >,
                       const MDIBVersionType&);

    SetStringResponse (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    SetStringResponse (const SetStringResponse& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    virtual SetStringResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~SetStringResponse ();
  };

  class SetAlertState: public ::CDM::AbstractSet
  {
    public:
    // RequestedAlertState
    //
    typedef ::CDM::AbstractAlertState RequestedAlertStateType;
    typedef ::xsd::cxx::tree::traits< RequestedAlertStateType, char > RequestedAlertStateTraits;

    const RequestedAlertStateType&
    RequestedAlertState () const;

    RequestedAlertStateType&
    RequestedAlertState ();

    void
    RequestedAlertState (const RequestedAlertStateType& x);

    void
    RequestedAlertState (::std::unique_ptr< RequestedAlertStateType > p);

    // Constructors.
    //
    SetAlertState (const OperationHandleRefType&,
                   const RequestedAlertStateType&);

    SetAlertState (const OperationHandleRefType&,
                   ::std::unique_ptr< RequestedAlertStateType >);

    SetAlertState (::std::unique_ptr< OperationHandleRefType >,
                   ::std::unique_ptr< RequestedAlertStateType >);

    SetAlertState (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    SetAlertState (const SetAlertState& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    virtual SetAlertState*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SetAlertState&
    operator= (const SetAlertState& x);

    virtual 
    ~SetAlertState ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< RequestedAlertStateType > RequestedAlertState_;
  };

  class SetAlertStateResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    SetAlertStateResponse (const TransactionIdType&,
                           const InvocationStateType&,
                           const MDIBVersionType&);

    SetAlertStateResponse (::std::unique_ptr< TransactionIdType >,
                           ::std::unique_ptr< InvocationStateType >,
                           const MDIBVersionType&);

    SetAlertStateResponse (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    SetAlertStateResponse (const SetAlertStateResponse& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual SetAlertStateResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~SetAlertStateResponse ();
  };

  class Activate: public ::CDM::AbstractSet
  {
    public:
    // Argument
    //
    typedef ::CDM::ArgumentType ArgumentType;
    typedef ::xsd::cxx::tree::sequence< ArgumentType > ArgumentSequence;
    typedef ArgumentSequence::iterator ArgumentIterator;
    typedef ArgumentSequence::const_iterator ArgumentConstIterator;
    typedef ::xsd::cxx::tree::traits< ArgumentType, char > ArgumentTraits;

    const ArgumentSequence&
    Argument () const;

    ArgumentSequence&
    Argument ();

    void
    Argument (const ArgumentSequence& s);

    // Constructors.
    //
    Activate (const OperationHandleRefType&);

    Activate (::std::unique_ptr< OperationHandleRefType >);

    Activate (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    Activate (const Activate& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual Activate*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Activate&
    operator= (const Activate& x);

    virtual 
    ~Activate ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ArgumentSequence Argument_;
  };

  class ActivateResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    ActivateResponse (const TransactionIdType&,
                      const InvocationStateType&,
                      const MDIBVersionType&);

    ActivateResponse (::std::unique_ptr< TransactionIdType >,
                      ::std::unique_ptr< InvocationStateType >,
                      const MDIBVersionType&);

    ActivateResponse (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    ActivateResponse (const ActivateResponse& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual ActivateResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~ActivateResponse ();
  };

  class SetContextState: public ::CDM::AbstractSet
  {
    public:
    // ProposedContextState
    //
    typedef ::CDM::AbstractContextState ProposedContextStateType;
    typedef ::xsd::cxx::tree::sequence< ProposedContextStateType > ProposedContextStateSequence;
    typedef ProposedContextStateSequence::iterator ProposedContextStateIterator;
    typedef ProposedContextStateSequence::const_iterator ProposedContextStateConstIterator;
    typedef ::xsd::cxx::tree::traits< ProposedContextStateType, char > ProposedContextStateTraits;

    const ProposedContextStateSequence&
    ProposedContextState () const;

    ProposedContextStateSequence&
    ProposedContextState ();

    void
    ProposedContextState (const ProposedContextStateSequence& s);

    // Constructors.
    //
    SetContextState (const OperationHandleRefType&);

    SetContextState (::std::unique_ptr< OperationHandleRefType >);

    SetContextState (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    SetContextState (const SetContextState& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    virtual SetContextState*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SetContextState&
    operator= (const SetContextState& x);

    virtual 
    ~SetContextState ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ProposedContextStateSequence ProposedContextState_;
  };

  class SetContextStateResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    SetContextStateResponse (const TransactionIdType&,
                             const InvocationStateType&,
                             const MDIBVersionType&);

    SetContextStateResponse (::std::unique_ptr< TransactionIdType >,
                             ::std::unique_ptr< InvocationStateType >,
                             const MDIBVersionType&);

    SetContextStateResponse (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    SetContextStateResponse (const SetContextStateResponse& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    virtual SetContextStateResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~SetContextStateResponse ();
  };

  class SetPatientAssociationState: public ::CDM::AbstractSet
  {
    public:
    // RequestedAssociation
    //
    typedef ::CDM::ContextAssociation RequestedAssociationType;
    typedef ::xsd::cxx::tree::traits< RequestedAssociationType, char > RequestedAssociationTraits;

    const RequestedAssociationType&
    RequestedAssociation () const;

    RequestedAssociationType&
    RequestedAssociation ();

    void
    RequestedAssociation (const RequestedAssociationType& x);

    void
    RequestedAssociation (::std::unique_ptr< RequestedAssociationType > p);

    // Constructors.
    //
    SetPatientAssociationState (const OperationHandleRefType&,
                                const RequestedAssociationType&);

    SetPatientAssociationState (::std::unique_ptr< OperationHandleRefType >,
                                ::std::unique_ptr< RequestedAssociationType >);

    SetPatientAssociationState (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

    SetPatientAssociationState (const SetPatientAssociationState& x,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

    virtual SetPatientAssociationState*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SetPatientAssociationState&
    operator= (const SetPatientAssociationState& x);

    virtual 
    ~SetPatientAssociationState ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< RequestedAssociationType > RequestedAssociation_;
  };

  class SetPatientAssociationStateResponse: public ::CDM::AbstractSetResponse
  {
    public:
    // Constructors.
    //
    SetPatientAssociationStateResponse (const TransactionIdType&,
                                        const InvocationStateType&,
                                        const MDIBVersionType&);

    SetPatientAssociationStateResponse (::std::unique_ptr< TransactionIdType >,
                                        ::std::unique_ptr< InvocationStateType >,
                                        const MDIBVersionType&);

    SetPatientAssociationStateResponse (const ::xercesc::DOMElement& e,
                                        ::xml_schema::Flags f = 0,
                                        ::xml_schema::Container* c = 0);

    SetPatientAssociationStateResponse (const SetPatientAssociationStateResponse& x,
                                        ::xml_schema::Flags f = 0,
                                        ::xml_schema::Container* c = 0);

    virtual SetPatientAssociationStateResponse*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~SetPatientAssociationStateResponse ();
  };

  class PeriodicMetricReport: public ::CDM::AbstractMetricReport
  {
    public:
    // Constructors.
    //
    PeriodicMetricReport (const MDIBVersionType&);

    PeriodicMetricReport (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    PeriodicMetricReport (const PeriodicMetricReport& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual PeriodicMetricReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~PeriodicMetricReport ();
  };

  class EpisodicMetricReport: public ::CDM::AbstractMetricReport
  {
    public:
    // Constructors.
    //
    EpisodicMetricReport (const MDIBVersionType&);

    EpisodicMetricReport (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    EpisodicMetricReport (const EpisodicMetricReport& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual EpisodicMetricReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~EpisodicMetricReport ();
  };

  class PeriodicAlertReport: public ::CDM::AbstractAlertReport
  {
    public:
    // Constructors.
    //
    PeriodicAlertReport (const MDIBVersionType&);

    PeriodicAlertReport (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    PeriodicAlertReport (const PeriodicAlertReport& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual PeriodicAlertReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~PeriodicAlertReport ();
  };

  class EpisodicAlertReport: public ::CDM::AbstractAlertReport
  {
    public:
    // Constructors.
    //
    EpisodicAlertReport (const MDIBVersionType&);

    EpisodicAlertReport (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    EpisodicAlertReport (const EpisodicAlertReport& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual EpisodicAlertReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~EpisodicAlertReport ();
  };

  class PeriodicContextChangedReport: public ::CDM::AbstractContextChangedReport
  {
    public:
    // Constructors.
    //
    PeriodicContextChangedReport (const MDIBVersionType&);

    PeriodicContextChangedReport (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    PeriodicContextChangedReport (const PeriodicContextChangedReport& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    virtual PeriodicContextChangedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~PeriodicContextChangedReport ();
  };

  class EpisodicContextChangedReport: public ::CDM::AbstractContextChangedReport
  {
    public:
    // Constructors.
    //
    EpisodicContextChangedReport (const MDIBVersionType&);

    EpisodicContextChangedReport (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    EpisodicContextChangedReport (const EpisodicContextChangedReport& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

    virtual EpisodicContextChangedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~EpisodicContextChangedReport ();
  };

  class OperationInvokedReport: public ::CDM::AbstractReport
  {
    public:
    // ReportDetail
    //
    typedef ::CDM::OperationInvokedReportPart ReportDetailType;
    typedef ::xsd::cxx::tree::sequence< ReportDetailType > ReportDetailSequence;
    typedef ReportDetailSequence::iterator ReportDetailIterator;
    typedef ReportDetailSequence::const_iterator ReportDetailConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportDetailType, char > ReportDetailTraits;

    const ReportDetailSequence&
    ReportDetail () const;

    ReportDetailSequence&
    ReportDetail ();

    void
    ReportDetail (const ReportDetailSequence& s);

    // Constructors.
    //
    OperationInvokedReport (const MDIBVersionType&);

    OperationInvokedReport (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    OperationInvokedReport (const OperationInvokedReport& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    virtual OperationInvokedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    OperationInvokedReport&
    operator= (const OperationInvokedReport& x);

    virtual 
    ~OperationInvokedReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportDetailSequence ReportDetail_;
  };

  class OperationalStateChangedReport: public ::CDM::AbstractReport
  {
    public:
    // ReportDetail
    //
    typedef ::CDM::OperationalStateChangedReportPart ReportDetailType;
    typedef ::xsd::cxx::tree::sequence< ReportDetailType > ReportDetailSequence;
    typedef ReportDetailSequence::iterator ReportDetailIterator;
    typedef ReportDetailSequence::const_iterator ReportDetailConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportDetailType, char > ReportDetailTraits;

    const ReportDetailSequence&
    ReportDetail () const;

    ReportDetailSequence&
    ReportDetail ();

    void
    ReportDetail (const ReportDetailSequence& s);

    // Constructors.
    //
    OperationalStateChangedReport (const MDIBVersionType&);

    OperationalStateChangedReport (const ::xercesc::DOMElement& e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    OperationalStateChangedReport (const OperationalStateChangedReport& x,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

    virtual OperationalStateChangedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    OperationalStateChangedReport&
    operator= (const OperationalStateChangedReport& x);

    virtual 
    ~OperationalStateChangedReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportDetailSequence ReportDetail_;
  };

  class OperationCreatedReport: public ::CDM::OperationDescriptionModificationReport
  {
    public:
    // Constructors.
    //
    OperationCreatedReport (const MDIBVersionType&);

    OperationCreatedReport (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    OperationCreatedReport (const OperationCreatedReport& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    virtual OperationCreatedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~OperationCreatedReport ();
  };

  class OperationDeletedReport: public ::CDM::OperationDescriptionModificationReport
  {
    public:
    // Constructors.
    //
    OperationDeletedReport (const MDIBVersionType&);

    OperationDeletedReport (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    OperationDeletedReport (const OperationDeletedReport& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    virtual OperationDeletedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~OperationDeletedReport ();
  };

  class ObjectCreatedReport: public ::CDM::DescriptionModificationReport
  {
    public:
    // Constructors.
    //
    ObjectCreatedReport (const MDIBVersionType&);

    ObjectCreatedReport (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    ObjectCreatedReport (const ObjectCreatedReport& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual ObjectCreatedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~ObjectCreatedReport ();
  };

  class ObjectUpdatedReport: public ::CDM::DescriptionModificationReport
  {
    public:
    // Constructors.
    //
    ObjectUpdatedReport (const MDIBVersionType&);

    ObjectUpdatedReport (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    ObjectUpdatedReport (const ObjectUpdatedReport& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual ObjectUpdatedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~ObjectUpdatedReport ();
  };

  class ObjectDeletedReport: public ::CDM::DescriptionModificationReport
  {
    public:
    // Constructors.
    //
    ObjectDeletedReport (const MDIBVersionType&);

    ObjectDeletedReport (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    ObjectDeletedReport (const ObjectDeletedReport& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual ObjectDeletedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~ObjectDeletedReport ();
  };

  class MDSCreatedReport: public ::CDM::MDSModificationReport
  {
    public:
    // Constructors.
    //
    MDSCreatedReport (const MDIBVersionType&);

    MDSCreatedReport (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    MDSCreatedReport (const MDSCreatedReport& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual MDSCreatedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~MDSCreatedReport ();
  };

  class MDSDeletedReport: public ::CDM::MDSModificationReport
  {
    public:
    // Constructors.
    //
    MDSDeletedReport (const MDIBVersionType&);

    MDSDeletedReport (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    MDSDeletedReport (const MDSDeletedReport& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual MDSDeletedReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~MDSDeletedReport ();
  };

  class SystemErrorReport: public ::CDM::AbstractReport
  {
    public:
    // ReportDetail
    //
    typedef ::CDM::SystemErrorReportReportPart ReportDetailType;
    typedef ::xsd::cxx::tree::sequence< ReportDetailType > ReportDetailSequence;
    typedef ReportDetailSequence::iterator ReportDetailIterator;
    typedef ReportDetailSequence::const_iterator ReportDetailConstIterator;
    typedef ::xsd::cxx::tree::traits< ReportDetailType, char > ReportDetailTraits;

    const ReportDetailSequence&
    ReportDetail () const;

    ReportDetailSequence&
    ReportDetail ();

    void
    ReportDetail (const ReportDetailSequence& s);

    // Constructors.
    //
    SystemErrorReport (const MDIBVersionType&);

    SystemErrorReport (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    SystemErrorReport (const SystemErrorReport& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    virtual SystemErrorReport*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SystemErrorReport&
    operator= (const SystemErrorReport& x);

    virtual 
    ~SystemErrorReport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ReportDetailSequence ReportDetail_;
  };

  class WaveformStream: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::Extension ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // RealTimeSampleArray
    //
    typedef ::CDM::RealTimeSampleArrayMetricState RealTimeSampleArrayType;
    typedef ::xsd::cxx::tree::sequence< RealTimeSampleArrayType > RealTimeSampleArraySequence;
    typedef RealTimeSampleArraySequence::iterator RealTimeSampleArrayIterator;
    typedef RealTimeSampleArraySequence::const_iterator RealTimeSampleArrayConstIterator;
    typedef ::xsd::cxx::tree::traits< RealTimeSampleArrayType, char > RealTimeSampleArrayTraits;

    const RealTimeSampleArraySequence&
    RealTimeSampleArray () const;

    RealTimeSampleArraySequence&
    RealTimeSampleArray ();

    void
    RealTimeSampleArray (const RealTimeSampleArraySequence& s);

    // Constructors.
    //
    WaveformStream ();

    WaveformStream (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    WaveformStream (const WaveformStream& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual WaveformStream*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    WaveformStream&
    operator= (const WaveformStream& x);

    virtual 
    ~WaveformStream ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    RealTimeSampleArraySequence RealTimeSampleArray_;
  };

  class OVStream: public ::xml_schema::Type
  {
    public:
    // Extension
    //
    typedef ::CDM::Extension ExtensionType;
    typedef ::xsd::cxx::tree::optional< ExtensionType > ExtensionOptional;
    typedef ::xsd::cxx::tree::traits< ExtensionType, char > ExtensionTraits;

    const ExtensionOptional&
    Extension () const;

    ExtensionOptional&
    Extension ();

    void
    Extension (const ExtensionType& x);

    void
    Extension (const ExtensionOptional& x);

    void
    Extension (::std::unique_ptr< ExtensionType > p);

    // Value
    //
    typedef ::CDM::StreamElement ValueType;
    typedef ::xsd::cxx::tree::sequence< ValueType > ValueSequence;
    typedef ValueSequence::iterator ValueIterator;
    typedef ValueSequence::const_iterator ValueConstIterator;
    typedef ::xsd::cxx::tree::traits< ValueType, char > ValueTraits;

    const ValueSequence&
    Value () const;

    ValueSequence&
    Value ();

    void
    Value (const ValueSequence& s);

    // Constructors.
    //
    OVStream ();

    OVStream (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    OVStream (const OVStream& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual OVStream*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    OVStream&
    operator= (const OVStream& x);

    virtual 
    ~OVStream ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ExtensionOptional Extension_;
    ValueSequence Value_;
  };

  class Retrievability: public ::xml_schema::Type
  {
    public:
    // By
    //
    typedef ::CDM::MetricRetrievability ByType;
    typedef ::xsd::cxx::tree::sequence< ByType > BySequence;
    typedef BySequence::iterator ByIterator;
    typedef BySequence::const_iterator ByConstIterator;
    typedef ::xsd::cxx::tree::traits< ByType, char > ByTraits;

    const BySequence&
    By () const;

    BySequence&
    By ();

    void
    By (const BySequence& s);

    // Constructors.
    //
    Retrievability ();

    Retrievability (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    Retrievability (const Retrievability& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual Retrievability*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Retrievability&
    operator= (const Retrievability& x);

    virtual 
    ~Retrievability ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    BySequence By_;
  };

  class OperationReference: public ::xml_schema::Type
  {
    public:
    // ServiceID
    //
    typedef ::xml_schema::String ServiceIDType;
    typedef ::xsd::cxx::tree::sequence< ServiceIDType > ServiceIDSequence;
    typedef ServiceIDSequence::iterator ServiceIDIterator;
    typedef ServiceIDSequence::const_iterator ServiceIDConstIterator;
    typedef ::xsd::cxx::tree::traits< ServiceIDType, char > ServiceIDTraits;

    const ServiceIDSequence&
    ServiceID () const;

    ServiceIDSequence&
    ServiceID ();

    void
    ServiceID (const ServiceIDSequence& s);

    // Action
    //
    typedef ::xml_schema::String ActionType;
    typedef ::xsd::cxx::tree::traits< ActionType, char > ActionTraits;

    const ActionType&
    Action () const;

    ActionType&
    Action ();

    void
    Action (const ActionType& x);

    void
    Action (::std::unique_ptr< ActionType > p);

    // Constructors.
    //
    OperationReference (const ActionType&);

    OperationReference (::std::unique_ptr< ActionType >);

    OperationReference (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    OperationReference (const OperationReference& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    virtual OperationReference*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    OperationReference&
    operator= (const OperationReference& x);

    virtual 
    ~OperationReference ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ServiceIDSequence ServiceID_;
    ::xsd::cxx::tree::one< ActionType > Action_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace CDM
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (const ::std::string& uri,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (const ::std::string& uri,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::std::istream& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::std::istream& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::xercesc::InputSource& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::xercesc::InputSource& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (const ::std::string& uri,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (const ::std::string& uri,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::std::istream& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::std::istream& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::xercesc::InputSource& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::xercesc::InputSource& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (const ::std::string& uri,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (const ::std::string& uri,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::std::istream& is,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::std::istream& is,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (const ::xercesc::DOMDocument& d,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (const ::std::string& uri,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (const ::std::string& uri,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::std::istream& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::std::istream& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::xercesc::InputSource& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::xercesc::InputSource& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (const ::std::string& uri,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (const ::std::string& uri,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::std::istream& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::std::istream& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::xercesc::InputSource& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::xercesc::InputSource& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (const ::std::string& uri,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (const ::std::string& uri,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::ErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (const ::xercesc::DOMDocument& d,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::Flags f = 0,
                             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (const ::std::string& uri,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (const ::std::string& uri,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::xercesc::InputSource& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::xercesc::InputSource& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (const ::std::string& uri,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (const ::std::string& uri,
                               ::xml_schema::ErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               ::xml_schema::ErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::ErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::xercesc::InputSource& is,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::xercesc::InputSource& is,
                               ::xml_schema::ErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (const ::xercesc::DOMDocument& d,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (const ::std::string& uri,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (const ::std::string& uri,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::xercesc::InputSource& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::xercesc::InputSource& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (const ::std::string& uri,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (const ::std::string& uri,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::xercesc::InputSource& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::xercesc::InputSource& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (const ::std::string& uri,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (const ::std::string& uri,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::xercesc::InputSource& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::xercesc::InputSource& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (const ::std::string& uri,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (const ::std::string& uri,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::xercesc::InputSource& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::xercesc::InputSource& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (const ::std::string& uri,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (const ::std::string& uri,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::xercesc::InputSource& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::xercesc::InputSource& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (const ::std::string& uri,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (const ::std::string& uri,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::xercesc::InputSource& is,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::xercesc::InputSource& is,
                          ::xml_schema::ErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::Flags f = 0,
                          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (const ::std::string& uri,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (const ::std::string& uri,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::xercesc::InputSource& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::xercesc::InputSource& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (const ::std::string& uri,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (const ::std::string& uri,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::xercesc::InputSource& is,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::xercesc::InputSource& is,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (const ::xercesc::DOMDocument& d,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (const ::std::string& uri,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (const ::std::string& uri,
                               ::xml_schema::ErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::std::istream& is,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::std::istream& is,
                               ::xml_schema::ErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::ErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::xercesc::InputSource& is,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::xercesc::InputSource& is,
                               ::xml_schema::ErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (const ::xercesc::DOMDocument& d,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::Flags f = 0,
                               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (const ::std::string& uri,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (const ::std::string& uri,
                                       ::xml_schema::ErrorHandler& eh,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::std::istream& is,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::std::istream& is,
                                       ::xml_schema::ErrorHandler& eh,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::std::istream& is,
                                       const ::std::string& id,
                                       ::xml_schema::ErrorHandler& eh,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::xercesc::InputSource& is,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::xercesc::InputSource& is,
                                       ::xml_schema::ErrorHandler& eh,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::Flags f = 0,
                                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (const ::std::string& uri,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (const ::std::string& uri,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::xercesc::InputSource& is,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::xercesc::InputSource& is,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (const ::std::string& uri,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (const ::std::string& uri,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::xercesc::InputSource& is,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::xercesc::InputSource& is,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (const ::std::string& uri,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (const ::std::string& uri,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::xercesc::InputSource& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::xercesc::InputSource& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (const ::std::string& uri,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (const ::std::string& uri,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::xercesc::InputSource& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::xercesc::InputSource& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (const ::std::string& uri,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (const ::std::string& uri,
                                 ::xml_schema::ErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::std::istream& is,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::std::istream& is,
                                 ::xml_schema::ErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::ErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::xercesc::InputSource& is,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::xercesc::InputSource& is,
                                 ::xml_schema::ErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (const ::std::string& uri,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (const ::std::string& uri,
                                 ::xml_schema::ErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::std::istream& is,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::std::istream& is,
                                 ::xml_schema::ErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::ErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::xercesc::InputSource& is,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::xercesc::InputSource& is,
                                 ::xml_schema::ErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::Flags f = 0,
                                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (const ::std::string& uri,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (const ::std::string& uri,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::xercesc::InputSource& is,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::xercesc::InputSource& is,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (const ::std::string& uri,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (const ::std::string& uri,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::std::istream& is,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::std::istream& is,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::xercesc::InputSource& is,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::xercesc::InputSource& is,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (const ::std::string& uri,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (const ::std::string& uri,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::std::istream& is,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::std::istream& is,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::xercesc::InputSource& is,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::xercesc::InputSource& is,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (const ::std::string& uri,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (const ::std::string& uri,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::std::istream& is,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::std::istream& is,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::xercesc::InputSource& is,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::xercesc::InputSource& is,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (const ::std::string& uri,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (const ::std::string& uri,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::std::istream& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::xercesc::InputSource& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::xercesc::InputSource& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (const ::std::string& uri,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (const ::std::string& uri,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::std::istream& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::xercesc::InputSource& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::xercesc::InputSource& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (const ::std::string& uri,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (const ::std::string& uri,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::std::istream& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::xercesc::InputSource& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::xercesc::InputSource& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (const ::std::string& uri,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (const ::std::string& uri,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::xercesc::InputSource& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::xercesc::InputSource& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (const ::std::string& uri,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (const ::std::string& uri,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::xercesc::InputSource& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::xercesc::InputSource& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (const ::std::string& uri,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (const ::std::string& uri,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::xercesc::InputSource& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::xercesc::InputSource& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (const ::std::string& uri,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (const ::std::string& uri,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::std::istream& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::std::istream& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::xercesc::InputSource& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::xercesc::InputSource& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace CDM
{
  void
  operator<< (::xercesc::DOMElement&, const AbstractGet&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractGetResponse&);

  // Serialize to std::ostream.
  //

  void
  GetMDIB_ (::std::ostream& os,
            const ::CDM::GetMDIB& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  void
  GetMDIB_ (::std::ostream& os,
            const ::CDM::GetMDIB& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  void
  GetMDIB_ (::std::ostream& os,
            const ::CDM::GetMDIB& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetMDIB_ (::xercesc::XMLFormatTarget& ft,
            const ::CDM::GetMDIB& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  void
  GetMDIB_ (::xercesc::XMLFormatTarget& ft,
            const ::CDM::GetMDIB& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  void
  GetMDIB_ (::xercesc::XMLFormatTarget& ft,
            const ::CDM::GetMDIB& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetMDIB_ (::xercesc::DOMDocument& d,
            const ::CDM::GetMDIB& x,
            ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMDIB_ (const ::CDM::GetMDIB& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetMDIBResponse_ (::std::ostream& os,
                    const ::CDM::GetMDIBResponse& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  GetMDIBResponse_ (::std::ostream& os,
                    const ::CDM::GetMDIBResponse& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  GetMDIBResponse_ (::std::ostream& os,
                    const ::CDM::GetMDIBResponse& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetMDIBResponse_ (::xercesc::XMLFormatTarget& ft,
                    const ::CDM::GetMDIBResponse& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  GetMDIBResponse_ (::xercesc::XMLFormatTarget& ft,
                    const ::CDM::GetMDIBResponse& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  GetMDIBResponse_ (::xercesc::XMLFormatTarget& ft,
                    const ::CDM::GetMDIBResponse& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetMDIBResponse_ (::xercesc::DOMDocument& d,
                    const ::CDM::GetMDIBResponse& x,
                    ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMDIBResponse_ (const ::CDM::GetMDIBResponse& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetMDDescription_ (::std::ostream& os,
                     const ::CDM::GetMDDescription& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetMDDescription_ (::std::ostream& os,
                     const ::CDM::GetMDDescription& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetMDDescription_ (::std::ostream& os,
                     const ::CDM::GetMDDescription& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetMDDescription_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetMDDescription& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetMDDescription_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetMDDescription& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetMDDescription_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetMDDescription& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetMDDescription_ (::xercesc::DOMDocument& d,
                     const ::CDM::GetMDDescription& x,
                     ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMDDescription_ (const ::CDM::GetMDDescription& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetMDDescriptionResponse_ (::std::ostream& os,
                             const ::CDM::GetMDDescriptionResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetMDDescriptionResponse_ (::std::ostream& os,
                             const ::CDM::GetMDDescriptionResponse& x, 
                             ::xml_schema::ErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetMDDescriptionResponse_ (::std::ostream& os,
                             const ::CDM::GetMDDescriptionResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetMDDescriptionResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetMDDescriptionResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetMDDescriptionResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetMDDescriptionResponse& x, 
                             ::xml_schema::ErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetMDDescriptionResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetMDDescriptionResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetMDDescriptionResponse_ (::xercesc::DOMDocument& d,
                             const ::CDM::GetMDDescriptionResponse& x,
                             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMDDescriptionResponse_ (const ::CDM::GetMDDescriptionResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetMDState_ (::std::ostream& os,
               const ::CDM::GetMDState& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

  void
  GetMDState_ (::std::ostream& os,
               const ::CDM::GetMDState& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

  void
  GetMDState_ (::std::ostream& os,
               const ::CDM::GetMDState& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetMDState_ (::xercesc::XMLFormatTarget& ft,
               const ::CDM::GetMDState& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

  void
  GetMDState_ (::xercesc::XMLFormatTarget& ft,
               const ::CDM::GetMDState& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

  void
  GetMDState_ (::xercesc::XMLFormatTarget& ft,
               const ::CDM::GetMDState& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetMDState_ (::xercesc::DOMDocument& d,
               const ::CDM::GetMDState& x,
               ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMDState_ (const ::CDM::GetMDState& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetMDStateResponse_ (::std::ostream& os,
                       const ::CDM::GetMDStateResponse& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetMDStateResponse_ (::std::ostream& os,
                       const ::CDM::GetMDStateResponse& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetMDStateResponse_ (::std::ostream& os,
                       const ::CDM::GetMDStateResponse& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetMDStateResponse_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::GetMDStateResponse& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetMDStateResponse_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::GetMDStateResponse& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetMDStateResponse_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::GetMDStateResponse& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetMDStateResponse_ (::xercesc::DOMDocument& d,
                       const ::CDM::GetMDStateResponse& x,
                       ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMDStateResponse_ (const ::CDM::GetMDStateResponse& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetContextStates_ (::std::ostream& os,
                     const ::CDM::GetContextStates& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetContextStates_ (::std::ostream& os,
                     const ::CDM::GetContextStates& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetContextStates_ (::std::ostream& os,
                     const ::CDM::GetContextStates& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetContextStates_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetContextStates& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetContextStates_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetContextStates& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  GetContextStates_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::GetContextStates& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetContextStates_ (::xercesc::DOMDocument& d,
                     const ::CDM::GetContextStates& x,
                     ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetContextStates_ (const ::CDM::GetContextStates& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetContextStatesResponse_ (::std::ostream& os,
                             const ::CDM::GetContextStatesResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetContextStatesResponse_ (::std::ostream& os,
                             const ::CDM::GetContextStatesResponse& x, 
                             ::xml_schema::ErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetContextStatesResponse_ (::std::ostream& os,
                             const ::CDM::GetContextStatesResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetContextStatesResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetContextStatesResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetContextStatesResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetContextStatesResponse& x, 
                             ::xml_schema::ErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  void
  GetContextStatesResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::CDM::GetContextStatesResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetContextStatesResponse_ (::xercesc::DOMDocument& d,
                             const ::CDM::GetContextStatesResponse& x,
                             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetContextStatesResponse_ (const ::CDM::GetContextStatesResponse& x, 
                             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                             ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetContainmentTree_ (::std::ostream& os,
                       const ::CDM::GetContainmentTree& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetContainmentTree_ (::std::ostream& os,
                       const ::CDM::GetContainmentTree& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetContainmentTree_ (::std::ostream& os,
                       const ::CDM::GetContainmentTree& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetContainmentTree_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::GetContainmentTree& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetContainmentTree_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::GetContainmentTree& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  GetContainmentTree_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::GetContainmentTree& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetContainmentTree_ (::xercesc::DOMDocument& d,
                       const ::CDM::GetContainmentTree& x,
                       ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetContainmentTree_ (const ::CDM::GetContainmentTree& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetContainmentTreeResponse_ (::std::ostream& os,
                               const ::CDM::GetContainmentTreeResponse& x, 
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  void
  GetContainmentTreeResponse_ (::std::ostream& os,
                               const ::CDM::GetContainmentTreeResponse& x, 
                               ::xml_schema::ErrorHandler& eh,
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  void
  GetContainmentTreeResponse_ (::std::ostream& os,
                               const ::CDM::GetContainmentTreeResponse& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetContainmentTreeResponse_ (::xercesc::XMLFormatTarget& ft,
                               const ::CDM::GetContainmentTreeResponse& x, 
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  void
  GetContainmentTreeResponse_ (::xercesc::XMLFormatTarget& ft,
                               const ::CDM::GetContainmentTreeResponse& x, 
                               ::xml_schema::ErrorHandler& eh,
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  void
  GetContainmentTreeResponse_ (::xercesc::XMLFormatTarget& ft,
                               const ::CDM::GetContainmentTreeResponse& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetContainmentTreeResponse_ (::xercesc::DOMDocument& d,
                               const ::CDM::GetContainmentTreeResponse& x,
                               ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetContainmentTreeResponse_ (const ::CDM::GetContainmentTreeResponse& x, 
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetDescriptor_ (::std::ostream& os,
                  const ::CDM::GetDescriptor& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  GetDescriptor_ (::std::ostream& os,
                  const ::CDM::GetDescriptor& x, 
                  ::xml_schema::ErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  GetDescriptor_ (::std::ostream& os,
                  const ::CDM::GetDescriptor& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetDescriptor_ (::xercesc::XMLFormatTarget& ft,
                  const ::CDM::GetDescriptor& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  GetDescriptor_ (::xercesc::XMLFormatTarget& ft,
                  const ::CDM::GetDescriptor& x, 
                  ::xml_schema::ErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  GetDescriptor_ (::xercesc::XMLFormatTarget& ft,
                  const ::CDM::GetDescriptor& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetDescriptor_ (::xercesc::DOMDocument& d,
                  const ::CDM::GetDescriptor& x,
                  ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetDescriptor_ (const ::CDM::GetDescriptor& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GetDescriptorResponse_ (::std::ostream& os,
                          const ::CDM::GetDescriptorResponse& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  GetDescriptorResponse_ (::std::ostream& os,
                          const ::CDM::GetDescriptorResponse& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  GetDescriptorResponse_ (::std::ostream& os,
                          const ::CDM::GetDescriptorResponse& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GetDescriptorResponse_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::GetDescriptorResponse& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  GetDescriptorResponse_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::GetDescriptorResponse& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  GetDescriptorResponse_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::GetDescriptorResponse& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GetDescriptorResponse_ (::xercesc::DOMDocument& d,
                          const ::CDM::GetDescriptorResponse& x,
                          ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetDescriptorResponse_ (const ::CDM::GetDescriptorResponse& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const GetLocalizedText&);

  void
  operator<< (::xercesc::DOMElement&, const GetLocalizedTextResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetSupportedLanguages&);

  void
  operator<< (::xercesc::DOMElement&, const GetSupportedLanguagesResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetDescriptorsFromArchive&);

  void
  operator<< (::xercesc::DOMElement&, const GetDescriptorsFromArchiveResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetStatesFromArchive&);

  void
  operator<< (::xercesc::DOMElement&, const GetStatesFromArchiveResponse&);

  void
  operator<< (::xercesc::DOMElement&, const TimeFrame&);

  void
  operator<< (::xercesc::DOMElement&, const TransactionID&);

  void
  operator<< (::xercesc::DOMAttr&, const TransactionID&);

  void
  operator<< (::xml_schema::ListStream&,
              const TransactionID&);

  void
  operator<< (::xercesc::DOMElement&, const InvocationState&);

  void
  operator<< (::xercesc::DOMAttr&, const InvocationState&);

  void
  operator<< (::xml_schema::ListStream&,
              const InvocationState&);

  void
  operator<< (::xercesc::DOMElement&, const ArgumentType&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractSet&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractSetResponse&);

  // Serialize to std::ostream.
  //

  void
  SetRange_ (::std::ostream& os,
             const ::CDM::SetRange& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SetRange_ (::std::ostream& os,
             const ::CDM::SetRange& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SetRange_ (::std::ostream& os,
             const ::CDM::SetRange& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetRange_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::SetRange& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SetRange_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::SetRange& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SetRange_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::SetRange& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetRange_ (::xercesc::DOMDocument& d,
             const ::CDM::SetRange& x,
             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetRange_ (const ::CDM::SetRange& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetRangeResponse_ (::std::ostream& os,
                     const ::CDM::SetRangeResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  SetRangeResponse_ (::std::ostream& os,
                     const ::CDM::SetRangeResponse& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  SetRangeResponse_ (::std::ostream& os,
                     const ::CDM::SetRangeResponse& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetRangeResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::SetRangeResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  SetRangeResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::SetRangeResponse& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  SetRangeResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::SetRangeResponse& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetRangeResponse_ (::xercesc::DOMDocument& d,
                     const ::CDM::SetRangeResponse& x,
                     ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetRangeResponse_ (const ::CDM::SetRangeResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetValue_ (::std::ostream& os,
             const ::CDM::SetValue& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SetValue_ (::std::ostream& os,
             const ::CDM::SetValue& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SetValue_ (::std::ostream& os,
             const ::CDM::SetValue& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetValue_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::SetValue& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SetValue_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::SetValue& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SetValue_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::SetValue& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetValue_ (::xercesc::DOMDocument& d,
             const ::CDM::SetValue& x,
             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetValue_ (const ::CDM::SetValue& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetValueResponse_ (::std::ostream& os,
                     const ::CDM::SetValueResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  SetValueResponse_ (::std::ostream& os,
                     const ::CDM::SetValueResponse& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  SetValueResponse_ (::std::ostream& os,
                     const ::CDM::SetValueResponse& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetValueResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::SetValueResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  SetValueResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::SetValueResponse& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  SetValueResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::SetValueResponse& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetValueResponse_ (::xercesc::DOMDocument& d,
                     const ::CDM::SetValueResponse& x,
                     ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetValueResponse_ (const ::CDM::SetValueResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetString_ (::std::ostream& os,
              const ::CDM::SetString& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  void
  SetString_ (::std::ostream& os,
              const ::CDM::SetString& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  void
  SetString_ (::std::ostream& os,
              const ::CDM::SetString& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetString_ (::xercesc::XMLFormatTarget& ft,
              const ::CDM::SetString& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  void
  SetString_ (::xercesc::XMLFormatTarget& ft,
              const ::CDM::SetString& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  void
  SetString_ (::xercesc::XMLFormatTarget& ft,
              const ::CDM::SetString& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetString_ (::xercesc::DOMDocument& d,
              const ::CDM::SetString& x,
              ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetString_ (const ::CDM::SetString& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetStringResponse_ (::std::ostream& os,
                      const ::CDM::SetStringResponse& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SetStringResponse_ (::std::ostream& os,
                      const ::CDM::SetStringResponse& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SetStringResponse_ (::std::ostream& os,
                      const ::CDM::SetStringResponse& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetStringResponse_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SetStringResponse& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SetStringResponse_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SetStringResponse& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SetStringResponse_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SetStringResponse& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetStringResponse_ (::xercesc::DOMDocument& d,
                      const ::CDM::SetStringResponse& x,
                      ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetStringResponse_ (const ::CDM::SetStringResponse& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetAlertState_ (::std::ostream& os,
                  const ::CDM::SetAlertState& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  SetAlertState_ (::std::ostream& os,
                  const ::CDM::SetAlertState& x, 
                  ::xml_schema::ErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  SetAlertState_ (::std::ostream& os,
                  const ::CDM::SetAlertState& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetAlertState_ (::xercesc::XMLFormatTarget& ft,
                  const ::CDM::SetAlertState& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  SetAlertState_ (::xercesc::XMLFormatTarget& ft,
                  const ::CDM::SetAlertState& x, 
                  ::xml_schema::ErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  void
  SetAlertState_ (::xercesc::XMLFormatTarget& ft,
                  const ::CDM::SetAlertState& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetAlertState_ (::xercesc::DOMDocument& d,
                  const ::CDM::SetAlertState& x,
                  ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetAlertState_ (const ::CDM::SetAlertState& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetAlertStateResponse_ (::std::ostream& os,
                          const ::CDM::SetAlertStateResponse& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  SetAlertStateResponse_ (::std::ostream& os,
                          const ::CDM::SetAlertStateResponse& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  SetAlertStateResponse_ (::std::ostream& os,
                          const ::CDM::SetAlertStateResponse& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetAlertStateResponse_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::SetAlertStateResponse& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  SetAlertStateResponse_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::SetAlertStateResponse& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  void
  SetAlertStateResponse_ (::xercesc::XMLFormatTarget& ft,
                          const ::CDM::SetAlertStateResponse& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetAlertStateResponse_ (::xercesc::DOMDocument& d,
                          const ::CDM::SetAlertStateResponse& x,
                          ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetAlertStateResponse_ (const ::CDM::SetAlertStateResponse& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Activate_ (::std::ostream& os,
             const ::CDM::Activate& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  Activate_ (::std::ostream& os,
             const ::CDM::Activate& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  Activate_ (::std::ostream& os,
             const ::CDM::Activate& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Activate_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::Activate& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  Activate_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::Activate& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  Activate_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::Activate& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Activate_ (::xercesc::DOMDocument& d,
             const ::CDM::Activate& x,
             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Activate_ (const ::CDM::Activate& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  ActivateResponse_ (::std::ostream& os,
                     const ::CDM::ActivateResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  ActivateResponse_ (::std::ostream& os,
                     const ::CDM::ActivateResponse& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  ActivateResponse_ (::std::ostream& os,
                     const ::CDM::ActivateResponse& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ActivateResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::ActivateResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  ActivateResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::ActivateResponse& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  ActivateResponse_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::ActivateResponse& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ActivateResponse_ (::xercesc::DOMDocument& d,
                     const ::CDM::ActivateResponse& x,
                     ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  ActivateResponse_ (const ::CDM::ActivateResponse& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetContextState_ (::std::ostream& os,
                    const ::CDM::SetContextState& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  SetContextState_ (::std::ostream& os,
                    const ::CDM::SetContextState& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  SetContextState_ (::std::ostream& os,
                    const ::CDM::SetContextState& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetContextState_ (::xercesc::XMLFormatTarget& ft,
                    const ::CDM::SetContextState& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  SetContextState_ (::xercesc::XMLFormatTarget& ft,
                    const ::CDM::SetContextState& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  void
  SetContextState_ (::xercesc::XMLFormatTarget& ft,
                    const ::CDM::SetContextState& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetContextState_ (::xercesc::DOMDocument& d,
                    const ::CDM::SetContextState& x,
                    ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetContextState_ (const ::CDM::SetContextState& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetContextStateResponse_ (::std::ostream& os,
                            const ::CDM::SetContextStateResponse& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  SetContextStateResponse_ (::std::ostream& os,
                            const ::CDM::SetContextStateResponse& x, 
                            ::xml_schema::ErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  SetContextStateResponse_ (::std::ostream& os,
                            const ::CDM::SetContextStateResponse& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetContextStateResponse_ (::xercesc::XMLFormatTarget& ft,
                            const ::CDM::SetContextStateResponse& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  SetContextStateResponse_ (::xercesc::XMLFormatTarget& ft,
                            const ::CDM::SetContextStateResponse& x, 
                            ::xml_schema::ErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  void
  SetContextStateResponse_ (::xercesc::XMLFormatTarget& ft,
                            const ::CDM::SetContextStateResponse& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetContextStateResponse_ (::xercesc::DOMDocument& d,
                            const ::CDM::SetContextStateResponse& x,
                            ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetContextStateResponse_ (const ::CDM::SetContextStateResponse& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetPatientAssociationState_ (::std::ostream& os,
                               const ::CDM::SetPatientAssociationState& x, 
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  void
  SetPatientAssociationState_ (::std::ostream& os,
                               const ::CDM::SetPatientAssociationState& x, 
                               ::xml_schema::ErrorHandler& eh,
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  void
  SetPatientAssociationState_ (::std::ostream& os,
                               const ::CDM::SetPatientAssociationState& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetPatientAssociationState_ (::xercesc::XMLFormatTarget& ft,
                               const ::CDM::SetPatientAssociationState& x, 
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  void
  SetPatientAssociationState_ (::xercesc::XMLFormatTarget& ft,
                               const ::CDM::SetPatientAssociationState& x, 
                               ::xml_schema::ErrorHandler& eh,
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  void
  SetPatientAssociationState_ (::xercesc::XMLFormatTarget& ft,
                               const ::CDM::SetPatientAssociationState& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetPatientAssociationState_ (::xercesc::DOMDocument& d,
                               const ::CDM::SetPatientAssociationState& x,
                               ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetPatientAssociationState_ (const ::CDM::SetPatientAssociationState& x, 
                               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                               ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  SetPatientAssociationStateResponse_ (::std::ostream& os,
                                       const ::CDM::SetPatientAssociationStateResponse& x, 
                                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::Flags f = 0);

  void
  SetPatientAssociationStateResponse_ (::std::ostream& os,
                                       const ::CDM::SetPatientAssociationStateResponse& x, 
                                       ::xml_schema::ErrorHandler& eh,
                                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::Flags f = 0);

  void
  SetPatientAssociationStateResponse_ (::std::ostream& os,
                                       const ::CDM::SetPatientAssociationStateResponse& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SetPatientAssociationStateResponse_ (::xercesc::XMLFormatTarget& ft,
                                       const ::CDM::SetPatientAssociationStateResponse& x, 
                                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::Flags f = 0);

  void
  SetPatientAssociationStateResponse_ (::xercesc::XMLFormatTarget& ft,
                                       const ::CDM::SetPatientAssociationStateResponse& x, 
                                       ::xml_schema::ErrorHandler& eh,
                                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::Flags f = 0);

  void
  SetPatientAssociationStateResponse_ (::xercesc::XMLFormatTarget& ft,
                                       const ::CDM::SetPatientAssociationStateResponse& x, 
                                       ::xercesc::DOMErrorHandler& eh,
                                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                       const ::std::string& e = "UTF-8",
                                       ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SetPatientAssociationStateResponse_ (::xercesc::DOMDocument& d,
                                       const ::CDM::SetPatientAssociationStateResponse& x,
                                       ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetPatientAssociationStateResponse_ (const ::CDM::SetPatientAssociationStateResponse& x, 
                                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                       ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const AbstractReport&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractReportPart&);

  void
  operator<< (::xercesc::DOMElement&, const MetricReportPart&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractMetricReport&);

  // Serialize to std::ostream.
  //

  void
  PeriodicMetricReport_ (::std::ostream& os,
                         const ::CDM::PeriodicMetricReport& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  PeriodicMetricReport_ (::std::ostream& os,
                         const ::CDM::PeriodicMetricReport& x, 
                         ::xml_schema::ErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  PeriodicMetricReport_ (::std::ostream& os,
                         const ::CDM::PeriodicMetricReport& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  PeriodicMetricReport_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::PeriodicMetricReport& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  PeriodicMetricReport_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::PeriodicMetricReport& x, 
                         ::xml_schema::ErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  PeriodicMetricReport_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::PeriodicMetricReport& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  PeriodicMetricReport_ (::xercesc::DOMDocument& d,
                         const ::CDM::PeriodicMetricReport& x,
                         ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  PeriodicMetricReport_ (const ::CDM::PeriodicMetricReport& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  EpisodicMetricReport_ (::std::ostream& os,
                         const ::CDM::EpisodicMetricReport& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  EpisodicMetricReport_ (::std::ostream& os,
                         const ::CDM::EpisodicMetricReport& x, 
                         ::xml_schema::ErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  EpisodicMetricReport_ (::std::ostream& os,
                         const ::CDM::EpisodicMetricReport& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  EpisodicMetricReport_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::EpisodicMetricReport& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  EpisodicMetricReport_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::EpisodicMetricReport& x, 
                         ::xml_schema::ErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  void
  EpisodicMetricReport_ (::xercesc::XMLFormatTarget& ft,
                         const ::CDM::EpisodicMetricReport& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  EpisodicMetricReport_ (::xercesc::DOMDocument& d,
                         const ::CDM::EpisodicMetricReport& x,
                         ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  EpisodicMetricReport_ (const ::CDM::EpisodicMetricReport& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const AlertReportPart&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractAlertReport&);

  // Serialize to std::ostream.
  //

  void
  PeriodicAlertReport_ (::std::ostream& os,
                        const ::CDM::PeriodicAlertReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  PeriodicAlertReport_ (::std::ostream& os,
                        const ::CDM::PeriodicAlertReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  PeriodicAlertReport_ (::std::ostream& os,
                        const ::CDM::PeriodicAlertReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  PeriodicAlertReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::PeriodicAlertReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  PeriodicAlertReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::PeriodicAlertReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  PeriodicAlertReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::PeriodicAlertReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  PeriodicAlertReport_ (::xercesc::DOMDocument& d,
                        const ::CDM::PeriodicAlertReport& x,
                        ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  PeriodicAlertReport_ (const ::CDM::PeriodicAlertReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  EpisodicAlertReport_ (::std::ostream& os,
                        const ::CDM::EpisodicAlertReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  EpisodicAlertReport_ (::std::ostream& os,
                        const ::CDM::EpisodicAlertReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  EpisodicAlertReport_ (::std::ostream& os,
                        const ::CDM::EpisodicAlertReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  EpisodicAlertReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::EpisodicAlertReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  EpisodicAlertReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::EpisodicAlertReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  EpisodicAlertReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::EpisodicAlertReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  EpisodicAlertReport_ (::xercesc::DOMDocument& d,
                        const ::CDM::EpisodicAlertReport& x,
                        ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  EpisodicAlertReport_ (const ::CDM::EpisodicAlertReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const ContextChangedReportPart&);

  void
  operator<< (::xercesc::DOMElement&, const AbstractContextChangedReport&);

  // Serialize to std::ostream.
  //

  void
  PeriodicContextChangedReport_ (::std::ostream& os,
                                 const ::CDM::PeriodicContextChangedReport& x, 
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  void
  PeriodicContextChangedReport_ (::std::ostream& os,
                                 const ::CDM::PeriodicContextChangedReport& x, 
                                 ::xml_schema::ErrorHandler& eh,
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  void
  PeriodicContextChangedReport_ (::std::ostream& os,
                                 const ::CDM::PeriodicContextChangedReport& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  PeriodicContextChangedReport_ (::xercesc::XMLFormatTarget& ft,
                                 const ::CDM::PeriodicContextChangedReport& x, 
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  void
  PeriodicContextChangedReport_ (::xercesc::XMLFormatTarget& ft,
                                 const ::CDM::PeriodicContextChangedReport& x, 
                                 ::xml_schema::ErrorHandler& eh,
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  void
  PeriodicContextChangedReport_ (::xercesc::XMLFormatTarget& ft,
                                 const ::CDM::PeriodicContextChangedReport& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  PeriodicContextChangedReport_ (::xercesc::DOMDocument& d,
                                 const ::CDM::PeriodicContextChangedReport& x,
                                 ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  PeriodicContextChangedReport_ (const ::CDM::PeriodicContextChangedReport& x, 
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  EpisodicContextChangedReport_ (::std::ostream& os,
                                 const ::CDM::EpisodicContextChangedReport& x, 
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  void
  EpisodicContextChangedReport_ (::std::ostream& os,
                                 const ::CDM::EpisodicContextChangedReport& x, 
                                 ::xml_schema::ErrorHandler& eh,
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  void
  EpisodicContextChangedReport_ (::std::ostream& os,
                                 const ::CDM::EpisodicContextChangedReport& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  EpisodicContextChangedReport_ (::xercesc::XMLFormatTarget& ft,
                                 const ::CDM::EpisodicContextChangedReport& x, 
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  void
  EpisodicContextChangedReport_ (::xercesc::XMLFormatTarget& ft,
                                 const ::CDM::EpisodicContextChangedReport& x, 
                                 ::xml_schema::ErrorHandler& eh,
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  void
  EpisodicContextChangedReport_ (::xercesc::XMLFormatTarget& ft,
                                 const ::CDM::EpisodicContextChangedReport& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  EpisodicContextChangedReport_ (::xercesc::DOMDocument& d,
                                 const ::CDM::EpisodicContextChangedReport& x,
                                 ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  EpisodicContextChangedReport_ (const ::CDM::EpisodicContextChangedReport& x, 
                                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                 ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const InvocationError&);

  void
  operator<< (::xercesc::DOMAttr&, const InvocationError&);

  void
  operator<< (::xml_schema::ListStream&,
              const InvocationError&);

  void
  operator<< (::xercesc::DOMElement&, const OperationDescriptionModificationReportPart&);

  void
  operator<< (::xercesc::DOMElement&, const OperationDescriptionModificationReport&);

  void
  operator<< (::xercesc::DOMElement&, const OperationInvokedReportPart&);

  // Serialize to std::ostream.
  //

  void
  OperationInvokedReport_ (::std::ostream& os,
                           const ::CDM::OperationInvokedReport& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationInvokedReport_ (::std::ostream& os,
                           const ::CDM::OperationInvokedReport& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationInvokedReport_ (::std::ostream& os,
                           const ::CDM::OperationInvokedReport& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  OperationInvokedReport_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::OperationInvokedReport& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationInvokedReport_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::OperationInvokedReport& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationInvokedReport_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::OperationInvokedReport& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  OperationInvokedReport_ (::xercesc::DOMDocument& d,
                           const ::CDM::OperationInvokedReport& x,
                           ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OperationInvokedReport_ (const ::CDM::OperationInvokedReport& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const OperationalStateChangedReportPart&);

  // Serialize to std::ostream.
  //

  void
  OperationalStateChangedReport_ (::std::ostream& os,
                                  const ::CDM::OperationalStateChangedReport& x, 
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  void
  OperationalStateChangedReport_ (::std::ostream& os,
                                  const ::CDM::OperationalStateChangedReport& x, 
                                  ::xml_schema::ErrorHandler& eh,
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  void
  OperationalStateChangedReport_ (::std::ostream& os,
                                  const ::CDM::OperationalStateChangedReport& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  OperationalStateChangedReport_ (::xercesc::XMLFormatTarget& ft,
                                  const ::CDM::OperationalStateChangedReport& x, 
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  void
  OperationalStateChangedReport_ (::xercesc::XMLFormatTarget& ft,
                                  const ::CDM::OperationalStateChangedReport& x, 
                                  ::xml_schema::ErrorHandler& eh,
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  void
  OperationalStateChangedReport_ (::xercesc::XMLFormatTarget& ft,
                                  const ::CDM::OperationalStateChangedReport& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  OperationalStateChangedReport_ (::xercesc::DOMDocument& d,
                                  const ::CDM::OperationalStateChangedReport& x,
                                  ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OperationalStateChangedReport_ (const ::CDM::OperationalStateChangedReport& x, 
                                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                  ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  OperationCreatedReport_ (::std::ostream& os,
                           const ::CDM::OperationCreatedReport& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationCreatedReport_ (::std::ostream& os,
                           const ::CDM::OperationCreatedReport& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationCreatedReport_ (::std::ostream& os,
                           const ::CDM::OperationCreatedReport& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  OperationCreatedReport_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::OperationCreatedReport& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationCreatedReport_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::OperationCreatedReport& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationCreatedReport_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::OperationCreatedReport& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  OperationCreatedReport_ (::xercesc::DOMDocument& d,
                           const ::CDM::OperationCreatedReport& x,
                           ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OperationCreatedReport_ (const ::CDM::OperationCreatedReport& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  OperationDeletedReport_ (::std::ostream& os,
                           const ::CDM::OperationDeletedReport& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationDeletedReport_ (::std::ostream& os,
                           const ::CDM::OperationDeletedReport& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationDeletedReport_ (::std::ostream& os,
                           const ::CDM::OperationDeletedReport& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  OperationDeletedReport_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::OperationDeletedReport& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationDeletedReport_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::OperationDeletedReport& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  OperationDeletedReport_ (::xercesc::XMLFormatTarget& ft,
                           const ::CDM::OperationDeletedReport& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  OperationDeletedReport_ (::xercesc::DOMDocument& d,
                           const ::CDM::OperationDeletedReport& x,
                           ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OperationDeletedReport_ (const ::CDM::OperationDeletedReport& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const DescriptionModificationType&);

  void
  operator<< (::xercesc::DOMAttr&, const DescriptionModificationType&);

  void
  operator<< (::xml_schema::ListStream&,
              const DescriptionModificationType&);

  void
  operator<< (::xercesc::DOMElement&, const DescriptionModificationReportPart&);

  void
  operator<< (::xercesc::DOMElement&, const DescriptionModificationReport&);

  void
  operator<< (::xercesc::DOMElement&, const MDSModificationReportPart&);

  void
  operator<< (::xercesc::DOMElement&, const MDSModificationReport&);

  // Serialize to std::ostream.
  //

  void
  ObjectCreatedReport_ (::std::ostream& os,
                        const ::CDM::ObjectCreatedReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObjectCreatedReport_ (::std::ostream& os,
                        const ::CDM::ObjectCreatedReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObjectCreatedReport_ (::std::ostream& os,
                        const ::CDM::ObjectCreatedReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ObjectCreatedReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::ObjectCreatedReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObjectCreatedReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::ObjectCreatedReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObjectCreatedReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::ObjectCreatedReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ObjectCreatedReport_ (::xercesc::DOMDocument& d,
                        const ::CDM::ObjectCreatedReport& x,
                        ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  ObjectCreatedReport_ (const ::CDM::ObjectCreatedReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  ObjectUpdatedReport_ (::std::ostream& os,
                        const ::CDM::ObjectUpdatedReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObjectUpdatedReport_ (::std::ostream& os,
                        const ::CDM::ObjectUpdatedReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObjectUpdatedReport_ (::std::ostream& os,
                        const ::CDM::ObjectUpdatedReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ObjectUpdatedReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::ObjectUpdatedReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObjectUpdatedReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::ObjectUpdatedReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObjectUpdatedReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::ObjectUpdatedReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ObjectUpdatedReport_ (::xercesc::DOMDocument& d,
                        const ::CDM::ObjectUpdatedReport& x,
                        ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  ObjectUpdatedReport_ (const ::CDM::ObjectUpdatedReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  ObjectDeletedReport_ (::std::ostream& os,
                        const ::CDM::ObjectDeletedReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObjectDeletedReport_ (::std::ostream& os,
                        const ::CDM::ObjectDeletedReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObjectDeletedReport_ (::std::ostream& os,
                        const ::CDM::ObjectDeletedReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ObjectDeletedReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::ObjectDeletedReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObjectDeletedReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::ObjectDeletedReport& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  void
  ObjectDeletedReport_ (::xercesc::XMLFormatTarget& ft,
                        const ::CDM::ObjectDeletedReport& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ObjectDeletedReport_ (::xercesc::DOMDocument& d,
                        const ::CDM::ObjectDeletedReport& x,
                        ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  ObjectDeletedReport_ (const ::CDM::ObjectDeletedReport& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  MDSCreatedReport_ (::std::ostream& os,
                     const ::CDM::MDSCreatedReport& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  MDSCreatedReport_ (::std::ostream& os,
                     const ::CDM::MDSCreatedReport& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  MDSCreatedReport_ (::std::ostream& os,
                     const ::CDM::MDSCreatedReport& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  MDSCreatedReport_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::MDSCreatedReport& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  MDSCreatedReport_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::MDSCreatedReport& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  MDSCreatedReport_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::MDSCreatedReport& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  MDSCreatedReport_ (::xercesc::DOMDocument& d,
                     const ::CDM::MDSCreatedReport& x,
                     ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  MDSCreatedReport_ (const ::CDM::MDSCreatedReport& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  MDSDeletedReport_ (::std::ostream& os,
                     const ::CDM::MDSDeletedReport& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  MDSDeletedReport_ (::std::ostream& os,
                     const ::CDM::MDSDeletedReport& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  MDSDeletedReport_ (::std::ostream& os,
                     const ::CDM::MDSDeletedReport& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  MDSDeletedReport_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::MDSDeletedReport& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  MDSDeletedReport_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::MDSDeletedReport& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  void
  MDSDeletedReport_ (::xercesc::XMLFormatTarget& ft,
                     const ::CDM::MDSDeletedReport& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  MDSDeletedReport_ (::xercesc::DOMDocument& d,
                     const ::CDM::MDSDeletedReport& x,
                     ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  MDSDeletedReport_ (const ::CDM::MDSDeletedReport& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const SystemErrorReportReportPart&);

  // Serialize to std::ostream.
  //

  void
  SystemErrorReport_ (::std::ostream& os,
                      const ::CDM::SystemErrorReport& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SystemErrorReport_ (::std::ostream& os,
                      const ::CDM::SystemErrorReport& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SystemErrorReport_ (::std::ostream& os,
                      const ::CDM::SystemErrorReport& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SystemErrorReport_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SystemErrorReport& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SystemErrorReport_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SystemErrorReport& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SystemErrorReport_ (::xercesc::XMLFormatTarget& ft,
                      const ::CDM::SystemErrorReport& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SystemErrorReport_ (::xercesc::DOMDocument& d,
                      const ::CDM::SystemErrorReport& x,
                      ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SystemErrorReport_ (const ::CDM::SystemErrorReport& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  WaveformStream_ (::std::ostream& os,
                   const ::CDM::WaveformStream& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  WaveformStream_ (::std::ostream& os,
                   const ::CDM::WaveformStream& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  WaveformStream_ (::std::ostream& os,
                   const ::CDM::WaveformStream& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  WaveformStream_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::WaveformStream& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  WaveformStream_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::WaveformStream& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  WaveformStream_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::WaveformStream& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  WaveformStream_ (::xercesc::DOMDocument& d,
                   const ::CDM::WaveformStream& x,
                   ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  WaveformStream_ (const ::CDM::WaveformStream& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const StreamElement&);

  // Serialize to std::ostream.
  //

  void
  OVStream_ (::std::ostream& os,
             const ::CDM::OVStream& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  OVStream_ (::std::ostream& os,
             const ::CDM::OVStream& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  OVStream_ (::std::ostream& os,
             const ::CDM::OVStream& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  OVStream_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::OVStream& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  OVStream_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::OVStream& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  OVStream_ (::xercesc::XMLFormatTarget& ft,
             const ::CDM::OVStream& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  OVStream_ (::xercesc::DOMDocument& d,
             const ::CDM::OVStream& x,
             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OVStream_ (const ::CDM::OVStream& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const MetricRetrievability&);

  void
  operator<< (::xercesc::DOMAttr&, const MetricRetrievability&);

  void
  operator<< (::xml_schema::ListStream&,
              const MetricRetrievability&);

  // Serialize to std::ostream.
  //

  void
  Retrievability_ (::std::ostream& os,
                   const ::CDM::Retrievability& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  Retrievability_ (::std::ostream& os,
                   const ::CDM::Retrievability& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  Retrievability_ (::std::ostream& os,
                   const ::CDM::Retrievability& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Retrievability_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::Retrievability& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  Retrievability_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::Retrievability& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  void
  Retrievability_ (::xercesc::XMLFormatTarget& ft,
                   const ::CDM::Retrievability& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Retrievability_ (::xercesc::DOMDocument& d,
                   const ::CDM::Retrievability& x,
                   ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Retrievability_ (const ::CDM::Retrievability& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  OperationReference_ (::std::ostream& os,
                       const ::CDM::OperationReference& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  OperationReference_ (::std::ostream& os,
                       const ::CDM::OperationReference& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  OperationReference_ (::std::ostream& os,
                       const ::CDM::OperationReference& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  OperationReference_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::OperationReference& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  OperationReference_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::OperationReference& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  void
  OperationReference_ (::xercesc::XMLFormatTarget& ft,
                       const ::CDM::OperationReference& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  OperationReference_ (::xercesc::DOMDocument& d,
                       const ::CDM::OperationReference& x,
                       ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OperationReference_ (const ::CDM::OperationReference& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const GetMDIB&);

  void
  operator<< (::xercesc::DOMElement&, const GetMDIBResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetMDDescription&);

  void
  operator<< (::xercesc::DOMElement&, const GetMDDescriptionResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetMDState&);

  void
  operator<< (::xercesc::DOMElement&, const GetMDStateResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetContextStates&);

  void
  operator<< (::xercesc::DOMElement&, const GetContextStatesResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetContainmentTree&);

  void
  operator<< (::xercesc::DOMElement&, const GetContainmentTreeResponse&);

  void
  operator<< (::xercesc::DOMElement&, const GetDescriptor&);

  void
  operator<< (::xercesc::DOMElement&, const GetDescriptorResponse&);

  void
  operator<< (::xercesc::DOMElement&, const Text&);

  void
  operator<< (::xercesc::DOMElement&, const SetRange&);

  void
  operator<< (::xercesc::DOMElement&, const SetRangeResponse&);

  void
  operator<< (::xercesc::DOMElement&, const SetValue&);

  void
  operator<< (::xercesc::DOMElement&, const SetValueResponse&);

  void
  operator<< (::xercesc::DOMElement&, const SetString&);

  void
  operator<< (::xercesc::DOMElement&, const SetStringResponse&);

  void
  operator<< (::xercesc::DOMElement&, const SetAlertState&);

  void
  operator<< (::xercesc::DOMElement&, const SetAlertStateResponse&);

  void
  operator<< (::xercesc::DOMElement&, const Activate&);

  void
  operator<< (::xercesc::DOMElement&, const ActivateResponse&);

  void
  operator<< (::xercesc::DOMElement&, const SetContextState&);

  void
  operator<< (::xercesc::DOMElement&, const SetContextStateResponse&);

  void
  operator<< (::xercesc::DOMElement&, const SetPatientAssociationState&);

  void
  operator<< (::xercesc::DOMElement&, const SetPatientAssociationStateResponse&);

  void
  operator<< (::xercesc::DOMElement&, const PeriodicMetricReport&);

  void
  operator<< (::xercesc::DOMElement&, const EpisodicMetricReport&);

  void
  operator<< (::xercesc::DOMElement&, const PeriodicAlertReport&);

  void
  operator<< (::xercesc::DOMElement&, const EpisodicAlertReport&);

  void
  operator<< (::xercesc::DOMElement&, const PeriodicContextChangedReport&);

  void
  operator<< (::xercesc::DOMElement&, const EpisodicContextChangedReport&);

  void
  operator<< (::xercesc::DOMElement&, const OperationInvokedReport&);

  void
  operator<< (::xercesc::DOMElement&, const OperationalStateChangedReport&);

  void
  operator<< (::xercesc::DOMElement&, const OperationCreatedReport&);

  void
  operator<< (::xercesc::DOMElement&, const OperationDeletedReport&);

  void
  operator<< (::xercesc::DOMElement&, const ObjectCreatedReport&);

  void
  operator<< (::xercesc::DOMElement&, const ObjectUpdatedReport&);

  void
  operator<< (::xercesc::DOMElement&, const ObjectDeletedReport&);

  void
  operator<< (::xercesc::DOMElement&, const MDSCreatedReport&);

  void
  operator<< (::xercesc::DOMElement&, const MDSDeletedReport&);

  void
  operator<< (::xercesc::DOMElement&, const SystemErrorReport&);

  void
  operator<< (::xercesc::DOMElement&, const WaveformStream&);

  void
  operator<< (::xercesc::DOMElement&, const OVStream&);

  void
  operator<< (::xercesc::DOMElement&, const Retrievability&);

  void
  operator<< (::xercesc::DOMElement&, const OperationReference&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // BICEPS_MESSAGE_MODEL_HXX
