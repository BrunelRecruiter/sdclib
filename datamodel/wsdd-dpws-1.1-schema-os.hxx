// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef WSDD_DPWS_1_1_SCHEMA_OS_HXX
#define WSDD_DPWS_1_1_SCHEMA_OS_HXX

#include "wsdd-dpws-1.1-schema-os-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ws-addressing.hxx"

namespace WS
{
  namespace DPWS
  {
    class ThisModelType: public ::xml_schema::Type
    {
      public:
      // Manufacturer
      //
      typedef ::WS::DPWS::LocalizedStringType ManufacturerType;
      typedef ::xsd::cxx::tree::sequence< ManufacturerType > ManufacturerSequence;
      typedef ManufacturerSequence::iterator ManufacturerIterator;
      typedef ManufacturerSequence::const_iterator ManufacturerConstIterator;
      typedef ::xsd::cxx::tree::traits< ManufacturerType, char > ManufacturerTraits;

      const ManufacturerSequence&
      Manufacturer () const;

      ManufacturerSequence&
      Manufacturer ();

      void
      Manufacturer (const ManufacturerSequence& s);

      // ManufacturerUrl
      //
      typedef ::xml_schema::Uri ManufacturerUrlType;
      typedef ::xsd::cxx::tree::optional< ManufacturerUrlType > ManufacturerUrlOptional;
      typedef ::xsd::cxx::tree::traits< ManufacturerUrlType, char > ManufacturerUrlTraits;

      const ManufacturerUrlOptional&
      ManufacturerUrl () const;

      ManufacturerUrlOptional&
      ManufacturerUrl ();

      void
      ManufacturerUrl (const ManufacturerUrlType& x);

      void
      ManufacturerUrl (const ManufacturerUrlOptional& x);

      void
      ManufacturerUrl (::std::unique_ptr< ManufacturerUrlType > p);

      // ModelName
      //
      typedef ::WS::DPWS::LocalizedStringType ModelNameType;
      typedef ::xsd::cxx::tree::sequence< ModelNameType > ModelNameSequence;
      typedef ModelNameSequence::iterator ModelNameIterator;
      typedef ModelNameSequence::const_iterator ModelNameConstIterator;
      typedef ::xsd::cxx::tree::traits< ModelNameType, char > ModelNameTraits;

      const ModelNameSequence&
      ModelName () const;

      ModelNameSequence&
      ModelName ();

      void
      ModelName (const ModelNameSequence& s);

      // ModelNumber
      //
      typedef ::xml_schema::String ModelNumberType;
      typedef ::xsd::cxx::tree::optional< ModelNumberType > ModelNumberOptional;
      typedef ::xsd::cxx::tree::traits< ModelNumberType, char > ModelNumberTraits;

      const ModelNumberOptional&
      ModelNumber () const;

      ModelNumberOptional&
      ModelNumber ();

      void
      ModelNumber (const ModelNumberType& x);

      void
      ModelNumber (const ModelNumberOptional& x);

      void
      ModelNumber (::std::unique_ptr< ModelNumberType > p);

      // ModelUrl
      //
      typedef ::xml_schema::Uri ModelUrlType;
      typedef ::xsd::cxx::tree::optional< ModelUrlType > ModelUrlOptional;
      typedef ::xsd::cxx::tree::traits< ModelUrlType, char > ModelUrlTraits;

      const ModelUrlOptional&
      ModelUrl () const;

      ModelUrlOptional&
      ModelUrl ();

      void
      ModelUrl (const ModelUrlType& x);

      void
      ModelUrl (const ModelUrlOptional& x);

      void
      ModelUrl (::std::unique_ptr< ModelUrlType > p);

      // PresentationUrl
      //
      typedef ::xml_schema::Uri PresentationUrlType;
      typedef ::xsd::cxx::tree::optional< PresentationUrlType > PresentationUrlOptional;
      typedef ::xsd::cxx::tree::traits< PresentationUrlType, char > PresentationUrlTraits;

      const PresentationUrlOptional&
      PresentationUrl () const;

      PresentationUrlOptional&
      PresentationUrl ();

      void
      PresentationUrl (const PresentationUrlType& x);

      void
      PresentationUrl (const PresentationUrlOptional& x);

      void
      PresentationUrl (::std::unique_ptr< PresentationUrlType > p);

      // Constructors.
      //
      ThisModelType ();

      ThisModelType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      ThisModelType (const ThisModelType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      virtual ThisModelType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      ThisModelType&
      operator= (const ThisModelType& x);

      virtual 
      ~ThisModelType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ManufacturerSequence Manufacturer_;
      ManufacturerUrlOptional ManufacturerUrl_;
      ModelNameSequence ModelName_;
      ModelNumberOptional ModelNumber_;
      ModelUrlOptional ModelUrl_;
      PresentationUrlOptional PresentationUrl_;
    };

    class ThisDeviceType: public ::xml_schema::Type
    {
      public:
      // FriendlyName
      //
      typedef ::WS::DPWS::LocalizedStringType FriendlyNameType;
      typedef ::xsd::cxx::tree::sequence< FriendlyNameType > FriendlyNameSequence;
      typedef FriendlyNameSequence::iterator FriendlyNameIterator;
      typedef FriendlyNameSequence::const_iterator FriendlyNameConstIterator;
      typedef ::xsd::cxx::tree::traits< FriendlyNameType, char > FriendlyNameTraits;

      const FriendlyNameSequence&
      FriendlyName () const;

      FriendlyNameSequence&
      FriendlyName ();

      void
      FriendlyName (const FriendlyNameSequence& s);

      // FirmwareVersion
      //
      typedef ::xml_schema::String FirmwareVersionType;
      typedef ::xsd::cxx::tree::optional< FirmwareVersionType > FirmwareVersionOptional;
      typedef ::xsd::cxx::tree::traits< FirmwareVersionType, char > FirmwareVersionTraits;

      const FirmwareVersionOptional&
      FirmwareVersion () const;

      FirmwareVersionOptional&
      FirmwareVersion ();

      void
      FirmwareVersion (const FirmwareVersionType& x);

      void
      FirmwareVersion (const FirmwareVersionOptional& x);

      void
      FirmwareVersion (::std::unique_ptr< FirmwareVersionType > p);

      // SerialNumber
      //
      typedef ::xml_schema::String SerialNumberType;
      typedef ::xsd::cxx::tree::optional< SerialNumberType > SerialNumberOptional;
      typedef ::xsd::cxx::tree::traits< SerialNumberType, char > SerialNumberTraits;

      const SerialNumberOptional&
      SerialNumber () const;

      SerialNumberOptional&
      SerialNumber ();

      void
      SerialNumber (const SerialNumberType& x);

      void
      SerialNumber (const SerialNumberOptional& x);

      void
      SerialNumber (::std::unique_ptr< SerialNumberType > p);

      // Constructors.
      //
      ThisDeviceType ();

      ThisDeviceType (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      ThisDeviceType (const ThisDeviceType& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      virtual ThisDeviceType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      ThisDeviceType&
      operator= (const ThisDeviceType& x);

      virtual 
      ~ThisDeviceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      FriendlyNameSequence FriendlyName_;
      FirmwareVersionOptional FirmwareVersion_;
      SerialNumberOptional SerialNumber_;
    };

    class LocalizedStringType: public ::xml_schema::String
    {
      public:
      // Constructors.
      //
      LocalizedStringType ();

      LocalizedStringType (const char*);

      LocalizedStringType (const ::std::string&);

      LocalizedStringType (const ::xml_schema::String&);

      LocalizedStringType (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      LocalizedStringType (const LocalizedStringType& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      virtual LocalizedStringType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~LocalizedStringType ();
    };

    class DeviceRelationshipTypes: public ::xml_schema::String
    {
      public:

      DeviceRelationshipTypes (const char* v);

      DeviceRelationshipTypes (const ::std::string& v);

      DeviceRelationshipTypes (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      DeviceRelationshipTypes (const ::xercesc::DOMAttr& a,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      DeviceRelationshipTypes (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      DeviceRelationshipTypes (const DeviceRelationshipTypes& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      virtual DeviceRelationshipTypes*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class DeviceRelationshipTypeURIs: public ::xml_schema::Uri
    {
      public:
      DeviceRelationshipTypeURIs (const ::xml_schema::Uri& v);

      DeviceRelationshipTypeURIs (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

      DeviceRelationshipTypeURIs (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

      DeviceRelationshipTypeURIs (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

      DeviceRelationshipTypeURIs (const DeviceRelationshipTypeURIs& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

      virtual DeviceRelationshipTypeURIs*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class DeviceMetadataDialectURIs: public ::xml_schema::Uri
    {
      public:
      DeviceMetadataDialectURIs (const ::xml_schema::Uri& v);

      DeviceMetadataDialectURIs (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

      DeviceMetadataDialectURIs (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

      DeviceMetadataDialectURIs (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

      DeviceMetadataDialectURIs (const DeviceMetadataDialectURIs& x,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

      virtual DeviceMetadataDialectURIs*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class DeviceEventingFilterDialects: public ::xml_schema::String
    {
      public:

      DeviceEventingFilterDialects (const char* v);

      DeviceEventingFilterDialects (const ::std::string& v);

      DeviceEventingFilterDialects (const ::xercesc::DOMElement& e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

      DeviceEventingFilterDialects (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

      DeviceEventingFilterDialects (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

      DeviceEventingFilterDialects (const DeviceEventingFilterDialects& x,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

      virtual DeviceEventingFilterDialects*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class DeviceEventingFilterDialectURIs: public ::xml_schema::Uri
    {
      public:
      DeviceEventingFilterDialectURIs (const ::xml_schema::Uri& v);

      DeviceEventingFilterDialectURIs (const ::xercesc::DOMElement& e,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

      DeviceEventingFilterDialectURIs (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

      DeviceEventingFilterDialectURIs (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

      DeviceEventingFilterDialectURIs (const DeviceEventingFilterDialectURIs& x,
                                       ::xml_schema::Flags f = 0,
                                       ::xml_schema::Container* c = 0);

      virtual DeviceEventingFilterDialectURIs*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class DeviceActionURIs: public ::xml_schema::Uri
    {
      public:
      DeviceActionURIs (const ::xml_schema::Uri& v);

      DeviceActionURIs (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      DeviceActionURIs (const ::xercesc::DOMAttr& a,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      DeviceActionURIs (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      DeviceActionURIs (const DeviceActionURIs& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      virtual DeviceActionURIs*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class DeviceSoapFaultSubcodes: public ::xml_schema::String
    {
      public:

      DeviceSoapFaultSubcodes (const char* v);

      DeviceSoapFaultSubcodes (const ::std::string& v);

      DeviceSoapFaultSubcodes (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      DeviceSoapFaultSubcodes (const ::xercesc::DOMAttr& a,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      DeviceSoapFaultSubcodes (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      DeviceSoapFaultSubcodes (const DeviceSoapFaultSubcodes& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      virtual DeviceSoapFaultSubcodes*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class DeviceSoapFaultSubcodeQNames: public ::xml_schema::Qname
    {
      public:
      DeviceSoapFaultSubcodeQNames (const ::xml_schema::Qname& v);

      DeviceSoapFaultSubcodeQNames (const ::xercesc::DOMElement& e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

      DeviceSoapFaultSubcodeQNames (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

      DeviceSoapFaultSubcodeQNames (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

      DeviceSoapFaultSubcodeQNames (const DeviceSoapFaultSubcodeQNames& x,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

      virtual DeviceSoapFaultSubcodeQNames*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class HostServiceType: public ::xml_schema::Type
    {
      public:
      // EndpointReference
      //
      typedef ::WS::ADDRESSING::EndpointReferenceType EndpointReferenceType;
      typedef ::xsd::cxx::tree::traits< EndpointReferenceType, char > EndpointReferenceTraits;

      const EndpointReferenceType&
      EndpointReference () const;

      EndpointReferenceType&
      EndpointReference ();

      void
      EndpointReference (const EndpointReferenceType& x);

      void
      EndpointReference (::std::unique_ptr< EndpointReferenceType > p);

      // Types
      //
      typedef ::WS::DPWS::QNameListType TypesType;
      typedef ::xsd::cxx::tree::optional< TypesType > TypesOptional;
      typedef ::xsd::cxx::tree::traits< TypesType, char > TypesTraits;

      const TypesOptional&
      Types () const;

      TypesOptional&
      Types ();

      void
      Types (const TypesType& x);

      void
      Types (const TypesOptional& x);

      void
      Types (::std::unique_ptr< TypesType > p);

      // Constructors.
      //
      HostServiceType (const EndpointReferenceType&);

      HostServiceType (::std::unique_ptr< EndpointReferenceType >);

      HostServiceType (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      HostServiceType (const HostServiceType& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      virtual HostServiceType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      HostServiceType&
      operator= (const HostServiceType& x);

      virtual 
      ~HostServiceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< EndpointReferenceType > EndpointReference_;
      TypesOptional Types_;
    };

    class HostedServiceType: public ::xml_schema::Type
    {
      public:
      // EndpointReference
      //
      typedef ::WS::ADDRESSING::EndpointReferenceType EndpointReferenceType;
      typedef ::xsd::cxx::tree::sequence< EndpointReferenceType > EndpointReferenceSequence;
      typedef EndpointReferenceSequence::iterator EndpointReferenceIterator;
      typedef EndpointReferenceSequence::const_iterator EndpointReferenceConstIterator;
      typedef ::xsd::cxx::tree::traits< EndpointReferenceType, char > EndpointReferenceTraits;

      const EndpointReferenceSequence&
      EndpointReference () const;

      EndpointReferenceSequence&
      EndpointReference ();

      void
      EndpointReference (const EndpointReferenceSequence& s);

      // Types
      //
      typedef ::WS::DPWS::QNameListType TypesType;
      typedef ::xsd::cxx::tree::traits< TypesType, char > TypesTraits;

      const TypesType&
      Types () const;

      TypesType&
      Types ();

      void
      Types (const TypesType& x);

      void
      Types (::std::unique_ptr< TypesType > p);

      // ServiceId
      //
      typedef ::xml_schema::Uri ServiceIdType;
      typedef ::xsd::cxx::tree::traits< ServiceIdType, char > ServiceIdTraits;

      const ServiceIdType&
      ServiceId () const;

      ServiceIdType&
      ServiceId ();

      void
      ServiceId (const ServiceIdType& x);

      void
      ServiceId (::std::unique_ptr< ServiceIdType > p);

      // Constructors.
      //
      HostedServiceType (const TypesType&,
                         const ServiceIdType&);

      HostedServiceType (::std::unique_ptr< TypesType >,
                         ::std::unique_ptr< ServiceIdType >);

      HostedServiceType (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      HostedServiceType (const HostedServiceType& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      virtual HostedServiceType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      HostedServiceType&
      operator= (const HostedServiceType& x);

      virtual 
      ~HostedServiceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      EndpointReferenceSequence EndpointReference_;
      ::xsd::cxx::tree::one< TypesType > Types_;
      ::xsd::cxx::tree::one< ServiceIdType > ServiceId_;
    };

    class QNameListType: public ::xml_schema::SimpleType,
      public ::xsd::cxx::tree::list< ::xml_schema::Qname, char >
    {
      public:
      QNameListType ();

      QNameListType (size_type n, const ::xml_schema::Qname& x);

      template < typename I >
      QNameListType (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xml_schema::Qname, char > (begin, end, this)
      {
      }

      QNameListType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      QNameListType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      QNameListType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      QNameListType (const QNameListType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      virtual QNameListType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~QNameListType ();
    };

    class DiscoveryTypeValues: public ::xml_schema::Qname
    {
      public:
      DiscoveryTypeValues (const ::xml_schema::Qname& v);

      DiscoveryTypeValues (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      DiscoveryTypeValues (const ::xercesc::DOMAttr& a,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      DiscoveryTypeValues (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      DiscoveryTypeValues (const DiscoveryTypeValues& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      virtual DiscoveryTypeValues*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class AssertionType: public ::xml_schema::Type
    {
      public:
      // Constructors.
      //
      AssertionType ();

      AssertionType (const ::xml_schema::Type&);

      AssertionType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      AssertionType (const AssertionType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      virtual AssertionType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~AssertionType ();
    };

    class Relationship: public ::xml_schema::Type
    {
      public:
      // Host
      //
      typedef ::WS::DPWS::HostServiceType HostType;
      typedef ::xsd::cxx::tree::traits< HostType, char > HostTraits;

      const HostType&
      Host () const;

      HostType&
      Host ();

      void
      Host (const HostType& x);

      void
      Host (::std::unique_ptr< HostType > p);

      // Hosted
      //
      typedef ::WS::DPWS::HostedServiceType HostedType;
      typedef ::xsd::cxx::tree::sequence< HostedType > HostedSequence;
      typedef HostedSequence::iterator HostedIterator;
      typedef HostedSequence::const_iterator HostedConstIterator;
      typedef ::xsd::cxx::tree::traits< HostedType, char > HostedTraits;

      const HostedSequence&
      Hosted () const;

      HostedSequence&
      Hosted ();

      void
      Hosted (const HostedSequence& s);

      // Type
      //
      typedef ::WS::DPWS::DeviceRelationshipTypes TypeType;
      typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

      const TypeType&
      Type () const;

      TypeType&
      Type ();

      void
      Type (const TypeType& x);

      void
      Type (::std::unique_ptr< TypeType > p);

      // Constructors.
      //
      Relationship (const HostType&,
                    const TypeType&);

      Relationship (::std::unique_ptr< HostType >,
                    const TypeType&);

      Relationship (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      Relationship (const Relationship& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      virtual Relationship*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      Relationship&
      operator= (const Relationship& x);

      virtual 
      ~Relationship ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< HostType > Host_;
      HostedSequence Hosted_;
      ::xsd::cxx::tree::one< TypeType > Type_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace WS
{
  namespace DPWS
  {
    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (const ::std::string& uri,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (const ::std::string& uri,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (::std::istream& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (::std::istream& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (::xercesc::InputSource& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (::xercesc::InputSource& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisModelType >
    ThisModel (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (const ::std::string& uri,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (const ::std::string& uri,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (::std::istream& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (::std::istream& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (::xercesc::InputSource& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (::xercesc::InputSource& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (const ::xercesc::DOMDocument& d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::ThisDeviceType >
    ThisDevice (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (const ::std::string& uri,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (const ::std::string& uri,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (::std::istream& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (::std::istream& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (::xercesc::InputSource& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (::xercesc::InputSource& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::Relationship >
    Relationship_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (const ::std::string& uri,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (const ::std::string& uri,
          ::xml_schema::ErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (::std::istream& is,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (::std::istream& is,
          ::xml_schema::ErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::ErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (::xercesc::InputSource& is,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (::xercesc::InputSource& is,
          ::xml_schema::ErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (const ::xercesc::DOMDocument& d,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostServiceType >
    Host (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (const ::std::string& uri,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (const ::std::string& uri,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (::std::istream& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (::std::istream& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (::xercesc::InputSource& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (::xercesc::InputSource& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::HostedServiceType >
    Hosted (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (const ::std::string& uri,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (const ::std::string& uri,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (::std::istream& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (::std::istream& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (::xercesc::InputSource& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (::xercesc::InputSource& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    ServiceId (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (const ::std::string& uri,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (const ::std::string& uri,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (::std::istream& is,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (::std::istream& is,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (::xercesc::InputSource& is,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (::xercesc::InputSource& is,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (const ::xercesc::DOMDocument& d,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::QNameListType >
    Types (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DPWS::AssertionType >
    Profile (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace WS
{
  namespace DPWS
  {
    // Serialize to std::ostream.
    //

    void
    ThisModel (::std::ostream& os,
               const ::WS::DPWS::ThisModelType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    ThisModel (::std::ostream& os,
               const ::WS::DPWS::ThisModelType& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    ThisModel (::std::ostream& os,
               const ::WS::DPWS::ThisModelType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThisModel (::xercesc::XMLFormatTarget& ft,
               const ::WS::DPWS::ThisModelType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    ThisModel (::xercesc::XMLFormatTarget& ft,
               const ::WS::DPWS::ThisModelType& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    ThisModel (::xercesc::XMLFormatTarget& ft,
               const ::WS::DPWS::ThisModelType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThisModel (::xercesc::DOMDocument& d,
               const ::WS::DPWS::ThisModelType& x,
               ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    ThisModel (const ::WS::DPWS::ThisModelType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ThisModelType&);

    // Serialize to std::ostream.
    //

    void
    ThisDevice (::std::ostream& os,
                const ::WS::DPWS::ThisDeviceType& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    ThisDevice (::std::ostream& os,
                const ::WS::DPWS::ThisDeviceType& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    ThisDevice (::std::ostream& os,
                const ::WS::DPWS::ThisDeviceType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ThisDevice (::xercesc::XMLFormatTarget& ft,
                const ::WS::DPWS::ThisDeviceType& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    ThisDevice (::xercesc::XMLFormatTarget& ft,
                const ::WS::DPWS::ThisDeviceType& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    ThisDevice (::xercesc::XMLFormatTarget& ft,
                const ::WS::DPWS::ThisDeviceType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ThisDevice (::xercesc::DOMDocument& d,
                const ::WS::DPWS::ThisDeviceType& x,
                ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    ThisDevice (const ::WS::DPWS::ThisDeviceType& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ThisDeviceType&);

    void
    operator<< (::xercesc::DOMElement&, const LocalizedStringType&);

    // Serialize to std::ostream.
    //

    void
    Relationship_ (::std::ostream& os,
                   const ::WS::DPWS::Relationship& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

    void
    Relationship_ (::std::ostream& os,
                   const ::WS::DPWS::Relationship& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

    void
    Relationship_ (::std::ostream& os,
                   const ::WS::DPWS::Relationship& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Relationship_ (::xercesc::XMLFormatTarget& ft,
                   const ::WS::DPWS::Relationship& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

    void
    Relationship_ (::xercesc::XMLFormatTarget& ft,
                   const ::WS::DPWS::Relationship& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

    void
    Relationship_ (::xercesc::XMLFormatTarget& ft,
                   const ::WS::DPWS::Relationship& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Relationship_ (::xercesc::DOMDocument& d,
                   const ::WS::DPWS::Relationship& x,
                   ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Relationship_ (const ::WS::DPWS::Relationship& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const DeviceRelationshipTypes&);

    void
    operator<< (::xercesc::DOMAttr&, const DeviceRelationshipTypes&);

    void
    operator<< (::xml_schema::ListStream&,
                const DeviceRelationshipTypes&);

    void
    operator<< (::xercesc::DOMElement&, const DeviceRelationshipTypeURIs&);

    void
    operator<< (::xercesc::DOMAttr&, const DeviceRelationshipTypeURIs&);

    void
    operator<< (::xml_schema::ListStream&,
                const DeviceRelationshipTypeURIs&);

    void
    operator<< (::xercesc::DOMElement&, const DeviceMetadataDialectURIs&);

    void
    operator<< (::xercesc::DOMAttr&, const DeviceMetadataDialectURIs&);

    void
    operator<< (::xml_schema::ListStream&,
                const DeviceMetadataDialectURIs&);

    void
    operator<< (::xercesc::DOMElement&, const DeviceEventingFilterDialects&);

    void
    operator<< (::xercesc::DOMAttr&, const DeviceEventingFilterDialects&);

    void
    operator<< (::xml_schema::ListStream&,
                const DeviceEventingFilterDialects&);

    void
    operator<< (::xercesc::DOMElement&, const DeviceEventingFilterDialectURIs&);

    void
    operator<< (::xercesc::DOMAttr&, const DeviceEventingFilterDialectURIs&);

    void
    operator<< (::xml_schema::ListStream&,
                const DeviceEventingFilterDialectURIs&);

    void
    operator<< (::xercesc::DOMElement&, const DeviceActionURIs&);

    void
    operator<< (::xercesc::DOMAttr&, const DeviceActionURIs&);

    void
    operator<< (::xml_schema::ListStream&,
                const DeviceActionURIs&);

    void
    operator<< (::xercesc::DOMElement&, const DeviceSoapFaultSubcodes&);

    void
    operator<< (::xercesc::DOMAttr&, const DeviceSoapFaultSubcodes&);

    void
    operator<< (::xml_schema::ListStream&,
                const DeviceSoapFaultSubcodes&);

    void
    operator<< (::xercesc::DOMElement&, const DeviceSoapFaultSubcodeQNames&);

    void
    operator<< (::xercesc::DOMAttr&, const DeviceSoapFaultSubcodeQNames&);

    void
    operator<< (::xml_schema::ListStream&,
                const DeviceSoapFaultSubcodeQNames&);

    // Serialize to std::ostream.
    //

    void
    Host (::std::ostream& os,
          const ::WS::DPWS::HostServiceType& x, 
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::Flags f = 0);

    void
    Host (::std::ostream& os,
          const ::WS::DPWS::HostServiceType& x, 
          ::xml_schema::ErrorHandler& eh,
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::Flags f = 0);

    void
    Host (::std::ostream& os,
          const ::WS::DPWS::HostServiceType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Host (::xercesc::XMLFormatTarget& ft,
          const ::WS::DPWS::HostServiceType& x, 
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::Flags f = 0);

    void
    Host (::xercesc::XMLFormatTarget& ft,
          const ::WS::DPWS::HostServiceType& x, 
          ::xml_schema::ErrorHandler& eh,
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::Flags f = 0);

    void
    Host (::xercesc::XMLFormatTarget& ft,
          const ::WS::DPWS::HostServiceType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Host (::xercesc::DOMDocument& d,
          const ::WS::DPWS::HostServiceType& x,
          ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Host (const ::WS::DPWS::HostServiceType& x, 
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const HostServiceType&);

    // Serialize to std::ostream.
    //

    void
    Hosted (::std::ostream& os,
            const ::WS::DPWS::HostedServiceType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Hosted (::std::ostream& os,
            const ::WS::DPWS::HostedServiceType& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Hosted (::std::ostream& os,
            const ::WS::DPWS::HostedServiceType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Hosted (::xercesc::XMLFormatTarget& ft,
            const ::WS::DPWS::HostedServiceType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Hosted (::xercesc::XMLFormatTarget& ft,
            const ::WS::DPWS::HostedServiceType& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Hosted (::xercesc::XMLFormatTarget& ft,
            const ::WS::DPWS::HostedServiceType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Hosted (::xercesc::DOMDocument& d,
            const ::WS::DPWS::HostedServiceType& x,
            ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Hosted (const ::WS::DPWS::HostedServiceType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const HostedServiceType&);

    // Serialize to std::ostream.
    //

    void
    ServiceId (::std::ostream& os,
               const ::xml_schema::Uri& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    ServiceId (::std::ostream& os,
               const ::xml_schema::Uri& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    ServiceId (::std::ostream& os,
               const ::xml_schema::Uri& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ServiceId (::xercesc::XMLFormatTarget& ft,
               const ::xml_schema::Uri& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    ServiceId (::xercesc::XMLFormatTarget& ft,
               const ::xml_schema::Uri& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    ServiceId (::xercesc::XMLFormatTarget& ft,
               const ::xml_schema::Uri& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ServiceId (::xercesc::DOMDocument& d,
               const ::xml_schema::Uri& x,
               ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    ServiceId (const ::xml_schema::Uri& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Types (::std::ostream& os,
           const ::WS::DPWS::QNameListType& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Types (::std::ostream& os,
           const ::WS::DPWS::QNameListType& x, 
           ::xml_schema::ErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Types (::std::ostream& os,
           const ::WS::DPWS::QNameListType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Types (::xercesc::XMLFormatTarget& ft,
           const ::WS::DPWS::QNameListType& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Types (::xercesc::XMLFormatTarget& ft,
           const ::WS::DPWS::QNameListType& x, 
           ::xml_schema::ErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Types (::xercesc::XMLFormatTarget& ft,
           const ::WS::DPWS::QNameListType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Types (::xercesc::DOMDocument& d,
           const ::WS::DPWS::QNameListType& x,
           ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Types (const ::WS::DPWS::QNameListType& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const QNameListType&);

    void
    operator<< (::xercesc::DOMAttr&, const QNameListType&);

    void
    operator<< (::xml_schema::ListStream&,
                const QNameListType&);

    void
    operator<< (::xercesc::DOMElement&, const DiscoveryTypeValues&);

    void
    operator<< (::xercesc::DOMAttr&, const DiscoveryTypeValues&);

    void
    operator<< (::xml_schema::ListStream&,
                const DiscoveryTypeValues&);

    // Serialize to std::ostream.
    //

    void
    Profile (::std::ostream& os,
             const ::WS::DPWS::AssertionType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    Profile (::std::ostream& os,
             const ::WS::DPWS::AssertionType& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    Profile (::std::ostream& os,
             const ::WS::DPWS::AssertionType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Profile (::xercesc::XMLFormatTarget& ft,
             const ::WS::DPWS::AssertionType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    Profile (::xercesc::XMLFormatTarget& ft,
             const ::WS::DPWS::AssertionType& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    Profile (::xercesc::XMLFormatTarget& ft,
             const ::WS::DPWS::AssertionType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Profile (::xercesc::DOMDocument& d,
             const ::WS::DPWS::AssertionType& x,
             ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Profile (const ::WS::DPWS::AssertionType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AssertionType&);

    void
    operator<< (::xercesc::DOMElement&, const Relationship&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // WSDD_DPWS_1_1_SCHEMA_OS_HXX
