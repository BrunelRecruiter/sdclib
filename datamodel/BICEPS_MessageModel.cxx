// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "BICEPS_MessageModel.hxx"

namespace CDM
{
  // AbstractGet
  // 

  const AbstractGet::ExtensionOptional& AbstractGet::
  Extension () const
  {
    return this->Extension_;
  }

  AbstractGet::ExtensionOptional& AbstractGet::
  Extension ()
  {
    return this->Extension_;
  }

  void AbstractGet::
  Extension (const ExtensionType& x)
  {
    this->Extension_.set (x);
  }

  void AbstractGet::
  Extension (const ExtensionOptional& x)
  {
    this->Extension_ = x;
  }

  void AbstractGet::
  Extension (::std::unique_ptr< ExtensionType > x)
  {
    this->Extension_.set (std::move (x));
  }


  // AbstractGetResponse
  // 

  const AbstractGetResponse::ExtensionOptional& AbstractGetResponse::
  Extension () const
  {
    return this->Extension_;
  }

  AbstractGetResponse::ExtensionOptional& AbstractGetResponse::
  Extension ()
  {
    return this->Extension_;
  }

  void AbstractGetResponse::
  Extension (const ExtensionType& x)
  {
    this->Extension_.set (x);
  }

  void AbstractGetResponse::
  Extension (const ExtensionOptional& x)
  {
    this->Extension_ = x;
  }

  void AbstractGetResponse::
  Extension (::std::unique_ptr< ExtensionType > x)
  {
    this->Extension_.set (std::move (x));
  }

  const AbstractGetResponse::MDIBVersionType& AbstractGetResponse::
  MDIBVersion () const
  {
    return this->MDIBVersion_.get ();
  }

  AbstractGetResponse::MDIBVersionType& AbstractGetResponse::
  MDIBVersion ()
  {
    return this->MDIBVersion_.get ();
  }

  void AbstractGetResponse::
  MDIBVersion (const MDIBVersionType& x)
  {
    this->MDIBVersion_.set (x);
  }

  void AbstractGetResponse::
  MDIBVersion (::std::unique_ptr< MDIBVersionType > x)
  {
    this->MDIBVersion_.set (std::move (x));
  }


  // GetLocalizedText
  // 

  const GetLocalizedText::RefType& GetLocalizedText::
  Ref () const
  {
    return this->Ref_.get ();
  }

  GetLocalizedText::RefType& GetLocalizedText::
  Ref ()
  {
    return this->Ref_.get ();
  }

  void GetLocalizedText::
  Ref (const RefType& x)
  {
    this->Ref_.set (x);
  }

  void GetLocalizedText::
  Ref (::std::unique_ptr< RefType > x)
  {
    this->Ref_.set (std::move (x));
  }

  const GetLocalizedText::VersionOptional& GetLocalizedText::
  Version () const
  {
    return this->Version_;
  }

  GetLocalizedText::VersionOptional& GetLocalizedText::
  Version ()
  {
    return this->Version_;
  }

  void GetLocalizedText::
  Version (const VersionType& x)
  {
    this->Version_.set (x);
  }

  void GetLocalizedText::
  Version (const VersionOptional& x)
  {
    this->Version_ = x;
  }

  void GetLocalizedText::
  Version (::std::unique_ptr< VersionType > x)
  {
    this->Version_.set (std::move (x));
  }

  const GetLocalizedText::LangSequence& GetLocalizedText::
  Lang () const
  {
    return this->Lang_;
  }

  GetLocalizedText::LangSequence& GetLocalizedText::
  Lang ()
  {
    return this->Lang_;
  }

  void GetLocalizedText::
  Lang (const LangSequence& s)
  {
    this->Lang_ = s;
  }


  // GetLocalizedTextResponse
  // 

  const GetLocalizedTextResponse::TextSequence& GetLocalizedTextResponse::
  Text () const
  {
    return this->Text_;
  }

  GetLocalizedTextResponse::TextSequence& GetLocalizedTextResponse::
  Text ()
  {
    return this->Text_;
  }

  void GetLocalizedTextResponse::
  Text (const TextSequence& s)
  {
    this->Text_ = s;
  }


  // GetSupportedLanguages
  // 


  // GetSupportedLanguagesResponse
  // 

  const GetSupportedLanguagesResponse::LangSequence& GetSupportedLanguagesResponse::
  Lang () const
  {
    return this->Lang_;
  }

  GetSupportedLanguagesResponse::LangSequence& GetSupportedLanguagesResponse::
  Lang ()
  {
    return this->Lang_;
  }

  void GetSupportedLanguagesResponse::
  Lang (const LangSequence& s)
  {
    this->Lang_ = s;
  }


  // GetDescriptorsFromArchive
  // 

  const GetDescriptorsFromArchive::DescriptorRevisionOptional& GetDescriptorsFromArchive::
  DescriptorRevision () const
  {
    return this->DescriptorRevision_;
  }

  GetDescriptorsFromArchive::DescriptorRevisionOptional& GetDescriptorsFromArchive::
  DescriptorRevision ()
  {
    return this->DescriptorRevision_;
  }

  void GetDescriptorsFromArchive::
  DescriptorRevision (const DescriptorRevisionType& x)
  {
    this->DescriptorRevision_.set (x);
  }

  void GetDescriptorsFromArchive::
  DescriptorRevision (const DescriptorRevisionOptional& x)
  {
    this->DescriptorRevision_ = x;
  }

  void GetDescriptorsFromArchive::
  DescriptorRevision (::std::unique_ptr< DescriptorRevisionType > x)
  {
    this->DescriptorRevision_.set (std::move (x));
  }

  const GetDescriptorsFromArchive::TimeFrameOptional& GetDescriptorsFromArchive::
  TimeFrame () const
  {
    return this->TimeFrame_;
  }

  GetDescriptorsFromArchive::TimeFrameOptional& GetDescriptorsFromArchive::
  TimeFrame ()
  {
    return this->TimeFrame_;
  }

  void GetDescriptorsFromArchive::
  TimeFrame (const TimeFrameType& x)
  {
    this->TimeFrame_.set (x);
  }

  void GetDescriptorsFromArchive::
  TimeFrame (const TimeFrameOptional& x)
  {
    this->TimeFrame_ = x;
  }

  void GetDescriptorsFromArchive::
  TimeFrame (::std::unique_ptr< TimeFrameType > x)
  {
    this->TimeFrame_.set (std::move (x));
  }

  const GetDescriptorsFromArchive::HandleSequence& GetDescriptorsFromArchive::
  Handle () const
  {
    return this->Handle_;
  }

  GetDescriptorsFromArchive::HandleSequence& GetDescriptorsFromArchive::
  Handle ()
  {
    return this->Handle_;
  }

  void GetDescriptorsFromArchive::
  Handle (const HandleSequence& s)
  {
    this->Handle_ = s;
  }


  // GetDescriptorsFromArchiveResponse
  // 

  const GetDescriptorsFromArchiveResponse::DescriptorSequence& GetDescriptorsFromArchiveResponse::
  Descriptor () const
  {
    return this->Descriptor_;
  }

  GetDescriptorsFromArchiveResponse::DescriptorSequence& GetDescriptorsFromArchiveResponse::
  Descriptor ()
  {
    return this->Descriptor_;
  }

  void GetDescriptorsFromArchiveResponse::
  Descriptor (const DescriptorSequence& s)
  {
    this->Descriptor_ = s;
  }


  // GetStatesFromArchive
  // 

  const GetStatesFromArchive::StateRevisionType& GetStatesFromArchive::
  StateRevision () const
  {
    return this->StateRevision_.get ();
  }

  GetStatesFromArchive::StateRevisionType& GetStatesFromArchive::
  StateRevision ()
  {
    return this->StateRevision_.get ();
  }

  void GetStatesFromArchive::
  StateRevision (const StateRevisionType& x)
  {
    this->StateRevision_.set (x);
  }

  void GetStatesFromArchive::
  StateRevision (::std::unique_ptr< StateRevisionType > x)
  {
    this->StateRevision_.set (std::move (x));
  }

  const GetStatesFromArchive::TimeFrameOptional& GetStatesFromArchive::
  TimeFrame () const
  {
    return this->TimeFrame_;
  }

  GetStatesFromArchive::TimeFrameOptional& GetStatesFromArchive::
  TimeFrame ()
  {
    return this->TimeFrame_;
  }

  void GetStatesFromArchive::
  TimeFrame (const TimeFrameType& x)
  {
    this->TimeFrame_.set (x);
  }

  void GetStatesFromArchive::
  TimeFrame (const TimeFrameOptional& x)
  {
    this->TimeFrame_ = x;
  }

  void GetStatesFromArchive::
  TimeFrame (::std::unique_ptr< TimeFrameType > x)
  {
    this->TimeFrame_.set (std::move (x));
  }

  const GetStatesFromArchive::HandleSequence& GetStatesFromArchive::
  Handle () const
  {
    return this->Handle_;
  }

  GetStatesFromArchive::HandleSequence& GetStatesFromArchive::
  Handle ()
  {
    return this->Handle_;
  }

  void GetStatesFromArchive::
  Handle (const HandleSequence& s)
  {
    this->Handle_ = s;
  }


  // GetStatesFromArchiveResponse
  // 

  const GetStatesFromArchiveResponse::StateSequence& GetStatesFromArchiveResponse::
  State () const
  {
    return this->State_;
  }

  GetStatesFromArchiveResponse::StateSequence& GetStatesFromArchiveResponse::
  State ()
  {
    return this->State_;
  }

  void GetStatesFromArchiveResponse::
  State (const StateSequence& s)
  {
    this->State_ = s;
  }


  // TimeFrame
  // 

  const TimeFrame::StartOptional& TimeFrame::
  Start () const
  {
    return this->Start_;
  }

  TimeFrame::StartOptional& TimeFrame::
  Start ()
  {
    return this->Start_;
  }

  void TimeFrame::
  Start (const StartType& x)
  {
    this->Start_.set (x);
  }

  void TimeFrame::
  Start (const StartOptional& x)
  {
    this->Start_ = x;
  }

  void TimeFrame::
  Start (::std::unique_ptr< StartType > x)
  {
    this->Start_.set (std::move (x));
  }

  const TimeFrame::EndOptional& TimeFrame::
  End () const
  {
    return this->End_;
  }

  TimeFrame::EndOptional& TimeFrame::
  End ()
  {
    return this->End_;
  }

  void TimeFrame::
  End (const EndType& x)
  {
    this->End_.set (x);
  }

  void TimeFrame::
  End (const EndOptional& x)
  {
    this->End_ = x;
  }

  void TimeFrame::
  End (::std::unique_ptr< EndType > x)
  {
    this->End_.set (std::move (x));
  }


  // TransactionID
  // 


  // InvocationState
  // 

  InvocationState::
  InvocationState (Value v)
  : ::xml_schema::String (_xsd_InvocationState_literals_[v])
  {
  }

  InvocationState::
  InvocationState (const char* v)
  : ::xml_schema::String (v)
  {
  }

  InvocationState::
  InvocationState (const ::std::string& v)
  : ::xml_schema::String (v)
  {
  }

  InvocationState::
  InvocationState (const ::xml_schema::String& v)
  : ::xml_schema::String (v)
  {
  }

  InvocationState::
  InvocationState (const InvocationState& v,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::String (v, f, c)
  {
  }

  InvocationState& InvocationState::
  operator= (Value v)
  {
    static_cast< ::xml_schema::String& > (*this) = 
    ::xml_schema::String (_xsd_InvocationState_literals_[v]);

    return *this;
  }


  // ArgumentType
  // 

  const ArgumentType::ExtensionOptional& ArgumentType::
  Extension () const
  {
    return this->Extension_;
  }

  ArgumentType::ExtensionOptional& ArgumentType::
  Extension ()
  {
    return this->Extension_;
  }

  void ArgumentType::
  Extension (const ExtensionType& x)
  {
    this->Extension_.set (x);
  }

  void ArgumentType::
  Extension (const ExtensionOptional& x)
  {
    this->Extension_ = x;
  }

  void ArgumentType::
  Extension (::std::unique_ptr< ExtensionType > x)
  {
    this->Extension_.set (std::move (x));
  }

  const ArgumentType::ArgValueType& ArgumentType::
  ArgValue () const
  {
    return this->ArgValue_.get ();
  }

  ArgumentType::ArgValueType& ArgumentType::
  ArgValue ()
  {
    return this->ArgValue_.get ();
  }

  void ArgumentType::
  ArgValue (const ArgValueType& x)
  {
    this->ArgValue_.set (x);
  }

  void ArgumentType::
  ArgValue (::std::unique_ptr< ArgValueType > x)
  {
    this->ArgValue_.set (std::move (x));
  }


  // AbstractSet
  // 

  const AbstractSet::ExtensionOptional& AbstractSet::
  Extension () const
  {
    return this->Extension_;
  }

  AbstractSet::ExtensionOptional& AbstractSet::
  Extension ()
  {
    return this->Extension_;
  }

  void AbstractSet::
  Extension (const ExtensionType& x)
  {
    this->Extension_.set (x);
  }

  void AbstractSet::
  Extension (const ExtensionOptional& x)
  {
    this->Extension_ = x;
  }

  void AbstractSet::
  Extension (::std::unique_ptr< ExtensionType > x)
  {
    this->Extension_.set (std::move (x));
  }

  const AbstractSet::OperationHandleRefType& AbstractSet::
  OperationHandleRef () const
  {
    return this->OperationHandleRef_.get ();
  }

  AbstractSet::OperationHandleRefType& AbstractSet::
  OperationHandleRef ()
  {
    return this->OperationHandleRef_.get ();
  }

  void AbstractSet::
  OperationHandleRef (const OperationHandleRefType& x)
  {
    this->OperationHandleRef_.set (x);
  }

  void AbstractSet::
  OperationHandleRef (::std::unique_ptr< OperationHandleRefType > x)
  {
    this->OperationHandleRef_.set (std::move (x));
  }


  // AbstractSetResponse
  // 

  const AbstractSetResponse::ExtensionOptional& AbstractSetResponse::
  Extension () const
  {
    return this->Extension_;
  }

  AbstractSetResponse::ExtensionOptional& AbstractSetResponse::
  Extension ()
  {
    return this->Extension_;
  }

  void AbstractSetResponse::
  Extension (const ExtensionType& x)
  {
    this->Extension_.set (x);
  }

  void AbstractSetResponse::
  Extension (const ExtensionOptional& x)
  {
    this->Extension_ = x;
  }

  void AbstractSetResponse::
  Extension (::std::unique_ptr< ExtensionType > x)
  {
    this->Extension_.set (std::move (x));
  }

  const AbstractSetResponse::TransactionIdType& AbstractSetResponse::
  TransactionId () const
  {
    return this->TransactionId_.get ();
  }

  AbstractSetResponse::TransactionIdType& AbstractSetResponse::
  TransactionId ()
  {
    return this->TransactionId_.get ();
  }

  void AbstractSetResponse::
  TransactionId (const TransactionIdType& x)
  {
    this->TransactionId_.set (x);
  }

  void AbstractSetResponse::
  TransactionId (::std::unique_ptr< TransactionIdType > x)
  {
    this->TransactionId_.set (std::move (x));
  }

  const AbstractSetResponse::InvocationStateType& AbstractSetResponse::
  InvocationState () const
  {
    return this->InvocationState_.get ();
  }

  AbstractSetResponse::InvocationStateType& AbstractSetResponse::
  InvocationState ()
  {
    return this->InvocationState_.get ();
  }

  void AbstractSetResponse::
  InvocationState (const InvocationStateType& x)
  {
    this->InvocationState_.set (x);
  }

  void AbstractSetResponse::
  InvocationState (::std::unique_ptr< InvocationStateType > x)
  {
    this->InvocationState_.set (std::move (x));
  }

  const AbstractSetResponse::OperationErrorOptional& AbstractSetResponse::
  OperationError () const
  {
    return this->OperationError_;
  }

  AbstractSetResponse::OperationErrorOptional& AbstractSetResponse::
  OperationError ()
  {
    return this->OperationError_;
  }

  void AbstractSetResponse::
  OperationError (const OperationErrorType& x)
  {
    this->OperationError_.set (x);
  }

  void AbstractSetResponse::
  OperationError (const OperationErrorOptional& x)
  {
    this->OperationError_ = x;
  }

  void AbstractSetResponse::
  OperationError (::std::unique_ptr< OperationErrorType > x)
  {
    this->OperationError_.set (std::move (x));
  }

  const AbstractSetResponse::OperationErrorMessageOptional& AbstractSetResponse::
  OperationErrorMessage () const
  {
    return this->OperationErrorMessage_;
  }

  AbstractSetResponse::OperationErrorMessageOptional& AbstractSetResponse::
  OperationErrorMessage ()
  {
    return this->OperationErrorMessage_;
  }

  void AbstractSetResponse::
  OperationErrorMessage (const OperationErrorMessageType& x)
  {
    this->OperationErrorMessage_.set (x);
  }

  void AbstractSetResponse::
  OperationErrorMessage (const OperationErrorMessageOptional& x)
  {
    this->OperationErrorMessage_ = x;
  }

  void AbstractSetResponse::
  OperationErrorMessage (::std::unique_ptr< OperationErrorMessageType > x)
  {
    this->OperationErrorMessage_.set (std::move (x));
  }

  const AbstractSetResponse::MDIBVersionType& AbstractSetResponse::
  MDIBVersion () const
  {
    return this->MDIBVersion_.get ();
  }

  AbstractSetResponse::MDIBVersionType& AbstractSetResponse::
  MDIBVersion ()
  {
    return this->MDIBVersion_.get ();
  }

  void AbstractSetResponse::
  MDIBVersion (const MDIBVersionType& x)
  {
    this->MDIBVersion_.set (x);
  }

  void AbstractSetResponse::
  MDIBVersion (::std::unique_ptr< MDIBVersionType > x)
  {
    this->MDIBVersion_.set (std::move (x));
  }


  // AbstractReport
  // 

  const AbstractReport::ExtensionOptional& AbstractReport::
  Extension () const
  {
    return this->Extension_;
  }

  AbstractReport::ExtensionOptional& AbstractReport::
  Extension ()
  {
    return this->Extension_;
  }

  void AbstractReport::
  Extension (const ExtensionType& x)
  {
    this->Extension_.set (x);
  }

  void AbstractReport::
  Extension (const ExtensionOptional& x)
  {
    this->Extension_ = x;
  }

  void AbstractReport::
  Extension (::std::unique_ptr< ExtensionType > x)
  {
    this->Extension_.set (std::move (x));
  }

  const AbstractReport::MDIBVersionType& AbstractReport::
  MDIBVersion () const
  {
    return this->MDIBVersion_.get ();
  }

  AbstractReport::MDIBVersionType& AbstractReport::
  MDIBVersion ()
  {
    return this->MDIBVersion_.get ();
  }

  void AbstractReport::
  MDIBVersion (const MDIBVersionType& x)
  {
    this->MDIBVersion_.set (x);
  }

  void AbstractReport::
  MDIBVersion (::std::unique_ptr< MDIBVersionType > x)
  {
    this->MDIBVersion_.set (std::move (x));
  }


  // AbstractReportPart
  // 

  const AbstractReportPart::ExtensionOptional& AbstractReportPart::
  Extension () const
  {
    return this->Extension_;
  }

  AbstractReportPart::ExtensionOptional& AbstractReportPart::
  Extension ()
  {
    return this->Extension_;
  }

  void AbstractReportPart::
  Extension (const ExtensionType& x)
  {
    this->Extension_.set (x);
  }

  void AbstractReportPart::
  Extension (const ExtensionOptional& x)
  {
    this->Extension_ = x;
  }

  void AbstractReportPart::
  Extension (::std::unique_ptr< ExtensionType > x)
  {
    this->Extension_.set (std::move (x));
  }

  const AbstractReportPart::SourceMDSOptional& AbstractReportPart::
  SourceMDS () const
  {
    return this->SourceMDS_;
  }

  AbstractReportPart::SourceMDSOptional& AbstractReportPart::
  SourceMDS ()
  {
    return this->SourceMDS_;
  }

  void AbstractReportPart::
  SourceMDS (const SourceMDSType& x)
  {
    this->SourceMDS_.set (x);
  }

  void AbstractReportPart::
  SourceMDS (const SourceMDSOptional& x)
  {
    this->SourceMDS_ = x;
  }

  void AbstractReportPart::
  SourceMDS (::std::unique_ptr< SourceMDSType > x)
  {
    this->SourceMDS_.set (std::move (x));
  }


  // MetricReportPart
  // 

  const MetricReportPart::MetricStateSequence& MetricReportPart::
  MetricState () const
  {
    return this->MetricState_;
  }

  MetricReportPart::MetricStateSequence& MetricReportPart::
  MetricState ()
  {
    return this->MetricState_;
  }

  void MetricReportPart::
  MetricState (const MetricStateSequence& s)
  {
    this->MetricState_ = s;
  }


  // AbstractMetricReport
  // 

  const AbstractMetricReport::ReportPartSequence& AbstractMetricReport::
  ReportPart () const
  {
    return this->ReportPart_;
  }

  AbstractMetricReport::ReportPartSequence& AbstractMetricReport::
  ReportPart ()
  {
    return this->ReportPart_;
  }

  void AbstractMetricReport::
  ReportPart (const ReportPartSequence& s)
  {
    this->ReportPart_ = s;
  }


  // AlertReportPart
  // 

  const AlertReportPart::AlertStateSequence& AlertReportPart::
  AlertState () const
  {
    return this->AlertState_;
  }

  AlertReportPart::AlertStateSequence& AlertReportPart::
  AlertState ()
  {
    return this->AlertState_;
  }

  void AlertReportPart::
  AlertState (const AlertStateSequence& s)
  {
    this->AlertState_ = s;
  }


  // AbstractAlertReport
  // 

  const AbstractAlertReport::AlertReportDetailSequence& AbstractAlertReport::
  AlertReportDetail () const
  {
    return this->AlertReportDetail_;
  }

  AbstractAlertReport::AlertReportDetailSequence& AbstractAlertReport::
  AlertReportDetail ()
  {
    return this->AlertReportDetail_;
  }

  void AbstractAlertReport::
  AlertReportDetail (const AlertReportDetailSequence& s)
  {
    this->AlertReportDetail_ = s;
  }


  // ContextChangedReportPart
  // 

  const ContextChangedReportPart::ChangedContextStateSequence& ContextChangedReportPart::
  ChangedContextState () const
  {
    return this->ChangedContextState_;
  }

  ContextChangedReportPart::ChangedContextStateSequence& ContextChangedReportPart::
  ChangedContextState ()
  {
    return this->ChangedContextState_;
  }

  void ContextChangedReportPart::
  ChangedContextState (const ChangedContextStateSequence& s)
  {
    this->ChangedContextState_ = s;
  }


  // AbstractContextChangedReport
  // 

  const AbstractContextChangedReport::ReportPartSequence& AbstractContextChangedReport::
  ReportPart () const
  {
    return this->ReportPart_;
  }

  AbstractContextChangedReport::ReportPartSequence& AbstractContextChangedReport::
  ReportPart ()
  {
    return this->ReportPart_;
  }

  void AbstractContextChangedReport::
  ReportPart (const ReportPartSequence& s)
  {
    this->ReportPart_ = s;
  }


  // InvocationError
  // 

  InvocationError::
  InvocationError (Value v)
  : ::xml_schema::String (_xsd_InvocationError_literals_[v])
  {
  }

  InvocationError::
  InvocationError (const char* v)
  : ::xml_schema::String (v)
  {
  }

  InvocationError::
  InvocationError (const ::std::string& v)
  : ::xml_schema::String (v)
  {
  }

  InvocationError::
  InvocationError (const ::xml_schema::String& v)
  : ::xml_schema::String (v)
  {
  }

  InvocationError::
  InvocationError (const InvocationError& v,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::String (v, f, c)
  {
  }

  InvocationError& InvocationError::
  operator= (Value v)
  {
    static_cast< ::xml_schema::String& > (*this) = 
    ::xml_schema::String (_xsd_InvocationError_literals_[v]);

    return *this;
  }


  // OperationDescriptionModificationReportPart
  // 

  const OperationDescriptionModificationReportPart::OperationDescriptionSequence& OperationDescriptionModificationReportPart::
  OperationDescription () const
  {
    return this->OperationDescription_;
  }

  OperationDescriptionModificationReportPart::OperationDescriptionSequence& OperationDescriptionModificationReportPart::
  OperationDescription ()
  {
    return this->OperationDescription_;
  }

  void OperationDescriptionModificationReportPart::
  OperationDescription (const OperationDescriptionSequence& s)
  {
    this->OperationDescription_ = s;
  }


  // OperationDescriptionModificationReport
  // 

  const OperationDescriptionModificationReport::ReportDetailSequence& OperationDescriptionModificationReport::
  ReportDetail () const
  {
    return this->ReportDetail_;
  }

  OperationDescriptionModificationReport::ReportDetailSequence& OperationDescriptionModificationReport::
  ReportDetail ()
  {
    return this->ReportDetail_;
  }

  void OperationDescriptionModificationReport::
  ReportDetail (const ReportDetailSequence& s)
  {
    this->ReportDetail_ = s;
  }


  // OperationInvokedReportPart
  // 

  const OperationInvokedReportPart::TransactionIdType& OperationInvokedReportPart::
  TransactionId () const
  {
    return this->TransactionId_.get ();
  }

  OperationInvokedReportPart::TransactionIdType& OperationInvokedReportPart::
  TransactionId ()
  {
    return this->TransactionId_.get ();
  }

  void OperationInvokedReportPart::
  TransactionId (const TransactionIdType& x)
  {
    this->TransactionId_.set (x);
  }

  void OperationInvokedReportPart::
  TransactionId (::std::unique_ptr< TransactionIdType > x)
  {
    this->TransactionId_.set (std::move (x));
  }

  const OperationInvokedReportPart::OperationHandleRefType& OperationInvokedReportPart::
  OperationHandleRef () const
  {
    return this->OperationHandleRef_.get ();
  }

  OperationInvokedReportPart::OperationHandleRefType& OperationInvokedReportPart::
  OperationHandleRef ()
  {
    return this->OperationHandleRef_.get ();
  }

  void OperationInvokedReportPart::
  OperationHandleRef (const OperationHandleRefType& x)
  {
    this->OperationHandleRef_.set (x);
  }

  void OperationInvokedReportPart::
  OperationHandleRef (::std::unique_ptr< OperationHandleRefType > x)
  {
    this->OperationHandleRef_.set (std::move (x));
  }

  const OperationInvokedReportPart::OperationTargetOptional& OperationInvokedReportPart::
  OperationTarget () const
  {
    return this->OperationTarget_;
  }

  OperationInvokedReportPart::OperationTargetOptional& OperationInvokedReportPart::
  OperationTarget ()
  {
    return this->OperationTarget_;
  }

  void OperationInvokedReportPart::
  OperationTarget (const OperationTargetType& x)
  {
    this->OperationTarget_.set (x);
  }

  void OperationInvokedReportPart::
  OperationTarget (const OperationTargetOptional& x)
  {
    this->OperationTarget_ = x;
  }

  void OperationInvokedReportPart::
  OperationTarget (::std::unique_ptr< OperationTargetType > x)
  {
    this->OperationTarget_.set (std::move (x));
  }

  const OperationInvokedReportPart::OperationStateType& OperationInvokedReportPart::
  OperationState () const
  {
    return this->OperationState_.get ();
  }

  OperationInvokedReportPart::OperationStateType& OperationInvokedReportPart::
  OperationState ()
  {
    return this->OperationState_.get ();
  }

  void OperationInvokedReportPart::
  OperationState (const OperationStateType& x)
  {
    this->OperationState_.set (x);
  }

  void OperationInvokedReportPart::
  OperationState (::std::unique_ptr< OperationStateType > x)
  {
    this->OperationState_.set (std::move (x));
  }

  const OperationInvokedReportPart::OperationErrorOptional& OperationInvokedReportPart::
  OperationError () const
  {
    return this->OperationError_;
  }

  OperationInvokedReportPart::OperationErrorOptional& OperationInvokedReportPart::
  OperationError ()
  {
    return this->OperationError_;
  }

  void OperationInvokedReportPart::
  OperationError (const OperationErrorType& x)
  {
    this->OperationError_.set (x);
  }

  void OperationInvokedReportPart::
  OperationError (const OperationErrorOptional& x)
  {
    this->OperationError_ = x;
  }

  void OperationInvokedReportPart::
  OperationError (::std::unique_ptr< OperationErrorType > x)
  {
    this->OperationError_.set (std::move (x));
  }

  const OperationInvokedReportPart::OperationErrorMessageOptional& OperationInvokedReportPart::
  OperationErrorMessage () const
  {
    return this->OperationErrorMessage_;
  }

  OperationInvokedReportPart::OperationErrorMessageOptional& OperationInvokedReportPart::
  OperationErrorMessage ()
  {
    return this->OperationErrorMessage_;
  }

  void OperationInvokedReportPart::
  OperationErrorMessage (const OperationErrorMessageType& x)
  {
    this->OperationErrorMessage_.set (x);
  }

  void OperationInvokedReportPart::
  OperationErrorMessage (const OperationErrorMessageOptional& x)
  {
    this->OperationErrorMessage_ = x;
  }

  void OperationInvokedReportPart::
  OperationErrorMessage (::std::unique_ptr< OperationErrorMessageType > x)
  {
    this->OperationErrorMessage_.set (std::move (x));
  }


  // OperationalStateChangedReportPart
  // 

  const OperationalStateChangedReportPart::OperationSequence& OperationalStateChangedReportPart::
  Operation () const
  {
    return this->Operation_;
  }

  OperationalStateChangedReportPart::OperationSequence& OperationalStateChangedReportPart::
  Operation ()
  {
    return this->Operation_;
  }

  void OperationalStateChangedReportPart::
  Operation (const OperationSequence& s)
  {
    this->Operation_ = s;
  }


  // DescriptionModificationType
  // 

  DescriptionModificationType::
  DescriptionModificationType (Value v)
  : ::xml_schema::String (_xsd_DescriptionModificationType_literals_[v])
  {
  }

  DescriptionModificationType::
  DescriptionModificationType (const char* v)
  : ::xml_schema::String (v)
  {
  }

  DescriptionModificationType::
  DescriptionModificationType (const ::std::string& v)
  : ::xml_schema::String (v)
  {
  }

  DescriptionModificationType::
  DescriptionModificationType (const ::xml_schema::String& v)
  : ::xml_schema::String (v)
  {
  }

  DescriptionModificationType::
  DescriptionModificationType (const DescriptionModificationType& v,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::String (v, f, c)
  {
  }

  DescriptionModificationType& DescriptionModificationType::
  operator= (Value v)
  {
    static_cast< ::xml_schema::String& > (*this) = 
    ::xml_schema::String (_xsd_DescriptionModificationType_literals_[v]);

    return *this;
  }


  // DescriptionModificationReportPart
  // 

  const DescriptionModificationReportPart::DescriptorType& DescriptionModificationReportPart::
  Descriptor () const
  {
    return this->Descriptor_.get ();
  }

  DescriptionModificationReportPart::DescriptorType& DescriptionModificationReportPart::
  Descriptor ()
  {
    return this->Descriptor_.get ();
  }

  void DescriptionModificationReportPart::
  Descriptor (const DescriptorType& x)
  {
    this->Descriptor_.set (x);
  }

  void DescriptionModificationReportPart::
  Descriptor (::std::unique_ptr< DescriptorType > x)
  {
    this->Descriptor_.set (std::move (x));
  }

  const DescriptionModificationReportPart::ParentDescriptorType& DescriptionModificationReportPart::
  ParentDescriptor () const
  {
    return this->ParentDescriptor_.get ();
  }

  DescriptionModificationReportPart::ParentDescriptorType& DescriptionModificationReportPart::
  ParentDescriptor ()
  {
    return this->ParentDescriptor_.get ();
  }

  void DescriptionModificationReportPart::
  ParentDescriptor (const ParentDescriptorType& x)
  {
    this->ParentDescriptor_.set (x);
  }

  void DescriptionModificationReportPart::
  ParentDescriptor (::std::unique_ptr< ParentDescriptorType > x)
  {
    this->ParentDescriptor_.set (std::move (x));
  }

  const DescriptionModificationReportPart::ModificationTypeOptional& DescriptionModificationReportPart::
  ModificationType () const
  {
    return this->ModificationType_;
  }

  DescriptionModificationReportPart::ModificationTypeOptional& DescriptionModificationReportPart::
  ModificationType ()
  {
    return this->ModificationType_;
  }

  void DescriptionModificationReportPart::
  ModificationType (const ModificationTypeType& x)
  {
    this->ModificationType_.set (x);
  }

  void DescriptionModificationReportPart::
  ModificationType (const ModificationTypeOptional& x)
  {
    this->ModificationType_ = x;
  }

  void DescriptionModificationReportPart::
  ModificationType (::std::unique_ptr< ModificationTypeType > x)
  {
    this->ModificationType_.set (std::move (x));
  }


  // DescriptionModificationReport
  // 

  const DescriptionModificationReport::ReportDetailSequence& DescriptionModificationReport::
  ReportDetail () const
  {
    return this->ReportDetail_;
  }

  DescriptionModificationReport::ReportDetailSequence& DescriptionModificationReport::
  ReportDetail ()
  {
    return this->ReportDetail_;
  }

  void DescriptionModificationReport::
  ReportDetail (const ReportDetailSequence& s)
  {
    this->ReportDetail_ = s;
  }


  // MDSModificationReportPart
  // 

  const MDSModificationReportPart::MDSSequence& MDSModificationReportPart::
  MDS () const
  {
    return this->MDS_;
  }

  MDSModificationReportPart::MDSSequence& MDSModificationReportPart::
  MDS ()
  {
    return this->MDS_;
  }

  void MDSModificationReportPart::
  MDS (const MDSSequence& s)
  {
    this->MDS_ = s;
  }


  // MDSModificationReport
  // 

  const MDSModificationReport::ReportDetailSequence& MDSModificationReport::
  ReportDetail () const
  {
    return this->ReportDetail_;
  }

  MDSModificationReport::ReportDetailSequence& MDSModificationReport::
  ReportDetail ()
  {
    return this->ReportDetail_;
  }

  void MDSModificationReport::
  ReportDetail (const ReportDetailSequence& s)
  {
    this->ReportDetail_ = s;
  }


  // SystemErrorReportReportPart
  // 

  const SystemErrorReportReportPart::ErrorCodeType& SystemErrorReportReportPart::
  ErrorCode () const
  {
    return this->ErrorCode_.get ();
  }

  SystemErrorReportReportPart::ErrorCodeType& SystemErrorReportReportPart::
  ErrorCode ()
  {
    return this->ErrorCode_.get ();
  }

  void SystemErrorReportReportPart::
  ErrorCode (const ErrorCodeType& x)
  {
    this->ErrorCode_.set (x);
  }

  void SystemErrorReportReportPart::
  ErrorCode (::std::unique_ptr< ErrorCodeType > x)
  {
    this->ErrorCode_.set (std::move (x));
  }

  const SystemErrorReportReportPart::ErrorInfoOptional& SystemErrorReportReportPart::
  ErrorInfo () const
  {
    return this->ErrorInfo_;
  }

  SystemErrorReportReportPart::ErrorInfoOptional& SystemErrorReportReportPart::
  ErrorInfo ()
  {
    return this->ErrorInfo_;
  }

  void SystemErrorReportReportPart::
  ErrorInfo (const ErrorInfoType& x)
  {
    this->ErrorInfo_.set (x);
  }

  void SystemErrorReportReportPart::
  ErrorInfo (const ErrorInfoOptional& x)
  {
    this->ErrorInfo_ = x;
  }

  void SystemErrorReportReportPart::
  ErrorInfo (::std::unique_ptr< ErrorInfoType > x)
  {
    this->ErrorInfo_.set (std::move (x));
  }


  // StreamElement
  // 

  const StreamElement::ValueOptional& StreamElement::
  Value () const
  {
    return this->Value_;
  }

  StreamElement::ValueOptional& StreamElement::
  Value ()
  {
    return this->Value_;
  }

  void StreamElement::
  Value (const ValueType& x)
  {
    this->Value_.set (x);
  }

  void StreamElement::
  Value (const ValueOptional& x)
  {
    this->Value_ = x;
  }

  void StreamElement::
  Value (::std::unique_ptr< ValueType > x)
  {
    this->Value_.set (std::move (x));
  }

  const StreamElement::MetricType& StreamElement::
  Metric () const
  {
    return this->Metric_.get ();
  }

  StreamElement::MetricType& StreamElement::
  Metric ()
  {
    return this->Metric_.get ();
  }

  void StreamElement::
  Metric (const MetricType& x)
  {
    this->Metric_.set (x);
  }

  void StreamElement::
  Metric (::std::unique_ptr< MetricType > x)
  {
    this->Metric_.set (std::move (x));
  }


  // MetricRetrievability
  // 

  MetricRetrievability::
  MetricRetrievability (Value v)
  : ::xml_schema::String (_xsd_MetricRetrievability_literals_[v])
  {
  }

  MetricRetrievability::
  MetricRetrievability (const char* v)
  : ::xml_schema::String (v)
  {
  }

  MetricRetrievability::
  MetricRetrievability (const ::std::string& v)
  : ::xml_schema::String (v)
  {
  }

  MetricRetrievability::
  MetricRetrievability (const ::xml_schema::String& v)
  : ::xml_schema::String (v)
  {
  }

  MetricRetrievability::
  MetricRetrievability (const MetricRetrievability& v,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::xml_schema::String (v, f, c)
  {
  }

  MetricRetrievability& MetricRetrievability::
  operator= (Value v)
  {
    static_cast< ::xml_schema::String& > (*this) = 
    ::xml_schema::String (_xsd_MetricRetrievability_literals_[v]);

    return *this;
  }


  // GetMDIB
  // 


  // GetMDIBResponse
  // 

  const GetMDIBResponse::MDIBType& GetMDIBResponse::
  MDIB () const
  {
    return this->MDIB_.get ();
  }

  GetMDIBResponse::MDIBType& GetMDIBResponse::
  MDIB ()
  {
    return this->MDIB_.get ();
  }

  void GetMDIBResponse::
  MDIB (const MDIBType& x)
  {
    this->MDIB_.set (x);
  }

  void GetMDIBResponse::
  MDIB (::std::unique_ptr< MDIBType > x)
  {
    this->MDIB_.set (std::move (x));
  }


  // GetMDDescription
  // 

  const GetMDDescription::HandleRefSequence& GetMDDescription::
  HandleRef () const
  {
    return this->HandleRef_;
  }

  GetMDDescription::HandleRefSequence& GetMDDescription::
  HandleRef ()
  {
    return this->HandleRef_;
  }

  void GetMDDescription::
  HandleRef (const HandleRefSequence& s)
  {
    this->HandleRef_ = s;
  }


  // GetMDDescriptionResponse
  // 

  const GetMDDescriptionResponse::StaticDescriptionType& GetMDDescriptionResponse::
  StaticDescription () const
  {
    return this->StaticDescription_.get ();
  }

  GetMDDescriptionResponse::StaticDescriptionType& GetMDDescriptionResponse::
  StaticDescription ()
  {
    return this->StaticDescription_.get ();
  }

  void GetMDDescriptionResponse::
  StaticDescription (const StaticDescriptionType& x)
  {
    this->StaticDescription_.set (x);
  }

  void GetMDDescriptionResponse::
  StaticDescription (::std::unique_ptr< StaticDescriptionType > x)
  {
    this->StaticDescription_.set (std::move (x));
  }


  // GetMDState
  // 

  const GetMDState::HandleRefSequence& GetMDState::
  HandleRef () const
  {
    return this->HandleRef_;
  }

  GetMDState::HandleRefSequence& GetMDState::
  HandleRef ()
  {
    return this->HandleRef_;
  }

  void GetMDState::
  HandleRef (const HandleRefSequence& s)
  {
    this->HandleRef_ = s;
  }


  // GetMDStateResponse
  // 

  const GetMDStateResponse::MDStateType& GetMDStateResponse::
  MDState () const
  {
    return this->MDState_.get ();
  }

  GetMDStateResponse::MDStateType& GetMDStateResponse::
  MDState ()
  {
    return this->MDState_.get ();
  }

  void GetMDStateResponse::
  MDState (const MDStateType& x)
  {
    this->MDState_.set (x);
  }

  void GetMDStateResponse::
  MDState (::std::unique_ptr< MDStateType > x)
  {
    this->MDState_.set (std::move (x));
  }


  // GetContextStates
  // 

  const GetContextStates::HandleRefSequence& GetContextStates::
  HandleRef () const
  {
    return this->HandleRef_;
  }

  GetContextStates::HandleRefSequence& GetContextStates::
  HandleRef ()
  {
    return this->HandleRef_;
  }

  void GetContextStates::
  HandleRef (const HandleRefSequence& s)
  {
    this->HandleRef_ = s;
  }


  // GetContextStatesResponse
  // 

  const GetContextStatesResponse::ContextStateSequence& GetContextStatesResponse::
  ContextState () const
  {
    return this->ContextState_;
  }

  GetContextStatesResponse::ContextStateSequence& GetContextStatesResponse::
  ContextState ()
  {
    return this->ContextState_;
  }

  void GetContextStatesResponse::
  ContextState (const ContextStateSequence& s)
  {
    this->ContextState_ = s;
  }


  // GetContainmentTree
  // 

  const GetContainmentTree::HandleRefSequence& GetContainmentTree::
  HandleRef () const
  {
    return this->HandleRef_;
  }

  GetContainmentTree::HandleRefSequence& GetContainmentTree::
  HandleRef ()
  {
    return this->HandleRef_;
  }

  void GetContainmentTree::
  HandleRef (const HandleRefSequence& s)
  {
    this->HandleRef_ = s;
  }


  // GetContainmentTreeResponse
  // 

  const GetContainmentTreeResponse::ContainmentTreeType& GetContainmentTreeResponse::
  ContainmentTree () const
  {
    return this->ContainmentTree_.get ();
  }

  GetContainmentTreeResponse::ContainmentTreeType& GetContainmentTreeResponse::
  ContainmentTree ()
  {
    return this->ContainmentTree_.get ();
  }

  void GetContainmentTreeResponse::
  ContainmentTree (const ContainmentTreeType& x)
  {
    this->ContainmentTree_.set (x);
  }

  void GetContainmentTreeResponse::
  ContainmentTree (::std::unique_ptr< ContainmentTreeType > x)
  {
    this->ContainmentTree_.set (std::move (x));
  }


  // GetDescriptor
  // 

  const GetDescriptor::HandleRefSequence& GetDescriptor::
  HandleRef () const
  {
    return this->HandleRef_;
  }

  GetDescriptor::HandleRefSequence& GetDescriptor::
  HandleRef ()
  {
    return this->HandleRef_;
  }

  void GetDescriptor::
  HandleRef (const HandleRefSequence& s)
  {
    this->HandleRef_ = s;
  }


  // GetDescriptorResponse
  // 

  const GetDescriptorResponse::DescriptorSequence& GetDescriptorResponse::
  Descriptor () const
  {
    return this->Descriptor_;
  }

  GetDescriptorResponse::DescriptorSequence& GetDescriptorResponse::
  Descriptor ()
  {
    return this->Descriptor_;
  }

  void GetDescriptorResponse::
  Descriptor (const DescriptorSequence& s)
  {
    this->Descriptor_ = s;
  }


  // Text
  // 

  const Text::LangOptional& Text::
  Lang () const
  {
    return this->Lang_;
  }

  Text::LangOptional& Text::
  Lang ()
  {
    return this->Lang_;
  }

  void Text::
  Lang (const LangType& x)
  {
    this->Lang_.set (x);
  }

  void Text::
  Lang (const LangOptional& x)
  {
    this->Lang_ = x;
  }

  void Text::
  Lang (::std::unique_ptr< LangType > x)
  {
    this->Lang_.set (std::move (x));
  }


  // SetRange
  // 

  const SetRange::RequestedRangeType& SetRange::
  RequestedRange () const
  {
    return this->RequestedRange_.get ();
  }

  SetRange::RequestedRangeType& SetRange::
  RequestedRange ()
  {
    return this->RequestedRange_.get ();
  }

  void SetRange::
  RequestedRange (const RequestedRangeType& x)
  {
    this->RequestedRange_.set (x);
  }

  void SetRange::
  RequestedRange (::std::unique_ptr< RequestedRangeType > x)
  {
    this->RequestedRange_.set (std::move (x));
  }


  // SetRangeResponse
  // 


  // SetValue
  // 

  const SetValue::RequestedNumericValueType& SetValue::
  RequestedNumericValue () const
  {
    return this->RequestedNumericValue_.get ();
  }

  SetValue::RequestedNumericValueType& SetValue::
  RequestedNumericValue ()
  {
    return this->RequestedNumericValue_.get ();
  }

  void SetValue::
  RequestedNumericValue (const RequestedNumericValueType& x)
  {
    this->RequestedNumericValue_.set (x);
  }


  // SetValueResponse
  // 


  // SetString
  // 

  const SetString::RequestedStringValueType& SetString::
  RequestedStringValue () const
  {
    return this->RequestedStringValue_.get ();
  }

  SetString::RequestedStringValueType& SetString::
  RequestedStringValue ()
  {
    return this->RequestedStringValue_.get ();
  }

  void SetString::
  RequestedStringValue (const RequestedStringValueType& x)
  {
    this->RequestedStringValue_.set (x);
  }

  void SetString::
  RequestedStringValue (::std::unique_ptr< RequestedStringValueType > x)
  {
    this->RequestedStringValue_.set (std::move (x));
  }


  // SetStringResponse
  // 


  // SetAlertState
  // 

  const SetAlertState::RequestedAlertStateType& SetAlertState::
  RequestedAlertState () const
  {
    return this->RequestedAlertState_.get ();
  }

  SetAlertState::RequestedAlertStateType& SetAlertState::
  RequestedAlertState ()
  {
    return this->RequestedAlertState_.get ();
  }

  void SetAlertState::
  RequestedAlertState (const RequestedAlertStateType& x)
  {
    this->RequestedAlertState_.set (x);
  }

  void SetAlertState::
  RequestedAlertState (::std::unique_ptr< RequestedAlertStateType > x)
  {
    this->RequestedAlertState_.set (std::move (x));
  }


  // SetAlertStateResponse
  // 


  // Activate
  // 

  const Activate::ArgumentSequence& Activate::
  Argument () const
  {
    return this->Argument_;
  }

  Activate::ArgumentSequence& Activate::
  Argument ()
  {
    return this->Argument_;
  }

  void Activate::
  Argument (const ArgumentSequence& s)
  {
    this->Argument_ = s;
  }


  // ActivateResponse
  // 


  // SetContextState
  // 

  const SetContextState::ProposedContextStateSequence& SetContextState::
  ProposedContextState () const
  {
    return this->ProposedContextState_;
  }

  SetContextState::ProposedContextStateSequence& SetContextState::
  ProposedContextState ()
  {
    return this->ProposedContextState_;
  }

  void SetContextState::
  ProposedContextState (const ProposedContextStateSequence& s)
  {
    this->ProposedContextState_ = s;
  }


  // SetContextStateResponse
  // 


  // SetPatientAssociationState
  // 

  const SetPatientAssociationState::RequestedAssociationType& SetPatientAssociationState::
  RequestedAssociation () const
  {
    return this->RequestedAssociation_.get ();
  }

  SetPatientAssociationState::RequestedAssociationType& SetPatientAssociationState::
  RequestedAssociation ()
  {
    return this->RequestedAssociation_.get ();
  }

  void SetPatientAssociationState::
  RequestedAssociation (const RequestedAssociationType& x)
  {
    this->RequestedAssociation_.set (x);
  }

  void SetPatientAssociationState::
  RequestedAssociation (::std::unique_ptr< RequestedAssociationType > x)
  {
    this->RequestedAssociation_.set (std::move (x));
  }


  // SetPatientAssociationStateResponse
  // 


  // PeriodicMetricReport
  // 


  // EpisodicMetricReport
  // 


  // PeriodicAlertReport
  // 


  // EpisodicAlertReport
  // 


  // PeriodicContextChangedReport
  // 


  // EpisodicContextChangedReport
  // 


  // OperationInvokedReport
  // 

  const OperationInvokedReport::ReportDetailSequence& OperationInvokedReport::
  ReportDetail () const
  {
    return this->ReportDetail_;
  }

  OperationInvokedReport::ReportDetailSequence& OperationInvokedReport::
  ReportDetail ()
  {
    return this->ReportDetail_;
  }

  void OperationInvokedReport::
  ReportDetail (const ReportDetailSequence& s)
  {
    this->ReportDetail_ = s;
  }


  // OperationalStateChangedReport
  // 

  const OperationalStateChangedReport::ReportDetailSequence& OperationalStateChangedReport::
  ReportDetail () const
  {
    return this->ReportDetail_;
  }

  OperationalStateChangedReport::ReportDetailSequence& OperationalStateChangedReport::
  ReportDetail ()
  {
    return this->ReportDetail_;
  }

  void OperationalStateChangedReport::
  ReportDetail (const ReportDetailSequence& s)
  {
    this->ReportDetail_ = s;
  }


  // OperationCreatedReport
  // 


  // OperationDeletedReport
  // 


  // ObjectCreatedReport
  // 


  // ObjectUpdatedReport
  // 


  // ObjectDeletedReport
  // 


  // MDSCreatedReport
  // 


  // MDSDeletedReport
  // 


  // SystemErrorReport
  // 

  const SystemErrorReport::ReportDetailSequence& SystemErrorReport::
  ReportDetail () const
  {
    return this->ReportDetail_;
  }

  SystemErrorReport::ReportDetailSequence& SystemErrorReport::
  ReportDetail ()
  {
    return this->ReportDetail_;
  }

  void SystemErrorReport::
  ReportDetail (const ReportDetailSequence& s)
  {
    this->ReportDetail_ = s;
  }


  // WaveformStream
  // 

  const WaveformStream::ExtensionOptional& WaveformStream::
  Extension () const
  {
    return this->Extension_;
  }

  WaveformStream::ExtensionOptional& WaveformStream::
  Extension ()
  {
    return this->Extension_;
  }

  void WaveformStream::
  Extension (const ExtensionType& x)
  {
    this->Extension_.set (x);
  }

  void WaveformStream::
  Extension (const ExtensionOptional& x)
  {
    this->Extension_ = x;
  }

  void WaveformStream::
  Extension (::std::unique_ptr< ExtensionType > x)
  {
    this->Extension_.set (std::move (x));
  }

  const WaveformStream::RealTimeSampleArraySequence& WaveformStream::
  RealTimeSampleArray () const
  {
    return this->RealTimeSampleArray_;
  }

  WaveformStream::RealTimeSampleArraySequence& WaveformStream::
  RealTimeSampleArray ()
  {
    return this->RealTimeSampleArray_;
  }

  void WaveformStream::
  RealTimeSampleArray (const RealTimeSampleArraySequence& s)
  {
    this->RealTimeSampleArray_ = s;
  }


  // OVStream
  // 

  const OVStream::ExtensionOptional& OVStream::
  Extension () const
  {
    return this->Extension_;
  }

  OVStream::ExtensionOptional& OVStream::
  Extension ()
  {
    return this->Extension_;
  }

  void OVStream::
  Extension (const ExtensionType& x)
  {
    this->Extension_.set (x);
  }

  void OVStream::
  Extension (const ExtensionOptional& x)
  {
    this->Extension_ = x;
  }

  void OVStream::
  Extension (::std::unique_ptr< ExtensionType > x)
  {
    this->Extension_.set (std::move (x));
  }

  const OVStream::ValueSequence& OVStream::
  Value () const
  {
    return this->Value_;
  }

  OVStream::ValueSequence& OVStream::
  Value ()
  {
    return this->Value_;
  }

  void OVStream::
  Value (const ValueSequence& s)
  {
    this->Value_ = s;
  }


  // Retrievability
  // 

  const Retrievability::BySequence& Retrievability::
  By () const
  {
    return this->By_;
  }

  Retrievability::BySequence& Retrievability::
  By ()
  {
    return this->By_;
  }

  void Retrievability::
  By (const BySequence& s)
  {
    this->By_ = s;
  }


  // OperationReference
  // 

  const OperationReference::ServiceIDSequence& OperationReference::
  ServiceID () const
  {
    return this->ServiceID_;
  }

  OperationReference::ServiceIDSequence& OperationReference::
  ServiceID ()
  {
    return this->ServiceID_;
  }

  void OperationReference::
  ServiceID (const ServiceIDSequence& s)
  {
    this->ServiceID_ = s;
  }

  const OperationReference::ActionType& OperationReference::
  Action () const
  {
    return this->Action_.get ();
  }

  OperationReference::ActionType& OperationReference::
  Action ()
  {
    return this->Action_.get ();
  }

  void OperationReference::
  Action (const ActionType& x)
  {
    this->Action_.set (x);
  }

  void OperationReference::
  Action (::std::unique_ptr< ActionType > x)
  {
    this->Action_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace CDM
{
  // AbstractGet
  //

  AbstractGet::
  AbstractGet ()
  : ::xml_schema::Type (),
    Extension_ (this)
  {
  }

  AbstractGet::
  AbstractGet (const AbstractGet& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Extension_ (x.Extension_, f, this)
  {
  }

  AbstractGet::
  AbstractGet (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Extension_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void AbstractGet::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Extension
      //
      if (n.name () == "Extension" && n.namespace_ () == "http://extension-point-uri/15/03")
      {
        ::std::unique_ptr< ExtensionType > r (
          ExtensionTraits::create (i, f, this));

        if (!this->Extension_)
        {
          this->Extension_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  AbstractGet* AbstractGet::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AbstractGet (*this, f, c);
  }

  AbstractGet& AbstractGet::
  operator= (const AbstractGet& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Extension_ = x.Extension_;
    }

    return *this;
  }

  AbstractGet::
  ~AbstractGet ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AbstractGet >
  _xsd_AbstractGet_type_factory_init (
    "AbstractGet",
    "http://message-model-uri/15/04");

  // AbstractGetResponse
  //

  AbstractGetResponse::
  AbstractGetResponse (const MDIBVersionType& MDIBVersion)
  : ::xml_schema::Type (),
    Extension_ (this),
    MDIBVersion_ (MDIBVersion, this)
  {
  }

  AbstractGetResponse::
  AbstractGetResponse (const AbstractGetResponse& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Extension_ (x.Extension_, f, this),
    MDIBVersion_ (x.MDIBVersion_, f, this)
  {
  }

  AbstractGetResponse::
  AbstractGetResponse (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Extension_ (this),
    MDIBVersion_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void AbstractGetResponse::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Extension
      //
      if (n.name () == "Extension" && n.namespace_ () == "http://extension-point-uri/15/03")
      {
        ::std::unique_ptr< ExtensionType > r (
          ExtensionTraits::create (i, f, this));

        if (!this->Extension_)
        {
          this->Extension_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "MDIBVersion" && n.namespace_ () == "http://domain-model-uri/15/04")
      {
        this->MDIBVersion_.set (MDIBVersionTraits::create (i, f, this));
        continue;
      }
    }

    if (!MDIBVersion_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "MDIBVersion",
        "http://domain-model-uri/15/04");
    }
  }

  AbstractGetResponse* AbstractGetResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AbstractGetResponse (*this, f, c);
  }

  AbstractGetResponse& AbstractGetResponse::
  operator= (const AbstractGetResponse& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Extension_ = x.Extension_;
      this->MDIBVersion_ = x.MDIBVersion_;
    }

    return *this;
  }

  AbstractGetResponse::
  ~AbstractGetResponse ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AbstractGetResponse >
  _xsd_AbstractGetResponse_type_factory_init (
    "AbstractGetResponse",
    "http://message-model-uri/15/04");

  // GetLocalizedText
  //

  GetLocalizedText::
  GetLocalizedText (const RefType& Ref)
  : ::CDM::AbstractGet (),
    Ref_ (Ref, this),
    Version_ (this),
    Lang_ (this)
  {
  }

  GetLocalizedText::
  GetLocalizedText (::std::unique_ptr< RefType > Ref)
  : ::CDM::AbstractGet (),
    Ref_ (std::move (Ref), this),
    Version_ (this),
    Lang_ (this)
  {
  }

  GetLocalizedText::
  GetLocalizedText (const GetLocalizedText& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractGet (x, f, c),
    Ref_ (x.Ref_, f, this),
    Version_ (x.Version_, f, this),
    Lang_ (x.Lang_, f, this)
  {
  }

  GetLocalizedText::
  GetLocalizedText (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractGet (e, f | ::xml_schema::Flags::base, c),
    Ref_ (this),
    Version_ (this),
    Lang_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void GetLocalizedText::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Ref
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Ref",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< RefType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!Ref_.present ())
          {
            ::std::unique_ptr< RefType > r (
              dynamic_cast< RefType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Ref_.set (::std::move (r));
            continue;
          }
        }
      }

      // Version
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Version",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< VersionType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->Version_)
          {
            ::std::unique_ptr< VersionType > r (
              dynamic_cast< VersionType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Version_.set (::std::move (r));
            continue;
          }
        }
      }

      // Lang
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Lang",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< LangType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< LangType > r (
            dynamic_cast< LangType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Lang_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Ref_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Ref",
        "http://message-model-uri/15/04");
    }
  }

  GetLocalizedText* GetLocalizedText::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetLocalizedText (*this, f, c);
  }

  GetLocalizedText& GetLocalizedText::
  operator= (const GetLocalizedText& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGet& > (*this) = x;
      this->Ref_ = x.Ref_;
      this->Version_ = x.Version_;
      this->Lang_ = x.Lang_;
    }

    return *this;
  }

  GetLocalizedText::
  ~GetLocalizedText ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GetLocalizedText >
  _xsd_GetLocalizedText_type_factory_init (
    "GetLocalizedText",
    "http://message-model-uri/15/04");

  // GetLocalizedTextResponse
  //

  GetLocalizedTextResponse::
  GetLocalizedTextResponse (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    Text_ (this)
  {
  }

  GetLocalizedTextResponse::
  GetLocalizedTextResponse (const GetLocalizedTextResponse& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (x, f, c),
    Text_ (x.Text_, f, this)
  {
  }

  GetLocalizedTextResponse::
  GetLocalizedTextResponse (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (e, f | ::xml_schema::Flags::base, c),
    Text_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void GetLocalizedTextResponse::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGetResponse::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Text
      //
      if (n.name () == "Text" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< TextType > r (
          TextTraits::create (i, f, this));

        this->Text_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  GetLocalizedTextResponse* GetLocalizedTextResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetLocalizedTextResponse (*this, f, c);
  }

  GetLocalizedTextResponse& GetLocalizedTextResponse::
  operator= (const GetLocalizedTextResponse& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGetResponse& > (*this) = x;
      this->Text_ = x.Text_;
    }

    return *this;
  }

  GetLocalizedTextResponse::
  ~GetLocalizedTextResponse ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GetLocalizedTextResponse >
  _xsd_GetLocalizedTextResponse_type_factory_init (
    "GetLocalizedTextResponse",
    "http://message-model-uri/15/04");

  // GetSupportedLanguages
  //

  GetSupportedLanguages::
  GetSupportedLanguages ()
  : ::CDM::AbstractGet ()
  {
  }

  GetSupportedLanguages::
  GetSupportedLanguages (const GetSupportedLanguages& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::CDM::AbstractGet (x, f, c)
  {
  }

  GetSupportedLanguages::
  GetSupportedLanguages (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::CDM::AbstractGet (e, f, c)
  {
  }

  GetSupportedLanguages* GetSupportedLanguages::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetSupportedLanguages (*this, f, c);
  }

  GetSupportedLanguages::
  ~GetSupportedLanguages ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GetSupportedLanguages >
  _xsd_GetSupportedLanguages_type_factory_init (
    "GetSupportedLanguages",
    "http://message-model-uri/15/04");

  // GetSupportedLanguagesResponse
  //

  GetSupportedLanguagesResponse::
  GetSupportedLanguagesResponse (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    Lang_ (this)
  {
  }

  GetSupportedLanguagesResponse::
  GetSupportedLanguagesResponse (const GetSupportedLanguagesResponse& x,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (x, f, c),
    Lang_ (x.Lang_, f, this)
  {
  }

  GetSupportedLanguagesResponse::
  GetSupportedLanguagesResponse (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (e, f | ::xml_schema::Flags::base, c),
    Lang_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void GetSupportedLanguagesResponse::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGetResponse::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Lang
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Lang",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< LangType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< LangType > r (
            dynamic_cast< LangType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Lang_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  GetSupportedLanguagesResponse* GetSupportedLanguagesResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetSupportedLanguagesResponse (*this, f, c);
  }

  GetSupportedLanguagesResponse& GetSupportedLanguagesResponse::
  operator= (const GetSupportedLanguagesResponse& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGetResponse& > (*this) = x;
      this->Lang_ = x.Lang_;
    }

    return *this;
  }

  GetSupportedLanguagesResponse::
  ~GetSupportedLanguagesResponse ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GetSupportedLanguagesResponse >
  _xsd_GetSupportedLanguagesResponse_type_factory_init (
    "GetSupportedLanguagesResponse",
    "http://message-model-uri/15/04");

  // GetDescriptorsFromArchive
  //

  GetDescriptorsFromArchive::
  GetDescriptorsFromArchive ()
  : ::CDM::AbstractGet (),
    DescriptorRevision_ (this),
    TimeFrame_ (this),
    Handle_ (this)
  {
  }

  GetDescriptorsFromArchive::
  GetDescriptorsFromArchive (const GetDescriptorsFromArchive& x,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::CDM::AbstractGet (x, f, c),
    DescriptorRevision_ (x.DescriptorRevision_, f, this),
    TimeFrame_ (x.TimeFrame_, f, this),
    Handle_ (x.Handle_, f, this)
  {
  }

  GetDescriptorsFromArchive::
  GetDescriptorsFromArchive (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::CDM::AbstractGet (e, f | ::xml_schema::Flags::base, c),
    DescriptorRevision_ (this),
    TimeFrame_ (this),
    Handle_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void GetDescriptorsFromArchive::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // DescriptorRevision
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "DescriptorRevision",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< DescriptorRevisionType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->DescriptorRevision_)
          {
            ::std::unique_ptr< DescriptorRevisionType > r (
              dynamic_cast< DescriptorRevisionType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->DescriptorRevision_.set (::std::move (r));
            continue;
          }
        }
      }

      // TimeFrame
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "TimeFrame",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< TimeFrameType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->TimeFrame_)
          {
            ::std::unique_ptr< TimeFrameType > r (
              dynamic_cast< TimeFrameType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->TimeFrame_.set (::std::move (r));
            continue;
          }
        }
      }

      // Handle
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Handle",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< HandleType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< HandleType > r (
            dynamic_cast< HandleType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Handle_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  GetDescriptorsFromArchive* GetDescriptorsFromArchive::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetDescriptorsFromArchive (*this, f, c);
  }

  GetDescriptorsFromArchive& GetDescriptorsFromArchive::
  operator= (const GetDescriptorsFromArchive& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGet& > (*this) = x;
      this->DescriptorRevision_ = x.DescriptorRevision_;
      this->TimeFrame_ = x.TimeFrame_;
      this->Handle_ = x.Handle_;
    }

    return *this;
  }

  GetDescriptorsFromArchive::
  ~GetDescriptorsFromArchive ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GetDescriptorsFromArchive >
  _xsd_GetDescriptorsFromArchive_type_factory_init (
    "GetDescriptorsFromArchive",
    "http://message-model-uri/15/04");

  // GetDescriptorsFromArchiveResponse
  //

  GetDescriptorsFromArchiveResponse::
  GetDescriptorsFromArchiveResponse (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    Descriptor_ (this)
  {
  }

  GetDescriptorsFromArchiveResponse::
  GetDescriptorsFromArchiveResponse (const GetDescriptorsFromArchiveResponse& x,
                                     ::xml_schema::Flags f,
                                     ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (x, f, c),
    Descriptor_ (x.Descriptor_, f, this)
  {
  }

  GetDescriptorsFromArchiveResponse::
  GetDescriptorsFromArchiveResponse (const ::xercesc::DOMElement& e,
                                     ::xml_schema::Flags f,
                                     ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (e, f | ::xml_schema::Flags::base, c),
    Descriptor_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void GetDescriptorsFromArchiveResponse::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGetResponse::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Descriptor
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Descriptor",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< DescriptorType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< DescriptorType > r (
            dynamic_cast< DescriptorType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Descriptor_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  GetDescriptorsFromArchiveResponse* GetDescriptorsFromArchiveResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetDescriptorsFromArchiveResponse (*this, f, c);
  }

  GetDescriptorsFromArchiveResponse& GetDescriptorsFromArchiveResponse::
  operator= (const GetDescriptorsFromArchiveResponse& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGetResponse& > (*this) = x;
      this->Descriptor_ = x.Descriptor_;
    }

    return *this;
  }

  GetDescriptorsFromArchiveResponse::
  ~GetDescriptorsFromArchiveResponse ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GetDescriptorsFromArchiveResponse >
  _xsd_GetDescriptorsFromArchiveResponse_type_factory_init (
    "GetDescriptorsFromArchiveResponse",
    "http://message-model-uri/15/04");

  // GetStatesFromArchive
  //

  GetStatesFromArchive::
  GetStatesFromArchive (const StateRevisionType& StateRevision)
  : ::CDM::AbstractGet (),
    StateRevision_ (StateRevision, this),
    TimeFrame_ (this),
    Handle_ (this)
  {
  }

  GetStatesFromArchive::
  GetStatesFromArchive (::std::unique_ptr< StateRevisionType > StateRevision)
  : ::CDM::AbstractGet (),
    StateRevision_ (std::move (StateRevision), this),
    TimeFrame_ (this),
    Handle_ (this)
  {
  }

  GetStatesFromArchive::
  GetStatesFromArchive (const GetStatesFromArchive& x,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::CDM::AbstractGet (x, f, c),
    StateRevision_ (x.StateRevision_, f, this),
    TimeFrame_ (x.TimeFrame_, f, this),
    Handle_ (x.Handle_, f, this)
  {
  }

  GetStatesFromArchive::
  GetStatesFromArchive (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::CDM::AbstractGet (e, f | ::xml_schema::Flags::base, c),
    StateRevision_ (this),
    TimeFrame_ (this),
    Handle_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void GetStatesFromArchive::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // StateRevision
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "StateRevision",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< StateRevisionType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!StateRevision_.present ())
          {
            ::std::unique_ptr< StateRevisionType > r (
              dynamic_cast< StateRevisionType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->StateRevision_.set (::std::move (r));
            continue;
          }
        }
      }

      // TimeFrame
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "TimeFrame",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< TimeFrameType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->TimeFrame_)
          {
            ::std::unique_ptr< TimeFrameType > r (
              dynamic_cast< TimeFrameType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->TimeFrame_.set (::std::move (r));
            continue;
          }
        }
      }

      // Handle
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Handle",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< HandleType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< HandleType > r (
            dynamic_cast< HandleType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Handle_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!StateRevision_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "StateRevision",
        "http://message-model-uri/15/04");
    }
  }

  GetStatesFromArchive* GetStatesFromArchive::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetStatesFromArchive (*this, f, c);
  }

  GetStatesFromArchive& GetStatesFromArchive::
  operator= (const GetStatesFromArchive& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGet& > (*this) = x;
      this->StateRevision_ = x.StateRevision_;
      this->TimeFrame_ = x.TimeFrame_;
      this->Handle_ = x.Handle_;
    }

    return *this;
  }

  GetStatesFromArchive::
  ~GetStatesFromArchive ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GetStatesFromArchive >
  _xsd_GetStatesFromArchive_type_factory_init (
    "GetStatesFromArchive",
    "http://message-model-uri/15/04");

  // GetStatesFromArchiveResponse
  //

  GetStatesFromArchiveResponse::
  GetStatesFromArchiveResponse ()
  : ::CDM::AbstractGet (),
    State_ (this)
  {
  }

  GetStatesFromArchiveResponse::
  GetStatesFromArchiveResponse (const GetStatesFromArchiveResponse& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::CDM::AbstractGet (x, f, c),
    State_ (x.State_, f, this)
  {
  }

  GetStatesFromArchiveResponse::
  GetStatesFromArchiveResponse (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::CDM::AbstractGet (e, f | ::xml_schema::Flags::base, c),
    State_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void GetStatesFromArchiveResponse::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // State
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "State",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< StateType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< StateType > r (
            dynamic_cast< StateType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->State_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  GetStatesFromArchiveResponse* GetStatesFromArchiveResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetStatesFromArchiveResponse (*this, f, c);
  }

  GetStatesFromArchiveResponse& GetStatesFromArchiveResponse::
  operator= (const GetStatesFromArchiveResponse& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGet& > (*this) = x;
      this->State_ = x.State_;
    }

    return *this;
  }

  GetStatesFromArchiveResponse::
  ~GetStatesFromArchiveResponse ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, GetStatesFromArchiveResponse >
  _xsd_GetStatesFromArchiveResponse_type_factory_init (
    "GetStatesFromArchiveResponse",
    "http://message-model-uri/15/04");

  // TimeFrame
  //

  TimeFrame::
  TimeFrame ()
  : ::xml_schema::Type (),
    Start_ (this),
    End_ (this)
  {
  }

  TimeFrame::
  TimeFrame (const TimeFrame& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Start_ (x.Start_, f, this),
    End_ (x.End_, f, this)
  {
  }

  TimeFrame::
  TimeFrame (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Start_ (this),
    End_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void TimeFrame::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Start" && n.namespace_ ().empty ())
      {
        this->Start_.set (StartTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "End" && n.namespace_ ().empty ())
      {
        this->End_.set (EndTraits::create (i, f, this));
        continue;
      }
    }
  }

  TimeFrame* TimeFrame::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class TimeFrame (*this, f, c);
  }

  TimeFrame& TimeFrame::
  operator= (const TimeFrame& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Start_ = x.Start_;
      this->End_ = x.End_;
    }

    return *this;
  }

  TimeFrame::
  ~TimeFrame ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, TimeFrame >
  _xsd_TimeFrame_type_factory_init (
    "TimeFrame",
    "http://message-model-uri/15/04");

  // TransactionID
  //

  TransactionID::
  TransactionID (const ::xml_schema::UnsignedInt& _xsd_UnsignedInt_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (_xsd_UnsignedInt_base)
  {
  }

  TransactionID::
  TransactionID (const TransactionID& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (x, f, c)
  {
  }

  TransactionID::
  TransactionID (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (e, f, c)
  {
  }

  TransactionID::
  TransactionID (const ::xercesc::DOMAttr& a,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (a, f, c)
  {
  }

  TransactionID::
  TransactionID (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType > (s, e, f, c)
  {
  }

  TransactionID* TransactionID::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class TransactionID (*this, f, c);
  }

  TransactionID::
  ~TransactionID ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, TransactionID >
  _xsd_TransactionID_type_factory_init (
    "TransactionID",
    "http://message-model-uri/15/04");

  // InvocationState
  //

  InvocationState::
  InvocationState (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
    _xsd_InvocationState_convert ();
  }

  InvocationState::
  InvocationState (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
    _xsd_InvocationState_convert ();
  }

  InvocationState::
  InvocationState (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
    _xsd_InvocationState_convert ();
  }

  InvocationState* InvocationState::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class InvocationState (*this, f, c);
  }

  InvocationState::Value InvocationState::
  _xsd_InvocationState_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_InvocationState_literals_);
    const Value* i (::std::lower_bound (
                      _xsd_InvocationState_indexes_,
                      _xsd_InvocationState_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_InvocationState_indexes_ + 6 || _xsd_InvocationState_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const InvocationState::
  _xsd_InvocationState_literals_[6] =
  {
    "Wait",
    "Start",
    "Cnclld",
    "CnclldMan",
    "Fin",
    "Fail"
  };

  const InvocationState::Value InvocationState::
  _xsd_InvocationState_indexes_[6] =
  {
    ::CDM::InvocationState::Cnclld,
    ::CDM::InvocationState::CnclldMan,
    ::CDM::InvocationState::Fail,
    ::CDM::InvocationState::Fin,
    ::CDM::InvocationState::Start,
    ::CDM::InvocationState::Wait
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, InvocationState >
  _xsd_InvocationState_type_factory_init (
    "InvocationState",
    "http://message-model-uri/15/04");

  // ArgumentType
  //

  ArgumentType::
  ArgumentType (const ArgValueType& ArgValue)
  : ::xml_schema::Type (),
    Extension_ (this),
    ArgValue_ (ArgValue, this)
  {
  }

  ArgumentType::
  ArgumentType (::std::unique_ptr< ArgValueType > ArgValue)
  : ::xml_schema::Type (),
    Extension_ (this),
    ArgValue_ (std::move (ArgValue), this)
  {
  }

  ArgumentType::
  ArgumentType (const ArgumentType& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Extension_ (x.Extension_, f, this),
    ArgValue_ (x.ArgValue_, f, this)
  {
  }

  ArgumentType::
  ArgumentType (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Extension_ (this),
    ArgValue_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void ArgumentType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Extension
      //
      if (n.name () == "Extension" && n.namespace_ () == "http://extension-point-uri/15/03")
      {
        ::std::unique_ptr< ExtensionType > r (
          ExtensionTraits::create (i, f, this));

        if (!this->Extension_)
        {
          this->Extension_.set (::std::move (r));
          continue;
        }
      }

      // ArgValue
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ArgValue",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ArgValueType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!ArgValue_.present ())
          {
            ::std::unique_ptr< ArgValueType > r (
              dynamic_cast< ArgValueType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ArgValue_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!ArgValue_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ArgValue",
        "http://message-model-uri/15/04");
    }
  }

  ArgumentType* ArgumentType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ArgumentType (*this, f, c);
  }

  ArgumentType& ArgumentType::
  operator= (const ArgumentType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Extension_ = x.Extension_;
      this->ArgValue_ = x.ArgValue_;
    }

    return *this;
  }

  ArgumentType::
  ~ArgumentType ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ArgumentType >
  _xsd_ArgumentType_type_factory_init (
    "ArgumentType",
    "http://message-model-uri/15/04");

  // AbstractSet
  //

  AbstractSet::
  AbstractSet (const OperationHandleRefType& OperationHandleRef)
  : ::xml_schema::Type (),
    Extension_ (this),
    OperationHandleRef_ (OperationHandleRef, this)
  {
  }

  AbstractSet::
  AbstractSet (::std::unique_ptr< OperationHandleRefType > OperationHandleRef)
  : ::xml_schema::Type (),
    Extension_ (this),
    OperationHandleRef_ (std::move (OperationHandleRef), this)
  {
  }

  AbstractSet::
  AbstractSet (const AbstractSet& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Extension_ (x.Extension_, f, this),
    OperationHandleRef_ (x.OperationHandleRef_, f, this)
  {
  }

  AbstractSet::
  AbstractSet (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Extension_ (this),
    OperationHandleRef_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void AbstractSet::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Extension
      //
      if (n.name () == "Extension" && n.namespace_ () == "http://extension-point-uri/15/03")
      {
        ::std::unique_ptr< ExtensionType > r (
          ExtensionTraits::create (i, f, this));

        if (!this->Extension_)
        {
          this->Extension_.set (::std::move (r));
          continue;
        }
      }

      // OperationHandleRef
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "OperationHandleRef",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< OperationHandleRefType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!OperationHandleRef_.present ())
          {
            ::std::unique_ptr< OperationHandleRefType > r (
              dynamic_cast< OperationHandleRefType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->OperationHandleRef_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!OperationHandleRef_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OperationHandleRef",
        "http://message-model-uri/15/04");
    }
  }

  AbstractSet* AbstractSet::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AbstractSet (*this, f, c);
  }

  AbstractSet& AbstractSet::
  operator= (const AbstractSet& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Extension_ = x.Extension_;
      this->OperationHandleRef_ = x.OperationHandleRef_;
    }

    return *this;
  }

  AbstractSet::
  ~AbstractSet ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AbstractSet >
  _xsd_AbstractSet_type_factory_init (
    "AbstractSet",
    "http://message-model-uri/15/04");

  // AbstractSetResponse
  //

  AbstractSetResponse::
  AbstractSetResponse (const TransactionIdType& TransactionId,
                       const InvocationStateType& InvocationState,
                       const MDIBVersionType& MDIBVersion)
  : ::xml_schema::Type (),
    Extension_ (this),
    TransactionId_ (TransactionId, this),
    InvocationState_ (InvocationState, this),
    OperationError_ (this),
    OperationErrorMessage_ (this),
    MDIBVersion_ (MDIBVersion, this)
  {
  }

  AbstractSetResponse::
  AbstractSetResponse (::std::unique_ptr< TransactionIdType > TransactionId,
                       ::std::unique_ptr< InvocationStateType > InvocationState,
                       const MDIBVersionType& MDIBVersion)
  : ::xml_schema::Type (),
    Extension_ (this),
    TransactionId_ (std::move (TransactionId), this),
    InvocationState_ (std::move (InvocationState), this),
    OperationError_ (this),
    OperationErrorMessage_ (this),
    MDIBVersion_ (MDIBVersion, this)
  {
  }

  AbstractSetResponse::
  AbstractSetResponse (const AbstractSetResponse& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Extension_ (x.Extension_, f, this),
    TransactionId_ (x.TransactionId_, f, this),
    InvocationState_ (x.InvocationState_, f, this),
    OperationError_ (x.OperationError_, f, this),
    OperationErrorMessage_ (x.OperationErrorMessage_, f, this),
    MDIBVersion_ (x.MDIBVersion_, f, this)
  {
  }

  AbstractSetResponse::
  AbstractSetResponse (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Extension_ (this),
    TransactionId_ (this),
    InvocationState_ (this),
    OperationError_ (this),
    OperationErrorMessage_ (this),
    MDIBVersion_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void AbstractSetResponse::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Extension
      //
      if (n.name () == "Extension" && n.namespace_ () == "http://extension-point-uri/15/03")
      {
        ::std::unique_ptr< ExtensionType > r (
          ExtensionTraits::create (i, f, this));

        if (!this->Extension_)
        {
          this->Extension_.set (::std::move (r));
          continue;
        }
      }

      // TransactionId
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "TransactionId",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< TransactionIdType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!TransactionId_.present ())
          {
            ::std::unique_ptr< TransactionIdType > r (
              dynamic_cast< TransactionIdType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->TransactionId_.set (::std::move (r));
            continue;
          }
        }
      }

      // InvocationState
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "InvocationState",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< InvocationStateType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!InvocationState_.present ())
          {
            ::std::unique_ptr< InvocationStateType > r (
              dynamic_cast< InvocationStateType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->InvocationState_.set (::std::move (r));
            continue;
          }
        }
      }

      // OperationError
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "OperationError",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< OperationErrorType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->OperationError_)
          {
            ::std::unique_ptr< OperationErrorType > r (
              dynamic_cast< OperationErrorType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->OperationError_.set (::std::move (r));
            continue;
          }
        }
      }

      // OperationErrorMessage
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "OperationErrorMessage",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< OperationErrorMessageType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->OperationErrorMessage_)
          {
            ::std::unique_ptr< OperationErrorMessageType > r (
              dynamic_cast< OperationErrorMessageType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->OperationErrorMessage_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!TransactionId_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "TransactionId",
        "http://message-model-uri/15/04");
    }

    if (!InvocationState_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "InvocationState",
        "http://message-model-uri/15/04");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "MDIBVersion" && n.namespace_ () == "http://domain-model-uri/15/04")
      {
        this->MDIBVersion_.set (MDIBVersionTraits::create (i, f, this));
        continue;
      }
    }

    if (!MDIBVersion_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "MDIBVersion",
        "http://domain-model-uri/15/04");
    }
  }

  AbstractSetResponse* AbstractSetResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AbstractSetResponse (*this, f, c);
  }

  AbstractSetResponse& AbstractSetResponse::
  operator= (const AbstractSetResponse& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Extension_ = x.Extension_;
      this->TransactionId_ = x.TransactionId_;
      this->InvocationState_ = x.InvocationState_;
      this->OperationError_ = x.OperationError_;
      this->OperationErrorMessage_ = x.OperationErrorMessage_;
      this->MDIBVersion_ = x.MDIBVersion_;
    }

    return *this;
  }

  AbstractSetResponse::
  ~AbstractSetResponse ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AbstractSetResponse >
  _xsd_AbstractSetResponse_type_factory_init (
    "AbstractSetResponse",
    "http://message-model-uri/15/04");

  // AbstractReport
  //

  AbstractReport::
  AbstractReport (const MDIBVersionType& MDIBVersion)
  : ::xml_schema::Type (),
    Extension_ (this),
    MDIBVersion_ (MDIBVersion, this)
  {
  }

  AbstractReport::
  AbstractReport (const AbstractReport& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Extension_ (x.Extension_, f, this),
    MDIBVersion_ (x.MDIBVersion_, f, this)
  {
  }

  AbstractReport::
  AbstractReport (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Extension_ (this),
    MDIBVersion_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void AbstractReport::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Extension
      //
      if (n.name () == "Extension" && n.namespace_ () == "http://extension-point-uri/15/03")
      {
        ::std::unique_ptr< ExtensionType > r (
          ExtensionTraits::create (i, f, this));

        if (!this->Extension_)
        {
          this->Extension_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "MDIBVersion" && n.namespace_ () == "http://domain-model-uri/15/04")
      {
        this->MDIBVersion_.set (MDIBVersionTraits::create (i, f, this));
        continue;
      }
    }

    if (!MDIBVersion_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "MDIBVersion",
        "http://domain-model-uri/15/04");
    }
  }

  AbstractReport* AbstractReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AbstractReport (*this, f, c);
  }

  AbstractReport& AbstractReport::
  operator= (const AbstractReport& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Extension_ = x.Extension_;
      this->MDIBVersion_ = x.MDIBVersion_;
    }

    return *this;
  }

  AbstractReport::
  ~AbstractReport ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AbstractReport >
  _xsd_AbstractReport_type_factory_init (
    "AbstractReport",
    "http://message-model-uri/15/04");

  // AbstractReportPart
  //

  AbstractReportPart::
  AbstractReportPart ()
  : ::xml_schema::Type (),
    Extension_ (this),
    SourceMDS_ (this)
  {
  }

  AbstractReportPart::
  AbstractReportPart (const AbstractReportPart& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Extension_ (x.Extension_, f, this),
    SourceMDS_ (x.SourceMDS_, f, this)
  {
  }

  AbstractReportPart::
  AbstractReportPart (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Extension_ (this),
    SourceMDS_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void AbstractReportPart::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Extension
      //
      if (n.name () == "Extension" && n.namespace_ () == "http://extension-point-uri/15/03")
      {
        ::std::unique_ptr< ExtensionType > r (
          ExtensionTraits::create (i, f, this));

        if (!this->Extension_)
        {
          this->Extension_.set (::std::move (r));
          continue;
        }
      }

      // SourceMDS
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "SourceMDS",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< SourceMDSType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->SourceMDS_)
          {
            ::std::unique_ptr< SourceMDSType > r (
              dynamic_cast< SourceMDSType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->SourceMDS_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }
  }

  AbstractReportPart* AbstractReportPart::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AbstractReportPart (*this, f, c);
  }

  AbstractReportPart& AbstractReportPart::
  operator= (const AbstractReportPart& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Extension_ = x.Extension_;
      this->SourceMDS_ = x.SourceMDS_;
    }

    return *this;
  }

  AbstractReportPart::
  ~AbstractReportPart ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AbstractReportPart >
  _xsd_AbstractReportPart_type_factory_init (
    "AbstractReportPart",
    "http://message-model-uri/15/04");

  // MetricReportPart
  //

  MetricReportPart::
  MetricReportPart ()
  : ::CDM::AbstractReportPart (),
    MetricState_ (this)
  {
  }

  MetricReportPart::
  MetricReportPart (const MetricReportPart& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (x, f, c),
    MetricState_ (x.MetricState_, f, this)
  {
  }

  MetricReportPart::
  MetricReportPart (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (e, f | ::xml_schema::Flags::base, c),
    MetricState_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void MetricReportPart::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReportPart::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // MetricState
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "MetricState",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< MetricStateType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< MetricStateType > r (
            dynamic_cast< MetricStateType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->MetricState_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  MetricReportPart* MetricReportPart::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class MetricReportPart (*this, f, c);
  }

  MetricReportPart& MetricReportPart::
  operator= (const MetricReportPart& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReportPart& > (*this) = x;
      this->MetricState_ = x.MetricState_;
    }

    return *this;
  }

  MetricReportPart::
  ~MetricReportPart ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MetricReportPart >
  _xsd_MetricReportPart_type_factory_init (
    "MetricReportPart",
    "http://message-model-uri/15/04");

  // AbstractMetricReport
  //

  AbstractMetricReport::
  AbstractMetricReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractReport (MDIBVersion),
    ReportPart_ (this)
  {
  }

  AbstractMetricReport::
  AbstractMetricReport (const AbstractMetricReport& x,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::CDM::AbstractReport (x, f, c),
    ReportPart_ (x.ReportPart_, f, this)
  {
  }

  AbstractMetricReport::
  AbstractMetricReport (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::CDM::AbstractReport (e, f | ::xml_schema::Flags::base, c),
    ReportPart_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void AbstractMetricReport::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReport::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ReportPart
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ReportPart",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ReportPartType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ReportPartType > r (
            dynamic_cast< ReportPartType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ReportPart_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  AbstractMetricReport* AbstractMetricReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AbstractMetricReport (*this, f, c);
  }

  AbstractMetricReport& AbstractMetricReport::
  operator= (const AbstractMetricReport& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReport& > (*this) = x;
      this->ReportPart_ = x.ReportPart_;
    }

    return *this;
  }

  AbstractMetricReport::
  ~AbstractMetricReport ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AbstractMetricReport >
  _xsd_AbstractMetricReport_type_factory_init (
    "AbstractMetricReport",
    "http://message-model-uri/15/04");

  // AlertReportPart
  //

  AlertReportPart::
  AlertReportPart ()
  : ::CDM::AbstractReportPart (),
    AlertState_ (this)
  {
  }

  AlertReportPart::
  AlertReportPart (const AlertReportPart& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (x, f, c),
    AlertState_ (x.AlertState_, f, this)
  {
  }

  AlertReportPart::
  AlertReportPart (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (e, f | ::xml_schema::Flags::base, c),
    AlertState_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void AlertReportPart::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReportPart::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // AlertState
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "AlertState",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< AlertStateType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< AlertStateType > r (
            dynamic_cast< AlertStateType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->AlertState_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  AlertReportPart* AlertReportPart::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AlertReportPart (*this, f, c);
  }

  AlertReportPart& AlertReportPart::
  operator= (const AlertReportPart& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReportPart& > (*this) = x;
      this->AlertState_ = x.AlertState_;
    }

    return *this;
  }

  AlertReportPart::
  ~AlertReportPart ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AlertReportPart >
  _xsd_AlertReportPart_type_factory_init (
    "AlertReportPart",
    "http://message-model-uri/15/04");

  // AbstractAlertReport
  //

  AbstractAlertReport::
  AbstractAlertReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractReport (MDIBVersion),
    AlertReportDetail_ (this)
  {
  }

  AbstractAlertReport::
  AbstractAlertReport (const AbstractAlertReport& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::CDM::AbstractReport (x, f, c),
    AlertReportDetail_ (x.AlertReportDetail_, f, this)
  {
  }

  AbstractAlertReport::
  AbstractAlertReport (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::CDM::AbstractReport (e, f | ::xml_schema::Flags::base, c),
    AlertReportDetail_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void AbstractAlertReport::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReport::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // AlertReportDetail
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "AlertReportDetail",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< AlertReportDetailType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< AlertReportDetailType > r (
            dynamic_cast< AlertReportDetailType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->AlertReportDetail_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  AbstractAlertReport* AbstractAlertReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AbstractAlertReport (*this, f, c);
  }

  AbstractAlertReport& AbstractAlertReport::
  operator= (const AbstractAlertReport& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReport& > (*this) = x;
      this->AlertReportDetail_ = x.AlertReportDetail_;
    }

    return *this;
  }

  AbstractAlertReport::
  ~AbstractAlertReport ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AbstractAlertReport >
  _xsd_AbstractAlertReport_type_factory_init (
    "AbstractAlertReport",
    "http://message-model-uri/15/04");

  // ContextChangedReportPart
  //

  ContextChangedReportPart::
  ContextChangedReportPart ()
  : ::CDM::AbstractReportPart (),
    ChangedContextState_ (this)
  {
  }

  ContextChangedReportPart::
  ContextChangedReportPart (const ContextChangedReportPart& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (x, f, c),
    ChangedContextState_ (x.ChangedContextState_, f, this)
  {
  }

  ContextChangedReportPart::
  ContextChangedReportPart (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (e, f | ::xml_schema::Flags::base, c),
    ChangedContextState_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void ContextChangedReportPart::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReportPart::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ChangedContextState
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ChangedContextState",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ChangedContextStateType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ChangedContextStateType > r (
            dynamic_cast< ChangedContextStateType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ChangedContextState_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  ContextChangedReportPart* ContextChangedReportPart::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ContextChangedReportPart (*this, f, c);
  }

  ContextChangedReportPart& ContextChangedReportPart::
  operator= (const ContextChangedReportPart& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReportPart& > (*this) = x;
      this->ChangedContextState_ = x.ChangedContextState_;
    }

    return *this;
  }

  ContextChangedReportPart::
  ~ContextChangedReportPart ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ContextChangedReportPart >
  _xsd_ContextChangedReportPart_type_factory_init (
    "ContextChangedReportPart",
    "http://message-model-uri/15/04");

  // AbstractContextChangedReport
  //

  AbstractContextChangedReport::
  AbstractContextChangedReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractReport (MDIBVersion),
    ReportPart_ (this)
  {
  }

  AbstractContextChangedReport::
  AbstractContextChangedReport (const AbstractContextChangedReport& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::CDM::AbstractReport (x, f, c),
    ReportPart_ (x.ReportPart_, f, this)
  {
  }

  AbstractContextChangedReport::
  AbstractContextChangedReport (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::CDM::AbstractReport (e, f | ::xml_schema::Flags::base, c),
    ReportPart_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void AbstractContextChangedReport::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReport::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ReportPart
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ReportPart",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ReportPartType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ReportPartType > r (
            dynamic_cast< ReportPartType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ReportPart_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  AbstractContextChangedReport* AbstractContextChangedReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AbstractContextChangedReport (*this, f, c);
  }

  AbstractContextChangedReport& AbstractContextChangedReport::
  operator= (const AbstractContextChangedReport& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReport& > (*this) = x;
      this->ReportPart_ = x.ReportPart_;
    }

    return *this;
  }

  AbstractContextChangedReport::
  ~AbstractContextChangedReport ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AbstractContextChangedReport >
  _xsd_AbstractContextChangedReport_type_factory_init (
    "AbstractContextChangedReport",
    "http://message-model-uri/15/04");

  // InvocationError
  //

  InvocationError::
  InvocationError (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
    _xsd_InvocationError_convert ();
  }

  InvocationError::
  InvocationError (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
    _xsd_InvocationError_convert ();
  }

  InvocationError::
  InvocationError (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
    _xsd_InvocationError_convert ();
  }

  InvocationError* InvocationError::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class InvocationError (*this, f, c);
  }

  InvocationError::Value InvocationError::
  _xsd_InvocationError_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_InvocationError_literals_);
    const Value* i (::std::lower_bound (
                      _xsd_InvocationError_indexes_,
                      _xsd_InvocationError_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_InvocationError_indexes_ + 4 || _xsd_InvocationError_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const InvocationError::
  _xsd_InvocationError_literals_[4] =
  {
    "Unspec",
    "Unkn",
    "Inv",
    "Oth"
  };

  const InvocationError::Value InvocationError::
  _xsd_InvocationError_indexes_[4] =
  {
    ::CDM::InvocationError::Inv,
    ::CDM::InvocationError::Oth,
    ::CDM::InvocationError::Unkn,
    ::CDM::InvocationError::Unspec
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, InvocationError >
  _xsd_InvocationError_type_factory_init (
    "InvocationError",
    "http://message-model-uri/15/04");

  // OperationDescriptionModificationReportPart
  //

  OperationDescriptionModificationReportPart::
  OperationDescriptionModificationReportPart ()
  : ::CDM::AbstractReportPart (),
    OperationDescription_ (this)
  {
  }

  OperationDescriptionModificationReportPart::
  OperationDescriptionModificationReportPart (const OperationDescriptionModificationReportPart& x,
                                              ::xml_schema::Flags f,
                                              ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (x, f, c),
    OperationDescription_ (x.OperationDescription_, f, this)
  {
  }

  OperationDescriptionModificationReportPart::
  OperationDescriptionModificationReportPart (const ::xercesc::DOMElement& e,
                                              ::xml_schema::Flags f,
                                              ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (e, f | ::xml_schema::Flags::base, c),
    OperationDescription_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void OperationDescriptionModificationReportPart::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReportPart::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // OperationDescription
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "OperationDescription",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< OperationDescriptionType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< OperationDescriptionType > r (
            dynamic_cast< OperationDescriptionType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->OperationDescription_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  OperationDescriptionModificationReportPart* OperationDescriptionModificationReportPart::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OperationDescriptionModificationReportPart (*this, f, c);
  }

  OperationDescriptionModificationReportPart& OperationDescriptionModificationReportPart::
  operator= (const OperationDescriptionModificationReportPart& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReportPart& > (*this) = x;
      this->OperationDescription_ = x.OperationDescription_;
    }

    return *this;
  }

  OperationDescriptionModificationReportPart::
  ~OperationDescriptionModificationReportPart ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OperationDescriptionModificationReportPart >
  _xsd_OperationDescriptionModificationReportPart_type_factory_init (
    "OperationDescriptionModificationReportPart",
    "http://message-model-uri/15/04");

  // OperationDescriptionModificationReport
  //

  OperationDescriptionModificationReport::
  OperationDescriptionModificationReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractReport (MDIBVersion),
    ReportDetail_ (this)
  {
  }

  OperationDescriptionModificationReport::
  OperationDescriptionModificationReport (const OperationDescriptionModificationReport& x,
                                          ::xml_schema::Flags f,
                                          ::xml_schema::Container* c)
  : ::CDM::AbstractReport (x, f, c),
    ReportDetail_ (x.ReportDetail_, f, this)
  {
  }

  OperationDescriptionModificationReport::
  OperationDescriptionModificationReport (const ::xercesc::DOMElement& e,
                                          ::xml_schema::Flags f,
                                          ::xml_schema::Container* c)
  : ::CDM::AbstractReport (e, f | ::xml_schema::Flags::base, c),
    ReportDetail_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void OperationDescriptionModificationReport::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReport::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ReportDetail
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ReportDetail",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ReportDetailType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ReportDetailType > r (
            dynamic_cast< ReportDetailType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ReportDetail_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  OperationDescriptionModificationReport* OperationDescriptionModificationReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OperationDescriptionModificationReport (*this, f, c);
  }

  OperationDescriptionModificationReport& OperationDescriptionModificationReport::
  operator= (const OperationDescriptionModificationReport& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReport& > (*this) = x;
      this->ReportDetail_ = x.ReportDetail_;
    }

    return *this;
  }

  OperationDescriptionModificationReport::
  ~OperationDescriptionModificationReport ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OperationDescriptionModificationReport >
  _xsd_OperationDescriptionModificationReport_type_factory_init (
    "OperationDescriptionModificationReport",
    "http://message-model-uri/15/04");

  // OperationInvokedReportPart
  //

  OperationInvokedReportPart::
  OperationInvokedReportPart (const TransactionIdType& TransactionId,
                              const OperationHandleRefType& OperationHandleRef,
                              const OperationStateType& OperationState)
  : ::CDM::AbstractReportPart (),
    TransactionId_ (TransactionId, this),
    OperationHandleRef_ (OperationHandleRef, this),
    OperationTarget_ (this),
    OperationState_ (OperationState, this),
    OperationError_ (this),
    OperationErrorMessage_ (this)
  {
  }

  OperationInvokedReportPart::
  OperationInvokedReportPart (::std::unique_ptr< TransactionIdType > TransactionId,
                              ::std::unique_ptr< OperationHandleRefType > OperationHandleRef,
                              ::std::unique_ptr< OperationStateType > OperationState)
  : ::CDM::AbstractReportPart (),
    TransactionId_ (std::move (TransactionId), this),
    OperationHandleRef_ (std::move (OperationHandleRef), this),
    OperationTarget_ (this),
    OperationState_ (std::move (OperationState), this),
    OperationError_ (this),
    OperationErrorMessage_ (this)
  {
  }

  OperationInvokedReportPart::
  OperationInvokedReportPart (const OperationInvokedReportPart& x,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (x, f, c),
    TransactionId_ (x.TransactionId_, f, this),
    OperationHandleRef_ (x.OperationHandleRef_, f, this),
    OperationTarget_ (x.OperationTarget_, f, this),
    OperationState_ (x.OperationState_, f, this),
    OperationError_ (x.OperationError_, f, this),
    OperationErrorMessage_ (x.OperationErrorMessage_, f, this)
  {
  }

  OperationInvokedReportPart::
  OperationInvokedReportPart (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (e, f | ::xml_schema::Flags::base, c),
    TransactionId_ (this),
    OperationHandleRef_ (this),
    OperationTarget_ (this),
    OperationState_ (this),
    OperationError_ (this),
    OperationErrorMessage_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void OperationInvokedReportPart::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReportPart::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // TransactionId
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "TransactionId",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< TransactionIdType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!TransactionId_.present ())
          {
            ::std::unique_ptr< TransactionIdType > r (
              dynamic_cast< TransactionIdType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->TransactionId_.set (::std::move (r));
            continue;
          }
        }
      }

      // OperationHandleRef
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "OperationHandleRef",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< OperationHandleRefType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!OperationHandleRef_.present ())
          {
            ::std::unique_ptr< OperationHandleRefType > r (
              dynamic_cast< OperationHandleRefType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->OperationHandleRef_.set (::std::move (r));
            continue;
          }
        }
      }

      // OperationTarget
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "OperationTarget",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< OperationTargetType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->OperationTarget_)
          {
            ::std::unique_ptr< OperationTargetType > r (
              dynamic_cast< OperationTargetType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->OperationTarget_.set (::std::move (r));
            continue;
          }
        }
      }

      // OperationState
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "OperationState",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< OperationStateType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!OperationState_.present ())
          {
            ::std::unique_ptr< OperationStateType > r (
              dynamic_cast< OperationStateType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->OperationState_.set (::std::move (r));
            continue;
          }
        }
      }

      // OperationError
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "OperationError",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< OperationErrorType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->OperationError_)
          {
            ::std::unique_ptr< OperationErrorType > r (
              dynamic_cast< OperationErrorType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->OperationError_.set (::std::move (r));
            continue;
          }
        }
      }

      // OperationErrorMessage
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "OperationErrorMessage",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< OperationErrorMessageType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->OperationErrorMessage_)
          {
            ::std::unique_ptr< OperationErrorMessageType > r (
              dynamic_cast< OperationErrorMessageType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->OperationErrorMessage_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!TransactionId_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "TransactionId",
        "http://message-model-uri/15/04");
    }

    if (!OperationHandleRef_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OperationHandleRef",
        "http://message-model-uri/15/04");
    }

    if (!OperationState_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OperationState",
        "http://message-model-uri/15/04");
    }
  }

  OperationInvokedReportPart* OperationInvokedReportPart::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OperationInvokedReportPart (*this, f, c);
  }

  OperationInvokedReportPart& OperationInvokedReportPart::
  operator= (const OperationInvokedReportPart& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReportPart& > (*this) = x;
      this->TransactionId_ = x.TransactionId_;
      this->OperationHandleRef_ = x.OperationHandleRef_;
      this->OperationTarget_ = x.OperationTarget_;
      this->OperationState_ = x.OperationState_;
      this->OperationError_ = x.OperationError_;
      this->OperationErrorMessage_ = x.OperationErrorMessage_;
    }

    return *this;
  }

  OperationInvokedReportPart::
  ~OperationInvokedReportPart ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OperationInvokedReportPart >
  _xsd_OperationInvokedReportPart_type_factory_init (
    "OperationInvokedReportPart",
    "http://message-model-uri/15/04");

  // OperationalStateChangedReportPart
  //

  OperationalStateChangedReportPart::
  OperationalStateChangedReportPart ()
  : ::CDM::AbstractReportPart (),
    Operation_ (this)
  {
  }

  OperationalStateChangedReportPart::
  OperationalStateChangedReportPart (const OperationalStateChangedReportPart& x,
                                     ::xml_schema::Flags f,
                                     ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (x, f, c),
    Operation_ (x.Operation_, f, this)
  {
  }

  OperationalStateChangedReportPart::
  OperationalStateChangedReportPart (const ::xercesc::DOMElement& e,
                                     ::xml_schema::Flags f,
                                     ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (e, f | ::xml_schema::Flags::base, c),
    Operation_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void OperationalStateChangedReportPart::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReportPart::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Operation
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Operation",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< OperationType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< OperationType > r (
            dynamic_cast< OperationType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Operation_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  OperationalStateChangedReportPart* OperationalStateChangedReportPart::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OperationalStateChangedReportPart (*this, f, c);
  }

  OperationalStateChangedReportPart& OperationalStateChangedReportPart::
  operator= (const OperationalStateChangedReportPart& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReportPart& > (*this) = x;
      this->Operation_ = x.Operation_;
    }

    return *this;
  }

  OperationalStateChangedReportPart::
  ~OperationalStateChangedReportPart ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, OperationalStateChangedReportPart >
  _xsd_OperationalStateChangedReportPart_type_factory_init (
    "OperationalStateChangedReportPart",
    "http://message-model-uri/15/04");

  // DescriptionModificationType
  //

  DescriptionModificationType::
  DescriptionModificationType (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
    _xsd_DescriptionModificationType_convert ();
  }

  DescriptionModificationType::
  DescriptionModificationType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
    _xsd_DescriptionModificationType_convert ();
  }

  DescriptionModificationType::
  DescriptionModificationType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
    _xsd_DescriptionModificationType_convert ();
  }

  DescriptionModificationType* DescriptionModificationType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DescriptionModificationType (*this, f, c);
  }

  DescriptionModificationType::Value DescriptionModificationType::
  _xsd_DescriptionModificationType_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DescriptionModificationType_literals_);
    const Value* i (::std::lower_bound (
                      _xsd_DescriptionModificationType_indexes_,
                      _xsd_DescriptionModificationType_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_DescriptionModificationType_indexes_ + 3 || _xsd_DescriptionModificationType_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const DescriptionModificationType::
  _xsd_DescriptionModificationType_literals_[3] =
  {
    "Crt",
    "Upt",
    "Del"
  };

  const DescriptionModificationType::Value DescriptionModificationType::
  _xsd_DescriptionModificationType_indexes_[3] =
  {
    ::CDM::DescriptionModificationType::Crt,
    ::CDM::DescriptionModificationType::Del,
    ::CDM::DescriptionModificationType::Upt
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DescriptionModificationType >
  _xsd_DescriptionModificationType_type_factory_init (
    "DescriptionModificationType",
    "http://message-model-uri/15/04");

  // DescriptionModificationReportPart
  //

  DescriptionModificationReportPart::
  DescriptionModificationReportPart (const DescriptorType& Descriptor,
                                     const ParentDescriptorType& ParentDescriptor)
  : ::CDM::AbstractReportPart (),
    Descriptor_ (Descriptor, this),
    ParentDescriptor_ (ParentDescriptor, this),
    ModificationType_ (this)
  {
  }

  DescriptionModificationReportPart::
  DescriptionModificationReportPart (::std::unique_ptr< DescriptorType > Descriptor,
                                     const ParentDescriptorType& ParentDescriptor)
  : ::CDM::AbstractReportPart (),
    Descriptor_ (std::move (Descriptor), this),
    ParentDescriptor_ (ParentDescriptor, this),
    ModificationType_ (this)
  {
  }

  DescriptionModificationReportPart::
  DescriptionModificationReportPart (const DescriptionModificationReportPart& x,
                                     ::xml_schema::Flags f,
                                     ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (x, f, c),
    Descriptor_ (x.Descriptor_, f, this),
    ParentDescriptor_ (x.ParentDescriptor_, f, this),
    ModificationType_ (x.ModificationType_, f, this)
  {
  }

  DescriptionModificationReportPart::
  DescriptionModificationReportPart (const ::xercesc::DOMElement& e,
                                     ::xml_schema::Flags f,
                                     ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (e, f | ::xml_schema::Flags::base, c),
    Descriptor_ (this),
    ParentDescriptor_ (this),
    ModificationType_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void DescriptionModificationReportPart::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReportPart::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Descriptor
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Descriptor",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< DescriptorType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!Descriptor_.present ())
          {
            ::std::unique_ptr< DescriptorType > r (
              dynamic_cast< DescriptorType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Descriptor_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!Descriptor_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Descriptor",
        "http://message-model-uri/15/04");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "ParentDescriptor" && n.namespace_ ().empty ())
      {
        this->ParentDescriptor_.set (ParentDescriptorTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "ModificationType" && n.namespace_ ().empty ())
      {
        this->ModificationType_.set (ModificationTypeTraits::create (i, f, this));
        continue;
      }
    }

    if (!ParentDescriptor_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "ParentDescriptor",
        "");
    }
  }

  DescriptionModificationReportPart* DescriptionModificationReportPart::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DescriptionModificationReportPart (*this, f, c);
  }

  DescriptionModificationReportPart& DescriptionModificationReportPart::
  operator= (const DescriptionModificationReportPart& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReportPart& > (*this) = x;
      this->Descriptor_ = x.Descriptor_;
      this->ParentDescriptor_ = x.ParentDescriptor_;
      this->ModificationType_ = x.ModificationType_;
    }

    return *this;
  }

  DescriptionModificationReportPart::
  ~DescriptionModificationReportPart ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DescriptionModificationReportPart >
  _xsd_DescriptionModificationReportPart_type_factory_init (
    "DescriptionModificationReportPart",
    "http://message-model-uri/15/04");

  // DescriptionModificationReport
  //

  DescriptionModificationReport::
  DescriptionModificationReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractReport (MDIBVersion),
    ReportDetail_ (this)
  {
  }

  DescriptionModificationReport::
  DescriptionModificationReport (const DescriptionModificationReport& x,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
  : ::CDM::AbstractReport (x, f, c),
    ReportDetail_ (x.ReportDetail_, f, this)
  {
  }

  DescriptionModificationReport::
  DescriptionModificationReport (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
  : ::CDM::AbstractReport (e, f | ::xml_schema::Flags::base, c),
    ReportDetail_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void DescriptionModificationReport::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReport::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ReportDetail
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ReportDetail",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ReportDetailType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ReportDetailType > r (
            dynamic_cast< ReportDetailType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ReportDetail_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  DescriptionModificationReport* DescriptionModificationReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DescriptionModificationReport (*this, f, c);
  }

  DescriptionModificationReport& DescriptionModificationReport::
  operator= (const DescriptionModificationReport& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReport& > (*this) = x;
      this->ReportDetail_ = x.ReportDetail_;
    }

    return *this;
  }

  DescriptionModificationReport::
  ~DescriptionModificationReport ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DescriptionModificationReport >
  _xsd_DescriptionModificationReport_type_factory_init (
    "DescriptionModificationReport",
    "http://message-model-uri/15/04");

  // MDSModificationReportPart
  //

  MDSModificationReportPart::
  MDSModificationReportPart ()
  : ::CDM::AbstractReportPart (),
    MDS_ (this)
  {
  }

  MDSModificationReportPart::
  MDSModificationReportPart (const MDSModificationReportPart& x,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (x, f, c),
    MDS_ (x.MDS_, f, this)
  {
  }

  MDSModificationReportPart::
  MDSModificationReportPart (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (e, f | ::xml_schema::Flags::base, c),
    MDS_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void MDSModificationReportPart::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReportPart::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // MDS
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "MDS",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< MDSType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< MDSType > r (
            dynamic_cast< MDSType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->MDS_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  MDSModificationReportPart* MDSModificationReportPart::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class MDSModificationReportPart (*this, f, c);
  }

  MDSModificationReportPart& MDSModificationReportPart::
  operator= (const MDSModificationReportPart& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReportPart& > (*this) = x;
      this->MDS_ = x.MDS_;
    }

    return *this;
  }

  MDSModificationReportPart::
  ~MDSModificationReportPart ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MDSModificationReportPart >
  _xsd_MDSModificationReportPart_type_factory_init (
    "MDSModificationReportPart",
    "http://message-model-uri/15/04");

  // MDSModificationReport
  //

  MDSModificationReport::
  MDSModificationReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractReport (MDIBVersion),
    ReportDetail_ (this)
  {
  }

  MDSModificationReport::
  MDSModificationReport (const MDSModificationReport& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::CDM::AbstractReport (x, f, c),
    ReportDetail_ (x.ReportDetail_, f, this)
  {
  }

  MDSModificationReport::
  MDSModificationReport (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::CDM::AbstractReport (e, f | ::xml_schema::Flags::base, c),
    ReportDetail_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void MDSModificationReport::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReport::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ReportDetail
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ReportDetail",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ReportDetailType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ReportDetailType > r (
            dynamic_cast< ReportDetailType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ReportDetail_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  MDSModificationReport* MDSModificationReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class MDSModificationReport (*this, f, c);
  }

  MDSModificationReport& MDSModificationReport::
  operator= (const MDSModificationReport& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReport& > (*this) = x;
      this->ReportDetail_ = x.ReportDetail_;
    }

    return *this;
  }

  MDSModificationReport::
  ~MDSModificationReport ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MDSModificationReport >
  _xsd_MDSModificationReport_type_factory_init (
    "MDSModificationReport",
    "http://message-model-uri/15/04");

  // SystemErrorReportReportPart
  //

  SystemErrorReportReportPart::
  SystemErrorReportReportPart (const ErrorCodeType& ErrorCode)
  : ::CDM::AbstractReportPart (),
    ErrorCode_ (ErrorCode, this),
    ErrorInfo_ (this)
  {
  }

  SystemErrorReportReportPart::
  SystemErrorReportReportPart (::std::unique_ptr< ErrorCodeType > ErrorCode)
  : ::CDM::AbstractReportPart (),
    ErrorCode_ (std::move (ErrorCode), this),
    ErrorInfo_ (this)
  {
  }

  SystemErrorReportReportPart::
  SystemErrorReportReportPart (const SystemErrorReportReportPart& x,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (x, f, c),
    ErrorCode_ (x.ErrorCode_, f, this),
    ErrorInfo_ (x.ErrorInfo_, f, this)
  {
  }

  SystemErrorReportReportPart::
  SystemErrorReportReportPart (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
  : ::CDM::AbstractReportPart (e, f | ::xml_schema::Flags::base, c),
    ErrorCode_ (this),
    ErrorInfo_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SystemErrorReportReportPart::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReportPart::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ErrorCode
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ErrorCode",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ErrorCodeType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!ErrorCode_.present ())
          {
            ::std::unique_ptr< ErrorCodeType > r (
              dynamic_cast< ErrorCodeType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ErrorCode_.set (::std::move (r));
            continue;
          }
        }
      }

      // ErrorInfo
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ErrorInfo",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ErrorInfoType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->ErrorInfo_)
          {
            ::std::unique_ptr< ErrorInfoType > r (
              dynamic_cast< ErrorInfoType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ErrorInfo_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!ErrorCode_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ErrorCode",
        "http://message-model-uri/15/04");
    }
  }

  SystemErrorReportReportPart* SystemErrorReportReportPart::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SystemErrorReportReportPart (*this, f, c);
  }

  SystemErrorReportReportPart& SystemErrorReportReportPart::
  operator= (const SystemErrorReportReportPart& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReportPart& > (*this) = x;
      this->ErrorCode_ = x.ErrorCode_;
      this->ErrorInfo_ = x.ErrorInfo_;
    }

    return *this;
  }

  SystemErrorReportReportPart::
  ~SystemErrorReportReportPart ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, SystemErrorReportReportPart >
  _xsd_SystemErrorReportReportPart_type_factory_init (
    "SystemErrorReportReportPart",
    "http://message-model-uri/15/04");

  // StreamElement
  //

  StreamElement::
  StreamElement (const MetricType& Metric)
  : ::xml_schema::Type (),
    Value_ (this),
    Metric_ (Metric, this)
  {
  }

  StreamElement::
  StreamElement (const StreamElement& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Value_ (x.Value_, f, this),
    Metric_ (x.Metric_, f, this)
  {
  }

  StreamElement::
  StreamElement (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Value_ (this),
    Metric_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void StreamElement::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Value
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Value",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ValueType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->Value_)
          {
            ::std::unique_ptr< ValueType > r (
              dynamic_cast< ValueType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Value_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Metric" && n.namespace_ ().empty ())
      {
        this->Metric_.set (MetricTraits::create (i, f, this));
        continue;
      }
    }

    if (!Metric_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "Metric",
        "");
    }
  }

  StreamElement* StreamElement::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class StreamElement (*this, f, c);
  }

  StreamElement& StreamElement::
  operator= (const StreamElement& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Value_ = x.Value_;
      this->Metric_ = x.Metric_;
    }

    return *this;
  }

  StreamElement::
  ~StreamElement ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, StreamElement >
  _xsd_StreamElement_type_factory_init (
    "StreamElement",
    "http://message-model-uri/15/04");

  // MetricRetrievability
  //

  MetricRetrievability::
  MetricRetrievability (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
    _xsd_MetricRetrievability_convert ();
  }

  MetricRetrievability::
  MetricRetrievability (const ::xercesc::DOMAttr& a,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
    _xsd_MetricRetrievability_convert ();
  }

  MetricRetrievability::
  MetricRetrievability (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
    _xsd_MetricRetrievability_convert ();
  }

  MetricRetrievability* MetricRetrievability::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class MetricRetrievability (*this, f, c);
  }

  MetricRetrievability::Value MetricRetrievability::
  _xsd_MetricRetrievability_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MetricRetrievability_literals_);
    const Value* i (::std::lower_bound (
                      _xsd_MetricRetrievability_indexes_,
                      _xsd_MetricRetrievability_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_MetricRetrievability_indexes_ + 4 || _xsd_MetricRetrievability_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const MetricRetrievability::
  _xsd_MetricRetrievability_literals_[4] =
  {
    "Get",
    "Per",
    "Ep",
    "Strm"
  };

  const MetricRetrievability::Value MetricRetrievability::
  _xsd_MetricRetrievability_indexes_[4] =
  {
    ::CDM::MetricRetrievability::Ep,
    ::CDM::MetricRetrievability::Get,
    ::CDM::MetricRetrievability::Per,
    ::CDM::MetricRetrievability::Strm
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, MetricRetrievability >
  _xsd_MetricRetrievability_type_factory_init (
    "MetricRetrievability",
    "http://message-model-uri/15/04");

  // GetMDIB
  //

  GetMDIB::
  GetMDIB ()
  : ::CDM::AbstractGet ()
  {
  }

  GetMDIB::
  GetMDIB (const GetMDIB& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::CDM::AbstractGet (x, f, c)
  {
  }

  GetMDIB::
  GetMDIB (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
  : ::CDM::AbstractGet (e, f, c)
  {
  }

  GetMDIB* GetMDIB::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetMDIB (*this, f, c);
  }

  GetMDIB::
  ~GetMDIB ()
  {
  }

  // GetMDIBResponse
  //

  GetMDIBResponse::
  GetMDIBResponse (const MDIBVersionType& MDIBVersion,
                   const MDIBType& MDIB)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    MDIB_ (MDIB, this)
  {
  }

  GetMDIBResponse::
  GetMDIBResponse (const MDIBVersionType& MDIBVersion,
                   ::std::unique_ptr< MDIBType > MDIB)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    MDIB_ (std::move (MDIB), this)
  {
  }

  GetMDIBResponse::
  GetMDIBResponse (const GetMDIBResponse& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (x, f, c),
    MDIB_ (x.MDIB_, f, this)
  {
  }

  GetMDIBResponse::
  GetMDIBResponse (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (e, f | ::xml_schema::Flags::base, c),
    MDIB_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void GetMDIBResponse::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGetResponse::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // MDIB
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "MDIB",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< MDIBType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!MDIB_.present ())
          {
            ::std::unique_ptr< MDIBType > r (
              dynamic_cast< MDIBType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->MDIB_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!MDIB_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "MDIB",
        "http://message-model-uri/15/04");
    }
  }

  GetMDIBResponse* GetMDIBResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetMDIBResponse (*this, f, c);
  }

  GetMDIBResponse& GetMDIBResponse::
  operator= (const GetMDIBResponse& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGetResponse& > (*this) = x;
      this->MDIB_ = x.MDIB_;
    }

    return *this;
  }

  GetMDIBResponse::
  ~GetMDIBResponse ()
  {
  }

  // GetMDDescription
  //

  GetMDDescription::
  GetMDDescription ()
  : ::CDM::AbstractGet (),
    HandleRef_ (this)
  {
  }

  GetMDDescription::
  GetMDDescription (const GetMDDescription& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractGet (x, f, c),
    HandleRef_ (x.HandleRef_, f, this)
  {
  }

  GetMDDescription::
  GetMDDescription (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractGet (e, f | ::xml_schema::Flags::base, c),
    HandleRef_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void GetMDDescription::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // HandleRef
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "HandleRef",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< HandleRefType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< HandleRefType > r (
            dynamic_cast< HandleRefType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->HandleRef_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  GetMDDescription* GetMDDescription::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetMDDescription (*this, f, c);
  }

  GetMDDescription& GetMDDescription::
  operator= (const GetMDDescription& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGet& > (*this) = x;
      this->HandleRef_ = x.HandleRef_;
    }

    return *this;
  }

  GetMDDescription::
  ~GetMDDescription ()
  {
  }

  // GetMDDescriptionResponse
  //

  GetMDDescriptionResponse::
  GetMDDescriptionResponse (const MDIBVersionType& MDIBVersion,
                            const StaticDescriptionType& StaticDescription)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    StaticDescription_ (StaticDescription, this)
  {
  }

  GetMDDescriptionResponse::
  GetMDDescriptionResponse (const MDIBVersionType& MDIBVersion,
                            ::std::unique_ptr< StaticDescriptionType > StaticDescription)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    StaticDescription_ (std::move (StaticDescription), this)
  {
  }

  GetMDDescriptionResponse::
  GetMDDescriptionResponse (const GetMDDescriptionResponse& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (x, f, c),
    StaticDescription_ (x.StaticDescription_, f, this)
  {
  }

  GetMDDescriptionResponse::
  GetMDDescriptionResponse (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (e, f | ::xml_schema::Flags::base, c),
    StaticDescription_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void GetMDDescriptionResponse::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGetResponse::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // StaticDescription
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "StaticDescription",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< StaticDescriptionType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!StaticDescription_.present ())
          {
            ::std::unique_ptr< StaticDescriptionType > r (
              dynamic_cast< StaticDescriptionType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->StaticDescription_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!StaticDescription_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "StaticDescription",
        "http://message-model-uri/15/04");
    }
  }

  GetMDDescriptionResponse* GetMDDescriptionResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetMDDescriptionResponse (*this, f, c);
  }

  GetMDDescriptionResponse& GetMDDescriptionResponse::
  operator= (const GetMDDescriptionResponse& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGetResponse& > (*this) = x;
      this->StaticDescription_ = x.StaticDescription_;
    }

    return *this;
  }

  GetMDDescriptionResponse::
  ~GetMDDescriptionResponse ()
  {
  }

  // GetMDState
  //

  GetMDState::
  GetMDState ()
  : ::CDM::AbstractGet (),
    HandleRef_ (this)
  {
  }

  GetMDState::
  GetMDState (const GetMDState& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::CDM::AbstractGet (x, f, c),
    HandleRef_ (x.HandleRef_, f, this)
  {
  }

  GetMDState::
  GetMDState (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::CDM::AbstractGet (e, f | ::xml_schema::Flags::base, c),
    HandleRef_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void GetMDState::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // HandleRef
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "HandleRef",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< HandleRefType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< HandleRefType > r (
            dynamic_cast< HandleRefType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->HandleRef_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  GetMDState* GetMDState::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetMDState (*this, f, c);
  }

  GetMDState& GetMDState::
  operator= (const GetMDState& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGet& > (*this) = x;
      this->HandleRef_ = x.HandleRef_;
    }

    return *this;
  }

  GetMDState::
  ~GetMDState ()
  {
  }

  // GetMDStateResponse
  //

  GetMDStateResponse::
  GetMDStateResponse (const MDIBVersionType& MDIBVersion,
                      const MDStateType& MDState)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    MDState_ (MDState, this)
  {
  }

  GetMDStateResponse::
  GetMDStateResponse (const MDIBVersionType& MDIBVersion,
                      ::std::unique_ptr< MDStateType > MDState)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    MDState_ (std::move (MDState), this)
  {
  }

  GetMDStateResponse::
  GetMDStateResponse (const GetMDStateResponse& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (x, f, c),
    MDState_ (x.MDState_, f, this)
  {
  }

  GetMDStateResponse::
  GetMDStateResponse (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (e, f | ::xml_schema::Flags::base, c),
    MDState_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void GetMDStateResponse::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGetResponse::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // MDState
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "MDState",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< MDStateType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!MDState_.present ())
          {
            ::std::unique_ptr< MDStateType > r (
              dynamic_cast< MDStateType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->MDState_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!MDState_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "MDState",
        "http://message-model-uri/15/04");
    }
  }

  GetMDStateResponse* GetMDStateResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetMDStateResponse (*this, f, c);
  }

  GetMDStateResponse& GetMDStateResponse::
  operator= (const GetMDStateResponse& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGetResponse& > (*this) = x;
      this->MDState_ = x.MDState_;
    }

    return *this;
  }

  GetMDStateResponse::
  ~GetMDStateResponse ()
  {
  }

  // GetContextStates
  //

  GetContextStates::
  GetContextStates ()
  : ::CDM::AbstractGet (),
    HandleRef_ (this)
  {
  }

  GetContextStates::
  GetContextStates (const GetContextStates& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractGet (x, f, c),
    HandleRef_ (x.HandleRef_, f, this)
  {
  }

  GetContextStates::
  GetContextStates (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractGet (e, f | ::xml_schema::Flags::base, c),
    HandleRef_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void GetContextStates::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // HandleRef
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "HandleRef",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< HandleRefType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< HandleRefType > r (
            dynamic_cast< HandleRefType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->HandleRef_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  GetContextStates* GetContextStates::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetContextStates (*this, f, c);
  }

  GetContextStates& GetContextStates::
  operator= (const GetContextStates& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGet& > (*this) = x;
      this->HandleRef_ = x.HandleRef_;
    }

    return *this;
  }

  GetContextStates::
  ~GetContextStates ()
  {
  }

  // GetContextStatesResponse
  //

  GetContextStatesResponse::
  GetContextStatesResponse (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    ContextState_ (this)
  {
  }

  GetContextStatesResponse::
  GetContextStatesResponse (const GetContextStatesResponse& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (x, f, c),
    ContextState_ (x.ContextState_, f, this)
  {
  }

  GetContextStatesResponse::
  GetContextStatesResponse (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (e, f | ::xml_schema::Flags::base, c),
    ContextState_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void GetContextStatesResponse::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGetResponse::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ContextState
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ContextState",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ContextStateType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ContextStateType > r (
            dynamic_cast< ContextStateType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ContextState_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  GetContextStatesResponse* GetContextStatesResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetContextStatesResponse (*this, f, c);
  }

  GetContextStatesResponse& GetContextStatesResponse::
  operator= (const GetContextStatesResponse& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGetResponse& > (*this) = x;
      this->ContextState_ = x.ContextState_;
    }

    return *this;
  }

  GetContextStatesResponse::
  ~GetContextStatesResponse ()
  {
  }

  // GetContainmentTree
  //

  GetContainmentTree::
  GetContainmentTree ()
  : ::CDM::AbstractGet (),
    HandleRef_ (this)
  {
  }

  GetContainmentTree::
  GetContainmentTree (const GetContainmentTree& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::CDM::AbstractGet (x, f, c),
    HandleRef_ (x.HandleRef_, f, this)
  {
  }

  GetContainmentTree::
  GetContainmentTree (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::CDM::AbstractGet (e, f | ::xml_schema::Flags::base, c),
    HandleRef_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void GetContainmentTree::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // HandleRef
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "HandleRef",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< HandleRefType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< HandleRefType > r (
            dynamic_cast< HandleRefType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->HandleRef_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  GetContainmentTree* GetContainmentTree::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetContainmentTree (*this, f, c);
  }

  GetContainmentTree& GetContainmentTree::
  operator= (const GetContainmentTree& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGet& > (*this) = x;
      this->HandleRef_ = x.HandleRef_;
    }

    return *this;
  }

  GetContainmentTree::
  ~GetContainmentTree ()
  {
  }

  // GetContainmentTreeResponse
  //

  GetContainmentTreeResponse::
  GetContainmentTreeResponse (const MDIBVersionType& MDIBVersion,
                              const ContainmentTreeType& ContainmentTree)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    ContainmentTree_ (ContainmentTree, this)
  {
  }

  GetContainmentTreeResponse::
  GetContainmentTreeResponse (const MDIBVersionType& MDIBVersion,
                              ::std::unique_ptr< ContainmentTreeType > ContainmentTree)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    ContainmentTree_ (std::move (ContainmentTree), this)
  {
  }

  GetContainmentTreeResponse::
  GetContainmentTreeResponse (const GetContainmentTreeResponse& x,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (x, f, c),
    ContainmentTree_ (x.ContainmentTree_, f, this)
  {
  }

  GetContainmentTreeResponse::
  GetContainmentTreeResponse (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (e, f | ::xml_schema::Flags::base, c),
    ContainmentTree_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void GetContainmentTreeResponse::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGetResponse::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ContainmentTree
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ContainmentTree",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ContainmentTreeType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!ContainmentTree_.present ())
          {
            ::std::unique_ptr< ContainmentTreeType > r (
              dynamic_cast< ContainmentTreeType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ContainmentTree_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!ContainmentTree_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ContainmentTree",
        "http://message-model-uri/15/04");
    }
  }

  GetContainmentTreeResponse* GetContainmentTreeResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetContainmentTreeResponse (*this, f, c);
  }

  GetContainmentTreeResponse& GetContainmentTreeResponse::
  operator= (const GetContainmentTreeResponse& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGetResponse& > (*this) = x;
      this->ContainmentTree_ = x.ContainmentTree_;
    }

    return *this;
  }

  GetContainmentTreeResponse::
  ~GetContainmentTreeResponse ()
  {
  }

  // GetDescriptor
  //

  GetDescriptor::
  GetDescriptor ()
  : ::CDM::AbstractGet (),
    HandleRef_ (this)
  {
  }

  GetDescriptor::
  GetDescriptor (const GetDescriptor& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::CDM::AbstractGet (x, f, c),
    HandleRef_ (x.HandleRef_, f, this)
  {
  }

  GetDescriptor::
  GetDescriptor (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::CDM::AbstractGet (e, f | ::xml_schema::Flags::base, c),
    HandleRef_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void GetDescriptor::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // HandleRef
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "HandleRef",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< HandleRefType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< HandleRefType > r (
            dynamic_cast< HandleRefType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->HandleRef_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  GetDescriptor* GetDescriptor::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetDescriptor (*this, f, c);
  }

  GetDescriptor& GetDescriptor::
  operator= (const GetDescriptor& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGet& > (*this) = x;
      this->HandleRef_ = x.HandleRef_;
    }

    return *this;
  }

  GetDescriptor::
  ~GetDescriptor ()
  {
  }

  // GetDescriptorResponse
  //

  GetDescriptorResponse::
  GetDescriptorResponse (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractGetResponse (MDIBVersion),
    Descriptor_ (this)
  {
  }

  GetDescriptorResponse::
  GetDescriptorResponse (const GetDescriptorResponse& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (x, f, c),
    Descriptor_ (x.Descriptor_, f, this)
  {
  }

  GetDescriptorResponse::
  GetDescriptorResponse (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::CDM::AbstractGetResponse (e, f | ::xml_schema::Flags::base, c),
    Descriptor_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void GetDescriptorResponse::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractGetResponse::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Descriptor
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Descriptor",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< DescriptorType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< DescriptorType > r (
            dynamic_cast< DescriptorType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Descriptor_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  GetDescriptorResponse* GetDescriptorResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class GetDescriptorResponse (*this, f, c);
  }

  GetDescriptorResponse& GetDescriptorResponse::
  operator= (const GetDescriptorResponse& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractGetResponse& > (*this) = x;
      this->Descriptor_ = x.Descriptor_;
    }

    return *this;
  }

  GetDescriptorResponse::
  ~GetDescriptorResponse ()
  {
  }

  // Text
  //

  Text::
  Text ()
  : ::xml_schema::String (),
    Lang_ (this)
  {
  }

  Text::
  Text (const char* _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base),
    Lang_ (this)
  {
  }

  Text::
  Text (const ::std::string& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base),
    Lang_ (this)
  {
  }

  Text::
  Text (const ::xml_schema::String& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base),
    Lang_ (this)
  {
  }

  Text::
  Text (const Text& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::String (x, f, c),
    Lang_ (x.Lang_, f, this)
  {
  }

  Text::
  Text (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::String (e, f | ::xml_schema::Flags::base, c),
    Lang_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void Text::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Lang" && n.namespace_ ().empty ())
      {
        this->Lang_.set (LangTraits::create (i, f, this));
        continue;
      }
    }
  }

  Text* Text::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Text (*this, f, c);
  }

  Text& Text::
  operator= (const Text& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::String& > (*this) = x;
      this->Lang_ = x.Lang_;
    }

    return *this;
  }

  Text::
  ~Text ()
  {
  }

  // SetRange
  //

  SetRange::
  SetRange (const OperationHandleRefType& OperationHandleRef,
            const RequestedRangeType& RequestedRange)
  : ::CDM::AbstractSet (OperationHandleRef),
    RequestedRange_ (RequestedRange, this)
  {
  }

  SetRange::
  SetRange (const OperationHandleRefType& OperationHandleRef,
            ::std::unique_ptr< RequestedRangeType > RequestedRange)
  : ::CDM::AbstractSet (OperationHandleRef),
    RequestedRange_ (std::move (RequestedRange), this)
  {
  }

  SetRange::
  SetRange (::std::unique_ptr< OperationHandleRefType > OperationHandleRef,
            ::std::unique_ptr< RequestedRangeType > RequestedRange)
  : ::CDM::AbstractSet (std::move (OperationHandleRef)),
    RequestedRange_ (std::move (RequestedRange), this)
  {
  }

  SetRange::
  SetRange (const SetRange& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::CDM::AbstractSet (x, f, c),
    RequestedRange_ (x.RequestedRange_, f, this)
  {
  }

  SetRange::
  SetRange (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::CDM::AbstractSet (e, f | ::xml_schema::Flags::base, c),
    RequestedRange_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SetRange::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractSet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // RequestedRange
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "RequestedRange",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< RequestedRangeType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!RequestedRange_.present ())
          {
            ::std::unique_ptr< RequestedRangeType > r (
              dynamic_cast< RequestedRangeType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->RequestedRange_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!RequestedRange_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "RequestedRange",
        "http://message-model-uri/15/04");
    }
  }

  SetRange* SetRange::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SetRange (*this, f, c);
  }

  SetRange& SetRange::
  operator= (const SetRange& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractSet& > (*this) = x;
      this->RequestedRange_ = x.RequestedRange_;
    }

    return *this;
  }

  SetRange::
  ~SetRange ()
  {
  }

  // SetRangeResponse
  //

  SetRangeResponse::
  SetRangeResponse (const TransactionIdType& TransactionId,
                    const InvocationStateType& InvocationState,
                    const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (TransactionId,
                                InvocationState,
                                MDIBVersion)
  {
  }

  SetRangeResponse::
  SetRangeResponse (::std::unique_ptr< TransactionIdType > TransactionId,
                    ::std::unique_ptr< InvocationStateType > InvocationState,
                    const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (std::move (TransactionId),
                                std::move (InvocationState),
                                MDIBVersion)
  {
  }

  SetRangeResponse::
  SetRangeResponse (const SetRangeResponse& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (x, f, c)
  {
  }

  SetRangeResponse::
  SetRangeResponse (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (e, f, c)
  {
  }

  SetRangeResponse* SetRangeResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SetRangeResponse (*this, f, c);
  }

  SetRangeResponse::
  ~SetRangeResponse ()
  {
  }

  // SetValue
  //

  SetValue::
  SetValue (const OperationHandleRefType& OperationHandleRef,
            const RequestedNumericValueType& RequestedNumericValue)
  : ::CDM::AbstractSet (OperationHandleRef),
    RequestedNumericValue_ (RequestedNumericValue, this)
  {
  }

  SetValue::
  SetValue (::std::unique_ptr< OperationHandleRefType > OperationHandleRef,
            const RequestedNumericValueType& RequestedNumericValue)
  : ::CDM::AbstractSet (std::move (OperationHandleRef)),
    RequestedNumericValue_ (RequestedNumericValue, this)
  {
  }

  SetValue::
  SetValue (const SetValue& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::CDM::AbstractSet (x, f, c),
    RequestedNumericValue_ (x.RequestedNumericValue_, f, this)
  {
  }

  SetValue::
  SetValue (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::CDM::AbstractSet (e, f | ::xml_schema::Flags::base, c),
    RequestedNumericValue_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SetValue::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractSet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // RequestedNumericValue
      //
      if (n.name () == "RequestedNumericValue" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        if (!RequestedNumericValue_.present ())
        {
          this->RequestedNumericValue_.set (RequestedNumericValueTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!RequestedNumericValue_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "RequestedNumericValue",
        "http://message-model-uri/15/04");
    }
  }

  SetValue* SetValue::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SetValue (*this, f, c);
  }

  SetValue& SetValue::
  operator= (const SetValue& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractSet& > (*this) = x;
      this->RequestedNumericValue_ = x.RequestedNumericValue_;
    }

    return *this;
  }

  SetValue::
  ~SetValue ()
  {
  }

  // SetValueResponse
  //

  SetValueResponse::
  SetValueResponse (const TransactionIdType& TransactionId,
                    const InvocationStateType& InvocationState,
                    const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (TransactionId,
                                InvocationState,
                                MDIBVersion)
  {
  }

  SetValueResponse::
  SetValueResponse (::std::unique_ptr< TransactionIdType > TransactionId,
                    ::std::unique_ptr< InvocationStateType > InvocationState,
                    const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (std::move (TransactionId),
                                std::move (InvocationState),
                                MDIBVersion)
  {
  }

  SetValueResponse::
  SetValueResponse (const SetValueResponse& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (x, f, c)
  {
  }

  SetValueResponse::
  SetValueResponse (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (e, f, c)
  {
  }

  SetValueResponse* SetValueResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SetValueResponse (*this, f, c);
  }

  SetValueResponse::
  ~SetValueResponse ()
  {
  }

  // SetString
  //

  SetString::
  SetString (const OperationHandleRefType& OperationHandleRef,
             const RequestedStringValueType& RequestedStringValue)
  : ::CDM::AbstractSet (OperationHandleRef),
    RequestedStringValue_ (RequestedStringValue, this)
  {
  }

  SetString::
  SetString (::std::unique_ptr< OperationHandleRefType > OperationHandleRef,
             ::std::unique_ptr< RequestedStringValueType > RequestedStringValue)
  : ::CDM::AbstractSet (std::move (OperationHandleRef)),
    RequestedStringValue_ (std::move (RequestedStringValue), this)
  {
  }

  SetString::
  SetString (const SetString& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::CDM::AbstractSet (x, f, c),
    RequestedStringValue_ (x.RequestedStringValue_, f, this)
  {
  }

  SetString::
  SetString (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::CDM::AbstractSet (e, f | ::xml_schema::Flags::base, c),
    RequestedStringValue_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SetString::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractSet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // RequestedStringValue
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "RequestedStringValue",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< RequestedStringValueType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!RequestedStringValue_.present ())
          {
            ::std::unique_ptr< RequestedStringValueType > r (
              dynamic_cast< RequestedStringValueType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->RequestedStringValue_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!RequestedStringValue_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "RequestedStringValue",
        "http://message-model-uri/15/04");
    }
  }

  SetString* SetString::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SetString (*this, f, c);
  }

  SetString& SetString::
  operator= (const SetString& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractSet& > (*this) = x;
      this->RequestedStringValue_ = x.RequestedStringValue_;
    }

    return *this;
  }

  SetString::
  ~SetString ()
  {
  }

  // SetStringResponse
  //

  SetStringResponse::
  SetStringResponse (const TransactionIdType& TransactionId,
                     const InvocationStateType& InvocationState,
                     const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (TransactionId,
                                InvocationState,
                                MDIBVersion)
  {
  }

  SetStringResponse::
  SetStringResponse (::std::unique_ptr< TransactionIdType > TransactionId,
                     ::std::unique_ptr< InvocationStateType > InvocationState,
                     const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (std::move (TransactionId),
                                std::move (InvocationState),
                                MDIBVersion)
  {
  }

  SetStringResponse::
  SetStringResponse (const SetStringResponse& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (x, f, c)
  {
  }

  SetStringResponse::
  SetStringResponse (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (e, f, c)
  {
  }

  SetStringResponse* SetStringResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SetStringResponse (*this, f, c);
  }

  SetStringResponse::
  ~SetStringResponse ()
  {
  }

  // SetAlertState
  //

  SetAlertState::
  SetAlertState (const OperationHandleRefType& OperationHandleRef,
                 const RequestedAlertStateType& RequestedAlertState)
  : ::CDM::AbstractSet (OperationHandleRef),
    RequestedAlertState_ (RequestedAlertState, this)
  {
  }

  SetAlertState::
  SetAlertState (const OperationHandleRefType& OperationHandleRef,
                 ::std::unique_ptr< RequestedAlertStateType > RequestedAlertState)
  : ::CDM::AbstractSet (OperationHandleRef),
    RequestedAlertState_ (std::move (RequestedAlertState), this)
  {
  }

  SetAlertState::
  SetAlertState (::std::unique_ptr< OperationHandleRefType > OperationHandleRef,
                 ::std::unique_ptr< RequestedAlertStateType > RequestedAlertState)
  : ::CDM::AbstractSet (std::move (OperationHandleRef)),
    RequestedAlertState_ (std::move (RequestedAlertState), this)
  {
  }

  SetAlertState::
  SetAlertState (const SetAlertState& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::CDM::AbstractSet (x, f, c),
    RequestedAlertState_ (x.RequestedAlertState_, f, this)
  {
  }

  SetAlertState::
  SetAlertState (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::CDM::AbstractSet (e, f | ::xml_schema::Flags::base, c),
    RequestedAlertState_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SetAlertState::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractSet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // RequestedAlertState
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "RequestedAlertState",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< RequestedAlertStateType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!RequestedAlertState_.present ())
          {
            ::std::unique_ptr< RequestedAlertStateType > r (
              dynamic_cast< RequestedAlertStateType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->RequestedAlertState_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!RequestedAlertState_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "RequestedAlertState",
        "http://message-model-uri/15/04");
    }
  }

  SetAlertState* SetAlertState::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SetAlertState (*this, f, c);
  }

  SetAlertState& SetAlertState::
  operator= (const SetAlertState& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractSet& > (*this) = x;
      this->RequestedAlertState_ = x.RequestedAlertState_;
    }

    return *this;
  }

  SetAlertState::
  ~SetAlertState ()
  {
  }

  // SetAlertStateResponse
  //

  SetAlertStateResponse::
  SetAlertStateResponse (const TransactionIdType& TransactionId,
                         const InvocationStateType& InvocationState,
                         const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (TransactionId,
                                InvocationState,
                                MDIBVersion)
  {
  }

  SetAlertStateResponse::
  SetAlertStateResponse (::std::unique_ptr< TransactionIdType > TransactionId,
                         ::std::unique_ptr< InvocationStateType > InvocationState,
                         const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (std::move (TransactionId),
                                std::move (InvocationState),
                                MDIBVersion)
  {
  }

  SetAlertStateResponse::
  SetAlertStateResponse (const SetAlertStateResponse& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (x, f, c)
  {
  }

  SetAlertStateResponse::
  SetAlertStateResponse (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (e, f, c)
  {
  }

  SetAlertStateResponse* SetAlertStateResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SetAlertStateResponse (*this, f, c);
  }

  SetAlertStateResponse::
  ~SetAlertStateResponse ()
  {
  }

  // Activate
  //

  Activate::
  Activate (const OperationHandleRefType& OperationHandleRef)
  : ::CDM::AbstractSet (OperationHandleRef),
    Argument_ (this)
  {
  }

  Activate::
  Activate (::std::unique_ptr< OperationHandleRefType > OperationHandleRef)
  : ::CDM::AbstractSet (std::move (OperationHandleRef)),
    Argument_ (this)
  {
  }

  Activate::
  Activate (const Activate& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::CDM::AbstractSet (x, f, c),
    Argument_ (x.Argument_, f, this)
  {
  }

  Activate::
  Activate (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::CDM::AbstractSet (e, f | ::xml_schema::Flags::base, c),
    Argument_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Activate::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractSet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Argument
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Argument",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ArgumentType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ArgumentType > r (
            dynamic_cast< ArgumentType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Argument_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  Activate* Activate::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Activate (*this, f, c);
  }

  Activate& Activate::
  operator= (const Activate& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractSet& > (*this) = x;
      this->Argument_ = x.Argument_;
    }

    return *this;
  }

  Activate::
  ~Activate ()
  {
  }

  // ActivateResponse
  //

  ActivateResponse::
  ActivateResponse (const TransactionIdType& TransactionId,
                    const InvocationStateType& InvocationState,
                    const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (TransactionId,
                                InvocationState,
                                MDIBVersion)
  {
  }

  ActivateResponse::
  ActivateResponse (::std::unique_ptr< TransactionIdType > TransactionId,
                    ::std::unique_ptr< InvocationStateType > InvocationState,
                    const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (std::move (TransactionId),
                                std::move (InvocationState),
                                MDIBVersion)
  {
  }

  ActivateResponse::
  ActivateResponse (const ActivateResponse& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (x, f, c)
  {
  }

  ActivateResponse::
  ActivateResponse (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (e, f, c)
  {
  }

  ActivateResponse* ActivateResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ActivateResponse (*this, f, c);
  }

  ActivateResponse::
  ~ActivateResponse ()
  {
  }

  // SetContextState
  //

  SetContextState::
  SetContextState (const OperationHandleRefType& OperationHandleRef)
  : ::CDM::AbstractSet (OperationHandleRef),
    ProposedContextState_ (this)
  {
  }

  SetContextState::
  SetContextState (::std::unique_ptr< OperationHandleRefType > OperationHandleRef)
  : ::CDM::AbstractSet (std::move (OperationHandleRef)),
    ProposedContextState_ (this)
  {
  }

  SetContextState::
  SetContextState (const SetContextState& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::CDM::AbstractSet (x, f, c),
    ProposedContextState_ (x.ProposedContextState_, f, this)
  {
  }

  SetContextState::
  SetContextState (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
  : ::CDM::AbstractSet (e, f | ::xml_schema::Flags::base, c),
    ProposedContextState_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SetContextState::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractSet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ProposedContextState
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ProposedContextState",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ProposedContextStateType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ProposedContextStateType > r (
            dynamic_cast< ProposedContextStateType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ProposedContextState_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  SetContextState* SetContextState::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SetContextState (*this, f, c);
  }

  SetContextState& SetContextState::
  operator= (const SetContextState& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractSet& > (*this) = x;
      this->ProposedContextState_ = x.ProposedContextState_;
    }

    return *this;
  }

  SetContextState::
  ~SetContextState ()
  {
  }

  // SetContextStateResponse
  //

  SetContextStateResponse::
  SetContextStateResponse (const TransactionIdType& TransactionId,
                           const InvocationStateType& InvocationState,
                           const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (TransactionId,
                                InvocationState,
                                MDIBVersion)
  {
  }

  SetContextStateResponse::
  SetContextStateResponse (::std::unique_ptr< TransactionIdType > TransactionId,
                           ::std::unique_ptr< InvocationStateType > InvocationState,
                           const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (std::move (TransactionId),
                                std::move (InvocationState),
                                MDIBVersion)
  {
  }

  SetContextStateResponse::
  SetContextStateResponse (const SetContextStateResponse& x,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (x, f, c)
  {
  }

  SetContextStateResponse::
  SetContextStateResponse (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (e, f, c)
  {
  }

  SetContextStateResponse* SetContextStateResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SetContextStateResponse (*this, f, c);
  }

  SetContextStateResponse::
  ~SetContextStateResponse ()
  {
  }

  // SetPatientAssociationState
  //

  SetPatientAssociationState::
  SetPatientAssociationState (const OperationHandleRefType& OperationHandleRef,
                              const RequestedAssociationType& RequestedAssociation)
  : ::CDM::AbstractSet (OperationHandleRef),
    RequestedAssociation_ (RequestedAssociation, this)
  {
  }

  SetPatientAssociationState::
  SetPatientAssociationState (::std::unique_ptr< OperationHandleRefType > OperationHandleRef,
                              ::std::unique_ptr< RequestedAssociationType > RequestedAssociation)
  : ::CDM::AbstractSet (std::move (OperationHandleRef)),
    RequestedAssociation_ (std::move (RequestedAssociation), this)
  {
  }

  SetPatientAssociationState::
  SetPatientAssociationState (const SetPatientAssociationState& x,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
  : ::CDM::AbstractSet (x, f, c),
    RequestedAssociation_ (x.RequestedAssociation_, f, this)
  {
  }

  SetPatientAssociationState::
  SetPatientAssociationState (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
  : ::CDM::AbstractSet (e, f | ::xml_schema::Flags::base, c),
    RequestedAssociation_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SetPatientAssociationState::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractSet::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // RequestedAssociation
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "RequestedAssociation",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< RequestedAssociationType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!RequestedAssociation_.present ())
          {
            ::std::unique_ptr< RequestedAssociationType > r (
              dynamic_cast< RequestedAssociationType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->RequestedAssociation_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!RequestedAssociation_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "RequestedAssociation",
        "http://message-model-uri/15/04");
    }
  }

  SetPatientAssociationState* SetPatientAssociationState::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SetPatientAssociationState (*this, f, c);
  }

  SetPatientAssociationState& SetPatientAssociationState::
  operator= (const SetPatientAssociationState& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractSet& > (*this) = x;
      this->RequestedAssociation_ = x.RequestedAssociation_;
    }

    return *this;
  }

  SetPatientAssociationState::
  ~SetPatientAssociationState ()
  {
  }

  // SetPatientAssociationStateResponse
  //

  SetPatientAssociationStateResponse::
  SetPatientAssociationStateResponse (const TransactionIdType& TransactionId,
                                      const InvocationStateType& InvocationState,
                                      const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (TransactionId,
                                InvocationState,
                                MDIBVersion)
  {
  }

  SetPatientAssociationStateResponse::
  SetPatientAssociationStateResponse (::std::unique_ptr< TransactionIdType > TransactionId,
                                      ::std::unique_ptr< InvocationStateType > InvocationState,
                                      const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractSetResponse (std::move (TransactionId),
                                std::move (InvocationState),
                                MDIBVersion)
  {
  }

  SetPatientAssociationStateResponse::
  SetPatientAssociationStateResponse (const SetPatientAssociationStateResponse& x,
                                      ::xml_schema::Flags f,
                                      ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (x, f, c)
  {
  }

  SetPatientAssociationStateResponse::
  SetPatientAssociationStateResponse (const ::xercesc::DOMElement& e,
                                      ::xml_schema::Flags f,
                                      ::xml_schema::Container* c)
  : ::CDM::AbstractSetResponse (e, f, c)
  {
  }

  SetPatientAssociationStateResponse* SetPatientAssociationStateResponse::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SetPatientAssociationStateResponse (*this, f, c);
  }

  SetPatientAssociationStateResponse::
  ~SetPatientAssociationStateResponse ()
  {
  }

  // PeriodicMetricReport
  //

  PeriodicMetricReport::
  PeriodicMetricReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractMetricReport (MDIBVersion)
  {
  }

  PeriodicMetricReport::
  PeriodicMetricReport (const PeriodicMetricReport& x,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::CDM::AbstractMetricReport (x, f, c)
  {
  }

  PeriodicMetricReport::
  PeriodicMetricReport (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::CDM::AbstractMetricReport (e, f, c)
  {
  }

  PeriodicMetricReport* PeriodicMetricReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class PeriodicMetricReport (*this, f, c);
  }

  PeriodicMetricReport::
  ~PeriodicMetricReport ()
  {
  }

  // EpisodicMetricReport
  //

  EpisodicMetricReport::
  EpisodicMetricReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractMetricReport (MDIBVersion)
  {
  }

  EpisodicMetricReport::
  EpisodicMetricReport (const EpisodicMetricReport& x,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::CDM::AbstractMetricReport (x, f, c)
  {
  }

  EpisodicMetricReport::
  EpisodicMetricReport (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
  : ::CDM::AbstractMetricReport (e, f, c)
  {
  }

  EpisodicMetricReport* EpisodicMetricReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class EpisodicMetricReport (*this, f, c);
  }

  EpisodicMetricReport::
  ~EpisodicMetricReport ()
  {
  }

  // PeriodicAlertReport
  //

  PeriodicAlertReport::
  PeriodicAlertReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractAlertReport (MDIBVersion)
  {
  }

  PeriodicAlertReport::
  PeriodicAlertReport (const PeriodicAlertReport& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::CDM::AbstractAlertReport (x, f, c)
  {
  }

  PeriodicAlertReport::
  PeriodicAlertReport (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::CDM::AbstractAlertReport (e, f, c)
  {
  }

  PeriodicAlertReport* PeriodicAlertReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class PeriodicAlertReport (*this, f, c);
  }

  PeriodicAlertReport::
  ~PeriodicAlertReport ()
  {
  }

  // EpisodicAlertReport
  //

  EpisodicAlertReport::
  EpisodicAlertReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractAlertReport (MDIBVersion)
  {
  }

  EpisodicAlertReport::
  EpisodicAlertReport (const EpisodicAlertReport& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::CDM::AbstractAlertReport (x, f, c)
  {
  }

  EpisodicAlertReport::
  EpisodicAlertReport (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::CDM::AbstractAlertReport (e, f, c)
  {
  }

  EpisodicAlertReport* EpisodicAlertReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class EpisodicAlertReport (*this, f, c);
  }

  EpisodicAlertReport::
  ~EpisodicAlertReport ()
  {
  }

  // PeriodicContextChangedReport
  //

  PeriodicContextChangedReport::
  PeriodicContextChangedReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractContextChangedReport (MDIBVersion)
  {
  }

  PeriodicContextChangedReport::
  PeriodicContextChangedReport (const PeriodicContextChangedReport& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::CDM::AbstractContextChangedReport (x, f, c)
  {
  }

  PeriodicContextChangedReport::
  PeriodicContextChangedReport (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::CDM::AbstractContextChangedReport (e, f, c)
  {
  }

  PeriodicContextChangedReport* PeriodicContextChangedReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class PeriodicContextChangedReport (*this, f, c);
  }

  PeriodicContextChangedReport::
  ~PeriodicContextChangedReport ()
  {
  }

  // EpisodicContextChangedReport
  //

  EpisodicContextChangedReport::
  EpisodicContextChangedReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractContextChangedReport (MDIBVersion)
  {
  }

  EpisodicContextChangedReport::
  EpisodicContextChangedReport (const EpisodicContextChangedReport& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::CDM::AbstractContextChangedReport (x, f, c)
  {
  }

  EpisodicContextChangedReport::
  EpisodicContextChangedReport (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
  : ::CDM::AbstractContextChangedReport (e, f, c)
  {
  }

  EpisodicContextChangedReport* EpisodicContextChangedReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class EpisodicContextChangedReport (*this, f, c);
  }

  EpisodicContextChangedReport::
  ~EpisodicContextChangedReport ()
  {
  }

  // OperationInvokedReport
  //

  OperationInvokedReport::
  OperationInvokedReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractReport (MDIBVersion),
    ReportDetail_ (this)
  {
  }

  OperationInvokedReport::
  OperationInvokedReport (const OperationInvokedReport& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::CDM::AbstractReport (x, f, c),
    ReportDetail_ (x.ReportDetail_, f, this)
  {
  }

  OperationInvokedReport::
  OperationInvokedReport (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::CDM::AbstractReport (e, f | ::xml_schema::Flags::base, c),
    ReportDetail_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void OperationInvokedReport::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReport::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ReportDetail
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ReportDetail",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ReportDetailType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ReportDetailType > r (
            dynamic_cast< ReportDetailType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ReportDetail_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  OperationInvokedReport* OperationInvokedReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OperationInvokedReport (*this, f, c);
  }

  OperationInvokedReport& OperationInvokedReport::
  operator= (const OperationInvokedReport& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReport& > (*this) = x;
      this->ReportDetail_ = x.ReportDetail_;
    }

    return *this;
  }

  OperationInvokedReport::
  ~OperationInvokedReport ()
  {
  }

  // OperationalStateChangedReport
  //

  OperationalStateChangedReport::
  OperationalStateChangedReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractReport (MDIBVersion),
    ReportDetail_ (this)
  {
  }

  OperationalStateChangedReport::
  OperationalStateChangedReport (const OperationalStateChangedReport& x,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
  : ::CDM::AbstractReport (x, f, c),
    ReportDetail_ (x.ReportDetail_, f, this)
  {
  }

  OperationalStateChangedReport::
  OperationalStateChangedReport (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
  : ::CDM::AbstractReport (e, f | ::xml_schema::Flags::base, c),
    ReportDetail_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void OperationalStateChangedReport::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReport::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ReportDetail
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ReportDetail",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ReportDetailType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ReportDetailType > r (
            dynamic_cast< ReportDetailType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ReportDetail_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  OperationalStateChangedReport* OperationalStateChangedReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OperationalStateChangedReport (*this, f, c);
  }

  OperationalStateChangedReport& OperationalStateChangedReport::
  operator= (const OperationalStateChangedReport& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReport& > (*this) = x;
      this->ReportDetail_ = x.ReportDetail_;
    }

    return *this;
  }

  OperationalStateChangedReport::
  ~OperationalStateChangedReport ()
  {
  }

  // OperationCreatedReport
  //

  OperationCreatedReport::
  OperationCreatedReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::OperationDescriptionModificationReport (MDIBVersion)
  {
  }

  OperationCreatedReport::
  OperationCreatedReport (const OperationCreatedReport& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::CDM::OperationDescriptionModificationReport (x, f, c)
  {
  }

  OperationCreatedReport::
  OperationCreatedReport (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::CDM::OperationDescriptionModificationReport (e, f, c)
  {
  }

  OperationCreatedReport* OperationCreatedReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OperationCreatedReport (*this, f, c);
  }

  OperationCreatedReport::
  ~OperationCreatedReport ()
  {
  }

  // OperationDeletedReport
  //

  OperationDeletedReport::
  OperationDeletedReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::OperationDescriptionModificationReport (MDIBVersion)
  {
  }

  OperationDeletedReport::
  OperationDeletedReport (const OperationDeletedReport& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::CDM::OperationDescriptionModificationReport (x, f, c)
  {
  }

  OperationDeletedReport::
  OperationDeletedReport (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::CDM::OperationDescriptionModificationReport (e, f, c)
  {
  }

  OperationDeletedReport* OperationDeletedReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OperationDeletedReport (*this, f, c);
  }

  OperationDeletedReport::
  ~OperationDeletedReport ()
  {
  }

  // ObjectCreatedReport
  //

  ObjectCreatedReport::
  ObjectCreatedReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::DescriptionModificationReport (MDIBVersion)
  {
  }

  ObjectCreatedReport::
  ObjectCreatedReport (const ObjectCreatedReport& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::CDM::DescriptionModificationReport (x, f, c)
  {
  }

  ObjectCreatedReport::
  ObjectCreatedReport (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::CDM::DescriptionModificationReport (e, f, c)
  {
  }

  ObjectCreatedReport* ObjectCreatedReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ObjectCreatedReport (*this, f, c);
  }

  ObjectCreatedReport::
  ~ObjectCreatedReport ()
  {
  }

  // ObjectUpdatedReport
  //

  ObjectUpdatedReport::
  ObjectUpdatedReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::DescriptionModificationReport (MDIBVersion)
  {
  }

  ObjectUpdatedReport::
  ObjectUpdatedReport (const ObjectUpdatedReport& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::CDM::DescriptionModificationReport (x, f, c)
  {
  }

  ObjectUpdatedReport::
  ObjectUpdatedReport (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::CDM::DescriptionModificationReport (e, f, c)
  {
  }

  ObjectUpdatedReport* ObjectUpdatedReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ObjectUpdatedReport (*this, f, c);
  }

  ObjectUpdatedReport::
  ~ObjectUpdatedReport ()
  {
  }

  // ObjectDeletedReport
  //

  ObjectDeletedReport::
  ObjectDeletedReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::DescriptionModificationReport (MDIBVersion)
  {
  }

  ObjectDeletedReport::
  ObjectDeletedReport (const ObjectDeletedReport& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::CDM::DescriptionModificationReport (x, f, c)
  {
  }

  ObjectDeletedReport::
  ObjectDeletedReport (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
  : ::CDM::DescriptionModificationReport (e, f, c)
  {
  }

  ObjectDeletedReport* ObjectDeletedReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ObjectDeletedReport (*this, f, c);
  }

  ObjectDeletedReport::
  ~ObjectDeletedReport ()
  {
  }

  // MDSCreatedReport
  //

  MDSCreatedReport::
  MDSCreatedReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::MDSModificationReport (MDIBVersion)
  {
  }

  MDSCreatedReport::
  MDSCreatedReport (const MDSCreatedReport& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::MDSModificationReport (x, f, c)
  {
  }

  MDSCreatedReport::
  MDSCreatedReport (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::MDSModificationReport (e, f, c)
  {
  }

  MDSCreatedReport* MDSCreatedReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class MDSCreatedReport (*this, f, c);
  }

  MDSCreatedReport::
  ~MDSCreatedReport ()
  {
  }

  // MDSDeletedReport
  //

  MDSDeletedReport::
  MDSDeletedReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::MDSModificationReport (MDIBVersion)
  {
  }

  MDSDeletedReport::
  MDSDeletedReport (const MDSDeletedReport& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::MDSModificationReport (x, f, c)
  {
  }

  MDSDeletedReport::
  MDSDeletedReport (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::CDM::MDSModificationReport (e, f, c)
  {
  }

  MDSDeletedReport* MDSDeletedReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class MDSDeletedReport (*this, f, c);
  }

  MDSDeletedReport::
  ~MDSDeletedReport ()
  {
  }

  // SystemErrorReport
  //

  SystemErrorReport::
  SystemErrorReport (const MDIBVersionType& MDIBVersion)
  : ::CDM::AbstractReport (MDIBVersion),
    ReportDetail_ (this)
  {
  }

  SystemErrorReport::
  SystemErrorReport (const SystemErrorReport& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::CDM::AbstractReport (x, f, c),
    ReportDetail_ (x.ReportDetail_, f, this)
  {
  }

  SystemErrorReport::
  SystemErrorReport (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::CDM::AbstractReport (e, f | ::xml_schema::Flags::base, c),
    ReportDetail_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void SystemErrorReport::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractReport::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ReportDetail
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ReportDetail",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ReportDetailType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ReportDetailType > r (
            dynamic_cast< ReportDetailType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ReportDetail_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  SystemErrorReport* SystemErrorReport::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class SystemErrorReport (*this, f, c);
  }

  SystemErrorReport& SystemErrorReport::
  operator= (const SystemErrorReport& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractReport& > (*this) = x;
      this->ReportDetail_ = x.ReportDetail_;
    }

    return *this;
  }

  SystemErrorReport::
  ~SystemErrorReport ()
  {
  }

  // WaveformStream
  //

  WaveformStream::
  WaveformStream ()
  : ::xml_schema::Type (),
    Extension_ (this),
    RealTimeSampleArray_ (this)
  {
  }

  WaveformStream::
  WaveformStream (const WaveformStream& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Extension_ (x.Extension_, f, this),
    RealTimeSampleArray_ (x.RealTimeSampleArray_, f, this)
  {
  }

  WaveformStream::
  WaveformStream (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Extension_ (this),
    RealTimeSampleArray_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void WaveformStream::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Extension
      //
      if (n.name () == "Extension" && n.namespace_ () == "http://extension-point-uri/15/03")
      {
        ::std::unique_ptr< ExtensionType > r (
          ExtensionTraits::create (i, f, this));

        if (!this->Extension_)
        {
          this->Extension_.set (::std::move (r));
          continue;
        }
      }

      // RealTimeSampleArray
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "RealTimeSampleArray",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< RealTimeSampleArrayType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< RealTimeSampleArrayType > r (
            dynamic_cast< RealTimeSampleArrayType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->RealTimeSampleArray_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  WaveformStream* WaveformStream::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class WaveformStream (*this, f, c);
  }

  WaveformStream& WaveformStream::
  operator= (const WaveformStream& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Extension_ = x.Extension_;
      this->RealTimeSampleArray_ = x.RealTimeSampleArray_;
    }

    return *this;
  }

  WaveformStream::
  ~WaveformStream ()
  {
  }

  // OVStream
  //

  OVStream::
  OVStream ()
  : ::xml_schema::Type (),
    Extension_ (this),
    Value_ (this)
  {
  }

  OVStream::
  OVStream (const OVStream& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Extension_ (x.Extension_, f, this),
    Value_ (x.Value_, f, this)
  {
  }

  OVStream::
  OVStream (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Extension_ (this),
    Value_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void OVStream::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Extension
      //
      if (n.name () == "Extension" && n.namespace_ () == "http://extension-point-uri/15/03")
      {
        ::std::unique_ptr< ExtensionType > r (
          ExtensionTraits::create (i, f, this));

        if (!this->Extension_)
        {
          this->Extension_.set (::std::move (r));
          continue;
        }
      }

      // Value
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Value",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ValueType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ValueType > r (
            dynamic_cast< ValueType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Value_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  OVStream* OVStream::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OVStream (*this, f, c);
  }

  OVStream& OVStream::
  operator= (const OVStream& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Extension_ = x.Extension_;
      this->Value_ = x.Value_;
    }

    return *this;
  }

  OVStream::
  ~OVStream ()
  {
  }

  // Retrievability
  //

  Retrievability::
  Retrievability ()
  : ::xml_schema::Type (),
    By_ (this)
  {
  }

  Retrievability::
  Retrievability (const Retrievability& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    By_ (x.By_, f, this)
  {
  }

  Retrievability::
  Retrievability (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    By_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Retrievability::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // By
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "By",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ByType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ByType > r (
            dynamic_cast< ByType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->By_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  Retrievability* Retrievability::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Retrievability (*this, f, c);
  }

  Retrievability& Retrievability::
  operator= (const Retrievability& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->By_ = x.By_;
    }

    return *this;
  }

  Retrievability::
  ~Retrievability ()
  {
  }

  // OperationReference
  //

  OperationReference::
  OperationReference (const ActionType& Action)
  : ::xml_schema::Type (),
    ServiceID_ (this),
    Action_ (Action, this)
  {
  }

  OperationReference::
  OperationReference (::std::unique_ptr< ActionType > Action)
  : ::xml_schema::Type (),
    ServiceID_ (this),
    Action_ (std::move (Action), this)
  {
  }

  OperationReference::
  OperationReference (const OperationReference& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    ServiceID_ (x.ServiceID_, f, this),
    Action_ (x.Action_, f, this)
  {
  }

  OperationReference::
  OperationReference (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    ServiceID_ (this),
    Action_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void OperationReference::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ServiceID
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ServiceID",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ServiceIDType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ServiceIDType > r (
            dynamic_cast< ServiceIDType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ServiceID_.push_back (::std::move (r));
          continue;
        }
      }

      // Action
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Action",
            "http://message-model-uri/15/04",
            &::xsd::cxx::tree::factory_impl< ActionType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!Action_.present ())
          {
            ::std::unique_ptr< ActionType > r (
              dynamic_cast< ActionType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Action_.set (::std::move (r));
            continue;
          }
        }
      }

      break;
    }

    if (!Action_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Action",
        "http://message-model-uri/15/04");
    }
  }

  OperationReference* OperationReference::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class OperationReference (*this, f, c);
  }

  OperationReference& OperationReference::
  operator= (const OperationReference& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->ServiceID_ = x.ServiceID_;
      this->Action_ = x.Action_;
    }

    return *this;
  }

  OperationReference::
  ~OperationReference ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace CDM
{
  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (const ::std::string& u,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetMDIB > (
      ::CDM::GetMDIB_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (const ::std::string& u,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDIB > (
      ::CDM::GetMDIB_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDIB > (
      ::CDM::GetMDIB_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::std::istream& is,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDIB_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::std::istream& is,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDIB_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDIB_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDIB_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDIB_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDIB_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::xercesc::InputSource& i,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetMDIB > (
      ::CDM::GetMDIB_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::xercesc::InputSource& i,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDIB > (
      ::CDM::GetMDIB_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDIB > (
      ::CDM::GetMDIB_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (const ::xercesc::DOMDocument& doc,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::GetMDIB > (
        ::CDM::GetMDIB_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMDIB" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetMDIB > r (
        ::xsd::cxx::tree::traits< ::CDM::GetMDIB, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMDIB",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetMDIB >
  GetMDIB_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetMDIB" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetMDIB > r (
        ::xsd::cxx::tree::traits< ::CDM::GetMDIB, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMDIB",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (const ::std::string& u,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetMDIBResponse > (
      ::CDM::GetMDIBResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (const ::std::string& u,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDIBResponse > (
      ::CDM::GetMDIBResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDIBResponse > (
      ::CDM::GetMDIBResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::std::istream& is,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDIBResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::std::istream& is,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDIBResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDIBResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDIBResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDIBResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDIBResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::xercesc::InputSource& i,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetMDIBResponse > (
      ::CDM::GetMDIBResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::xercesc::InputSource& i,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDIBResponse > (
      ::CDM::GetMDIBResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDIBResponse > (
      ::CDM::GetMDIBResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::GetMDIBResponse > (
        ::CDM::GetMDIBResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMDIBResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetMDIBResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::GetMDIBResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMDIBResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetMDIBResponse >
  GetMDIBResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetMDIBResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetMDIBResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::GetMDIBResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMDIBResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (const ::std::string& u,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetMDDescription > (
      ::CDM::GetMDDescription_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (const ::std::string& u,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDDescription > (
      ::CDM::GetMDDescription_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDDescription > (
      ::CDM::GetMDDescription_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::std::istream& is,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDDescription_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDDescription_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDDescription_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDDescription_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDDescription_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDDescription_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::xercesc::InputSource& i,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetMDDescription > (
      ::CDM::GetMDDescription_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::xercesc::InputSource& i,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDDescription > (
      ::CDM::GetMDDescription_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDDescription > (
      ::CDM::GetMDDescription_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::GetMDDescription > (
        ::CDM::GetMDDescription_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMDDescription" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetMDDescription > r (
        ::xsd::cxx::tree::traits< ::CDM::GetMDDescription, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMDDescription",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetMDDescription >
  GetMDDescription_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetMDDescription" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetMDDescription > r (
        ::xsd::cxx::tree::traits< ::CDM::GetMDDescription, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMDDescription",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (const ::std::string& u,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetMDDescriptionResponse > (
      ::CDM::GetMDDescriptionResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (const ::std::string& u,
                             ::xml_schema::ErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDDescriptionResponse > (
      ::CDM::GetMDDescriptionResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDDescriptionResponse > (
      ::CDM::GetMDDescriptionResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::std::istream& is,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDDescriptionResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::std::istream& is,
                             ::xml_schema::ErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDDescriptionResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDDescriptionResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDDescriptionResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::ErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDDescriptionResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDDescriptionResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::xercesc::InputSource& i,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetMDDescriptionResponse > (
      ::CDM::GetMDDescriptionResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::xercesc::InputSource& i,
                             ::xml_schema::ErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDDescriptionResponse > (
      ::CDM::GetMDDescriptionResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDDescriptionResponse > (
      ::CDM::GetMDDescriptionResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::GetMDDescriptionResponse > (
        ::CDM::GetMDDescriptionResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMDDescriptionResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetMDDescriptionResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::GetMDDescriptionResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMDDescriptionResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetMDDescriptionResponse >
  GetMDDescriptionResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetMDDescriptionResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetMDDescriptionResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::GetMDDescriptionResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMDDescriptionResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (const ::std::string& u,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetMDState > (
      ::CDM::GetMDState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (const ::std::string& u,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDState > (
      ::CDM::GetMDState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDState > (
      ::CDM::GetMDState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::std::istream& is,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDState_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::std::istream& is,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDState_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::xercesc::InputSource& i,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetMDState > (
      ::CDM::GetMDState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::xercesc::InputSource& i,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDState > (
      ::CDM::GetMDState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDState > (
      ::CDM::GetMDState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (const ::xercesc::DOMDocument& doc,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::GetMDState > (
        ::CDM::GetMDState_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMDState" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetMDState > r (
        ::xsd::cxx::tree::traits< ::CDM::GetMDState, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMDState",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetMDState >
  GetMDState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetMDState" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetMDState > r (
        ::xsd::cxx::tree::traits< ::CDM::GetMDState, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMDState",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (const ::std::string& u,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetMDStateResponse > (
      ::CDM::GetMDStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (const ::std::string& u,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDStateResponse > (
      ::CDM::GetMDStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDStateResponse > (
      ::CDM::GetMDStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::std::istream& is,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDStateResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::std::istream& is,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetMDStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDStateResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetMDStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::xercesc::InputSource& i,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetMDStateResponse > (
      ::CDM::GetMDStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::xercesc::InputSource& i,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDStateResponse > (
      ::CDM::GetMDStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetMDStateResponse > (
      ::CDM::GetMDStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::GetMDStateResponse > (
        ::CDM::GetMDStateResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMDStateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetMDStateResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::GetMDStateResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMDStateResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetMDStateResponse >
  GetMDStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetMDStateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetMDStateResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::GetMDStateResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetMDStateResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (const ::std::string& u,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetContextStates > (
      ::CDM::GetContextStates_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (const ::std::string& u,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContextStates > (
      ::CDM::GetContextStates_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContextStates > (
      ::CDM::GetContextStates_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetContextStates_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetContextStates_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetContextStates_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetContextStates_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetContextStates_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetContextStates_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::xercesc::InputSource& i,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetContextStates > (
      ::CDM::GetContextStates_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::xercesc::InputSource& i,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContextStates > (
      ::CDM::GetContextStates_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContextStates > (
      ::CDM::GetContextStates_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::GetContextStates > (
        ::CDM::GetContextStates_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetContextStates" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetContextStates > r (
        ::xsd::cxx::tree::traits< ::CDM::GetContextStates, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetContextStates",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetContextStates >
  GetContextStates_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetContextStates" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetContextStates > r (
        ::xsd::cxx::tree::traits< ::CDM::GetContextStates, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetContextStates",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (const ::std::string& u,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetContextStatesResponse > (
      ::CDM::GetContextStatesResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (const ::std::string& u,
                             ::xml_schema::ErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContextStatesResponse > (
      ::CDM::GetContextStatesResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContextStatesResponse > (
      ::CDM::GetContextStatesResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetContextStatesResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             ::xml_schema::ErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetContextStatesResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetContextStatesResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetContextStatesResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::ErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetContextStatesResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetContextStatesResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::xercesc::InputSource& i,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetContextStatesResponse > (
      ::CDM::GetContextStatesResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::xercesc::InputSource& i,
                             ::xml_schema::ErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContextStatesResponse > (
      ::CDM::GetContextStatesResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContextStatesResponse > (
      ::CDM::GetContextStatesResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::GetContextStatesResponse > (
        ::CDM::GetContextStatesResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetContextStatesResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetContextStatesResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::GetContextStatesResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetContextStatesResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetContextStatesResponse >
  GetContextStatesResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::Flags f,
                             const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetContextStatesResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetContextStatesResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::GetContextStatesResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetContextStatesResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (const ::std::string& u,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetContainmentTree > (
      ::CDM::GetContainmentTree_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (const ::std::string& u,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContainmentTree > (
      ::CDM::GetContainmentTree_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContainmentTree > (
      ::CDM::GetContainmentTree_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetContainmentTree_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetContainmentTree_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetContainmentTree_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetContainmentTree_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetContainmentTree_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetContainmentTree_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::xercesc::InputSource& i,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetContainmentTree > (
      ::CDM::GetContainmentTree_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::xercesc::InputSource& i,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContainmentTree > (
      ::CDM::GetContainmentTree_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContainmentTree > (
      ::CDM::GetContainmentTree_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::GetContainmentTree > (
        ::CDM::GetContainmentTree_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetContainmentTree" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetContainmentTree > r (
        ::xsd::cxx::tree::traits< ::CDM::GetContainmentTree, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetContainmentTree",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetContainmentTree >
  GetContainmentTree_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetContainmentTree" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetContainmentTree > r (
        ::xsd::cxx::tree::traits< ::CDM::GetContainmentTree, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetContainmentTree",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (const ::std::string& u,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetContainmentTreeResponse > (
      ::CDM::GetContainmentTreeResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (const ::std::string& u,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContainmentTreeResponse > (
      ::CDM::GetContainmentTreeResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContainmentTreeResponse > (
      ::CDM::GetContainmentTreeResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetContainmentTreeResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetContainmentTreeResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetContainmentTreeResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetContainmentTreeResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetContainmentTreeResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetContainmentTreeResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::xercesc::InputSource& i,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetContainmentTreeResponse > (
      ::CDM::GetContainmentTreeResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::xercesc::InputSource& i,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContainmentTreeResponse > (
      ::CDM::GetContainmentTreeResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetContainmentTreeResponse > (
      ::CDM::GetContainmentTreeResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::GetContainmentTreeResponse > (
        ::CDM::GetContainmentTreeResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetContainmentTreeResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetContainmentTreeResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::GetContainmentTreeResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetContainmentTreeResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetContainmentTreeResponse >
  GetContainmentTreeResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetContainmentTreeResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetContainmentTreeResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::GetContainmentTreeResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetContainmentTreeResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (const ::std::string& u,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetDescriptor > (
      ::CDM::GetDescriptor_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (const ::std::string& u,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetDescriptor > (
      ::CDM::GetDescriptor_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetDescriptor > (
      ::CDM::GetDescriptor_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetDescriptor_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetDescriptor_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetDescriptor_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetDescriptor_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetDescriptor_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetDescriptor_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::xercesc::InputSource& i,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetDescriptor > (
      ::CDM::GetDescriptor_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::xercesc::InputSource& i,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetDescriptor > (
      ::CDM::GetDescriptor_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetDescriptor > (
      ::CDM::GetDescriptor_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::GetDescriptor > (
        ::CDM::GetDescriptor_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetDescriptor" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetDescriptor > r (
        ::xsd::cxx::tree::traits< ::CDM::GetDescriptor, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetDescriptor",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetDescriptor >
  GetDescriptor_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetDescriptor" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetDescriptor > r (
        ::xsd::cxx::tree::traits< ::CDM::GetDescriptor, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetDescriptor",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (const ::std::string& u,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetDescriptorResponse > (
      ::CDM::GetDescriptorResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (const ::std::string& u,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetDescriptorResponse > (
      ::CDM::GetDescriptorResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetDescriptorResponse > (
      ::CDM::GetDescriptorResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetDescriptorResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetDescriptorResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::GetDescriptorResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetDescriptorResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetDescriptorResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::GetDescriptorResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::xercesc::InputSource& i,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::GetDescriptorResponse > (
      ::CDM::GetDescriptorResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::xercesc::InputSource& i,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetDescriptorResponse > (
      ::CDM::GetDescriptorResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::GetDescriptorResponse > (
      ::CDM::GetDescriptorResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::GetDescriptorResponse > (
        ::CDM::GetDescriptorResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetDescriptorResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetDescriptorResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::GetDescriptorResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetDescriptorResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::GetDescriptorResponse >
  GetDescriptorResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GetDescriptorResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::GetDescriptorResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::GetDescriptorResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GetDescriptorResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetRange > (
      ::CDM::SetRange_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetRange > (
      ::CDM::SetRange_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetRange > (
      ::CDM::SetRange_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetRange_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetRange_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetRange_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetRange_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetRange_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetRange_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetRange > (
      ::CDM::SetRange_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetRange > (
      ::CDM::SetRange_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetRange > (
      ::CDM::SetRange_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SetRange > (
        ::CDM::SetRange_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetRange" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetRange > r (
        ::xsd::cxx::tree::traits< ::CDM::SetRange, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetRange",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetRange >
  SetRange_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SetRange" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetRange > r (
        ::xsd::cxx::tree::traits< ::CDM::SetRange, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetRange",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (const ::std::string& u,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetRangeResponse > (
      ::CDM::SetRangeResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (const ::std::string& u,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetRangeResponse > (
      ::CDM::SetRangeResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetRangeResponse > (
      ::CDM::SetRangeResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::std::istream& is,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetRangeResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetRangeResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetRangeResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetRangeResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetRangeResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetRangeResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::xercesc::InputSource& i,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetRangeResponse > (
      ::CDM::SetRangeResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::xercesc::InputSource& i,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetRangeResponse > (
      ::CDM::SetRangeResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetRangeResponse > (
      ::CDM::SetRangeResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SetRangeResponse > (
        ::CDM::SetRangeResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetRangeResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetRangeResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::SetRangeResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetRangeResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetRangeResponse >
  SetRangeResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SetRangeResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetRangeResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::SetRangeResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetRangeResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetValue > (
      ::CDM::SetValue_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetValue > (
      ::CDM::SetValue_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetValue > (
      ::CDM::SetValue_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetValue_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetValue_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetValue_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetValue_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetValue_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetValue_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetValue > (
      ::CDM::SetValue_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetValue > (
      ::CDM::SetValue_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetValue > (
      ::CDM::SetValue_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SetValue > (
        ::CDM::SetValue_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetValue" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetValue > r (
        ::xsd::cxx::tree::traits< ::CDM::SetValue, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetValue",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetValue >
  SetValue_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SetValue" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetValue > r (
        ::xsd::cxx::tree::traits< ::CDM::SetValue, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetValue",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (const ::std::string& u,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetValueResponse > (
      ::CDM::SetValueResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (const ::std::string& u,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetValueResponse > (
      ::CDM::SetValueResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetValueResponse > (
      ::CDM::SetValueResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetValueResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetValueResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetValueResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetValueResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetValueResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetValueResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::xercesc::InputSource& i,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetValueResponse > (
      ::CDM::SetValueResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::xercesc::InputSource& i,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetValueResponse > (
      ::CDM::SetValueResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetValueResponse > (
      ::CDM::SetValueResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SetValueResponse > (
        ::CDM::SetValueResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetValueResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetValueResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::SetValueResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetValueResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetValueResponse >
  SetValueResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SetValueResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetValueResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::SetValueResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetValueResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (const ::std::string& u,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetString > (
      ::CDM::SetString_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (const ::std::string& u,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetString > (
      ::CDM::SetString_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetString > (
      ::CDM::SetString_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetString_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetString_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetString_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetString_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetString_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetString_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::xercesc::InputSource& i,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetString > (
      ::CDM::SetString_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::xercesc::InputSource& i,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetString > (
      ::CDM::SetString_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetString > (
      ::CDM::SetString_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (const ::xercesc::DOMDocument& doc,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SetString > (
        ::CDM::SetString_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetString" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetString > r (
        ::xsd::cxx::tree::traits< ::CDM::SetString, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetString",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetString >
  SetString_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SetString" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetString > r (
        ::xsd::cxx::tree::traits< ::CDM::SetString, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetString",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (const ::std::string& u,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetStringResponse > (
      ::CDM::SetStringResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (const ::std::string& u,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetStringResponse > (
      ::CDM::SetStringResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetStringResponse > (
      ::CDM::SetStringResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetStringResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetStringResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetStringResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetStringResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetStringResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetStringResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::xercesc::InputSource& i,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetStringResponse > (
      ::CDM::SetStringResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::xercesc::InputSource& i,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetStringResponse > (
      ::CDM::SetStringResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetStringResponse > (
      ::CDM::SetStringResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SetStringResponse > (
        ::CDM::SetStringResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetStringResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetStringResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::SetStringResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetStringResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetStringResponse >
  SetStringResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SetStringResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetStringResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::SetStringResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetStringResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (const ::std::string& u,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetAlertState > (
      ::CDM::SetAlertState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (const ::std::string& u,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetAlertState > (
      ::CDM::SetAlertState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetAlertState > (
      ::CDM::SetAlertState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetAlertState_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetAlertState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetAlertState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetAlertState_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetAlertState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetAlertState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::xercesc::InputSource& i,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetAlertState > (
      ::CDM::SetAlertState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::xercesc::InputSource& i,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetAlertState > (
      ::CDM::SetAlertState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetAlertState > (
      ::CDM::SetAlertState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SetAlertState > (
        ::CDM::SetAlertState_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetAlertState" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetAlertState > r (
        ::xsd::cxx::tree::traits< ::CDM::SetAlertState, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetAlertState",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetAlertState >
  SetAlertState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SetAlertState" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetAlertState > r (
        ::xsd::cxx::tree::traits< ::CDM::SetAlertState, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetAlertState",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (const ::std::string& u,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetAlertStateResponse > (
      ::CDM::SetAlertStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (const ::std::string& u,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetAlertStateResponse > (
      ::CDM::SetAlertStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetAlertStateResponse > (
      ::CDM::SetAlertStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetAlertStateResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetAlertStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetAlertStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetAlertStateResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetAlertStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetAlertStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::xercesc::InputSource& i,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetAlertStateResponse > (
      ::CDM::SetAlertStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::xercesc::InputSource& i,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetAlertStateResponse > (
      ::CDM::SetAlertStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetAlertStateResponse > (
      ::CDM::SetAlertStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SetAlertStateResponse > (
        ::CDM::SetAlertStateResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetAlertStateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetAlertStateResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::SetAlertStateResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetAlertStateResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetAlertStateResponse >
  SetAlertStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SetAlertStateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetAlertStateResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::SetAlertStateResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetAlertStateResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::Activate > (
      ::CDM::Activate_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::Activate > (
      ::CDM::Activate_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::Activate > (
      ::CDM::Activate_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::Activate_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::Activate_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::Activate_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::Activate_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::Activate_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::Activate_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::Activate > (
      ::CDM::Activate_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::Activate > (
      ::CDM::Activate_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::Activate > (
      ::CDM::Activate_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::Activate > (
        ::CDM::Activate_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Activate" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::Activate > r (
        ::xsd::cxx::tree::traits< ::CDM::Activate, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Activate",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::Activate >
  Activate_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Activate" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::Activate > r (
        ::xsd::cxx::tree::traits< ::CDM::Activate, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Activate",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (const ::std::string& u,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::ActivateResponse > (
      ::CDM::ActivateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (const ::std::string& u,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ActivateResponse > (
      ::CDM::ActivateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ActivateResponse > (
      ::CDM::ActivateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::ActivateResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::ActivateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::ActivateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::ActivateResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::ActivateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::ActivateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::xercesc::InputSource& i,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::ActivateResponse > (
      ::CDM::ActivateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::xercesc::InputSource& i,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ActivateResponse > (
      ::CDM::ActivateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ActivateResponse > (
      ::CDM::ActivateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::ActivateResponse > (
        ::CDM::ActivateResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ActivateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::ActivateResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::ActivateResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ActivateResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::ActivateResponse >
  ActivateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ActivateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::ActivateResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::ActivateResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ActivateResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (const ::std::string& u,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetContextState > (
      ::CDM::SetContextState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (const ::std::string& u,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetContextState > (
      ::CDM::SetContextState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetContextState > (
      ::CDM::SetContextState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetContextState_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetContextState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetContextState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetContextState_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetContextState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetContextState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::xercesc::InputSource& i,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetContextState > (
      ::CDM::SetContextState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::xercesc::InputSource& i,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetContextState > (
      ::CDM::SetContextState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetContextState > (
      ::CDM::SetContextState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SetContextState > (
        ::CDM::SetContextState_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetContextState" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetContextState > r (
        ::xsd::cxx::tree::traits< ::CDM::SetContextState, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetContextState",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetContextState >
  SetContextState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SetContextState" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetContextState > r (
        ::xsd::cxx::tree::traits< ::CDM::SetContextState, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetContextState",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (const ::std::string& u,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetContextStateResponse > (
      ::CDM::SetContextStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (const ::std::string& u,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetContextStateResponse > (
      ::CDM::SetContextStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetContextStateResponse > (
      ::CDM::SetContextStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetContextStateResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetContextStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetContextStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetContextStateResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetContextStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetContextStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::xercesc::InputSource& i,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetContextStateResponse > (
      ::CDM::SetContextStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::xercesc::InputSource& i,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetContextStateResponse > (
      ::CDM::SetContextStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetContextStateResponse > (
      ::CDM::SetContextStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SetContextStateResponse > (
        ::CDM::SetContextStateResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetContextStateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetContextStateResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::SetContextStateResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetContextStateResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetContextStateResponse >
  SetContextStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SetContextStateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetContextStateResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::SetContextStateResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetContextStateResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (const ::std::string& u,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetPatientAssociationState > (
      ::CDM::SetPatientAssociationState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (const ::std::string& u,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetPatientAssociationState > (
      ::CDM::SetPatientAssociationState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetPatientAssociationState > (
      ::CDM::SetPatientAssociationState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::std::istream& is,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetPatientAssociationState_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::std::istream& is,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetPatientAssociationState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetPatientAssociationState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetPatientAssociationState_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetPatientAssociationState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetPatientAssociationState_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::xercesc::InputSource& i,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetPatientAssociationState > (
      ::CDM::SetPatientAssociationState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::xercesc::InputSource& i,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetPatientAssociationState > (
      ::CDM::SetPatientAssociationState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetPatientAssociationState > (
      ::CDM::SetPatientAssociationState_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SetPatientAssociationState > (
        ::CDM::SetPatientAssociationState_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetPatientAssociationState" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetPatientAssociationState > r (
        ::xsd::cxx::tree::traits< ::CDM::SetPatientAssociationState, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetPatientAssociationState",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationState >
  SetPatientAssociationState_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SetPatientAssociationState" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetPatientAssociationState > r (
        ::xsd::cxx::tree::traits< ::CDM::SetPatientAssociationState, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetPatientAssociationState",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (const ::std::string& u,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse > (
      ::CDM::SetPatientAssociationStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (const ::std::string& u,
                                       ::xml_schema::ErrorHandler& h,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse > (
      ::CDM::SetPatientAssociationStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse > (
      ::CDM::SetPatientAssociationStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::std::istream& is,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetPatientAssociationStateResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::std::istream& is,
                                       ::xml_schema::ErrorHandler& h,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetPatientAssociationStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SetPatientAssociationStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetPatientAssociationStateResponse_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::ErrorHandler& h,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetPatientAssociationStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SetPatientAssociationStateResponse_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::xercesc::InputSource& i,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse > (
      ::CDM::SetPatientAssociationStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::xercesc::InputSource& i,
                                       ::xml_schema::ErrorHandler& h,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse > (
      ::CDM::SetPatientAssociationStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse > (
      ::CDM::SetPatientAssociationStateResponse_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (const ::xercesc::DOMDocument& doc,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse > (
        ::CDM::SetPatientAssociationStateResponse_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetPatientAssociationStateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::SetPatientAssociationStateResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetPatientAssociationStateResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse >
  SetPatientAssociationStateResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::Flags f,
                                       const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SetPatientAssociationStateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SetPatientAssociationStateResponse > r (
        ::xsd::cxx::tree::traits< ::CDM::SetPatientAssociationStateResponse, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SetPatientAssociationStateResponse",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (const ::std::string& u,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::PeriodicMetricReport > (
      ::CDM::PeriodicMetricReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (const ::std::string& u,
                         ::xml_schema::ErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::PeriodicMetricReport > (
      ::CDM::PeriodicMetricReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::PeriodicMetricReport > (
      ::CDM::PeriodicMetricReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::PeriodicMetricReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         ::xml_schema::ErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::PeriodicMetricReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::PeriodicMetricReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::PeriodicMetricReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::ErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::PeriodicMetricReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::PeriodicMetricReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::xercesc::InputSource& i,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::PeriodicMetricReport > (
      ::CDM::PeriodicMetricReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::xercesc::InputSource& i,
                         ::xml_schema::ErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::PeriodicMetricReport > (
      ::CDM::PeriodicMetricReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::PeriodicMetricReport > (
      ::CDM::PeriodicMetricReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::PeriodicMetricReport > (
        ::CDM::PeriodicMetricReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PeriodicMetricReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::PeriodicMetricReport > r (
        ::xsd::cxx::tree::traits< ::CDM::PeriodicMetricReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PeriodicMetricReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::PeriodicMetricReport >
  PeriodicMetricReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "PeriodicMetricReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::PeriodicMetricReport > r (
        ::xsd::cxx::tree::traits< ::CDM::PeriodicMetricReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PeriodicMetricReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (const ::std::string& u,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::EpisodicMetricReport > (
      ::CDM::EpisodicMetricReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (const ::std::string& u,
                         ::xml_schema::ErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::EpisodicMetricReport > (
      ::CDM::EpisodicMetricReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::EpisodicMetricReport > (
      ::CDM::EpisodicMetricReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::EpisodicMetricReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         ::xml_schema::ErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::EpisodicMetricReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::EpisodicMetricReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::EpisodicMetricReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::ErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::EpisodicMetricReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::EpisodicMetricReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::xercesc::InputSource& i,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::EpisodicMetricReport > (
      ::CDM::EpisodicMetricReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::xercesc::InputSource& i,
                         ::xml_schema::ErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::EpisodicMetricReport > (
      ::CDM::EpisodicMetricReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::EpisodicMetricReport > (
      ::CDM::EpisodicMetricReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::EpisodicMetricReport > (
        ::CDM::EpisodicMetricReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "EpisodicMetricReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::EpisodicMetricReport > r (
        ::xsd::cxx::tree::traits< ::CDM::EpisodicMetricReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "EpisodicMetricReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::EpisodicMetricReport >
  EpisodicMetricReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "EpisodicMetricReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::EpisodicMetricReport > r (
        ::xsd::cxx::tree::traits< ::CDM::EpisodicMetricReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "EpisodicMetricReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (const ::std::string& u,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::PeriodicAlertReport > (
      ::CDM::PeriodicAlertReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (const ::std::string& u,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::PeriodicAlertReport > (
      ::CDM::PeriodicAlertReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::PeriodicAlertReport > (
      ::CDM::PeriodicAlertReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::PeriodicAlertReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::PeriodicAlertReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::PeriodicAlertReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::PeriodicAlertReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::PeriodicAlertReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::PeriodicAlertReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::xercesc::InputSource& i,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::PeriodicAlertReport > (
      ::CDM::PeriodicAlertReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::xercesc::InputSource& i,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::PeriodicAlertReport > (
      ::CDM::PeriodicAlertReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::PeriodicAlertReport > (
      ::CDM::PeriodicAlertReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::PeriodicAlertReport > (
        ::CDM::PeriodicAlertReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PeriodicAlertReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::PeriodicAlertReport > r (
        ::xsd::cxx::tree::traits< ::CDM::PeriodicAlertReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PeriodicAlertReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::PeriodicAlertReport >
  PeriodicAlertReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "PeriodicAlertReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::PeriodicAlertReport > r (
        ::xsd::cxx::tree::traits< ::CDM::PeriodicAlertReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PeriodicAlertReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (const ::std::string& u,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::EpisodicAlertReport > (
      ::CDM::EpisodicAlertReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (const ::std::string& u,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::EpisodicAlertReport > (
      ::CDM::EpisodicAlertReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::EpisodicAlertReport > (
      ::CDM::EpisodicAlertReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::EpisodicAlertReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::EpisodicAlertReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::EpisodicAlertReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::EpisodicAlertReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::EpisodicAlertReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::EpisodicAlertReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::xercesc::InputSource& i,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::EpisodicAlertReport > (
      ::CDM::EpisodicAlertReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::xercesc::InputSource& i,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::EpisodicAlertReport > (
      ::CDM::EpisodicAlertReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::EpisodicAlertReport > (
      ::CDM::EpisodicAlertReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::EpisodicAlertReport > (
        ::CDM::EpisodicAlertReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "EpisodicAlertReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::EpisodicAlertReport > r (
        ::xsd::cxx::tree::traits< ::CDM::EpisodicAlertReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "EpisodicAlertReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::EpisodicAlertReport >
  EpisodicAlertReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "EpisodicAlertReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::EpisodicAlertReport > r (
        ::xsd::cxx::tree::traits< ::CDM::EpisodicAlertReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "EpisodicAlertReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (const ::std::string& u,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::PeriodicContextChangedReport > (
      ::CDM::PeriodicContextChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (const ::std::string& u,
                                 ::xml_schema::ErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::PeriodicContextChangedReport > (
      ::CDM::PeriodicContextChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::PeriodicContextChangedReport > (
      ::CDM::PeriodicContextChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::std::istream& is,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::PeriodicContextChangedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::std::istream& is,
                                 ::xml_schema::ErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::PeriodicContextChangedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::PeriodicContextChangedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::PeriodicContextChangedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::ErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::PeriodicContextChangedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::PeriodicContextChangedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::xercesc::InputSource& i,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::PeriodicContextChangedReport > (
      ::CDM::PeriodicContextChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::xercesc::InputSource& i,
                                 ::xml_schema::ErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::PeriodicContextChangedReport > (
      ::CDM::PeriodicContextChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::PeriodicContextChangedReport > (
      ::CDM::PeriodicContextChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (const ::xercesc::DOMDocument& doc,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::PeriodicContextChangedReport > (
        ::CDM::PeriodicContextChangedReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PeriodicContextChangedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::PeriodicContextChangedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::PeriodicContextChangedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PeriodicContextChangedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::PeriodicContextChangedReport >
  PeriodicContextChangedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "PeriodicContextChangedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::PeriodicContextChangedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::PeriodicContextChangedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PeriodicContextChangedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (const ::std::string& u,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::EpisodicContextChangedReport > (
      ::CDM::EpisodicContextChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (const ::std::string& u,
                                 ::xml_schema::ErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::EpisodicContextChangedReport > (
      ::CDM::EpisodicContextChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::EpisodicContextChangedReport > (
      ::CDM::EpisodicContextChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::std::istream& is,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::EpisodicContextChangedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::std::istream& is,
                                 ::xml_schema::ErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::EpisodicContextChangedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::EpisodicContextChangedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::EpisodicContextChangedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::ErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::EpisodicContextChangedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::EpisodicContextChangedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::xercesc::InputSource& i,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::EpisodicContextChangedReport > (
      ::CDM::EpisodicContextChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::xercesc::InputSource& i,
                                 ::xml_schema::ErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::EpisodicContextChangedReport > (
      ::CDM::EpisodicContextChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::EpisodicContextChangedReport > (
      ::CDM::EpisodicContextChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (const ::xercesc::DOMDocument& doc,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::EpisodicContextChangedReport > (
        ::CDM::EpisodicContextChangedReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "EpisodicContextChangedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::EpisodicContextChangedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::EpisodicContextChangedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "EpisodicContextChangedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::EpisodicContextChangedReport >
  EpisodicContextChangedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::Flags f,
                                 const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "EpisodicContextChangedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::EpisodicContextChangedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::EpisodicContextChangedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "EpisodicContextChangedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (const ::std::string& u,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::OperationInvokedReport > (
      ::CDM::OperationInvokedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (const ::std::string& u,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationInvokedReport > (
      ::CDM::OperationInvokedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationInvokedReport > (
      ::CDM::OperationInvokedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationInvokedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationInvokedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationInvokedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationInvokedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationInvokedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationInvokedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::xercesc::InputSource& i,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::OperationInvokedReport > (
      ::CDM::OperationInvokedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::xercesc::InputSource& i,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationInvokedReport > (
      ::CDM::OperationInvokedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationInvokedReport > (
      ::CDM::OperationInvokedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::OperationInvokedReport > (
        ::CDM::OperationInvokedReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperationInvokedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::OperationInvokedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::OperationInvokedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperationInvokedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::OperationInvokedReport >
  OperationInvokedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OperationInvokedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::OperationInvokedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::OperationInvokedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperationInvokedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (const ::std::string& u,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::OperationalStateChangedReport > (
      ::CDM::OperationalStateChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (const ::std::string& u,
                                  ::xml_schema::ErrorHandler& h,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationalStateChangedReport > (
      ::CDM::OperationalStateChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationalStateChangedReport > (
      ::CDM::OperationalStateChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::std::istream& is,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationalStateChangedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::std::istream& is,
                                  ::xml_schema::ErrorHandler& h,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationalStateChangedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationalStateChangedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationalStateChangedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::ErrorHandler& h,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationalStateChangedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationalStateChangedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::xercesc::InputSource& i,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::OperationalStateChangedReport > (
      ::CDM::OperationalStateChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::xercesc::InputSource& i,
                                  ::xml_schema::ErrorHandler& h,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationalStateChangedReport > (
      ::CDM::OperationalStateChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationalStateChangedReport > (
      ::CDM::OperationalStateChangedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::OperationalStateChangedReport > (
        ::CDM::OperationalStateChangedReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperationalStateChangedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::OperationalStateChangedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::OperationalStateChangedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperationalStateChangedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::OperationalStateChangedReport >
  OperationalStateChangedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::Flags f,
                                  const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OperationalStateChangedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::OperationalStateChangedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::OperationalStateChangedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperationalStateChangedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (const ::std::string& u,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::OperationCreatedReport > (
      ::CDM::OperationCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (const ::std::string& u,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationCreatedReport > (
      ::CDM::OperationCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationCreatedReport > (
      ::CDM::OperationCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::std::istream& is,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationCreatedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::std::istream& is,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationCreatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationCreatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationCreatedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationCreatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationCreatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::xercesc::InputSource& i,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::OperationCreatedReport > (
      ::CDM::OperationCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::xercesc::InputSource& i,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationCreatedReport > (
      ::CDM::OperationCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationCreatedReport > (
      ::CDM::OperationCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::OperationCreatedReport > (
        ::CDM::OperationCreatedReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperationCreatedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::OperationCreatedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::OperationCreatedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperationCreatedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::OperationCreatedReport >
  OperationCreatedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OperationCreatedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::OperationCreatedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::OperationCreatedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperationCreatedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (const ::std::string& u,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::OperationDeletedReport > (
      ::CDM::OperationDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (const ::std::string& u,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationDeletedReport > (
      ::CDM::OperationDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationDeletedReport > (
      ::CDM::OperationDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::std::istream& is,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationDeletedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::std::istream& is,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationDeletedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationDeletedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationDeletedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationDeletedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationDeletedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::xercesc::InputSource& i,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::OperationDeletedReport > (
      ::CDM::OperationDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::xercesc::InputSource& i,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationDeletedReport > (
      ::CDM::OperationDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationDeletedReport > (
      ::CDM::OperationDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::OperationDeletedReport > (
        ::CDM::OperationDeletedReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperationDeletedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::OperationDeletedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::OperationDeletedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperationDeletedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::OperationDeletedReport >
  OperationDeletedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OperationDeletedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::OperationDeletedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::OperationDeletedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperationDeletedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (const ::std::string& u,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::ObjectCreatedReport > (
      ::CDM::ObjectCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (const ::std::string& u,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ObjectCreatedReport > (
      ::CDM::ObjectCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ObjectCreatedReport > (
      ::CDM::ObjectCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::std::istream& is,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::ObjectCreatedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::ObjectCreatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::ObjectCreatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::ObjectCreatedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::ObjectCreatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::ObjectCreatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::xercesc::InputSource& i,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::ObjectCreatedReport > (
      ::CDM::ObjectCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::xercesc::InputSource& i,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ObjectCreatedReport > (
      ::CDM::ObjectCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ObjectCreatedReport > (
      ::CDM::ObjectCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::ObjectCreatedReport > (
        ::CDM::ObjectCreatedReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ObjectCreatedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::ObjectCreatedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::ObjectCreatedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ObjectCreatedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::ObjectCreatedReport >
  ObjectCreatedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ObjectCreatedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::ObjectCreatedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::ObjectCreatedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ObjectCreatedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (const ::std::string& u,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::ObjectUpdatedReport > (
      ::CDM::ObjectUpdatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (const ::std::string& u,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ObjectUpdatedReport > (
      ::CDM::ObjectUpdatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ObjectUpdatedReport > (
      ::CDM::ObjectUpdatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::std::istream& is,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::ObjectUpdatedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::ObjectUpdatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::ObjectUpdatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::ObjectUpdatedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::ObjectUpdatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::ObjectUpdatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::xercesc::InputSource& i,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::ObjectUpdatedReport > (
      ::CDM::ObjectUpdatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::xercesc::InputSource& i,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ObjectUpdatedReport > (
      ::CDM::ObjectUpdatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ObjectUpdatedReport > (
      ::CDM::ObjectUpdatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::ObjectUpdatedReport > (
        ::CDM::ObjectUpdatedReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ObjectUpdatedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::ObjectUpdatedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::ObjectUpdatedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ObjectUpdatedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::ObjectUpdatedReport >
  ObjectUpdatedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ObjectUpdatedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::ObjectUpdatedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::ObjectUpdatedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ObjectUpdatedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (const ::std::string& u,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::ObjectDeletedReport > (
      ::CDM::ObjectDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (const ::std::string& u,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ObjectDeletedReport > (
      ::CDM::ObjectDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ObjectDeletedReport > (
      ::CDM::ObjectDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::std::istream& is,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::ObjectDeletedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::ObjectDeletedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::ObjectDeletedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::ObjectDeletedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::ObjectDeletedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::ObjectDeletedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::xercesc::InputSource& i,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::ObjectDeletedReport > (
      ::CDM::ObjectDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::xercesc::InputSource& i,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ObjectDeletedReport > (
      ::CDM::ObjectDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::ObjectDeletedReport > (
      ::CDM::ObjectDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::ObjectDeletedReport > (
        ::CDM::ObjectDeletedReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ObjectDeletedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::ObjectDeletedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::ObjectDeletedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ObjectDeletedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::ObjectDeletedReport >
  ObjectDeletedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ObjectDeletedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::ObjectDeletedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::ObjectDeletedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ObjectDeletedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (const ::std::string& u,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::MDSCreatedReport > (
      ::CDM::MDSCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (const ::std::string& u,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::MDSCreatedReport > (
      ::CDM::MDSCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::MDSCreatedReport > (
      ::CDM::MDSCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::std::istream& is,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::MDSCreatedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::MDSCreatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::MDSCreatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::MDSCreatedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::MDSCreatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::MDSCreatedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::xercesc::InputSource& i,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::MDSCreatedReport > (
      ::CDM::MDSCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::xercesc::InputSource& i,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::MDSCreatedReport > (
      ::CDM::MDSCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::MDSCreatedReport > (
      ::CDM::MDSCreatedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::MDSCreatedReport > (
        ::CDM::MDSCreatedReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MDSCreatedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::MDSCreatedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::MDSCreatedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MDSCreatedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::MDSCreatedReport >
  MDSCreatedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "MDSCreatedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::MDSCreatedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::MDSCreatedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MDSCreatedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (const ::std::string& u,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::MDSDeletedReport > (
      ::CDM::MDSDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (const ::std::string& u,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::MDSDeletedReport > (
      ::CDM::MDSDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::MDSDeletedReport > (
      ::CDM::MDSDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::std::istream& is,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::MDSDeletedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::std::istream& is,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::MDSDeletedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::MDSDeletedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::MDSDeletedReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::MDSDeletedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::MDSDeletedReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::xercesc::InputSource& i,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::MDSDeletedReport > (
      ::CDM::MDSDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::xercesc::InputSource& i,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::MDSDeletedReport > (
      ::CDM::MDSDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::MDSDeletedReport > (
      ::CDM::MDSDeletedReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::MDSDeletedReport > (
        ::CDM::MDSDeletedReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MDSDeletedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::MDSDeletedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::MDSDeletedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MDSDeletedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::MDSDeletedReport >
  MDSDeletedReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "MDSDeletedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::MDSDeletedReport > r (
        ::xsd::cxx::tree::traits< ::CDM::MDSDeletedReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MDSDeletedReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (const ::std::string& u,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SystemErrorReport > (
      ::CDM::SystemErrorReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (const ::std::string& u,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SystemErrorReport > (
      ::CDM::SystemErrorReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SystemErrorReport > (
      ::CDM::SystemErrorReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SystemErrorReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SystemErrorReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::SystemErrorReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SystemErrorReport_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SystemErrorReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::SystemErrorReport_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::xercesc::InputSource& i,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::SystemErrorReport > (
      ::CDM::SystemErrorReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::xercesc::InputSource& i,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SystemErrorReport > (
      ::CDM::SystemErrorReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::SystemErrorReport > (
      ::CDM::SystemErrorReport_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::SystemErrorReport > (
        ::CDM::SystemErrorReport_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SystemErrorReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SystemErrorReport > r (
        ::xsd::cxx::tree::traits< ::CDM::SystemErrorReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SystemErrorReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::SystemErrorReport >
  SystemErrorReport_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SystemErrorReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::SystemErrorReport > r (
        ::xsd::cxx::tree::traits< ::CDM::SystemErrorReport, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SystemErrorReport",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (const ::std::string& u,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::WaveformStream > (
      ::CDM::WaveformStream_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (const ::std::string& u,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::WaveformStream > (
      ::CDM::WaveformStream_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::WaveformStream > (
      ::CDM::WaveformStream_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::WaveformStream_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::WaveformStream_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::WaveformStream_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::WaveformStream_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::WaveformStream_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::WaveformStream_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::xercesc::InputSource& i,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::WaveformStream > (
      ::CDM::WaveformStream_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::xercesc::InputSource& i,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::WaveformStream > (
      ::CDM::WaveformStream_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::WaveformStream > (
      ::CDM::WaveformStream_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::WaveformStream > (
        ::CDM::WaveformStream_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "WaveformStream" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::WaveformStream > r (
        ::xsd::cxx::tree::traits< ::CDM::WaveformStream, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "WaveformStream",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::WaveformStream >
  WaveformStream_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "WaveformStream" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::WaveformStream > r (
        ::xsd::cxx::tree::traits< ::CDM::WaveformStream, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "WaveformStream",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::OVStream > (
      ::CDM::OVStream_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OVStream > (
      ::CDM::OVStream_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OVStream > (
      ::CDM::OVStream_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OVStream_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OVStream_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OVStream_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OVStream_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OVStream_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OVStream_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::OVStream > (
      ::CDM::OVStream_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OVStream > (
      ::CDM::OVStream_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OVStream > (
      ::CDM::OVStream_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::OVStream > (
        ::CDM::OVStream_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OVStream" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::OVStream > r (
        ::xsd::cxx::tree::traits< ::CDM::OVStream, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OVStream",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::OVStream >
  OVStream_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OVStream" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::OVStream > r (
        ::xsd::cxx::tree::traits< ::CDM::OVStream, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OVStream",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (const ::std::string& u,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::Retrievability > (
      ::CDM::Retrievability_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (const ::std::string& u,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::Retrievability > (
      ::CDM::Retrievability_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::Retrievability > (
      ::CDM::Retrievability_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::Retrievability_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::Retrievability_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::Retrievability_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::Retrievability_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::Retrievability_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::Retrievability_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::xercesc::InputSource& i,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::Retrievability > (
      ::CDM::Retrievability_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::xercesc::InputSource& i,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::Retrievability > (
      ::CDM::Retrievability_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::Retrievability > (
      ::CDM::Retrievability_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::Retrievability > (
        ::CDM::Retrievability_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Retrievability" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::Retrievability > r (
        ::xsd::cxx::tree::traits< ::CDM::Retrievability, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Retrievability",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::Retrievability >
  Retrievability_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Retrievability" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::Retrievability > r (
        ::xsd::cxx::tree::traits< ::CDM::Retrievability, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Retrievability",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (const ::std::string& u,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::OperationReference > (
      ::CDM::OperationReference_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (const ::std::string& u,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationReference > (
      ::CDM::OperationReference_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationReference > (
      ::CDM::OperationReference_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::std::istream& is,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationReference_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::std::istream& is,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationReference_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::CDM::OperationReference_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationReference_ (isrc, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationReference_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::CDM::OperationReference_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::xercesc::InputSource& i,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::CDM::OperationReference > (
      ::CDM::OperationReference_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::xercesc::InputSource& i,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationReference > (
      ::CDM::OperationReference_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::CDM::OperationReference > (
      ::CDM::OperationReference_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::CDM::OperationReference > (
        ::CDM::OperationReference_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperationReference" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::OperationReference > r (
        ::xsd::cxx::tree::traits< ::CDM::OperationReference, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperationReference",
      "http://message-model-uri/15/04");
  }

  ::std::unique_ptr< ::CDM::OperationReference >
  OperationReference_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OperationReference" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      ::std::unique_ptr< ::CDM::OperationReference > r (
        ::xsd::cxx::tree::traits< ::CDM::OperationReference, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperationReference",
      "http://message-model-uri/15/04");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace CDM
{
  void
  operator<< (::xercesc::DOMElement& e, const AbstractGet& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Extension
    //
    if (i.Extension ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Extension",
          "http://extension-point-uri/15/03",
          e));

      s << *i.Extension ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AbstractGet >
  _xsd_AbstractGet_type_serializer_init (
    "AbstractGet",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const AbstractGetResponse& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Extension
    //
    if (i.Extension ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Extension",
          "http://extension-point-uri/15/03",
          e));

      s << *i.Extension ();
    }

    // MDIBVersion
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "MDIBVersion",
          "http://domain-model-uri/15/04",
          e));

      a << i.MDIBVersion ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AbstractGetResponse >
  _xsd_AbstractGetResponse_type_serializer_init (
    "AbstractGetResponse",
    "http://message-model-uri/15/04");


  void
  GetMDIB_ (::std::ostream& o,
            const ::CDM::GetMDIB& s,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDIB_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetMDIB_ (::std::ostream& o,
            const ::CDM::GetMDIB& s,
            ::xml_schema::ErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDIB_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDIB_ (::std::ostream& o,
            const ::CDM::GetMDIB& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDIB_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDIB_ (::xercesc::XMLFormatTarget& t,
            const ::CDM::GetMDIB& s,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDIB_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetMDIB_ (::xercesc::XMLFormatTarget& t,
            const ::CDM::GetMDIB& s,
            ::xml_schema::ErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDIB_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDIB_ (::xercesc::XMLFormatTarget& t,
            const ::CDM::GetMDIB& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDIB_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDIB_ (::xercesc::DOMDocument& d,
            const ::CDM::GetMDIB& s,
            ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMDIB" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetMDIB",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMDIB_ (const ::CDM::GetMDIB& s,
            const ::xml_schema::NamespaceInfomap& m,
            ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "GetMDIB",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::GetMDIB_ (*d, s, f);
    return d;
  }

  void
  GetMDIBResponse_ (::std::ostream& o,
                    const ::CDM::GetMDIBResponse& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDIBResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetMDIBResponse_ (::std::ostream& o,
                    const ::CDM::GetMDIBResponse& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDIBResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDIBResponse_ (::std::ostream& o,
                    const ::CDM::GetMDIBResponse& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDIBResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDIBResponse_ (::xercesc::XMLFormatTarget& t,
                    const ::CDM::GetMDIBResponse& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDIBResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetMDIBResponse_ (::xercesc::XMLFormatTarget& t,
                    const ::CDM::GetMDIBResponse& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDIBResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDIBResponse_ (::xercesc::XMLFormatTarget& t,
                    const ::CDM::GetMDIBResponse& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDIBResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDIBResponse_ (::xercesc::DOMDocument& d,
                    const ::CDM::GetMDIBResponse& s,
                    ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMDIBResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetMDIBResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMDIBResponse_ (const ::CDM::GetMDIBResponse& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "GetMDIBResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::GetMDIBResponse_ (*d, s, f);
    return d;
  }

  void
  GetMDDescription_ (::std::ostream& o,
                     const ::CDM::GetMDDescription& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDDescription_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetMDDescription_ (::std::ostream& o,
                     const ::CDM::GetMDDescription& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDDescription_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDDescription_ (::std::ostream& o,
                     const ::CDM::GetMDDescription& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDDescription_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDDescription_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::GetMDDescription& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDDescription_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetMDDescription_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::GetMDDescription& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDDescription_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDDescription_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::GetMDDescription& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDDescription_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDDescription_ (::xercesc::DOMDocument& d,
                     const ::CDM::GetMDDescription& s,
                     ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMDDescription" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetMDDescription",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMDDescription_ (const ::CDM::GetMDDescription& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "GetMDDescription",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::GetMDDescription_ (*d, s, f);
    return d;
  }

  void
  GetMDDescriptionResponse_ (::std::ostream& o,
                             const ::CDM::GetMDDescriptionResponse& s,
                             const ::xml_schema::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDDescriptionResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetMDDescriptionResponse_ (::std::ostream& o,
                             const ::CDM::GetMDDescriptionResponse& s,
                             ::xml_schema::ErrorHandler& h,
                             const ::xml_schema::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDDescriptionResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDDescriptionResponse_ (::std::ostream& o,
                             const ::CDM::GetMDDescriptionResponse& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDDescriptionResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDDescriptionResponse_ (::xercesc::XMLFormatTarget& t,
                             const ::CDM::GetMDDescriptionResponse& s,
                             const ::xml_schema::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDDescriptionResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetMDDescriptionResponse_ (::xercesc::XMLFormatTarget& t,
                             const ::CDM::GetMDDescriptionResponse& s,
                             ::xml_schema::ErrorHandler& h,
                             const ::xml_schema::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDDescriptionResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDDescriptionResponse_ (::xercesc::XMLFormatTarget& t,
                             const ::CDM::GetMDDescriptionResponse& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDDescriptionResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDDescriptionResponse_ (::xercesc::DOMDocument& d,
                             const ::CDM::GetMDDescriptionResponse& s,
                             ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMDDescriptionResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetMDDescriptionResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMDDescriptionResponse_ (const ::CDM::GetMDDescriptionResponse& s,
                             const ::xml_schema::NamespaceInfomap& m,
                             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "GetMDDescriptionResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::GetMDDescriptionResponse_ (*d, s, f);
    return d;
  }

  void
  GetMDState_ (::std::ostream& o,
               const ::CDM::GetMDState& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDState_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetMDState_ (::std::ostream& o,
               const ::CDM::GetMDState& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDState_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDState_ (::std::ostream& o,
               const ::CDM::GetMDState& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDState_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDState_ (::xercesc::XMLFormatTarget& t,
               const ::CDM::GetMDState& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDState_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetMDState_ (::xercesc::XMLFormatTarget& t,
               const ::CDM::GetMDState& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDState_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDState_ (::xercesc::XMLFormatTarget& t,
               const ::CDM::GetMDState& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDState_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDState_ (::xercesc::DOMDocument& d,
               const ::CDM::GetMDState& s,
               ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMDState" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetMDState",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMDState_ (const ::CDM::GetMDState& s,
               const ::xml_schema::NamespaceInfomap& m,
               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "GetMDState",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::GetMDState_ (*d, s, f);
    return d;
  }

  void
  GetMDStateResponse_ (::std::ostream& o,
                       const ::CDM::GetMDStateResponse& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDStateResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetMDStateResponse_ (::std::ostream& o,
                       const ::CDM::GetMDStateResponse& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDStateResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDStateResponse_ (::std::ostream& o,
                       const ::CDM::GetMDStateResponse& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDStateResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDStateResponse_ (::xercesc::XMLFormatTarget& t,
                       const ::CDM::GetMDStateResponse& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDStateResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetMDStateResponse_ (::xercesc::XMLFormatTarget& t,
                       const ::CDM::GetMDStateResponse& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDStateResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDStateResponse_ (::xercesc::XMLFormatTarget& t,
                       const ::CDM::GetMDStateResponse& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetMDStateResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetMDStateResponse_ (::xercesc::DOMDocument& d,
                       const ::CDM::GetMDStateResponse& s,
                       ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetMDStateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetMDStateResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetMDStateResponse_ (const ::CDM::GetMDStateResponse& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "GetMDStateResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::GetMDStateResponse_ (*d, s, f);
    return d;
  }

  void
  GetContextStates_ (::std::ostream& o,
                     const ::CDM::GetContextStates& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContextStates_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetContextStates_ (::std::ostream& o,
                     const ::CDM::GetContextStates& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContextStates_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContextStates_ (::std::ostream& o,
                     const ::CDM::GetContextStates& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContextStates_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContextStates_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::GetContextStates& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContextStates_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetContextStates_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::GetContextStates& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContextStates_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContextStates_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::GetContextStates& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContextStates_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContextStates_ (::xercesc::DOMDocument& d,
                     const ::CDM::GetContextStates& s,
                     ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetContextStates" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetContextStates",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetContextStates_ (const ::CDM::GetContextStates& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "GetContextStates",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::GetContextStates_ (*d, s, f);
    return d;
  }

  void
  GetContextStatesResponse_ (::std::ostream& o,
                             const ::CDM::GetContextStatesResponse& s,
                             const ::xml_schema::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContextStatesResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetContextStatesResponse_ (::std::ostream& o,
                             const ::CDM::GetContextStatesResponse& s,
                             ::xml_schema::ErrorHandler& h,
                             const ::xml_schema::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContextStatesResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContextStatesResponse_ (::std::ostream& o,
                             const ::CDM::GetContextStatesResponse& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContextStatesResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContextStatesResponse_ (::xercesc::XMLFormatTarget& t,
                             const ::CDM::GetContextStatesResponse& s,
                             const ::xml_schema::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContextStatesResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetContextStatesResponse_ (::xercesc::XMLFormatTarget& t,
                             const ::CDM::GetContextStatesResponse& s,
                             ::xml_schema::ErrorHandler& h,
                             const ::xml_schema::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContextStatesResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContextStatesResponse_ (::xercesc::XMLFormatTarget& t,
                             const ::CDM::GetContextStatesResponse& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContextStatesResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContextStatesResponse_ (::xercesc::DOMDocument& d,
                             const ::CDM::GetContextStatesResponse& s,
                             ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetContextStatesResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetContextStatesResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetContextStatesResponse_ (const ::CDM::GetContextStatesResponse& s,
                             const ::xml_schema::NamespaceInfomap& m,
                             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "GetContextStatesResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::GetContextStatesResponse_ (*d, s, f);
    return d;
  }

  void
  GetContainmentTree_ (::std::ostream& o,
                       const ::CDM::GetContainmentTree& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContainmentTree_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetContainmentTree_ (::std::ostream& o,
                       const ::CDM::GetContainmentTree& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContainmentTree_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContainmentTree_ (::std::ostream& o,
                       const ::CDM::GetContainmentTree& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContainmentTree_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContainmentTree_ (::xercesc::XMLFormatTarget& t,
                       const ::CDM::GetContainmentTree& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContainmentTree_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetContainmentTree_ (::xercesc::XMLFormatTarget& t,
                       const ::CDM::GetContainmentTree& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContainmentTree_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContainmentTree_ (::xercesc::XMLFormatTarget& t,
                       const ::CDM::GetContainmentTree& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContainmentTree_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContainmentTree_ (::xercesc::DOMDocument& d,
                       const ::CDM::GetContainmentTree& s,
                       ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetContainmentTree" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetContainmentTree",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetContainmentTree_ (const ::CDM::GetContainmentTree& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "GetContainmentTree",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::GetContainmentTree_ (*d, s, f);
    return d;
  }

  void
  GetContainmentTreeResponse_ (::std::ostream& o,
                               const ::CDM::GetContainmentTreeResponse& s,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContainmentTreeResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetContainmentTreeResponse_ (::std::ostream& o,
                               const ::CDM::GetContainmentTreeResponse& s,
                               ::xml_schema::ErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContainmentTreeResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContainmentTreeResponse_ (::std::ostream& o,
                               const ::CDM::GetContainmentTreeResponse& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContainmentTreeResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContainmentTreeResponse_ (::xercesc::XMLFormatTarget& t,
                               const ::CDM::GetContainmentTreeResponse& s,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContainmentTreeResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetContainmentTreeResponse_ (::xercesc::XMLFormatTarget& t,
                               const ::CDM::GetContainmentTreeResponse& s,
                               ::xml_schema::ErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContainmentTreeResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContainmentTreeResponse_ (::xercesc::XMLFormatTarget& t,
                               const ::CDM::GetContainmentTreeResponse& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetContainmentTreeResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetContainmentTreeResponse_ (::xercesc::DOMDocument& d,
                               const ::CDM::GetContainmentTreeResponse& s,
                               ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetContainmentTreeResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetContainmentTreeResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetContainmentTreeResponse_ (const ::CDM::GetContainmentTreeResponse& s,
                               const ::xml_schema::NamespaceInfomap& m,
                               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "GetContainmentTreeResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::GetContainmentTreeResponse_ (*d, s, f);
    return d;
  }

  void
  GetDescriptor_ (::std::ostream& o,
                  const ::CDM::GetDescriptor& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetDescriptor_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetDescriptor_ (::std::ostream& o,
                  const ::CDM::GetDescriptor& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetDescriptor_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetDescriptor_ (::std::ostream& o,
                  const ::CDM::GetDescriptor& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetDescriptor_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetDescriptor_ (::xercesc::XMLFormatTarget& t,
                  const ::CDM::GetDescriptor& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetDescriptor_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetDescriptor_ (::xercesc::XMLFormatTarget& t,
                  const ::CDM::GetDescriptor& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetDescriptor_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetDescriptor_ (::xercesc::XMLFormatTarget& t,
                  const ::CDM::GetDescriptor& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetDescriptor_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetDescriptor_ (::xercesc::DOMDocument& d,
                  const ::CDM::GetDescriptor& s,
                  ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetDescriptor" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetDescriptor",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetDescriptor_ (const ::CDM::GetDescriptor& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "GetDescriptor",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::GetDescriptor_ (*d, s, f);
    return d;
  }

  void
  GetDescriptorResponse_ (::std::ostream& o,
                          const ::CDM::GetDescriptorResponse& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetDescriptorResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetDescriptorResponse_ (::std::ostream& o,
                          const ::CDM::GetDescriptorResponse& s,
                          ::xml_schema::ErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetDescriptorResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetDescriptorResponse_ (::std::ostream& o,
                          const ::CDM::GetDescriptorResponse& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetDescriptorResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetDescriptorResponse_ (::xercesc::XMLFormatTarget& t,
                          const ::CDM::GetDescriptorResponse& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetDescriptorResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GetDescriptorResponse_ (::xercesc::XMLFormatTarget& t,
                          const ::CDM::GetDescriptorResponse& s,
                          ::xml_schema::ErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetDescriptorResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetDescriptorResponse_ (::xercesc::XMLFormatTarget& t,
                          const ::CDM::GetDescriptorResponse& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::GetDescriptorResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GetDescriptorResponse_ (::xercesc::DOMDocument& d,
                          const ::CDM::GetDescriptorResponse& s,
                          ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GetDescriptorResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetDescriptorResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  GetDescriptorResponse_ (const ::CDM::GetDescriptorResponse& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "GetDescriptorResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::GetDescriptorResponse_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetLocalizedText& i)
  {
    e << static_cast< const ::CDM::AbstractGet& > (i);

    // Ref
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const GetLocalizedText::RefType& x (i.Ref ());
      if (typeid (GetLocalizedText::RefType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Ref",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "Ref",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }

    // Version
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.Version ())
      {
        const GetLocalizedText::VersionType& x (*i.Version ());
        if (typeid (GetLocalizedText::VersionType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Version",
              "http://message-model-uri/15/04",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Version",
            "http://message-model-uri/15/04",
            false, true, e, x);
      }
    }

    // Lang
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetLocalizedText::LangConstIterator
           b (i.Lang ().begin ()), n (i.Lang ().end ());
           b != n; ++b)
      {
        if (typeid (GetLocalizedText::LangType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Lang",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "Lang",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GetLocalizedText >
  _xsd_GetLocalizedText_type_serializer_init (
    "GetLocalizedText",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const GetLocalizedTextResponse& i)
  {
    e << static_cast< const ::CDM::AbstractGetResponse& > (i);

    // Text
    //
    for (GetLocalizedTextResponse::TextConstIterator
         b (i.Text ().begin ()), n (i.Text ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Text",
          "http://message-model-uri/15/04",
          e));

      s << *b;
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GetLocalizedTextResponse >
  _xsd_GetLocalizedTextResponse_type_serializer_init (
    "GetLocalizedTextResponse",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const GetSupportedLanguages& i)
  {
    e << static_cast< const ::CDM::AbstractGet& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GetSupportedLanguages >
  _xsd_GetSupportedLanguages_type_serializer_init (
    "GetSupportedLanguages",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const GetSupportedLanguagesResponse& i)
  {
    e << static_cast< const ::CDM::AbstractGetResponse& > (i);

    // Lang
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetSupportedLanguagesResponse::LangConstIterator
           b (i.Lang ().begin ()), n (i.Lang ().end ());
           b != n; ++b)
      {
        if (typeid (GetSupportedLanguagesResponse::LangType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Lang",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "Lang",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GetSupportedLanguagesResponse >
  _xsd_GetSupportedLanguagesResponse_type_serializer_init (
    "GetSupportedLanguagesResponse",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const GetDescriptorsFromArchive& i)
  {
    e << static_cast< const ::CDM::AbstractGet& > (i);

    // DescriptorRevision
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.DescriptorRevision ())
      {
        const GetDescriptorsFromArchive::DescriptorRevisionType& x (*i.DescriptorRevision ());
        if (typeid (GetDescriptorsFromArchive::DescriptorRevisionType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DescriptorRevision",
              "http://message-model-uri/15/04",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "DescriptorRevision",
            "http://message-model-uri/15/04",
            false, true, e, x);
      }
    }

    // TimeFrame
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.TimeFrame ())
      {
        const GetDescriptorsFromArchive::TimeFrameType& x (*i.TimeFrame ());
        if (typeid (GetDescriptorsFromArchive::TimeFrameType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeFrame",
              "http://message-model-uri/15/04",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "TimeFrame",
            "http://message-model-uri/15/04",
            false, true, e, x);
      }
    }

    // Handle
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetDescriptorsFromArchive::HandleConstIterator
           b (i.Handle ().begin ()), n (i.Handle ().end ());
           b != n; ++b)
      {
        if (typeid (GetDescriptorsFromArchive::HandleType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Handle",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "Handle",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GetDescriptorsFromArchive >
  _xsd_GetDescriptorsFromArchive_type_serializer_init (
    "GetDescriptorsFromArchive",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const GetDescriptorsFromArchiveResponse& i)
  {
    e << static_cast< const ::CDM::AbstractGetResponse& > (i);

    // Descriptor
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetDescriptorsFromArchiveResponse::DescriptorConstIterator
           b (i.Descriptor ().begin ()), n (i.Descriptor ().end ());
           b != n; ++b)
      {
        if (typeid (GetDescriptorsFromArchiveResponse::DescriptorType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Descriptor",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "Descriptor",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GetDescriptorsFromArchiveResponse >
  _xsd_GetDescriptorsFromArchiveResponse_type_serializer_init (
    "GetDescriptorsFromArchiveResponse",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const GetStatesFromArchive& i)
  {
    e << static_cast< const ::CDM::AbstractGet& > (i);

    // StateRevision
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const GetStatesFromArchive::StateRevisionType& x (i.StateRevision ());
      if (typeid (GetStatesFromArchive::StateRevisionType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "StateRevision",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "StateRevision",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }

    // TimeFrame
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.TimeFrame ())
      {
        const GetStatesFromArchive::TimeFrameType& x (*i.TimeFrame ());
        if (typeid (GetStatesFromArchive::TimeFrameType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeFrame",
              "http://message-model-uri/15/04",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "TimeFrame",
            "http://message-model-uri/15/04",
            false, true, e, x);
      }
    }

    // Handle
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetStatesFromArchive::HandleConstIterator
           b (i.Handle ().begin ()), n (i.Handle ().end ());
           b != n; ++b)
      {
        if (typeid (GetStatesFromArchive::HandleType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Handle",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "Handle",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GetStatesFromArchive >
  _xsd_GetStatesFromArchive_type_serializer_init (
    "GetStatesFromArchive",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const GetStatesFromArchiveResponse& i)
  {
    e << static_cast< const ::CDM::AbstractGet& > (i);

    // State
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetStatesFromArchiveResponse::StateConstIterator
           b (i.State ().begin ()), n (i.State ().end ());
           b != n; ++b)
      {
        if (typeid (GetStatesFromArchiveResponse::StateType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "State",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "State",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GetStatesFromArchiveResponse >
  _xsd_GetStatesFromArchiveResponse_type_serializer_init (
    "GetStatesFromArchiveResponse",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const TimeFrame& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Start
    //
    if (i.Start ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Start",
          e));

      a << *i.Start ();
    }

    // End
    //
    if (i.End ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "End",
          e));

      a << *i.End ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TimeFrame >
  _xsd_TimeFrame_type_serializer_init (
    "TimeFrame",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const TransactionID& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const TransactionID& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const TransactionID& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedInt, char, ::xml_schema::SimpleType >& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TransactionID >
  _xsd_TransactionID_type_serializer_init (
    "TransactionID",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const InvocationState& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const InvocationState& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const InvocationState& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, InvocationState >
  _xsd_InvocationState_type_serializer_init (
    "InvocationState",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const ArgumentType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Extension
    //
    if (i.Extension ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Extension",
          "http://extension-point-uri/15/03",
          e));

      s << *i.Extension ();
    }

    // ArgValue
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const ArgumentType::ArgValueType& x (i.ArgValue ());
      if (typeid (ArgumentType::ArgValueType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ArgValue",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "ArgValue",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ArgumentType >
  _xsd_ArgumentType_type_serializer_init (
    "ArgumentType",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const AbstractSet& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Extension
    //
    if (i.Extension ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Extension",
          "http://extension-point-uri/15/03",
          e));

      s << *i.Extension ();
    }

    // OperationHandleRef
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const AbstractSet::OperationHandleRefType& x (i.OperationHandleRef ());
      if (typeid (AbstractSet::OperationHandleRefType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "OperationHandleRef",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "OperationHandleRef",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AbstractSet >
  _xsd_AbstractSet_type_serializer_init (
    "AbstractSet",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const AbstractSetResponse& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Extension
    //
    if (i.Extension ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Extension",
          "http://extension-point-uri/15/03",
          e));

      s << *i.Extension ();
    }

    // TransactionId
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const AbstractSetResponse::TransactionIdType& x (i.TransactionId ());
      if (typeid (AbstractSetResponse::TransactionIdType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TransactionId",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "TransactionId",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }

    // InvocationState
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const AbstractSetResponse::InvocationStateType& x (i.InvocationState ());
      if (typeid (AbstractSetResponse::InvocationStateType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "InvocationState",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "InvocationState",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }

    // OperationError
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.OperationError ())
      {
        const AbstractSetResponse::OperationErrorType& x (*i.OperationError ());
        if (typeid (AbstractSetResponse::OperationErrorType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OperationError",
              "http://message-model-uri/15/04",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "OperationError",
            "http://message-model-uri/15/04",
            false, true, e, x);
      }
    }

    // OperationErrorMessage
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.OperationErrorMessage ())
      {
        const AbstractSetResponse::OperationErrorMessageType& x (*i.OperationErrorMessage ());
        if (typeid (AbstractSetResponse::OperationErrorMessageType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OperationErrorMessage",
              "http://message-model-uri/15/04",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "OperationErrorMessage",
            "http://message-model-uri/15/04",
            false, true, e, x);
      }
    }

    // MDIBVersion
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "MDIBVersion",
          "http://domain-model-uri/15/04",
          e));

      a << i.MDIBVersion ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AbstractSetResponse >
  _xsd_AbstractSetResponse_type_serializer_init (
    "AbstractSetResponse",
    "http://message-model-uri/15/04");


  void
  SetRange_ (::std::ostream& o,
             const ::CDM::SetRange& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetRange_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetRange_ (::std::ostream& o,
             const ::CDM::SetRange& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetRange_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetRange_ (::std::ostream& o,
             const ::CDM::SetRange& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetRange_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetRange_ (::xercesc::XMLFormatTarget& t,
             const ::CDM::SetRange& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetRange_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetRange_ (::xercesc::XMLFormatTarget& t,
             const ::CDM::SetRange& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetRange_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetRange_ (::xercesc::XMLFormatTarget& t,
             const ::CDM::SetRange& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetRange_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetRange_ (::xercesc::DOMDocument& d,
             const ::CDM::SetRange& s,
             ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetRange" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SetRange",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetRange_ (const ::CDM::SetRange& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SetRange",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SetRange_ (*d, s, f);
    return d;
  }

  void
  SetRangeResponse_ (::std::ostream& o,
                     const ::CDM::SetRangeResponse& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetRangeResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetRangeResponse_ (::std::ostream& o,
                     const ::CDM::SetRangeResponse& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetRangeResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetRangeResponse_ (::std::ostream& o,
                     const ::CDM::SetRangeResponse& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetRangeResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetRangeResponse_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::SetRangeResponse& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetRangeResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetRangeResponse_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::SetRangeResponse& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetRangeResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetRangeResponse_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::SetRangeResponse& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetRangeResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetRangeResponse_ (::xercesc::DOMDocument& d,
                     const ::CDM::SetRangeResponse& s,
                     ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetRangeResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SetRangeResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetRangeResponse_ (const ::CDM::SetRangeResponse& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SetRangeResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SetRangeResponse_ (*d, s, f);
    return d;
  }

  void
  SetValue_ (::std::ostream& o,
             const ::CDM::SetValue& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetValue_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetValue_ (::std::ostream& o,
             const ::CDM::SetValue& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetValue_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetValue_ (::std::ostream& o,
             const ::CDM::SetValue& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetValue_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetValue_ (::xercesc::XMLFormatTarget& t,
             const ::CDM::SetValue& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetValue_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetValue_ (::xercesc::XMLFormatTarget& t,
             const ::CDM::SetValue& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetValue_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetValue_ (::xercesc::XMLFormatTarget& t,
             const ::CDM::SetValue& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetValue_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetValue_ (::xercesc::DOMDocument& d,
             const ::CDM::SetValue& s,
             ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetValue" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SetValue",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetValue_ (const ::CDM::SetValue& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SetValue",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SetValue_ (*d, s, f);
    return d;
  }

  void
  SetValueResponse_ (::std::ostream& o,
                     const ::CDM::SetValueResponse& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetValueResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetValueResponse_ (::std::ostream& o,
                     const ::CDM::SetValueResponse& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetValueResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetValueResponse_ (::std::ostream& o,
                     const ::CDM::SetValueResponse& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetValueResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetValueResponse_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::SetValueResponse& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetValueResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetValueResponse_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::SetValueResponse& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetValueResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetValueResponse_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::SetValueResponse& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetValueResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetValueResponse_ (::xercesc::DOMDocument& d,
                     const ::CDM::SetValueResponse& s,
                     ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetValueResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SetValueResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetValueResponse_ (const ::CDM::SetValueResponse& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SetValueResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SetValueResponse_ (*d, s, f);
    return d;
  }

  void
  SetString_ (::std::ostream& o,
              const ::CDM::SetString& s,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetString_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetString_ (::std::ostream& o,
              const ::CDM::SetString& s,
              ::xml_schema::ErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetString_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetString_ (::std::ostream& o,
              const ::CDM::SetString& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetString_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetString_ (::xercesc::XMLFormatTarget& t,
              const ::CDM::SetString& s,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetString_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetString_ (::xercesc::XMLFormatTarget& t,
              const ::CDM::SetString& s,
              ::xml_schema::ErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetString_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetString_ (::xercesc::XMLFormatTarget& t,
              const ::CDM::SetString& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetString_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetString_ (::xercesc::DOMDocument& d,
              const ::CDM::SetString& s,
              ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetString" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SetString",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetString_ (const ::CDM::SetString& s,
              const ::xml_schema::NamespaceInfomap& m,
              ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SetString",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SetString_ (*d, s, f);
    return d;
  }

  void
  SetStringResponse_ (::std::ostream& o,
                      const ::CDM::SetStringResponse& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetStringResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetStringResponse_ (::std::ostream& o,
                      const ::CDM::SetStringResponse& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetStringResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetStringResponse_ (::std::ostream& o,
                      const ::CDM::SetStringResponse& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetStringResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetStringResponse_ (::xercesc::XMLFormatTarget& t,
                      const ::CDM::SetStringResponse& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetStringResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetStringResponse_ (::xercesc::XMLFormatTarget& t,
                      const ::CDM::SetStringResponse& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetStringResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetStringResponse_ (::xercesc::XMLFormatTarget& t,
                      const ::CDM::SetStringResponse& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetStringResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetStringResponse_ (::xercesc::DOMDocument& d,
                      const ::CDM::SetStringResponse& s,
                      ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetStringResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SetStringResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetStringResponse_ (const ::CDM::SetStringResponse& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SetStringResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SetStringResponse_ (*d, s, f);
    return d;
  }

  void
  SetAlertState_ (::std::ostream& o,
                  const ::CDM::SetAlertState& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetAlertState_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetAlertState_ (::std::ostream& o,
                  const ::CDM::SetAlertState& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetAlertState_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetAlertState_ (::std::ostream& o,
                  const ::CDM::SetAlertState& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetAlertState_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetAlertState_ (::xercesc::XMLFormatTarget& t,
                  const ::CDM::SetAlertState& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetAlertState_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetAlertState_ (::xercesc::XMLFormatTarget& t,
                  const ::CDM::SetAlertState& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetAlertState_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetAlertState_ (::xercesc::XMLFormatTarget& t,
                  const ::CDM::SetAlertState& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetAlertState_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetAlertState_ (::xercesc::DOMDocument& d,
                  const ::CDM::SetAlertState& s,
                  ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetAlertState" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SetAlertState",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetAlertState_ (const ::CDM::SetAlertState& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SetAlertState",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SetAlertState_ (*d, s, f);
    return d;
  }

  void
  SetAlertStateResponse_ (::std::ostream& o,
                          const ::CDM::SetAlertStateResponse& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetAlertStateResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetAlertStateResponse_ (::std::ostream& o,
                          const ::CDM::SetAlertStateResponse& s,
                          ::xml_schema::ErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetAlertStateResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetAlertStateResponse_ (::std::ostream& o,
                          const ::CDM::SetAlertStateResponse& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetAlertStateResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetAlertStateResponse_ (::xercesc::XMLFormatTarget& t,
                          const ::CDM::SetAlertStateResponse& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetAlertStateResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetAlertStateResponse_ (::xercesc::XMLFormatTarget& t,
                          const ::CDM::SetAlertStateResponse& s,
                          ::xml_schema::ErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetAlertStateResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetAlertStateResponse_ (::xercesc::XMLFormatTarget& t,
                          const ::CDM::SetAlertStateResponse& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetAlertStateResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetAlertStateResponse_ (::xercesc::DOMDocument& d,
                          const ::CDM::SetAlertStateResponse& s,
                          ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetAlertStateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SetAlertStateResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetAlertStateResponse_ (const ::CDM::SetAlertStateResponse& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SetAlertStateResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SetAlertStateResponse_ (*d, s, f);
    return d;
  }

  void
  Activate_ (::std::ostream& o,
             const ::CDM::Activate& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::Activate_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Activate_ (::std::ostream& o,
             const ::CDM::Activate& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::Activate_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Activate_ (::std::ostream& o,
             const ::CDM::Activate& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::Activate_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Activate_ (::xercesc::XMLFormatTarget& t,
             const ::CDM::Activate& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::Activate_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Activate_ (::xercesc::XMLFormatTarget& t,
             const ::CDM::Activate& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::Activate_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Activate_ (::xercesc::XMLFormatTarget& t,
             const ::CDM::Activate& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::Activate_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Activate_ (::xercesc::DOMDocument& d,
             const ::CDM::Activate& s,
             ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Activate" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Activate",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Activate_ (const ::CDM::Activate& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "Activate",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::Activate_ (*d, s, f);
    return d;
  }

  void
  ActivateResponse_ (::std::ostream& o,
                     const ::CDM::ActivateResponse& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ActivateResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ActivateResponse_ (::std::ostream& o,
                     const ::CDM::ActivateResponse& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ActivateResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ActivateResponse_ (::std::ostream& o,
                     const ::CDM::ActivateResponse& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ActivateResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ActivateResponse_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::ActivateResponse& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ActivateResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ActivateResponse_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::ActivateResponse& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ActivateResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ActivateResponse_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::ActivateResponse& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ActivateResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ActivateResponse_ (::xercesc::DOMDocument& d,
                     const ::CDM::ActivateResponse& s,
                     ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ActivateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ActivateResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  ActivateResponse_ (const ::CDM::ActivateResponse& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "ActivateResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::ActivateResponse_ (*d, s, f);
    return d;
  }

  void
  SetContextState_ (::std::ostream& o,
                    const ::CDM::SetContextState& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetContextState_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetContextState_ (::std::ostream& o,
                    const ::CDM::SetContextState& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetContextState_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetContextState_ (::std::ostream& o,
                    const ::CDM::SetContextState& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetContextState_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetContextState_ (::xercesc::XMLFormatTarget& t,
                    const ::CDM::SetContextState& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetContextState_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetContextState_ (::xercesc::XMLFormatTarget& t,
                    const ::CDM::SetContextState& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetContextState_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetContextState_ (::xercesc::XMLFormatTarget& t,
                    const ::CDM::SetContextState& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetContextState_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetContextState_ (::xercesc::DOMDocument& d,
                    const ::CDM::SetContextState& s,
                    ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetContextState" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SetContextState",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetContextState_ (const ::CDM::SetContextState& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SetContextState",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SetContextState_ (*d, s, f);
    return d;
  }

  void
  SetContextStateResponse_ (::std::ostream& o,
                            const ::CDM::SetContextStateResponse& s,
                            const ::xml_schema::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetContextStateResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetContextStateResponse_ (::std::ostream& o,
                            const ::CDM::SetContextStateResponse& s,
                            ::xml_schema::ErrorHandler& h,
                            const ::xml_schema::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetContextStateResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetContextStateResponse_ (::std::ostream& o,
                            const ::CDM::SetContextStateResponse& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetContextStateResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetContextStateResponse_ (::xercesc::XMLFormatTarget& t,
                            const ::CDM::SetContextStateResponse& s,
                            const ::xml_schema::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetContextStateResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetContextStateResponse_ (::xercesc::XMLFormatTarget& t,
                            const ::CDM::SetContextStateResponse& s,
                            ::xml_schema::ErrorHandler& h,
                            const ::xml_schema::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetContextStateResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetContextStateResponse_ (::xercesc::XMLFormatTarget& t,
                            const ::CDM::SetContextStateResponse& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetContextStateResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetContextStateResponse_ (::xercesc::DOMDocument& d,
                            const ::CDM::SetContextStateResponse& s,
                            ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetContextStateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SetContextStateResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetContextStateResponse_ (const ::CDM::SetContextStateResponse& s,
                            const ::xml_schema::NamespaceInfomap& m,
                            ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SetContextStateResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SetContextStateResponse_ (*d, s, f);
    return d;
  }

  void
  SetPatientAssociationState_ (::std::ostream& o,
                               const ::CDM::SetPatientAssociationState& s,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetPatientAssociationState_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetPatientAssociationState_ (::std::ostream& o,
                               const ::CDM::SetPatientAssociationState& s,
                               ::xml_schema::ErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetPatientAssociationState_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetPatientAssociationState_ (::std::ostream& o,
                               const ::CDM::SetPatientAssociationState& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetPatientAssociationState_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetPatientAssociationState_ (::xercesc::XMLFormatTarget& t,
                               const ::CDM::SetPatientAssociationState& s,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetPatientAssociationState_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetPatientAssociationState_ (::xercesc::XMLFormatTarget& t,
                               const ::CDM::SetPatientAssociationState& s,
                               ::xml_schema::ErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetPatientAssociationState_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetPatientAssociationState_ (::xercesc::XMLFormatTarget& t,
                               const ::CDM::SetPatientAssociationState& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetPatientAssociationState_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetPatientAssociationState_ (::xercesc::DOMDocument& d,
                               const ::CDM::SetPatientAssociationState& s,
                               ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetPatientAssociationState" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SetPatientAssociationState",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetPatientAssociationState_ (const ::CDM::SetPatientAssociationState& s,
                               const ::xml_schema::NamespaceInfomap& m,
                               ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SetPatientAssociationState",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SetPatientAssociationState_ (*d, s, f);
    return d;
  }

  void
  SetPatientAssociationStateResponse_ (::std::ostream& o,
                                       const ::CDM::SetPatientAssociationStateResponse& s,
                                       const ::xml_schema::NamespaceInfomap& m,
                                       const ::std::string& e,
                                       ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetPatientAssociationStateResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetPatientAssociationStateResponse_ (::std::ostream& o,
                                       const ::CDM::SetPatientAssociationStateResponse& s,
                                       ::xml_schema::ErrorHandler& h,
                                       const ::xml_schema::NamespaceInfomap& m,
                                       const ::std::string& e,
                                       ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetPatientAssociationStateResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetPatientAssociationStateResponse_ (::std::ostream& o,
                                       const ::CDM::SetPatientAssociationStateResponse& s,
                                       ::xercesc::DOMErrorHandler& h,
                                       const ::xml_schema::NamespaceInfomap& m,
                                       const ::std::string& e,
                                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetPatientAssociationStateResponse_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetPatientAssociationStateResponse_ (::xercesc::XMLFormatTarget& t,
                                       const ::CDM::SetPatientAssociationStateResponse& s,
                                       const ::xml_schema::NamespaceInfomap& m,
                                       const ::std::string& e,
                                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetPatientAssociationStateResponse_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SetPatientAssociationStateResponse_ (::xercesc::XMLFormatTarget& t,
                                       const ::CDM::SetPatientAssociationStateResponse& s,
                                       ::xml_schema::ErrorHandler& h,
                                       const ::xml_schema::NamespaceInfomap& m,
                                       const ::std::string& e,
                                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetPatientAssociationStateResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetPatientAssociationStateResponse_ (::xercesc::XMLFormatTarget& t,
                                       const ::CDM::SetPatientAssociationStateResponse& s,
                                       ::xercesc::DOMErrorHandler& h,
                                       const ::xml_schema::NamespaceInfomap& m,
                                       const ::std::string& e,
                                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SetPatientAssociationStateResponse_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SetPatientAssociationStateResponse_ (::xercesc::DOMDocument& d,
                                       const ::CDM::SetPatientAssociationStateResponse& s,
                                       ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SetPatientAssociationStateResponse" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SetPatientAssociationStateResponse",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SetPatientAssociationStateResponse_ (const ::CDM::SetPatientAssociationStateResponse& s,
                                       const ::xml_schema::NamespaceInfomap& m,
                                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SetPatientAssociationStateResponse",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SetPatientAssociationStateResponse_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const AbstractReport& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Extension
    //
    if (i.Extension ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Extension",
          "http://extension-point-uri/15/03",
          e));

      s << *i.Extension ();
    }

    // MDIBVersion
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "MDIBVersion",
          "http://domain-model-uri/15/04",
          e));

      a << i.MDIBVersion ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AbstractReport >
  _xsd_AbstractReport_type_serializer_init (
    "AbstractReport",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const AbstractReportPart& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Extension
    //
    if (i.Extension ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Extension",
          "http://extension-point-uri/15/03",
          e));

      s << *i.Extension ();
    }

    // SourceMDS
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.SourceMDS ())
      {
        const AbstractReportPart::SourceMDSType& x (*i.SourceMDS ());
        if (typeid (AbstractReportPart::SourceMDSType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SourceMDS",
              "http://message-model-uri/15/04",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "SourceMDS",
            "http://message-model-uri/15/04",
            false, true, e, x);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AbstractReportPart >
  _xsd_AbstractReportPart_type_serializer_init (
    "AbstractReportPart",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const MetricReportPart& i)
  {
    e << static_cast< const ::CDM::AbstractReportPart& > (i);

    // MetricState
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (MetricReportPart::MetricStateConstIterator
           b (i.MetricState ().begin ()), n (i.MetricState ().end ());
           b != n; ++b)
      {
        if (typeid (MetricReportPart::MetricStateType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MetricState",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "MetricState",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MetricReportPart >
  _xsd_MetricReportPart_type_serializer_init (
    "MetricReportPart",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const AbstractMetricReport& i)
  {
    e << static_cast< const ::CDM::AbstractReport& > (i);

    // ReportPart
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (AbstractMetricReport::ReportPartConstIterator
           b (i.ReportPart ().begin ()), n (i.ReportPart ().end ());
           b != n; ++b)
      {
        if (typeid (AbstractMetricReport::ReportPartType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportPart",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ReportPart",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AbstractMetricReport >
  _xsd_AbstractMetricReport_type_serializer_init (
    "AbstractMetricReport",
    "http://message-model-uri/15/04");


  void
  PeriodicMetricReport_ (::std::ostream& o,
                         const ::CDM::PeriodicMetricReport& s,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicMetricReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  PeriodicMetricReport_ (::std::ostream& o,
                         const ::CDM::PeriodicMetricReport& s,
                         ::xml_schema::ErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicMetricReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PeriodicMetricReport_ (::std::ostream& o,
                         const ::CDM::PeriodicMetricReport& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicMetricReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PeriodicMetricReport_ (::xercesc::XMLFormatTarget& t,
                         const ::CDM::PeriodicMetricReport& s,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicMetricReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  PeriodicMetricReport_ (::xercesc::XMLFormatTarget& t,
                         const ::CDM::PeriodicMetricReport& s,
                         ::xml_schema::ErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicMetricReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PeriodicMetricReport_ (::xercesc::XMLFormatTarget& t,
                         const ::CDM::PeriodicMetricReport& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicMetricReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PeriodicMetricReport_ (::xercesc::DOMDocument& d,
                         const ::CDM::PeriodicMetricReport& s,
                         ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PeriodicMetricReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PeriodicMetricReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  PeriodicMetricReport_ (const ::CDM::PeriodicMetricReport& s,
                         const ::xml_schema::NamespaceInfomap& m,
                         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "PeriodicMetricReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::PeriodicMetricReport_ (*d, s, f);
    return d;
  }

  void
  EpisodicMetricReport_ (::std::ostream& o,
                         const ::CDM::EpisodicMetricReport& s,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicMetricReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  EpisodicMetricReport_ (::std::ostream& o,
                         const ::CDM::EpisodicMetricReport& s,
                         ::xml_schema::ErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicMetricReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  EpisodicMetricReport_ (::std::ostream& o,
                         const ::CDM::EpisodicMetricReport& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicMetricReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  EpisodicMetricReport_ (::xercesc::XMLFormatTarget& t,
                         const ::CDM::EpisodicMetricReport& s,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicMetricReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  EpisodicMetricReport_ (::xercesc::XMLFormatTarget& t,
                         const ::CDM::EpisodicMetricReport& s,
                         ::xml_schema::ErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicMetricReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  EpisodicMetricReport_ (::xercesc::XMLFormatTarget& t,
                         const ::CDM::EpisodicMetricReport& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicMetricReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  EpisodicMetricReport_ (::xercesc::DOMDocument& d,
                         const ::CDM::EpisodicMetricReport& s,
                         ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "EpisodicMetricReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "EpisodicMetricReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  EpisodicMetricReport_ (const ::CDM::EpisodicMetricReport& s,
                         const ::xml_schema::NamespaceInfomap& m,
                         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "EpisodicMetricReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::EpisodicMetricReport_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const AlertReportPart& i)
  {
    e << static_cast< const ::CDM::AbstractReportPart& > (i);

    // AlertState
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (AlertReportPart::AlertStateConstIterator
           b (i.AlertState ().begin ()), n (i.AlertState ().end ());
           b != n; ++b)
      {
        if (typeid (AlertReportPart::AlertStateType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AlertState",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "AlertState",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AlertReportPart >
  _xsd_AlertReportPart_type_serializer_init (
    "AlertReportPart",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const AbstractAlertReport& i)
  {
    e << static_cast< const ::CDM::AbstractReport& > (i);

    // AlertReportDetail
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (AbstractAlertReport::AlertReportDetailConstIterator
           b (i.AlertReportDetail ().begin ()), n (i.AlertReportDetail ().end ());
           b != n; ++b)
      {
        if (typeid (AbstractAlertReport::AlertReportDetailType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AlertReportDetail",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "AlertReportDetail",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AbstractAlertReport >
  _xsd_AbstractAlertReport_type_serializer_init (
    "AbstractAlertReport",
    "http://message-model-uri/15/04");


  void
  PeriodicAlertReport_ (::std::ostream& o,
                        const ::CDM::PeriodicAlertReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicAlertReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  PeriodicAlertReport_ (::std::ostream& o,
                        const ::CDM::PeriodicAlertReport& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicAlertReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PeriodicAlertReport_ (::std::ostream& o,
                        const ::CDM::PeriodicAlertReport& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicAlertReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PeriodicAlertReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::PeriodicAlertReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicAlertReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  PeriodicAlertReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::PeriodicAlertReport& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicAlertReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PeriodicAlertReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::PeriodicAlertReport& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicAlertReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PeriodicAlertReport_ (::xercesc::DOMDocument& d,
                        const ::CDM::PeriodicAlertReport& s,
                        ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PeriodicAlertReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PeriodicAlertReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  PeriodicAlertReport_ (const ::CDM::PeriodicAlertReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "PeriodicAlertReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::PeriodicAlertReport_ (*d, s, f);
    return d;
  }

  void
  EpisodicAlertReport_ (::std::ostream& o,
                        const ::CDM::EpisodicAlertReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicAlertReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  EpisodicAlertReport_ (::std::ostream& o,
                        const ::CDM::EpisodicAlertReport& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicAlertReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  EpisodicAlertReport_ (::std::ostream& o,
                        const ::CDM::EpisodicAlertReport& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicAlertReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  EpisodicAlertReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::EpisodicAlertReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicAlertReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  EpisodicAlertReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::EpisodicAlertReport& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicAlertReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  EpisodicAlertReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::EpisodicAlertReport& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicAlertReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  EpisodicAlertReport_ (::xercesc::DOMDocument& d,
                        const ::CDM::EpisodicAlertReport& s,
                        ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "EpisodicAlertReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "EpisodicAlertReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  EpisodicAlertReport_ (const ::CDM::EpisodicAlertReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "EpisodicAlertReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::EpisodicAlertReport_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const ContextChangedReportPart& i)
  {
    e << static_cast< const ::CDM::AbstractReportPart& > (i);

    // ChangedContextState
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (ContextChangedReportPart::ChangedContextStateConstIterator
           b (i.ChangedContextState ().begin ()), n (i.ChangedContextState ().end ());
           b != n; ++b)
      {
        if (typeid (ContextChangedReportPart::ChangedContextStateType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ChangedContextState",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ChangedContextState",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ContextChangedReportPart >
  _xsd_ContextChangedReportPart_type_serializer_init (
    "ContextChangedReportPart",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const AbstractContextChangedReport& i)
  {
    e << static_cast< const ::CDM::AbstractReport& > (i);

    // ReportPart
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (AbstractContextChangedReport::ReportPartConstIterator
           b (i.ReportPart ().begin ()), n (i.ReportPart ().end ());
           b != n; ++b)
      {
        if (typeid (AbstractContextChangedReport::ReportPartType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportPart",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ReportPart",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AbstractContextChangedReport >
  _xsd_AbstractContextChangedReport_type_serializer_init (
    "AbstractContextChangedReport",
    "http://message-model-uri/15/04");


  void
  PeriodicContextChangedReport_ (::std::ostream& o,
                                 const ::CDM::PeriodicContextChangedReport& s,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicContextChangedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  PeriodicContextChangedReport_ (::std::ostream& o,
                                 const ::CDM::PeriodicContextChangedReport& s,
                                 ::xml_schema::ErrorHandler& h,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicContextChangedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PeriodicContextChangedReport_ (::std::ostream& o,
                                 const ::CDM::PeriodicContextChangedReport& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicContextChangedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PeriodicContextChangedReport_ (::xercesc::XMLFormatTarget& t,
                                 const ::CDM::PeriodicContextChangedReport& s,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicContextChangedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  PeriodicContextChangedReport_ (::xercesc::XMLFormatTarget& t,
                                 const ::CDM::PeriodicContextChangedReport& s,
                                 ::xml_schema::ErrorHandler& h,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicContextChangedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PeriodicContextChangedReport_ (::xercesc::XMLFormatTarget& t,
                                 const ::CDM::PeriodicContextChangedReport& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::PeriodicContextChangedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PeriodicContextChangedReport_ (::xercesc::DOMDocument& d,
                                 const ::CDM::PeriodicContextChangedReport& s,
                                 ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PeriodicContextChangedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PeriodicContextChangedReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  PeriodicContextChangedReport_ (const ::CDM::PeriodicContextChangedReport& s,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "PeriodicContextChangedReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::PeriodicContextChangedReport_ (*d, s, f);
    return d;
  }

  void
  EpisodicContextChangedReport_ (::std::ostream& o,
                                 const ::CDM::EpisodicContextChangedReport& s,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicContextChangedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  EpisodicContextChangedReport_ (::std::ostream& o,
                                 const ::CDM::EpisodicContextChangedReport& s,
                                 ::xml_schema::ErrorHandler& h,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicContextChangedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  EpisodicContextChangedReport_ (::std::ostream& o,
                                 const ::CDM::EpisodicContextChangedReport& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicContextChangedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  EpisodicContextChangedReport_ (::xercesc::XMLFormatTarget& t,
                                 const ::CDM::EpisodicContextChangedReport& s,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicContextChangedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  EpisodicContextChangedReport_ (::xercesc::XMLFormatTarget& t,
                                 const ::CDM::EpisodicContextChangedReport& s,
                                 ::xml_schema::ErrorHandler& h,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicContextChangedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  EpisodicContextChangedReport_ (::xercesc::XMLFormatTarget& t,
                                 const ::CDM::EpisodicContextChangedReport& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::EpisodicContextChangedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  EpisodicContextChangedReport_ (::xercesc::DOMDocument& d,
                                 const ::CDM::EpisodicContextChangedReport& s,
                                 ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "EpisodicContextChangedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "EpisodicContextChangedReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  EpisodicContextChangedReport_ (const ::CDM::EpisodicContextChangedReport& s,
                                 const ::xml_schema::NamespaceInfomap& m,
                                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "EpisodicContextChangedReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::EpisodicContextChangedReport_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const InvocationError& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const InvocationError& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const InvocationError& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, InvocationError >
  _xsd_InvocationError_type_serializer_init (
    "InvocationError",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const OperationDescriptionModificationReportPart& i)
  {
    e << static_cast< const ::CDM::AbstractReportPart& > (i);

    // OperationDescription
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (OperationDescriptionModificationReportPart::OperationDescriptionConstIterator
           b (i.OperationDescription ().begin ()), n (i.OperationDescription ().end ());
           b != n; ++b)
      {
        if (typeid (OperationDescriptionModificationReportPart::OperationDescriptionType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OperationDescription",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "OperationDescription",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OperationDescriptionModificationReportPart >
  _xsd_OperationDescriptionModificationReportPart_type_serializer_init (
    "OperationDescriptionModificationReportPart",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const OperationDescriptionModificationReport& i)
  {
    e << static_cast< const ::CDM::AbstractReport& > (i);

    // ReportDetail
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (OperationDescriptionModificationReport::ReportDetailConstIterator
           b (i.ReportDetail ().begin ()), n (i.ReportDetail ().end ());
           b != n; ++b)
      {
        if (typeid (OperationDescriptionModificationReport::ReportDetailType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportDetail",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ReportDetail",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OperationDescriptionModificationReport >
  _xsd_OperationDescriptionModificationReport_type_serializer_init (
    "OperationDescriptionModificationReport",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const OperationInvokedReportPart& i)
  {
    e << static_cast< const ::CDM::AbstractReportPart& > (i);

    // TransactionId
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const OperationInvokedReportPart::TransactionIdType& x (i.TransactionId ());
      if (typeid (OperationInvokedReportPart::TransactionIdType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "TransactionId",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "TransactionId",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }

    // OperationHandleRef
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const OperationInvokedReportPart::OperationHandleRefType& x (i.OperationHandleRef ());
      if (typeid (OperationInvokedReportPart::OperationHandleRefType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "OperationHandleRef",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "OperationHandleRef",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }

    // OperationTarget
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.OperationTarget ())
      {
        const OperationInvokedReportPart::OperationTargetType& x (*i.OperationTarget ());
        if (typeid (OperationInvokedReportPart::OperationTargetType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OperationTarget",
              "http://message-model-uri/15/04",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "OperationTarget",
            "http://message-model-uri/15/04",
            false, true, e, x);
      }
    }

    // OperationState
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const OperationInvokedReportPart::OperationStateType& x (i.OperationState ());
      if (typeid (OperationInvokedReportPart::OperationStateType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "OperationState",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "OperationState",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }

    // OperationError
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.OperationError ())
      {
        const OperationInvokedReportPart::OperationErrorType& x (*i.OperationError ());
        if (typeid (OperationInvokedReportPart::OperationErrorType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OperationError",
              "http://message-model-uri/15/04",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "OperationError",
            "http://message-model-uri/15/04",
            false, true, e, x);
      }
    }

    // OperationErrorMessage
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.OperationErrorMessage ())
      {
        const OperationInvokedReportPart::OperationErrorMessageType& x (*i.OperationErrorMessage ());
        if (typeid (OperationInvokedReportPart::OperationErrorMessageType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OperationErrorMessage",
              "http://message-model-uri/15/04",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "OperationErrorMessage",
            "http://message-model-uri/15/04",
            false, true, e, x);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OperationInvokedReportPart >
  _xsd_OperationInvokedReportPart_type_serializer_init (
    "OperationInvokedReportPart",
    "http://message-model-uri/15/04");


  void
  OperationInvokedReport_ (::std::ostream& o,
                           const ::CDM::OperationInvokedReport& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationInvokedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperationInvokedReport_ (::std::ostream& o,
                           const ::CDM::OperationInvokedReport& s,
                           ::xml_schema::ErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationInvokedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationInvokedReport_ (::std::ostream& o,
                           const ::CDM::OperationInvokedReport& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationInvokedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationInvokedReport_ (::xercesc::XMLFormatTarget& t,
                           const ::CDM::OperationInvokedReport& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationInvokedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperationInvokedReport_ (::xercesc::XMLFormatTarget& t,
                           const ::CDM::OperationInvokedReport& s,
                           ::xml_schema::ErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationInvokedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationInvokedReport_ (::xercesc::XMLFormatTarget& t,
                           const ::CDM::OperationInvokedReport& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationInvokedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationInvokedReport_ (::xercesc::DOMDocument& d,
                           const ::CDM::OperationInvokedReport& s,
                           ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperationInvokedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OperationInvokedReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OperationInvokedReport_ (const ::CDM::OperationInvokedReport& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "OperationInvokedReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::OperationInvokedReport_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const OperationalStateChangedReportPart& i)
  {
    e << static_cast< const ::CDM::AbstractReportPart& > (i);

    // Operation
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (OperationalStateChangedReportPart::OperationConstIterator
           b (i.Operation ().begin ()), n (i.Operation ().end ());
           b != n; ++b)
      {
        if (typeid (OperationalStateChangedReportPart::OperationType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Operation",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "Operation",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OperationalStateChangedReportPart >
  _xsd_OperationalStateChangedReportPart_type_serializer_init (
    "OperationalStateChangedReportPart",
    "http://message-model-uri/15/04");


  void
  OperationalStateChangedReport_ (::std::ostream& o,
                                  const ::CDM::OperationalStateChangedReport& s,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationalStateChangedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperationalStateChangedReport_ (::std::ostream& o,
                                  const ::CDM::OperationalStateChangedReport& s,
                                  ::xml_schema::ErrorHandler& h,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationalStateChangedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationalStateChangedReport_ (::std::ostream& o,
                                  const ::CDM::OperationalStateChangedReport& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationalStateChangedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationalStateChangedReport_ (::xercesc::XMLFormatTarget& t,
                                  const ::CDM::OperationalStateChangedReport& s,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationalStateChangedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperationalStateChangedReport_ (::xercesc::XMLFormatTarget& t,
                                  const ::CDM::OperationalStateChangedReport& s,
                                  ::xml_schema::ErrorHandler& h,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationalStateChangedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationalStateChangedReport_ (::xercesc::XMLFormatTarget& t,
                                  const ::CDM::OperationalStateChangedReport& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationalStateChangedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationalStateChangedReport_ (::xercesc::DOMDocument& d,
                                  const ::CDM::OperationalStateChangedReport& s,
                                  ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperationalStateChangedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OperationalStateChangedReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OperationalStateChangedReport_ (const ::CDM::OperationalStateChangedReport& s,
                                  const ::xml_schema::NamespaceInfomap& m,
                                  ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "OperationalStateChangedReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::OperationalStateChangedReport_ (*d, s, f);
    return d;
  }

  void
  OperationCreatedReport_ (::std::ostream& o,
                           const ::CDM::OperationCreatedReport& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationCreatedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperationCreatedReport_ (::std::ostream& o,
                           const ::CDM::OperationCreatedReport& s,
                           ::xml_schema::ErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationCreatedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationCreatedReport_ (::std::ostream& o,
                           const ::CDM::OperationCreatedReport& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationCreatedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationCreatedReport_ (::xercesc::XMLFormatTarget& t,
                           const ::CDM::OperationCreatedReport& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationCreatedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperationCreatedReport_ (::xercesc::XMLFormatTarget& t,
                           const ::CDM::OperationCreatedReport& s,
                           ::xml_schema::ErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationCreatedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationCreatedReport_ (::xercesc::XMLFormatTarget& t,
                           const ::CDM::OperationCreatedReport& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationCreatedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationCreatedReport_ (::xercesc::DOMDocument& d,
                           const ::CDM::OperationCreatedReport& s,
                           ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperationCreatedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OperationCreatedReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OperationCreatedReport_ (const ::CDM::OperationCreatedReport& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "OperationCreatedReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::OperationCreatedReport_ (*d, s, f);
    return d;
  }

  void
  OperationDeletedReport_ (::std::ostream& o,
                           const ::CDM::OperationDeletedReport& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationDeletedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperationDeletedReport_ (::std::ostream& o,
                           const ::CDM::OperationDeletedReport& s,
                           ::xml_schema::ErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationDeletedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationDeletedReport_ (::std::ostream& o,
                           const ::CDM::OperationDeletedReport& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationDeletedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationDeletedReport_ (::xercesc::XMLFormatTarget& t,
                           const ::CDM::OperationDeletedReport& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationDeletedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperationDeletedReport_ (::xercesc::XMLFormatTarget& t,
                           const ::CDM::OperationDeletedReport& s,
                           ::xml_schema::ErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationDeletedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationDeletedReport_ (::xercesc::XMLFormatTarget& t,
                           const ::CDM::OperationDeletedReport& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationDeletedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationDeletedReport_ (::xercesc::DOMDocument& d,
                           const ::CDM::OperationDeletedReport& s,
                           ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperationDeletedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OperationDeletedReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OperationDeletedReport_ (const ::CDM::OperationDeletedReport& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "OperationDeletedReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::OperationDeletedReport_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const DescriptionModificationType& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const DescriptionModificationType& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const DescriptionModificationType& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DescriptionModificationType >
  _xsd_DescriptionModificationType_type_serializer_init (
    "DescriptionModificationType",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const DescriptionModificationReportPart& i)
  {
    e << static_cast< const ::CDM::AbstractReportPart& > (i);

    // Descriptor
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const DescriptionModificationReportPart::DescriptorType& x (i.Descriptor ());
      if (typeid (DescriptionModificationReportPart::DescriptorType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Descriptor",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "Descriptor",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }

    // ParentDescriptor
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "ParentDescriptor",
          e));

      a << i.ParentDescriptor ();
    }

    // ModificationType
    //
    if (i.ModificationType ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "ModificationType",
          e));

      a << *i.ModificationType ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DescriptionModificationReportPart >
  _xsd_DescriptionModificationReportPart_type_serializer_init (
    "DescriptionModificationReportPart",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const DescriptionModificationReport& i)
  {
    e << static_cast< const ::CDM::AbstractReport& > (i);

    // ReportDetail
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DescriptionModificationReport::ReportDetailConstIterator
           b (i.ReportDetail ().begin ()), n (i.ReportDetail ().end ());
           b != n; ++b)
      {
        if (typeid (DescriptionModificationReport::ReportDetailType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportDetail",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ReportDetail",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DescriptionModificationReport >
  _xsd_DescriptionModificationReport_type_serializer_init (
    "DescriptionModificationReport",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const MDSModificationReportPart& i)
  {
    e << static_cast< const ::CDM::AbstractReportPart& > (i);

    // MDS
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (MDSModificationReportPart::MDSConstIterator
           b (i.MDS ().begin ()), n (i.MDS ().end ());
           b != n; ++b)
      {
        if (typeid (MDSModificationReportPart::MDSType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MDS",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "MDS",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MDSModificationReportPart >
  _xsd_MDSModificationReportPart_type_serializer_init (
    "MDSModificationReportPart",
    "http://message-model-uri/15/04");


  void
  operator<< (::xercesc::DOMElement& e, const MDSModificationReport& i)
  {
    e << static_cast< const ::CDM::AbstractReport& > (i);

    // ReportDetail
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (MDSModificationReport::ReportDetailConstIterator
           b (i.ReportDetail ().begin ()), n (i.ReportDetail ().end ());
           b != n; ++b)
      {
        if (typeid (MDSModificationReport::ReportDetailType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportDetail",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ReportDetail",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MDSModificationReport >
  _xsd_MDSModificationReport_type_serializer_init (
    "MDSModificationReport",
    "http://message-model-uri/15/04");


  void
  ObjectCreatedReport_ (::std::ostream& o,
                        const ::CDM::ObjectCreatedReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectCreatedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ObjectCreatedReport_ (::std::ostream& o,
                        const ::CDM::ObjectCreatedReport& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectCreatedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ObjectCreatedReport_ (::std::ostream& o,
                        const ::CDM::ObjectCreatedReport& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectCreatedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ObjectCreatedReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::ObjectCreatedReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectCreatedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ObjectCreatedReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::ObjectCreatedReport& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectCreatedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ObjectCreatedReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::ObjectCreatedReport& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectCreatedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ObjectCreatedReport_ (::xercesc::DOMDocument& d,
                        const ::CDM::ObjectCreatedReport& s,
                        ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ObjectCreatedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ObjectCreatedReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  ObjectCreatedReport_ (const ::CDM::ObjectCreatedReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "ObjectCreatedReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::ObjectCreatedReport_ (*d, s, f);
    return d;
  }

  void
  ObjectUpdatedReport_ (::std::ostream& o,
                        const ::CDM::ObjectUpdatedReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectUpdatedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ObjectUpdatedReport_ (::std::ostream& o,
                        const ::CDM::ObjectUpdatedReport& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectUpdatedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ObjectUpdatedReport_ (::std::ostream& o,
                        const ::CDM::ObjectUpdatedReport& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectUpdatedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ObjectUpdatedReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::ObjectUpdatedReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectUpdatedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ObjectUpdatedReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::ObjectUpdatedReport& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectUpdatedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ObjectUpdatedReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::ObjectUpdatedReport& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectUpdatedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ObjectUpdatedReport_ (::xercesc::DOMDocument& d,
                        const ::CDM::ObjectUpdatedReport& s,
                        ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ObjectUpdatedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ObjectUpdatedReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  ObjectUpdatedReport_ (const ::CDM::ObjectUpdatedReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "ObjectUpdatedReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::ObjectUpdatedReport_ (*d, s, f);
    return d;
  }

  void
  ObjectDeletedReport_ (::std::ostream& o,
                        const ::CDM::ObjectDeletedReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectDeletedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ObjectDeletedReport_ (::std::ostream& o,
                        const ::CDM::ObjectDeletedReport& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectDeletedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ObjectDeletedReport_ (::std::ostream& o,
                        const ::CDM::ObjectDeletedReport& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectDeletedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ObjectDeletedReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::ObjectDeletedReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectDeletedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ObjectDeletedReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::ObjectDeletedReport& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectDeletedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ObjectDeletedReport_ (::xercesc::XMLFormatTarget& t,
                        const ::CDM::ObjectDeletedReport& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::ObjectDeletedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ObjectDeletedReport_ (::xercesc::DOMDocument& d,
                        const ::CDM::ObjectDeletedReport& s,
                        ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ObjectDeletedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ObjectDeletedReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  ObjectDeletedReport_ (const ::CDM::ObjectDeletedReport& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "ObjectDeletedReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::ObjectDeletedReport_ (*d, s, f);
    return d;
  }

  void
  MDSCreatedReport_ (::std::ostream& o,
                     const ::CDM::MDSCreatedReport& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::MDSCreatedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  MDSCreatedReport_ (::std::ostream& o,
                     const ::CDM::MDSCreatedReport& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::MDSCreatedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MDSCreatedReport_ (::std::ostream& o,
                     const ::CDM::MDSCreatedReport& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::MDSCreatedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MDSCreatedReport_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::MDSCreatedReport& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::MDSCreatedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  MDSCreatedReport_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::MDSCreatedReport& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::MDSCreatedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MDSCreatedReport_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::MDSCreatedReport& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::MDSCreatedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MDSCreatedReport_ (::xercesc::DOMDocument& d,
                     const ::CDM::MDSCreatedReport& s,
                     ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MDSCreatedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MDSCreatedReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  MDSCreatedReport_ (const ::CDM::MDSCreatedReport& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "MDSCreatedReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::MDSCreatedReport_ (*d, s, f);
    return d;
  }

  void
  MDSDeletedReport_ (::std::ostream& o,
                     const ::CDM::MDSDeletedReport& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::MDSDeletedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  MDSDeletedReport_ (::std::ostream& o,
                     const ::CDM::MDSDeletedReport& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::MDSDeletedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MDSDeletedReport_ (::std::ostream& o,
                     const ::CDM::MDSDeletedReport& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::MDSDeletedReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MDSDeletedReport_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::MDSDeletedReport& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::MDSDeletedReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  MDSDeletedReport_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::MDSDeletedReport& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::MDSDeletedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MDSDeletedReport_ (::xercesc::XMLFormatTarget& t,
                     const ::CDM::MDSDeletedReport& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::MDSDeletedReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MDSDeletedReport_ (::xercesc::DOMDocument& d,
                     const ::CDM::MDSDeletedReport& s,
                     ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MDSDeletedReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MDSDeletedReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  MDSDeletedReport_ (const ::CDM::MDSDeletedReport& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "MDSDeletedReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::MDSDeletedReport_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const SystemErrorReportReportPart& i)
  {
    e << static_cast< const ::CDM::AbstractReportPart& > (i);

    // ErrorCode
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const SystemErrorReportReportPart::ErrorCodeType& x (i.ErrorCode ());
      if (typeid (SystemErrorReportReportPart::ErrorCodeType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ErrorCode",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "ErrorCode",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }

    // ErrorInfo
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.ErrorInfo ())
      {
        const SystemErrorReportReportPart::ErrorInfoType& x (*i.ErrorInfo ());
        if (typeid (SystemErrorReportReportPart::ErrorInfoType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ErrorInfo",
              "http://message-model-uri/15/04",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "ErrorInfo",
            "http://message-model-uri/15/04",
            false, true, e, x);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SystemErrorReportReportPart >
  _xsd_SystemErrorReportReportPart_type_serializer_init (
    "SystemErrorReportReportPart",
    "http://message-model-uri/15/04");


  void
  SystemErrorReport_ (::std::ostream& o,
                      const ::CDM::SystemErrorReport& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SystemErrorReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SystemErrorReport_ (::std::ostream& o,
                      const ::CDM::SystemErrorReport& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SystemErrorReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SystemErrorReport_ (::std::ostream& o,
                      const ::CDM::SystemErrorReport& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SystemErrorReport_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SystemErrorReport_ (::xercesc::XMLFormatTarget& t,
                      const ::CDM::SystemErrorReport& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SystemErrorReport_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SystemErrorReport_ (::xercesc::XMLFormatTarget& t,
                      const ::CDM::SystemErrorReport& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SystemErrorReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SystemErrorReport_ (::xercesc::XMLFormatTarget& t,
                      const ::CDM::SystemErrorReport& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::SystemErrorReport_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SystemErrorReport_ (::xercesc::DOMDocument& d,
                      const ::CDM::SystemErrorReport& s,
                      ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SystemErrorReport" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SystemErrorReport",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SystemErrorReport_ (const ::CDM::SystemErrorReport& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "SystemErrorReport",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::SystemErrorReport_ (*d, s, f);
    return d;
  }

  void
  WaveformStream_ (::std::ostream& o,
                   const ::CDM::WaveformStream& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::WaveformStream_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  WaveformStream_ (::std::ostream& o,
                   const ::CDM::WaveformStream& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::WaveformStream_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  WaveformStream_ (::std::ostream& o,
                   const ::CDM::WaveformStream& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::WaveformStream_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  WaveformStream_ (::xercesc::XMLFormatTarget& t,
                   const ::CDM::WaveformStream& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::WaveformStream_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  WaveformStream_ (::xercesc::XMLFormatTarget& t,
                   const ::CDM::WaveformStream& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::WaveformStream_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  WaveformStream_ (::xercesc::XMLFormatTarget& t,
                   const ::CDM::WaveformStream& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::WaveformStream_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  WaveformStream_ (::xercesc::DOMDocument& d,
                   const ::CDM::WaveformStream& s,
                   ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "WaveformStream" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WaveformStream",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  WaveformStream_ (const ::CDM::WaveformStream& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "WaveformStream",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::WaveformStream_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const StreamElement& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Value
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.Value ())
      {
        const StreamElement::ValueType& x (*i.Value ());
        if (typeid (StreamElement::ValueType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Value",
              "http://message-model-uri/15/04",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Value",
            "http://message-model-uri/15/04",
            false, true, e, x);
      }
    }

    // Metric
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Metric",
          e));

      a << i.Metric ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StreamElement >
  _xsd_StreamElement_type_serializer_init (
    "StreamElement",
    "http://message-model-uri/15/04");


  void
  OVStream_ (::std::ostream& o,
             const ::CDM::OVStream& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OVStream_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OVStream_ (::std::ostream& o,
             const ::CDM::OVStream& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OVStream_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OVStream_ (::std::ostream& o,
             const ::CDM::OVStream& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OVStream_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OVStream_ (::xercesc::XMLFormatTarget& t,
             const ::CDM::OVStream& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OVStream_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OVStream_ (::xercesc::XMLFormatTarget& t,
             const ::CDM::OVStream& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OVStream_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OVStream_ (::xercesc::XMLFormatTarget& t,
             const ::CDM::OVStream& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OVStream_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OVStream_ (::xercesc::DOMDocument& d,
             const ::CDM::OVStream& s,
             ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OVStream" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OVStream",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OVStream_ (const ::CDM::OVStream& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "OVStream",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::OVStream_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const MetricRetrievability& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const MetricRetrievability& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const MetricRetrievability& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MetricRetrievability >
  _xsd_MetricRetrievability_type_serializer_init (
    "MetricRetrievability",
    "http://message-model-uri/15/04");


  void
  Retrievability_ (::std::ostream& o,
                   const ::CDM::Retrievability& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::Retrievability_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Retrievability_ (::std::ostream& o,
                   const ::CDM::Retrievability& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::Retrievability_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Retrievability_ (::std::ostream& o,
                   const ::CDM::Retrievability& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::Retrievability_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Retrievability_ (::xercesc::XMLFormatTarget& t,
                   const ::CDM::Retrievability& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::Retrievability_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Retrievability_ (::xercesc::XMLFormatTarget& t,
                   const ::CDM::Retrievability& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::Retrievability_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Retrievability_ (::xercesc::XMLFormatTarget& t,
                   const ::CDM::Retrievability& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::Retrievability_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Retrievability_ (::xercesc::DOMDocument& d,
                   const ::CDM::Retrievability& s,
                   ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Retrievability" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Retrievability",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Retrievability_ (const ::CDM::Retrievability& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "Retrievability",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::Retrievability_ (*d, s, f);
    return d;
  }

  void
  OperationReference_ (::std::ostream& o,
                       const ::CDM::OperationReference& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationReference_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperationReference_ (::std::ostream& o,
                       const ::CDM::OperationReference& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationReference_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationReference_ (::std::ostream& o,
                       const ::CDM::OperationReference& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationReference_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationReference_ (::xercesc::XMLFormatTarget& t,
                       const ::CDM::OperationReference& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationReference_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperationReference_ (::xercesc::XMLFormatTarget& t,
                       const ::CDM::OperationReference& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationReference_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationReference_ (::xercesc::XMLFormatTarget& t,
                       const ::CDM::OperationReference& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::CDM::OperationReference_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperationReference_ (::xercesc::DOMDocument& d,
                       const ::CDM::OperationReference& s,
                       ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperationReference" &&
        n.namespace_ () == "http://message-model-uri/15/04")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OperationReference",
        "http://message-model-uri/15/04");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  OperationReference_ (const ::CDM::OperationReference& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "OperationReference",
        "http://message-model-uri/15/04",
        m, f));

    ::CDM::OperationReference_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetMDIB& i)
  {
    e << static_cast< const ::CDM::AbstractGet& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetMDIBResponse& i)
  {
    e << static_cast< const ::CDM::AbstractGetResponse& > (i);

    // MDIB
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const GetMDIBResponse::MDIBType& x (i.MDIB ());
      if (typeid (GetMDIBResponse::MDIBType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MDIB",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "MDIB",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetMDDescription& i)
  {
    e << static_cast< const ::CDM::AbstractGet& > (i);

    // HandleRef
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetMDDescription::HandleRefConstIterator
           b (i.HandleRef ().begin ()), n (i.HandleRef ().end ());
           b != n; ++b)
      {
        if (typeid (GetMDDescription::HandleRefType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HandleRef",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "HandleRef",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetMDDescriptionResponse& i)
  {
    e << static_cast< const ::CDM::AbstractGetResponse& > (i);

    // StaticDescription
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const GetMDDescriptionResponse::StaticDescriptionType& x (i.StaticDescription ());
      if (typeid (GetMDDescriptionResponse::StaticDescriptionType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "StaticDescription",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "StaticDescription",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetMDState& i)
  {
    e << static_cast< const ::CDM::AbstractGet& > (i);

    // HandleRef
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetMDState::HandleRefConstIterator
           b (i.HandleRef ().begin ()), n (i.HandleRef ().end ());
           b != n; ++b)
      {
        if (typeid (GetMDState::HandleRefType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HandleRef",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "HandleRef",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetMDStateResponse& i)
  {
    e << static_cast< const ::CDM::AbstractGetResponse& > (i);

    // MDState
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const GetMDStateResponse::MDStateType& x (i.MDState ());
      if (typeid (GetMDStateResponse::MDStateType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MDState",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "MDState",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetContextStates& i)
  {
    e << static_cast< const ::CDM::AbstractGet& > (i);

    // HandleRef
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetContextStates::HandleRefConstIterator
           b (i.HandleRef ().begin ()), n (i.HandleRef ().end ());
           b != n; ++b)
      {
        if (typeid (GetContextStates::HandleRefType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HandleRef",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "HandleRef",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetContextStatesResponse& i)
  {
    e << static_cast< const ::CDM::AbstractGetResponse& > (i);

    // ContextState
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetContextStatesResponse::ContextStateConstIterator
           b (i.ContextState ().begin ()), n (i.ContextState ().end ());
           b != n; ++b)
      {
        if (typeid (GetContextStatesResponse::ContextStateType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContextState",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ContextState",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetContainmentTree& i)
  {
    e << static_cast< const ::CDM::AbstractGet& > (i);

    // HandleRef
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetContainmentTree::HandleRefConstIterator
           b (i.HandleRef ().begin ()), n (i.HandleRef ().end ());
           b != n; ++b)
      {
        if (typeid (GetContainmentTree::HandleRefType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HandleRef",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "HandleRef",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetContainmentTreeResponse& i)
  {
    e << static_cast< const ::CDM::AbstractGetResponse& > (i);

    // ContainmentTree
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const GetContainmentTreeResponse::ContainmentTreeType& x (i.ContainmentTree ());
      if (typeid (GetContainmentTreeResponse::ContainmentTreeType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ContainmentTree",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "ContainmentTree",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetDescriptor& i)
  {
    e << static_cast< const ::CDM::AbstractGet& > (i);

    // HandleRef
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetDescriptor::HandleRefConstIterator
           b (i.HandleRef ().begin ()), n (i.HandleRef ().end ());
           b != n; ++b)
      {
        if (typeid (GetDescriptor::HandleRefType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HandleRef",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "HandleRef",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const GetDescriptorResponse& i)
  {
    e << static_cast< const ::CDM::AbstractGetResponse& > (i);

    // Descriptor
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (GetDescriptorResponse::DescriptorConstIterator
           b (i.Descriptor ().begin ()), n (i.Descriptor ().end ());
           b != n; ++b)
      {
        if (typeid (GetDescriptorResponse::DescriptorType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Descriptor",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "Descriptor",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Text& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);

    // Lang
    //
    if (i.Lang ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Lang",
          e));

      a << *i.Lang ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SetRange& i)
  {
    e << static_cast< const ::CDM::AbstractSet& > (i);

    // RequestedRange
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const SetRange::RequestedRangeType& x (i.RequestedRange ());
      if (typeid (SetRange::RequestedRangeType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RequestedRange",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "RequestedRange",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SetRangeResponse& i)
  {
    e << static_cast< const ::CDM::AbstractSetResponse& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const SetValue& i)
  {
    e << static_cast< const ::CDM::AbstractSet& > (i);

    // RequestedNumericValue
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "RequestedNumericValue",
          "http://message-model-uri/15/04",
          e));

      s << ::xml_schema::AsDecimal(i.RequestedNumericValue ());
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SetValueResponse& i)
  {
    e << static_cast< const ::CDM::AbstractSetResponse& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const SetString& i)
  {
    e << static_cast< const ::CDM::AbstractSet& > (i);

    // RequestedStringValue
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const SetString::RequestedStringValueType& x (i.RequestedStringValue ());
      if (typeid (SetString::RequestedStringValueType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RequestedStringValue",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "RequestedStringValue",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SetStringResponse& i)
  {
    e << static_cast< const ::CDM::AbstractSetResponse& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const SetAlertState& i)
  {
    e << static_cast< const ::CDM::AbstractSet& > (i);

    // RequestedAlertState
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const SetAlertState::RequestedAlertStateType& x (i.RequestedAlertState ());
      if (typeid (SetAlertState::RequestedAlertStateType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RequestedAlertState",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "RequestedAlertState",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SetAlertStateResponse& i)
  {
    e << static_cast< const ::CDM::AbstractSetResponse& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Activate& i)
  {
    e << static_cast< const ::CDM::AbstractSet& > (i);

    // Argument
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (Activate::ArgumentConstIterator
           b (i.Argument ().begin ()), n (i.Argument ().end ());
           b != n; ++b)
      {
        if (typeid (Activate::ArgumentType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Argument",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "Argument",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const ActivateResponse& i)
  {
    e << static_cast< const ::CDM::AbstractSetResponse& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const SetContextState& i)
  {
    e << static_cast< const ::CDM::AbstractSet& > (i);

    // ProposedContextState
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (SetContextState::ProposedContextStateConstIterator
           b (i.ProposedContextState ().begin ()), n (i.ProposedContextState ().end ());
           b != n; ++b)
      {
        if (typeid (SetContextState::ProposedContextStateType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProposedContextState",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ProposedContextState",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SetContextStateResponse& i)
  {
    e << static_cast< const ::CDM::AbstractSetResponse& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const SetPatientAssociationState& i)
  {
    e << static_cast< const ::CDM::AbstractSet& > (i);

    // RequestedAssociation
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const SetPatientAssociationState::RequestedAssociationType& x (i.RequestedAssociation ());
      if (typeid (SetPatientAssociationState::RequestedAssociationType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "RequestedAssociation",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "RequestedAssociation",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SetPatientAssociationStateResponse& i)
  {
    e << static_cast< const ::CDM::AbstractSetResponse& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const PeriodicMetricReport& i)
  {
    e << static_cast< const ::CDM::AbstractMetricReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const EpisodicMetricReport& i)
  {
    e << static_cast< const ::CDM::AbstractMetricReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const PeriodicAlertReport& i)
  {
    e << static_cast< const ::CDM::AbstractAlertReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const EpisodicAlertReport& i)
  {
    e << static_cast< const ::CDM::AbstractAlertReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const PeriodicContextChangedReport& i)
  {
    e << static_cast< const ::CDM::AbstractContextChangedReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const EpisodicContextChangedReport& i)
  {
    e << static_cast< const ::CDM::AbstractContextChangedReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const OperationInvokedReport& i)
  {
    e << static_cast< const ::CDM::AbstractReport& > (i);

    // ReportDetail
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (OperationInvokedReport::ReportDetailConstIterator
           b (i.ReportDetail ().begin ()), n (i.ReportDetail ().end ());
           b != n; ++b)
      {
        if (typeid (OperationInvokedReport::ReportDetailType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportDetail",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ReportDetail",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OperationalStateChangedReport& i)
  {
    e << static_cast< const ::CDM::AbstractReport& > (i);

    // ReportDetail
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (OperationalStateChangedReport::ReportDetailConstIterator
           b (i.ReportDetail ().begin ()), n (i.ReportDetail ().end ());
           b != n; ++b)
      {
        if (typeid (OperationalStateChangedReport::ReportDetailType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportDetail",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ReportDetail",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OperationCreatedReport& i)
  {
    e << static_cast< const ::CDM::OperationDescriptionModificationReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const OperationDeletedReport& i)
  {
    e << static_cast< const ::CDM::OperationDescriptionModificationReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const ObjectCreatedReport& i)
  {
    e << static_cast< const ::CDM::DescriptionModificationReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const ObjectUpdatedReport& i)
  {
    e << static_cast< const ::CDM::DescriptionModificationReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const ObjectDeletedReport& i)
  {
    e << static_cast< const ::CDM::DescriptionModificationReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const MDSCreatedReport& i)
  {
    e << static_cast< const ::CDM::MDSModificationReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const MDSDeletedReport& i)
  {
    e << static_cast< const ::CDM::MDSModificationReport& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const SystemErrorReport& i)
  {
    e << static_cast< const ::CDM::AbstractReport& > (i);

    // ReportDetail
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (SystemErrorReport::ReportDetailConstIterator
           b (i.ReportDetail ().begin ()), n (i.ReportDetail ().end ());
           b != n; ++b)
      {
        if (typeid (SystemErrorReport::ReportDetailType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportDetail",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ReportDetail",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const WaveformStream& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Extension
    //
    if (i.Extension ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Extension",
          "http://extension-point-uri/15/03",
          e));

      s << *i.Extension ();
    }

    // RealTimeSampleArray
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (WaveformStream::RealTimeSampleArrayConstIterator
           b (i.RealTimeSampleArray ().begin ()), n (i.RealTimeSampleArray ().end ());
           b != n; ++b)
      {
        if (typeid (WaveformStream::RealTimeSampleArrayType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RealTimeSampleArray",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "RealTimeSampleArray",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OVStream& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Extension
    //
    if (i.Extension ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Extension",
          "http://extension-point-uri/15/03",
          e));

      s << *i.Extension ();
    }

    // Value
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (OVStream::ValueConstIterator
           b (i.Value ().begin ()), n (i.Value ().end ());
           b != n; ++b)
      {
        if (typeid (OVStream::ValueType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Value",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "Value",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Retrievability& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // By
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (Retrievability::ByConstIterator
           b (i.By ().begin ()), n (i.By ().end ());
           b != n; ++b)
      {
        if (typeid (Retrievability::ByType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "By",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "By",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OperationReference& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // ServiceID
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (OperationReference::ServiceIDConstIterator
           b (i.ServiceID ().begin ()), n (i.ServiceID ().end ());
           b != n; ++b)
      {
        if (typeid (OperationReference::ServiceIDType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ServiceID",
              "http://message-model-uri/15/04",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ServiceID",
            "http://message-model-uri/15/04",
            false, true, e, *b);
      }
    }

    // Action
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const OperationReference::ActionType& x (i.Action ());
      if (typeid (OperationReference::ActionType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Action",
            "http://message-model-uri/15/04",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "Action",
          "http://message-model-uri/15/04",
          false, true, e, x);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

