// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from MetadataExchange.xsd.
 */

#ifndef METADATA_EXCHANGE_HXX
#define METADATA_EXCHANGE_HXX

#include "DataModel/MetadataExchange-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "DataModel/wsdd-dpws-1.1-schema-os.hxx"

#include "DataModel/MDPWS.hxx"

namespace WS
{
  /**
   * @brief C++ namespace for the %http://schemas.xmlsoap.org/ws/2004/09/mex
   * schema namespace.
   */
  namespace MEX
  {
    /**
     * @brief Class corresponding to the %GetMetadata schema type.
     *
     * @nosubgrouping
     */
    class GetMetadata: public ::xml_schema::Type
    {
      public:
      /**
       * @name Dialect
       *
       * @brief Accessor and modifier functions for the %Dialect
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Uri DialectType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< DialectType > DialectOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DialectType, char > DialectTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const DialectOptional&
      getDialect () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      DialectOptional&
      getDialect ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setDialect (const DialectType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      setDialect (const DialectOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      setDialect (::std::unique_ptr< DialectType > p);

      //@}

      /**
       * @name Identifier
       *
       * @brief Accessor and modifier functions for the %Identifier
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Uri IdentifierType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdentifierType > IdentifierOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdentifierType, char > IdentifierTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdentifierOptional&
      getIdentifier () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      IdentifierOptional&
      getIdentifier ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setIdentifier (const IdentifierType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      setIdentifier (const IdentifierOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      setIdentifier (::std::unique_ptr< IdentifierType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      GetMetadata ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      GetMetadata (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      GetMetadata (const GetMetadata& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual GetMetadata*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      GetMetadata&
      operator= (const GetMetadata& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~GetMetadata ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      DialectOptional Dialect_;
      IdentifierOptional Identifier_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %Metadata schema type.
     *
     * @nosubgrouping
     */
    class Metadata: public ::xml_schema::Type
    {
      public:
      /**
       * @name MetadataSection
       *
       * @brief Accessor and modifier functions for the %MetadataSection
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::WS::MEX::MetadataSection MetadataSectionType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< MetadataSectionType > MetadataSectionSequence;

      /**
       * @brief Element iterator type.
       */
      typedef MetadataSectionSequence::iterator MetadataSectionIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef MetadataSectionSequence::const_iterator MetadataSectionConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< MetadataSectionType, char > MetadataSectionTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const MetadataSectionSequence&
      getMetadataSection () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      MetadataSectionSequence&
      getMetadataSection ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      setMetadataSection (const MetadataSectionSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Metadata ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Metadata (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Metadata (const Metadata& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Metadata*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Metadata&
      operator= (const Metadata& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Metadata ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      MetadataSectionSequence MetadataSection_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %MetadataSection schema type.
     *
     * @nosubgrouping
     */
    class MetadataSection: public ::xml_schema::Type
    {
      public:
      /**
       * @name MetadataReference
       *
       * @brief Accessor and modifier functions for the %MetadataReference
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::WS::MEX::MetadataReference MetadataReferenceType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< MetadataReferenceType > MetadataReferenceOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< MetadataReferenceType, char > MetadataReferenceTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const MetadataReferenceOptional&
      getMetadataReference () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      MetadataReferenceOptional&
      getMetadataReference ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setMetadataReference (const MetadataReferenceType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      setMetadataReference (const MetadataReferenceOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      setMetadataReference (::std::unique_ptr< MetadataReferenceType > p);

      //@}

      /**
       * @name Location
       *
       * @brief Accessor and modifier functions for the %Location
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Uri LocationType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< LocationType > LocationOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< LocationType, char > LocationTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const LocationOptional&
      getLocation () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      LocationOptional&
      getLocation ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setLocation (const LocationType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      setLocation (const LocationOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      setLocation (::std::unique_ptr< LocationType > p);

      //@}

      /**
       * @name ThisModel
       *
       * @brief Accessor and modifier functions for the %ThisModel
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::WS::DPWS::ThisModelType ThisModelType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< ThisModelType > ThisModelOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ThisModelType, char > ThisModelTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const ThisModelOptional&
      getThisModel () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      ThisModelOptional&
      getThisModel ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setThisModel (const ThisModelType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      setThisModel (const ThisModelOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      setThisModel (::std::unique_ptr< ThisModelType > p);

      //@}

      /**
       * @name ThisDevice
       *
       * @brief Accessor and modifier functions for the %ThisDevice
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::WS::DPWS::ThisDeviceType ThisDeviceType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< ThisDeviceType > ThisDeviceOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ThisDeviceType, char > ThisDeviceTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const ThisDeviceOptional&
      getThisDevice () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      ThisDeviceOptional&
      getThisDevice ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setThisDevice (const ThisDeviceType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      setThisDevice (const ThisDeviceOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      setThisDevice (::std::unique_ptr< ThisDeviceType > p);

      //@}

      /**
       * @name Relationship
       *
       * @brief Accessor and modifier functions for the %Relationship
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::WS::DPWS::Relationship RelationshipType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< RelationshipType > RelationshipOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< RelationshipType, char > RelationshipTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const RelationshipOptional&
      getRelationship () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      RelationshipOptional&
      getRelationship ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setRelationship (const RelationshipType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      setRelationship (const RelationshipOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      setRelationship (::std::unique_ptr< RelationshipType > p);

      //@}

      /**
       * @name StreamDescriptions
       *
       * @brief Accessor and modifier functions for the %StreamDescriptions
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::MDPWS::StreamDescriptionsType StreamDescriptionsType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< StreamDescriptionsType > StreamDescriptionsOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< StreamDescriptionsType, char > StreamDescriptionsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const StreamDescriptionsOptional&
      getStreamDescriptions () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      StreamDescriptionsOptional&
      getStreamDescriptions ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setStreamDescriptions (const StreamDescriptionsType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      setStreamDescriptions (const StreamDescriptionsOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      setStreamDescriptions (::std::unique_ptr< StreamDescriptionsType > p);

      //@}

      /**
       * @name Dialect
       *
       * @brief Accessor and modifier functions for the %Dialect
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Uri DialectType;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< DialectType, char > DialectTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const DialectType&
      getDialect () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      DialectType&
      getDialect ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      setDialect (const DialectType& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      setDialect (::std::unique_ptr< DialectType > p);

      //@}

      /**
       * @name Identifier
       *
       * @brief Accessor and modifier functions for the %Identifier
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Uri IdentifierType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< IdentifierType > IdentifierOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdentifierType, char > IdentifierTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const IdentifierOptional&
      getIdentifier () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      IdentifierOptional&
      getIdentifier ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      setIdentifier (const IdentifierType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      setIdentifier (const IdentifierOptional& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      setIdentifier (::std::unique_ptr< IdentifierType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      MetadataSection (const DialectType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      MetadataSection (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      MetadataSection (const MetadataSection& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual MetadataSection*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      MetadataSection&
      operator= (const MetadataSection& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~MetadataSection ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      MetadataReferenceOptional MetadataReference_;
      LocationOptional Location_;
      ThisModelOptional ThisModel_;
      ThisDeviceOptional ThisDevice_;
      RelationshipOptional Relationship_;
      StreamDescriptionsOptional StreamDescriptions_;
      ::xsd::cxx::tree::one< DialectType > Dialect_;
      IdentifierOptional Identifier_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %MetadataReference schema type.
     *
     * @nosubgrouping
     */
    class MetadataReference: public ::xml_schema::Type
    {
      public:
      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      MetadataReference ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      MetadataReference (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      MetadataReference (const MetadataReference& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual MetadataReference*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~MetadataReference ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:

      //@endcond
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace WS
{
  namespace MEX
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace WS
{
  namespace MEX
  {
    void
    operator<< (::xercesc::DOMElement&, const GetMetadata&);

    void
    operator<< (::xercesc::DOMElement&, const Metadata&);

    void
    operator<< (::xercesc::DOMElement&, const MetadataSection&);

    void
    operator<< (::xercesc::DOMElement&, const MetadataReference&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // METADATA_EXCHANGE_HXX
