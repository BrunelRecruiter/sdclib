// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef EVENTING_HXX
#define EVENTING_HXX

#include "DataModel/eventing-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "DataModel/ws-addressing.hxx"

namespace WS
{
  namespace EVENTING
  {
    class DeliveryType: public ::xml_schema::Type
    {
      public:
      // NotifyTo
      //
      typedef ::WS::ADDRESSING::EndpointReferenceType NotifyToType;
      typedef ::xsd::cxx::tree::traits< NotifyToType, char > NotifyToTraits;

      const NotifyToType&
      NotifyTo () const;

      NotifyToType&
      NotifyTo ();

      void
      NotifyTo (const NotifyToType& x);

      void
      NotifyTo (::std::unique_ptr< NotifyToType > p);

      // Mode
      //
      typedef ::xml_schema::Uri ModeType;
      typedef ::xsd::cxx::tree::optional< ModeType > ModeOptional;
      typedef ::xsd::cxx::tree::traits< ModeType, char > ModeTraits;

      const ModeOptional&
      Mode () const;

      ModeOptional&
      Mode ();

      void
      Mode (const ModeType& x);

      void
      Mode (const ModeOptional& x);

      void
      Mode (::std::unique_ptr< ModeType > p);

      // Constructors.
      //
      DeliveryType (const NotifyToType&);

      DeliveryType (::std::unique_ptr< NotifyToType >);

      DeliveryType (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      DeliveryType (const DeliveryType& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      virtual DeliveryType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      DeliveryType&
      operator= (const DeliveryType& x);

      virtual 
      ~DeliveryType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< NotifyToType > NotifyTo_;
      ModeOptional Mode_;
    };

    class NonNegativeDurationType: public ::xml_schema::Duration
    {
      public:
      // Constructors.
      //
      NonNegativeDurationType (const ::xml_schema::Duration&);

      NonNegativeDurationType (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      NonNegativeDurationType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      NonNegativeDurationType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      NonNegativeDurationType (const NonNegativeDurationType& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      virtual NonNegativeDurationType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~NonNegativeDurationType ();
    };

    class ExpirationType: public ::xml_schema::String
    {
      public:

      ExpirationType (const char* v);

      ExpirationType (const ::std::string& v);

      ExpirationType (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      ExpirationType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      ExpirationType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      ExpirationType (const ExpirationType& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      virtual ExpirationType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class ActionList: public ::xml_schema::SimpleType,
      public ::xsd::cxx::tree::list< ::xml_schema::Uri, char >
    {
      public:
      ActionList ();

      ActionList (size_type n, const ::xml_schema::Uri& x);

      template < typename I >
      ActionList (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (begin, end, this)
      {
      }

      ActionList (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      ActionList (const ::xercesc::DOMAttr& a,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      ActionList (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      ActionList (const ActionList& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      virtual ActionList*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~ActionList ();
    };

    class FilterType: public ::WS::EVENTING::ActionList
    {
      public:
      // Dialect
      //
      typedef ::xml_schema::Uri DialectType;
      typedef ::xsd::cxx::tree::traits< DialectType, char > DialectTraits;

      const DialectType&
      Dialect () const;

      DialectType&
      Dialect ();

      void
      Dialect (const DialectType& x);

      void
      Dialect (::std::unique_ptr< DialectType > p);

      static const DialectType&
      Dialect_default_value ();

      // Constructors.
      //
      FilterType ();

      FilterType (const ::WS::EVENTING::ActionList&);

      FilterType (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      FilterType (const FilterType& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      virtual FilterType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      FilterType&
      operator= (const FilterType& x);

      virtual 
      ~FilterType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< DialectType > Dialect_;
      static const DialectType Dialect_default_value_;
    };

    class LanguageSpecificStringType: public ::xml_schema::String
    {
      public:
      // lang
      //
      typedef ::xml_schema::String LangType;
      typedef ::xsd::cxx::tree::optional< LangType > LangOptional;
      typedef ::xsd::cxx::tree::traits< LangType, char > LangTraits;

      const LangOptional&
      lang () const;

      LangOptional&
      lang ();

      void
      lang (const LangType& x);

      void
      lang (const LangOptional& x);

      void
      lang (::std::unique_ptr< LangType > p);

      // Constructors.
      //
      LanguageSpecificStringType ();

      LanguageSpecificStringType (const char*);

      LanguageSpecificStringType (const ::std::string&);

      LanguageSpecificStringType (const ::xml_schema::String&);

      LanguageSpecificStringType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

      LanguageSpecificStringType (const LanguageSpecificStringType& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

      virtual LanguageSpecificStringType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      LanguageSpecificStringType&
      operator= (const LanguageSpecificStringType& x);

      virtual 
      ~LanguageSpecificStringType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      LangOptional lang_;
    };

    class SubscriptionEndCodeType: public ::xml_schema::Uri
    {
      public:
      SubscriptionEndCodeType (const ::xml_schema::Uri& v);

      SubscriptionEndCodeType (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      SubscriptionEndCodeType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      SubscriptionEndCodeType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      SubscriptionEndCodeType (const SubscriptionEndCodeType& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      virtual SubscriptionEndCodeType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class OpenSubscriptionEndCodeType: public ::xml_schema::String
    {
      public:

      OpenSubscriptionEndCodeType (const char* v);

      OpenSubscriptionEndCodeType (const ::std::string& v);

      OpenSubscriptionEndCodeType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

      OpenSubscriptionEndCodeType (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

      OpenSubscriptionEndCodeType (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

      OpenSubscriptionEndCodeType (const OpenSubscriptionEndCodeType& x,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

      virtual OpenSubscriptionEndCodeType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class Subscribe: public ::xml_schema::Type
    {
      public:
      // EndTo
      //
      typedef ::WS::ADDRESSING::EndpointReferenceType EndToType;
      typedef ::xsd::cxx::tree::optional< EndToType > EndToOptional;
      typedef ::xsd::cxx::tree::traits< EndToType, char > EndToTraits;

      const EndToOptional&
      EndTo () const;

      EndToOptional&
      EndTo ();

      void
      EndTo (const EndToType& x);

      void
      EndTo (const EndToOptional& x);

      void
      EndTo (::std::unique_ptr< EndToType > p);

      // Delivery
      //
      typedef ::WS::EVENTING::DeliveryType DeliveryType;
      typedef ::xsd::cxx::tree::traits< DeliveryType, char > DeliveryTraits;

      const DeliveryType&
      Delivery () const;

      DeliveryType&
      Delivery ();

      void
      Delivery (const DeliveryType& x);

      void
      Delivery (::std::unique_ptr< DeliveryType > p);

      // Expires
      //
      typedef ::WS::EVENTING::ExpirationType ExpiresType;
      typedef ::xsd::cxx::tree::optional< ExpiresType > ExpiresOptional;
      typedef ::xsd::cxx::tree::traits< ExpiresType, char > ExpiresTraits;

      const ExpiresOptional&
      Expires () const;

      ExpiresOptional&
      Expires ();

      void
      Expires (const ExpiresType& x);

      void
      Expires (const ExpiresOptional& x);

      void
      Expires (::std::unique_ptr< ExpiresType > p);

      // Filter
      //
      typedef ::WS::EVENTING::FilterType FilterType;
      typedef ::xsd::cxx::tree::optional< FilterType > FilterOptional;
      typedef ::xsd::cxx::tree::traits< FilterType, char > FilterTraits;

      const FilterOptional&
      Filter () const;

      FilterOptional&
      Filter ();

      void
      Filter (const FilterType& x);

      void
      Filter (const FilterOptional& x);

      void
      Filter (::std::unique_ptr< FilterType > p);

      // Constructors.
      //
      Subscribe (const DeliveryType&);

      Subscribe (::std::unique_ptr< DeliveryType >);

      Subscribe (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      Subscribe (const Subscribe& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      virtual Subscribe*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      Subscribe&
      operator= (const Subscribe& x);

      virtual 
      ~Subscribe ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      EndToOptional EndTo_;
      ::xsd::cxx::tree::one< DeliveryType > Delivery_;
      ExpiresOptional Expires_;
      FilterOptional Filter_;
    };

    class Identifier: public ::xml_schema::Uri
    {
      public:
      // IsReferenceParameter
      //
      typedef ::xml_schema::Boolean IsReferenceParameterType;
      typedef ::xsd::cxx::tree::optional< IsReferenceParameterType > IsReferenceParameterOptional;
      typedef ::xsd::cxx::tree::traits< IsReferenceParameterType, char > IsReferenceParameterTraits;

      const IsReferenceParameterOptional&
      IsReferenceParameter () const;

      IsReferenceParameterOptional&
      IsReferenceParameter ();

      void
      IsReferenceParameter (const IsReferenceParameterType& x);

      void
      IsReferenceParameter (const IsReferenceParameterOptional& x);

      // Constructors.
      //
      Identifier (const ::xml_schema::Uri&);

      Identifier (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      Identifier (const Identifier& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      virtual Identifier*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      Identifier&
      operator= (const Identifier& x);

      virtual 
      ~Identifier ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      IsReferenceParameterOptional IsReferenceParameter_;
    };

    class SubscribeResponse: public ::xml_schema::Type
    {
      public:
      // SubscriptionManager
      //
      typedef ::WS::ADDRESSING::EndpointReferenceType SubscriptionManagerType;
      typedef ::xsd::cxx::tree::traits< SubscriptionManagerType, char > SubscriptionManagerTraits;

      const SubscriptionManagerType&
      SubscriptionManager () const;

      SubscriptionManagerType&
      SubscriptionManager ();

      void
      SubscriptionManager (const SubscriptionManagerType& x);

      void
      SubscriptionManager (::std::unique_ptr< SubscriptionManagerType > p);

      // Expires
      //
      typedef ::WS::EVENTING::ExpirationType ExpiresType;
      typedef ::xsd::cxx::tree::traits< ExpiresType, char > ExpiresTraits;

      const ExpiresType&
      Expires () const;

      ExpiresType&
      Expires ();

      void
      Expires (const ExpiresType& x);

      void
      Expires (::std::unique_ptr< ExpiresType > p);

      // Constructors.
      //
      SubscribeResponse (const SubscriptionManagerType&,
                         const ExpiresType&);

      SubscribeResponse (::std::unique_ptr< SubscriptionManagerType >,
                         const ExpiresType&);

      SubscribeResponse (::std::unique_ptr< SubscriptionManagerType >,
                         ::std::unique_ptr< ExpiresType >);

      SubscribeResponse (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      SubscribeResponse (const SubscribeResponse& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      virtual SubscribeResponse*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      SubscribeResponse&
      operator= (const SubscribeResponse& x);

      virtual 
      ~SubscribeResponse ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< SubscriptionManagerType > SubscriptionManager_;
      ::xsd::cxx::tree::one< ExpiresType > Expires_;
    };

    class Renew: public ::xml_schema::Type
    {
      public:
      // Expires
      //
      typedef ::WS::EVENTING::ExpirationType ExpiresType;
      typedef ::xsd::cxx::tree::optional< ExpiresType > ExpiresOptional;
      typedef ::xsd::cxx::tree::traits< ExpiresType, char > ExpiresTraits;

      const ExpiresOptional&
      Expires () const;

      ExpiresOptional&
      Expires ();

      void
      Expires (const ExpiresType& x);

      void
      Expires (const ExpiresOptional& x);

      void
      Expires (::std::unique_ptr< ExpiresType > p);

      // Constructors.
      //
      Renew ();

      Renew (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

      Renew (const Renew& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

      virtual Renew*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      Renew&
      operator= (const Renew& x);

      virtual 
      ~Renew ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ExpiresOptional Expires_;
    };

    class RenewResponse: public ::xml_schema::Type
    {
      public:
      // Expires
      //
      typedef ::WS::EVENTING::ExpirationType ExpiresType;
      typedef ::xsd::cxx::tree::optional< ExpiresType > ExpiresOptional;
      typedef ::xsd::cxx::tree::traits< ExpiresType, char > ExpiresTraits;

      const ExpiresOptional&
      Expires () const;

      ExpiresOptional&
      Expires ();

      void
      Expires (const ExpiresType& x);

      void
      Expires (const ExpiresOptional& x);

      void
      Expires (::std::unique_ptr< ExpiresType > p);

      // Constructors.
      //
      RenewResponse ();

      RenewResponse (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      RenewResponse (const RenewResponse& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      virtual RenewResponse*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      RenewResponse&
      operator= (const RenewResponse& x);

      virtual 
      ~RenewResponse ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ExpiresOptional Expires_;
    };

    class GetStatus: public ::xml_schema::Type
    {
      public:
      // Constructors.
      //
      GetStatus ();

      GetStatus (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      GetStatus (const GetStatus& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      virtual GetStatus*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~GetStatus ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
    };

    class GetStatusResponse: public ::xml_schema::Type
    {
      public:
      // Expires
      //
      typedef ::WS::EVENTING::ExpirationType ExpiresType;
      typedef ::xsd::cxx::tree::optional< ExpiresType > ExpiresOptional;
      typedef ::xsd::cxx::tree::traits< ExpiresType, char > ExpiresTraits;

      const ExpiresOptional&
      Expires () const;

      ExpiresOptional&
      Expires ();

      void
      Expires (const ExpiresType& x);

      void
      Expires (const ExpiresOptional& x);

      void
      Expires (::std::unique_ptr< ExpiresType > p);

      // Constructors.
      //
      GetStatusResponse ();

      GetStatusResponse (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      GetStatusResponse (const GetStatusResponse& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      virtual GetStatusResponse*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      GetStatusResponse&
      operator= (const GetStatusResponse& x);

      virtual 
      ~GetStatusResponse ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ExpiresOptional Expires_;
    };

    class Unsubscribe: public ::xml_schema::Type
    {
      public:
      // Constructors.
      //
      Unsubscribe ();

      Unsubscribe (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      Unsubscribe (const Unsubscribe& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      virtual Unsubscribe*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~Unsubscribe ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
    };

    class SubscriptionEnd: public ::xml_schema::Type
    {
      public:
      // SubscriptionManager
      //
      typedef ::WS::ADDRESSING::EndpointReferenceType SubscriptionManagerType;
      typedef ::xsd::cxx::tree::traits< SubscriptionManagerType, char > SubscriptionManagerTraits;

      const SubscriptionManagerType&
      SubscriptionManager () const;

      SubscriptionManagerType&
      SubscriptionManager ();

      void
      SubscriptionManager (const SubscriptionManagerType& x);

      void
      SubscriptionManager (::std::unique_ptr< SubscriptionManagerType > p);

      // Status
      //
      typedef ::WS::EVENTING::OpenSubscriptionEndCodeType StatusType;
      typedef ::xsd::cxx::tree::traits< StatusType, char > StatusTraits;

      const StatusType&
      Status () const;

      StatusType&
      Status ();

      void
      Status (const StatusType& x);

      void
      Status (::std::unique_ptr< StatusType > p);

      // Reason
      //
      typedef ::WS::EVENTING::LanguageSpecificStringType ReasonType;
      typedef ::xsd::cxx::tree::sequence< ReasonType > ReasonSequence;
      typedef ReasonSequence::iterator ReasonIterator;
      typedef ReasonSequence::const_iterator ReasonConstIterator;
      typedef ::xsd::cxx::tree::traits< ReasonType, char > ReasonTraits;

      const ReasonSequence&
      Reason () const;

      ReasonSequence&
      Reason ();

      void
      Reason (const ReasonSequence& s);

      // Constructors.
      //
      SubscriptionEnd (const SubscriptionManagerType&,
                       const StatusType&);

      SubscriptionEnd (::std::unique_ptr< SubscriptionManagerType >,
                       const StatusType&);

      SubscriptionEnd (::std::unique_ptr< SubscriptionManagerType >,
                       ::std::unique_ptr< StatusType >);

      SubscriptionEnd (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      SubscriptionEnd (const SubscriptionEnd& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      virtual SubscriptionEnd*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      SubscriptionEnd&
      operator= (const SubscriptionEnd& x);

      virtual 
      ~SubscriptionEnd ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< SubscriptionManagerType > SubscriptionManager_;
      ::xsd::cxx::tree::one< StatusType > Status_;
      ReasonSequence Reason_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace WS
{
  namespace EVENTING
  {
    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (const ::std::string& uri,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (const ::std::string& uri,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (::std::istream& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (::std::istream& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (::xercesc::InputSource& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (::xercesc::InputSource& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (const ::xercesc::DOMDocument& d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    NotifyTo (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (const ::std::string& uri,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (const ::std::string& uri,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (::std::istream& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (::std::istream& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (::xercesc::InputSource& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (::xercesc::InputSource& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    Subscribe_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (const ::std::string& uri,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (const ::std::string& uri,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (::std::istream& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (::std::istream& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (::xercesc::InputSource& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (::xercesc::InputSource& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    Identifier_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (const ::std::string& uri,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (const ::std::string& uri,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (::std::istream& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (::xercesc::InputSource& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (::xercesc::InputSource& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    SubscribeResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (const ::std::string& uri,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (const ::std::string& uri,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (::std::istream& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (::std::istream& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (::xercesc::InputSource& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (::xercesc::InputSource& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (const ::xercesc::DOMDocument& d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDialect (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (const ::std::string& uri,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (const ::std::string& uri,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (::std::istream& is,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (::std::istream& is,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (::xercesc::InputSource& is,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (::xercesc::InputSource& is,
                           ::xml_schema::ErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (const ::xercesc::DOMDocument& d,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::Uri >
    SupportedDeliveryMode (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::Flags f = 0,
                           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (const ::std::string& uri,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (const ::std::string& uri,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (::std::istream& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (::std::istream& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (::xercesc::InputSource& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (::xercesc::InputSource& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    Renew_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (const ::std::string& uri,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (const ::std::string& uri,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (::std::istream& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (::std::istream& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (::xercesc::InputSource& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (::xercesc::InputSource& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    RenewResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (const ::std::string& uri,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (const ::std::string& uri,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (::std::istream& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (::std::istream& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (::xercesc::InputSource& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (::xercesc::InputSource& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    GetStatus_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (const ::std::string& uri,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (const ::std::string& uri,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (::std::istream& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (::std::istream& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (::xercesc::InputSource& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (::xercesc::InputSource& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    GetStatusResponse_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (const ::std::string& uri,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (const ::std::string& uri,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (::std::istream& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (::std::istream& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (::xercesc::InputSource& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (::xercesc::InputSource& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    Unsubscribe_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (const ::std::string& uri,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (const ::std::string& uri,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (::std::istream& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (::std::istream& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (::xercesc::InputSource& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (::xercesc::InputSource& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    SubscriptionEnd_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace WS
{
  namespace EVENTING
  {
    void
    operator<< (::xercesc::DOMElement&, const DeliveryType&);

    // Serialize to std::ostream.
    //

    void
    NotifyTo (::std::ostream& os,
              const ::WS::ADDRESSING::EndpointReferenceType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    void
    NotifyTo (::std::ostream& os,
              const ::WS::ADDRESSING::EndpointReferenceType& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    void
    NotifyTo (::std::ostream& os,
              const ::WS::ADDRESSING::EndpointReferenceType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    NotifyTo (::xercesc::XMLFormatTarget& ft,
              const ::WS::ADDRESSING::EndpointReferenceType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    void
    NotifyTo (::xercesc::XMLFormatTarget& ft,
              const ::WS::ADDRESSING::EndpointReferenceType& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    void
    NotifyTo (::xercesc::XMLFormatTarget& ft,
              const ::WS::ADDRESSING::EndpointReferenceType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    NotifyTo (::xercesc::DOMDocument& d,
              const ::WS::ADDRESSING::EndpointReferenceType& x,
              ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    NotifyTo (const ::WS::ADDRESSING::EndpointReferenceType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const NonNegativeDurationType&);

    void
    operator<< (::xercesc::DOMAttr&, const NonNegativeDurationType&);

    void
    operator<< (::xml_schema::ListStream&,
                const NonNegativeDurationType&);

    void
    operator<< (::xercesc::DOMElement&, const ExpirationType&);

    void
    operator<< (::xercesc::DOMAttr&, const ExpirationType&);

    void
    operator<< (::xml_schema::ListStream&,
                const ExpirationType&);

    void
    operator<< (::xercesc::DOMElement&, const ActionList&);

    void
    operator<< (::xercesc::DOMAttr&, const ActionList&);

    void
    operator<< (::xml_schema::ListStream&,
                const ActionList&);

    void
    operator<< (::xercesc::DOMElement&, const FilterType&);

    void
    operator<< (::xercesc::DOMElement&, const LanguageSpecificStringType&);

    // Serialize to std::ostream.
    //

    void
    Subscribe_ (::std::ostream& os,
                const ::WS::EVENTING::Subscribe& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    Subscribe_ (::std::ostream& os,
                const ::WS::EVENTING::Subscribe& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    Subscribe_ (::std::ostream& os,
                const ::WS::EVENTING::Subscribe& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Subscribe_ (::xercesc::XMLFormatTarget& ft,
                const ::WS::EVENTING::Subscribe& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    Subscribe_ (::xercesc::XMLFormatTarget& ft,
                const ::WS::EVENTING::Subscribe& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    Subscribe_ (::xercesc::XMLFormatTarget& ft,
                const ::WS::EVENTING::Subscribe& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Subscribe_ (::xercesc::DOMDocument& d,
                const ::WS::EVENTING::Subscribe& x,
                ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Subscribe_ (const ::WS::EVENTING::Subscribe& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Identifier_ (::std::ostream& os,
                 const ::WS::EVENTING::Identifier& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

    void
    Identifier_ (::std::ostream& os,
                 const ::WS::EVENTING::Identifier& x, 
                 ::xml_schema::ErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

    void
    Identifier_ (::std::ostream& os,
                 const ::WS::EVENTING::Identifier& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Identifier_ (::xercesc::XMLFormatTarget& ft,
                 const ::WS::EVENTING::Identifier& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

    void
    Identifier_ (::xercesc::XMLFormatTarget& ft,
                 const ::WS::EVENTING::Identifier& x, 
                 ::xml_schema::ErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

    void
    Identifier_ (::xercesc::XMLFormatTarget& ft,
                 const ::WS::EVENTING::Identifier& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Identifier_ (::xercesc::DOMDocument& d,
                 const ::WS::EVENTING::Identifier& x,
                 ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Identifier_ (const ::WS::EVENTING::Identifier& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SubscribeResponse_ (::std::ostream& os,
                        const ::WS::EVENTING::SubscribeResponse& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    void
    SubscribeResponse_ (::std::ostream& os,
                        const ::WS::EVENTING::SubscribeResponse& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    void
    SubscribeResponse_ (::std::ostream& os,
                        const ::WS::EVENTING::SubscribeResponse& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SubscribeResponse_ (::xercesc::XMLFormatTarget& ft,
                        const ::WS::EVENTING::SubscribeResponse& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    void
    SubscribeResponse_ (::xercesc::XMLFormatTarget& ft,
                        const ::WS::EVENTING::SubscribeResponse& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    void
    SubscribeResponse_ (::xercesc::XMLFormatTarget& ft,
                        const ::WS::EVENTING::SubscribeResponse& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SubscribeResponse_ (::xercesc::DOMDocument& d,
                        const ::WS::EVENTING::SubscribeResponse& x,
                        ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    SubscribeResponse_ (const ::WS::EVENTING::SubscribeResponse& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SupportedDialect (::std::ostream& os,
                      const ::xml_schema::Uri& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

    void
    SupportedDialect (::std::ostream& os,
                      const ::xml_schema::Uri& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

    void
    SupportedDialect (::std::ostream& os,
                      const ::xml_schema::Uri& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SupportedDialect (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::Uri& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

    void
    SupportedDialect (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::Uri& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

    void
    SupportedDialect (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::Uri& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SupportedDialect (::xercesc::DOMDocument& d,
                      const ::xml_schema::Uri& x,
                      ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    SupportedDialect (const ::xml_schema::Uri& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SupportedDeliveryMode (::std::ostream& os,
                           const ::xml_schema::Uri& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

    void
    SupportedDeliveryMode (::std::ostream& os,
                           const ::xml_schema::Uri& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

    void
    SupportedDeliveryMode (::std::ostream& os,
                           const ::xml_schema::Uri& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SupportedDeliveryMode (::xercesc::XMLFormatTarget& ft,
                           const ::xml_schema::Uri& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

    void
    SupportedDeliveryMode (::xercesc::XMLFormatTarget& ft,
                           const ::xml_schema::Uri& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

    void
    SupportedDeliveryMode (::xercesc::XMLFormatTarget& ft,
                           const ::xml_schema::Uri& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SupportedDeliveryMode (::xercesc::DOMDocument& d,
                           const ::xml_schema::Uri& x,
                           ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    SupportedDeliveryMode (const ::xml_schema::Uri& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Renew_ (::std::ostream& os,
            const ::WS::EVENTING::Renew& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Renew_ (::std::ostream& os,
            const ::WS::EVENTING::Renew& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Renew_ (::std::ostream& os,
            const ::WS::EVENTING::Renew& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Renew_ (::xercesc::XMLFormatTarget& ft,
            const ::WS::EVENTING::Renew& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Renew_ (::xercesc::XMLFormatTarget& ft,
            const ::WS::EVENTING::Renew& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Renew_ (::xercesc::XMLFormatTarget& ft,
            const ::WS::EVENTING::Renew& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Renew_ (::xercesc::DOMDocument& d,
            const ::WS::EVENTING::Renew& x,
            ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Renew_ (const ::WS::EVENTING::Renew& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    RenewResponse_ (::std::ostream& os,
                    const ::WS::EVENTING::RenewResponse& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    void
    RenewResponse_ (::std::ostream& os,
                    const ::WS::EVENTING::RenewResponse& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    void
    RenewResponse_ (::std::ostream& os,
                    const ::WS::EVENTING::RenewResponse& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RenewResponse_ (::xercesc::XMLFormatTarget& ft,
                    const ::WS::EVENTING::RenewResponse& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    void
    RenewResponse_ (::xercesc::XMLFormatTarget& ft,
                    const ::WS::EVENTING::RenewResponse& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    void
    RenewResponse_ (::xercesc::XMLFormatTarget& ft,
                    const ::WS::EVENTING::RenewResponse& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RenewResponse_ (::xercesc::DOMDocument& d,
                    const ::WS::EVENTING::RenewResponse& x,
                    ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    RenewResponse_ (const ::WS::EVENTING::RenewResponse& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    GetStatus_ (::std::ostream& os,
                const ::WS::EVENTING::GetStatus& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    GetStatus_ (::std::ostream& os,
                const ::WS::EVENTING::GetStatus& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    GetStatus_ (::std::ostream& os,
                const ::WS::EVENTING::GetStatus& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    GetStatus_ (::xercesc::XMLFormatTarget& ft,
                const ::WS::EVENTING::GetStatus& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    GetStatus_ (::xercesc::XMLFormatTarget& ft,
                const ::WS::EVENTING::GetStatus& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    GetStatus_ (::xercesc::XMLFormatTarget& ft,
                const ::WS::EVENTING::GetStatus& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    GetStatus_ (::xercesc::DOMDocument& d,
                const ::WS::EVENTING::GetStatus& x,
                ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    GetStatus_ (const ::WS::EVENTING::GetStatus& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    GetStatusResponse_ (::std::ostream& os,
                        const ::WS::EVENTING::GetStatusResponse& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    void
    GetStatusResponse_ (::std::ostream& os,
                        const ::WS::EVENTING::GetStatusResponse& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    void
    GetStatusResponse_ (::std::ostream& os,
                        const ::WS::EVENTING::GetStatusResponse& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    GetStatusResponse_ (::xercesc::XMLFormatTarget& ft,
                        const ::WS::EVENTING::GetStatusResponse& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    void
    GetStatusResponse_ (::xercesc::XMLFormatTarget& ft,
                        const ::WS::EVENTING::GetStatusResponse& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    void
    GetStatusResponse_ (::xercesc::XMLFormatTarget& ft,
                        const ::WS::EVENTING::GetStatusResponse& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    GetStatusResponse_ (::xercesc::DOMDocument& d,
                        const ::WS::EVENTING::GetStatusResponse& x,
                        ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    GetStatusResponse_ (const ::WS::EVENTING::GetStatusResponse& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Unsubscribe_ (::std::ostream& os,
                  const ::WS::EVENTING::Unsubscribe& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

    void
    Unsubscribe_ (::std::ostream& os,
                  const ::WS::EVENTING::Unsubscribe& x, 
                  ::xml_schema::ErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

    void
    Unsubscribe_ (::std::ostream& os,
                  const ::WS::EVENTING::Unsubscribe& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Unsubscribe_ (::xercesc::XMLFormatTarget& ft,
                  const ::WS::EVENTING::Unsubscribe& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

    void
    Unsubscribe_ (::xercesc::XMLFormatTarget& ft,
                  const ::WS::EVENTING::Unsubscribe& x, 
                  ::xml_schema::ErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

    void
    Unsubscribe_ (::xercesc::XMLFormatTarget& ft,
                  const ::WS::EVENTING::Unsubscribe& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Unsubscribe_ (::xercesc::DOMDocument& d,
                  const ::WS::EVENTING::Unsubscribe& x,
                  ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Unsubscribe_ (const ::WS::EVENTING::Unsubscribe& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SubscriptionEnd_ (::std::ostream& os,
                      const ::WS::EVENTING::SubscriptionEnd& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

    void
    SubscriptionEnd_ (::std::ostream& os,
                      const ::WS::EVENTING::SubscriptionEnd& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

    void
    SubscriptionEnd_ (::std::ostream& os,
                      const ::WS::EVENTING::SubscriptionEnd& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SubscriptionEnd_ (::xercesc::XMLFormatTarget& ft,
                      const ::WS::EVENTING::SubscriptionEnd& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

    void
    SubscriptionEnd_ (::xercesc::XMLFormatTarget& ft,
                      const ::WS::EVENTING::SubscriptionEnd& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

    void
    SubscriptionEnd_ (::xercesc::XMLFormatTarget& ft,
                      const ::WS::EVENTING::SubscriptionEnd& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SubscriptionEnd_ (::xercesc::DOMDocument& d,
                      const ::WS::EVENTING::SubscriptionEnd& x,
                      ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    SubscriptionEnd_ (const ::WS::EVENTING::SubscriptionEnd& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SubscriptionEndCodeType&);

    void
    operator<< (::xercesc::DOMAttr&, const SubscriptionEndCodeType&);

    void
    operator<< (::xml_schema::ListStream&,
                const SubscriptionEndCodeType&);

    void
    operator<< (::xercesc::DOMElement&, const OpenSubscriptionEndCodeType&);

    void
    operator<< (::xercesc::DOMAttr&, const OpenSubscriptionEndCodeType&);

    void
    operator<< (::xml_schema::ListStream&,
                const OpenSubscriptionEndCodeType&);

    void
    operator<< (::xercesc::DOMElement&, const Subscribe&);

    void
    operator<< (::xercesc::DOMElement&, const Identifier&);

    void
    operator<< (::xercesc::DOMElement&, const SubscribeResponse&);

    void
    operator<< (::xercesc::DOMElement&, const Renew&);

    void
    operator<< (::xercesc::DOMElement&, const RenewResponse&);

    void
    operator<< (::xercesc::DOMElement&, const GetStatus&);

    void
    operator<< (::xercesc::DOMElement&, const GetStatusResponse&);

    void
    operator<< (::xercesc::DOMElement&, const Unsubscribe&);

    void
    operator<< (::xercesc::DOMElement&, const SubscriptionEnd&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // EVENTING_HXX
