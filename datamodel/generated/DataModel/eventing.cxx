// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "DataModel/eventing.hxx"

namespace WS
{
  namespace EVENTING
  {
    // DeliveryType
    // 

    const DeliveryType::NotifyToType& DeliveryType::
    getNotifyTo () const
    {
      return this->NotifyTo_.get ();
    }

    DeliveryType::NotifyToType& DeliveryType::
    getNotifyTo ()
    {
      return this->NotifyTo_.get ();
    }

    void DeliveryType::
    setNotifyTo (const NotifyToType& x)
    {
      this->NotifyTo_.set (x);
    }

    void DeliveryType::
    setNotifyTo (::std::unique_ptr< NotifyToType > x)
    {
      this->NotifyTo_.set (std::move (x));
    }

    const DeliveryType::ModeOptional& DeliveryType::
    getMode () const
    {
      return this->Mode_;
    }

    DeliveryType::ModeOptional& DeliveryType::
    getMode ()
    {
      return this->Mode_;
    }

    void DeliveryType::
    setMode (const ModeType& x)
    {
      this->Mode_.set (x);
    }

    void DeliveryType::
    setMode (const ModeOptional& x)
    {
      this->Mode_ = x;
    }

    void DeliveryType::
    setMode (::std::unique_ptr< ModeType > x)
    {
      this->Mode_.set (std::move (x));
    }


    // NonNegativeDurationType
    // 


    // ExpirationType
    //

    ExpirationType::
    ExpirationType (const char* s)
    : ::xml_schema::String (s)
    {
    }

    ExpirationType::
    ExpirationType (const ::std::string& s)
    : ::xml_schema::String (s)
    {
    }

    ExpirationType::
    ExpirationType (const ExpirationType& o,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::String (o, f, c)
    {
    }

    // ActionList
    //

    ActionList::
    ActionList ()
    : ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (this)
    {
    }

    ActionList::
    ActionList (size_type n, const ::xml_schema::Uri& x)
    : ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (n, x, this)
    {
    }

    ActionList::
    ActionList (const ActionList& o,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::SimpleType (o, f, c),
      ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (o, f, this)
    {
    }

    // FilterType
    // 

    const FilterType::DialectType& FilterType::
    getDialect () const
    {
      return this->Dialect_.get ();
    }

    FilterType::DialectType& FilterType::
    getDialect ()
    {
      return this->Dialect_.get ();
    }

    void FilterType::
    setDialect (const DialectType& x)
    {
      this->Dialect_.set (x);
    }

    void FilterType::
    setDialect (::std::unique_ptr< DialectType > x)
    {
      this->Dialect_.set (std::move (x));
    }

    const FilterType::DialectType& FilterType::
    getDialectDefaultValue ()
    {
      return Dialect_default_value_;
    }


    // LanguageSpecificStringType
    // 

    const LanguageSpecificStringType::LangOptional& LanguageSpecificStringType::
    getLang () const
    {
      return this->lang_;
    }

    LanguageSpecificStringType::LangOptional& LanguageSpecificStringType::
    getLang ()
    {
      return this->lang_;
    }

    void LanguageSpecificStringType::
    setLang (const LangType& x)
    {
      this->lang_.set (x);
    }

    void LanguageSpecificStringType::
    setLang (const LangOptional& x)
    {
      this->lang_ = x;
    }

    void LanguageSpecificStringType::
    setLang (::std::unique_ptr< LangType > x)
    {
      this->lang_.set (std::move (x));
    }


    // SubscriptionEndCodeType
    // 

    SubscriptionEndCodeType::
    SubscriptionEndCodeType (const ::xml_schema::Uri& v)
    : ::xml_schema::Uri (v)
    {
    }

    SubscriptionEndCodeType::
    SubscriptionEndCodeType (const SubscriptionEndCodeType& v,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
    : ::xml_schema::Uri (v, f, c)
    {
    }


    // OpenSubscriptionEndCodeType
    //

    OpenSubscriptionEndCodeType::
    OpenSubscriptionEndCodeType (const char* s)
    : ::xml_schema::String (s)
    {
    }

    OpenSubscriptionEndCodeType::
    OpenSubscriptionEndCodeType (const ::std::string& s)
    : ::xml_schema::String (s)
    {
    }

    OpenSubscriptionEndCodeType::
    OpenSubscriptionEndCodeType (const OpenSubscriptionEndCodeType& o,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
    : ::xml_schema::String (o, f, c)
    {
    }

    // Subscribe
    // 

    const Subscribe::EndToOptional& Subscribe::
    getEndTo () const
    {
      return this->EndTo_;
    }

    Subscribe::EndToOptional& Subscribe::
    getEndTo ()
    {
      return this->EndTo_;
    }

    void Subscribe::
    setEndTo (const EndToType& x)
    {
      this->EndTo_.set (x);
    }

    void Subscribe::
    setEndTo (const EndToOptional& x)
    {
      this->EndTo_ = x;
    }

    void Subscribe::
    setEndTo (::std::unique_ptr< EndToType > x)
    {
      this->EndTo_.set (std::move (x));
    }

    const Subscribe::DeliveryType& Subscribe::
    getDelivery () const
    {
      return this->Delivery_.get ();
    }

    Subscribe::DeliveryType& Subscribe::
    getDelivery ()
    {
      return this->Delivery_.get ();
    }

    void Subscribe::
    setDelivery (const DeliveryType& x)
    {
      this->Delivery_.set (x);
    }

    void Subscribe::
    setDelivery (::std::unique_ptr< DeliveryType > x)
    {
      this->Delivery_.set (std::move (x));
    }

    const Subscribe::ExpiresOptional& Subscribe::
    getExpires () const
    {
      return this->Expires_;
    }

    Subscribe::ExpiresOptional& Subscribe::
    getExpires ()
    {
      return this->Expires_;
    }

    void Subscribe::
    setExpires (const ExpiresType& x)
    {
      this->Expires_.set (x);
    }

    void Subscribe::
    setExpires (const ExpiresOptional& x)
    {
      this->Expires_ = x;
    }

    void Subscribe::
    setExpires (::std::unique_ptr< ExpiresType > x)
    {
      this->Expires_.set (std::move (x));
    }

    const Subscribe::FilterOptional& Subscribe::
    getFilter () const
    {
      return this->Filter_;
    }

    Subscribe::FilterOptional& Subscribe::
    getFilter ()
    {
      return this->Filter_;
    }

    void Subscribe::
    setFilter (const FilterType& x)
    {
      this->Filter_.set (x);
    }

    void Subscribe::
    setFilter (const FilterOptional& x)
    {
      this->Filter_ = x;
    }

    void Subscribe::
    setFilter (::std::unique_ptr< FilterType > x)
    {
      this->Filter_.set (std::move (x));
    }


    // Identifier
    // 

    const Identifier::IsReferenceParameterOptional& Identifier::
    getIsReferenceParameter () const
    {
      return this->IsReferenceParameter_;
    }

    Identifier::IsReferenceParameterOptional& Identifier::
    getIsReferenceParameter ()
    {
      return this->IsReferenceParameter_;
    }

    void Identifier::
    setIsReferenceParameter (const IsReferenceParameterType& x)
    {
      this->IsReferenceParameter_.set (x);
    }

    void Identifier::
    setIsReferenceParameter (const IsReferenceParameterOptional& x)
    {
      this->IsReferenceParameter_ = x;
    }


    // SubscribeResponse
    // 

    const SubscribeResponse::SubscriptionManagerType& SubscribeResponse::
    getSubscriptionManager () const
    {
      return this->SubscriptionManager_.get ();
    }

    SubscribeResponse::SubscriptionManagerType& SubscribeResponse::
    getSubscriptionManager ()
    {
      return this->SubscriptionManager_.get ();
    }

    void SubscribeResponse::
    setSubscriptionManager (const SubscriptionManagerType& x)
    {
      this->SubscriptionManager_.set (x);
    }

    void SubscribeResponse::
    setSubscriptionManager (::std::unique_ptr< SubscriptionManagerType > x)
    {
      this->SubscriptionManager_.set (std::move (x));
    }

    const SubscribeResponse::ExpiresType& SubscribeResponse::
    getExpires () const
    {
      return this->Expires_.get ();
    }

    SubscribeResponse::ExpiresType& SubscribeResponse::
    getExpires ()
    {
      return this->Expires_.get ();
    }

    void SubscribeResponse::
    setExpires (const ExpiresType& x)
    {
      this->Expires_.set (x);
    }

    void SubscribeResponse::
    setExpires (::std::unique_ptr< ExpiresType > x)
    {
      this->Expires_.set (std::move (x));
    }


    // Renew
    // 

    const Renew::ExpiresOptional& Renew::
    getExpires () const
    {
      return this->Expires_;
    }

    Renew::ExpiresOptional& Renew::
    getExpires ()
    {
      return this->Expires_;
    }

    void Renew::
    setExpires (const ExpiresType& x)
    {
      this->Expires_.set (x);
    }

    void Renew::
    setExpires (const ExpiresOptional& x)
    {
      this->Expires_ = x;
    }

    void Renew::
    setExpires (::std::unique_ptr< ExpiresType > x)
    {
      this->Expires_.set (std::move (x));
    }


    // RenewResponse
    // 

    const RenewResponse::ExpiresOptional& RenewResponse::
    getExpires () const
    {
      return this->Expires_;
    }

    RenewResponse::ExpiresOptional& RenewResponse::
    getExpires ()
    {
      return this->Expires_;
    }

    void RenewResponse::
    setExpires (const ExpiresType& x)
    {
      this->Expires_.set (x);
    }

    void RenewResponse::
    setExpires (const ExpiresOptional& x)
    {
      this->Expires_ = x;
    }

    void RenewResponse::
    setExpires (::std::unique_ptr< ExpiresType > x)
    {
      this->Expires_.set (std::move (x));
    }


    // GetStatus
    // 


    // GetStatusResponse
    // 

    const GetStatusResponse::ExpiresOptional& GetStatusResponse::
    getExpires () const
    {
      return this->Expires_;
    }

    GetStatusResponse::ExpiresOptional& GetStatusResponse::
    getExpires ()
    {
      return this->Expires_;
    }

    void GetStatusResponse::
    setExpires (const ExpiresType& x)
    {
      this->Expires_.set (x);
    }

    void GetStatusResponse::
    setExpires (const ExpiresOptional& x)
    {
      this->Expires_ = x;
    }

    void GetStatusResponse::
    setExpires (::std::unique_ptr< ExpiresType > x)
    {
      this->Expires_.set (std::move (x));
    }


    // Unsubscribe
    // 


    // SubscriptionEnd
    // 

    const SubscriptionEnd::SubscriptionManagerType& SubscriptionEnd::
    getSubscriptionManager () const
    {
      return this->SubscriptionManager_.get ();
    }

    SubscriptionEnd::SubscriptionManagerType& SubscriptionEnd::
    getSubscriptionManager ()
    {
      return this->SubscriptionManager_.get ();
    }

    void SubscriptionEnd::
    setSubscriptionManager (const SubscriptionManagerType& x)
    {
      this->SubscriptionManager_.set (x);
    }

    void SubscriptionEnd::
    setSubscriptionManager (::std::unique_ptr< SubscriptionManagerType > x)
    {
      this->SubscriptionManager_.set (std::move (x));
    }

    const SubscriptionEnd::StatusType& SubscriptionEnd::
    getStatus () const
    {
      return this->Status_.get ();
    }

    SubscriptionEnd::StatusType& SubscriptionEnd::
    getStatus ()
    {
      return this->Status_.get ();
    }

    void SubscriptionEnd::
    setStatus (const StatusType& x)
    {
      this->Status_.set (x);
    }

    void SubscriptionEnd::
    setStatus (::std::unique_ptr< StatusType > x)
    {
      this->Status_.set (std::move (x));
    }

    const SubscriptionEnd::ReasonSequence& SubscriptionEnd::
    getReason () const
    {
      return this->Reason_;
    }

    SubscriptionEnd::ReasonSequence& SubscriptionEnd::
    getReason ()
    {
      return this->Reason_;
    }

    void SubscriptionEnd::
    setReason (const ReasonSequence& s)
    {
      this->Reason_ = s;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace WS
{
  namespace EVENTING
  {
    // DeliveryType
    //

    DeliveryType::
    DeliveryType (const NotifyToType& NotifyTo)
    : ::xml_schema::Type (),
      NotifyTo_ (NotifyTo, this),
      Mode_ (this)
    {
    }

    DeliveryType::
    DeliveryType (::std::unique_ptr< NotifyToType > NotifyTo)
    : ::xml_schema::Type (),
      NotifyTo_ (std::move (NotifyTo), this),
      Mode_ (this)
    {
    }

    DeliveryType::
    DeliveryType (const DeliveryType& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      NotifyTo_ (x.NotifyTo_, f, this),
      Mode_ (x.Mode_, f, this)
    {
    }

    DeliveryType::
    DeliveryType (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      NotifyTo_ (this),
      Mode_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void DeliveryType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // NotifyTo
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "NotifyTo",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< NotifyToType >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!NotifyTo_.present ())
            {
              ::std::unique_ptr< NotifyToType > r (
                dynamic_cast< NotifyToType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->NotifyTo_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }

      if (!NotifyTo_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "NotifyTo",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "Mode" && n.namespace_ ().empty ())
        {
          this->Mode_.set (ModeTraits::create (i, f, this));
          continue;
        }
      }
    }

    DeliveryType* DeliveryType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class DeliveryType (*this, f, c);
    }

    DeliveryType& DeliveryType::
    operator= (const DeliveryType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->NotifyTo_ = x.NotifyTo_;
        this->Mode_ = x.Mode_;
      }

      return *this;
    }

    DeliveryType::
    ~DeliveryType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, DeliveryType >
    _xsd_DeliveryType_type_factory_init (
      "DeliveryType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");

    // NonNegativeDurationType
    //

    NonNegativeDurationType::
    NonNegativeDurationType (const ::xml_schema::Duration& _xsd_Duration_base)
    : ::xml_schema::Duration (_xsd_Duration_base)
    {
    }

    NonNegativeDurationType::
    NonNegativeDurationType (const NonNegativeDurationType& x,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
    : ::xml_schema::Duration (x, f, c)
    {
    }

    NonNegativeDurationType::
    NonNegativeDurationType (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
    : ::xml_schema::Duration (e, f, c)
    {
    }

    NonNegativeDurationType::
    NonNegativeDurationType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
    : ::xml_schema::Duration (a, f, c)
    {
    }

    NonNegativeDurationType::
    NonNegativeDurationType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
    : ::xml_schema::Duration (s, e, f, c)
    {
    }

    NonNegativeDurationType* NonNegativeDurationType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class NonNegativeDurationType (*this, f, c);
    }

    NonNegativeDurationType::
    ~NonNegativeDurationType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, NonNegativeDurationType >
    _xsd_NonNegativeDurationType_type_factory_init (
      "NonNegativeDurationType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");

    // ExpirationType
    //

    ExpirationType::
    ExpirationType (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::String (e, f, c)
    {
    }

    ExpirationType::
    ExpirationType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::String (a, f, c)
    {
    }

    ExpirationType::
    ExpirationType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::String (s, e, f, c)
    {
    }

    ExpirationType* ExpirationType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ExpirationType (*this, f, c);
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ExpirationType >
    _xsd_ExpirationType_type_factory_init (
      "ExpirationType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");

    // ActionList
    //

    ActionList::
    ActionList (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::SimpleType (e, f, c),
      ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (e, f, this)
    {
    }

    ActionList::
    ActionList (const ::xercesc::DOMAttr& a,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::SimpleType (a, f, c),
      ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (a, f, this)
    {
    }

    ActionList::
    ActionList (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::SimpleType (s, e, f, c),
      ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (s, e, f, this)
    {
    }

    ActionList* ActionList::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ActionList (*this, f, c);
    }

    ActionList::
    ~ActionList ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ActionList >
    _xsd_ActionList_type_factory_init (
      "ActionList",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");

    // FilterType
    //

    const FilterType::DialectType FilterType::Dialect_default_value_ (
      "http://docs.oasis-open.org/ws-dd/ns/dpws/2009/01/Action");

    FilterType::
    FilterType ()
    : ::WS::EVENTING::ActionList (),
      Dialect_ (getDialectDefaultValue (), this)
    {
    }

    FilterType::
    FilterType (const ::WS::EVENTING::ActionList& _xsd_ActionList_base)
    : ::WS::EVENTING::ActionList (_xsd_ActionList_base),
      Dialect_ (getDialectDefaultValue (), this)
    {
    }

    FilterType::
    FilterType (const FilterType& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::WS::EVENTING::ActionList (x, f, c),
      Dialect_ (x.Dialect_, f, this)
    {
    }

    FilterType::
    FilterType (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::WS::EVENTING::ActionList (e, f | ::xml_schema::Flags::base, c),
      Dialect_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void FilterType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "Dialect" && n.namespace_ ().empty ())
        {
          this->Dialect_.set (DialectTraits::create (i, f, this));
          continue;
        }
      }

      if (!Dialect_.present ())
      {
        this->Dialect_.set (getDialectDefaultValue ());
      }
    }

    FilterType* FilterType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FilterType (*this, f, c);
    }

    FilterType& FilterType::
    operator= (const FilterType& x)
    {
      if (this != &x)
      {
        static_cast< ::WS::EVENTING::ActionList& > (*this) = x;
        this->Dialect_ = x.Dialect_;
      }

      return *this;
    }

    FilterType::
    ~FilterType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FilterType >
    _xsd_FilterType_type_factory_init (
      "FilterType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");

    // LanguageSpecificStringType
    //

    LanguageSpecificStringType::
    LanguageSpecificStringType ()
    : ::xml_schema::String (),
      lang_ (this)
    {
    }

    LanguageSpecificStringType::
    LanguageSpecificStringType (const char* _xsd_String_base)
    : ::xml_schema::String (_xsd_String_base),
      lang_ (this)
    {
    }

    LanguageSpecificStringType::
    LanguageSpecificStringType (const ::std::string& _xsd_String_base)
    : ::xml_schema::String (_xsd_String_base),
      lang_ (this)
    {
    }

    LanguageSpecificStringType::
    LanguageSpecificStringType (const ::xml_schema::String& _xsd_String_base)
    : ::xml_schema::String (_xsd_String_base),
      lang_ (this)
    {
    }

    LanguageSpecificStringType::
    LanguageSpecificStringType (const LanguageSpecificStringType& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
    : ::xml_schema::String (x, f, c),
      lang_ (x.lang_, f, this)
    {
    }

    LanguageSpecificStringType::
    LanguageSpecificStringType (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
    : ::xml_schema::String (e, f | ::xml_schema::Flags::base, c),
      lang_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void LanguageSpecificStringType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "lang" && n.namespace_ ().empty ())
        {
          this->lang_.set (LangTraits::create (i, f, this));
          continue;
        }
      }
    }

    LanguageSpecificStringType* LanguageSpecificStringType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class LanguageSpecificStringType (*this, f, c);
    }

    LanguageSpecificStringType& LanguageSpecificStringType::
    operator= (const LanguageSpecificStringType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::String& > (*this) = x;
        this->lang_ = x.lang_;
      }

      return *this;
    }

    LanguageSpecificStringType::
    ~LanguageSpecificStringType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, LanguageSpecificStringType >
    _xsd_LanguageSpecificStringType_type_factory_init (
      "LanguageSpecificStringType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");

    // SubscriptionEndCodeType
    //

    SubscriptionEndCodeType::
    SubscriptionEndCodeType (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
    : ::xml_schema::Uri (e, f, c)
    {
    }

    SubscriptionEndCodeType::
    SubscriptionEndCodeType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
    : ::xml_schema::Uri (a, f, c)
    {
    }

    SubscriptionEndCodeType::
    SubscriptionEndCodeType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
    : ::xml_schema::Uri (s, e, f, c)
    {
    }

    SubscriptionEndCodeType* SubscriptionEndCodeType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SubscriptionEndCodeType (*this, f, c);
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubscriptionEndCodeType >
    _xsd_SubscriptionEndCodeType_type_factory_init (
      "SubscriptionEndCodeType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");

    // OpenSubscriptionEndCodeType
    //

    OpenSubscriptionEndCodeType::
    OpenSubscriptionEndCodeType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
    : ::xml_schema::String (e, f, c)
    {
    }

    OpenSubscriptionEndCodeType::
    OpenSubscriptionEndCodeType (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
    : ::xml_schema::String (a, f, c)
    {
    }

    OpenSubscriptionEndCodeType::
    OpenSubscriptionEndCodeType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
    : ::xml_schema::String (s, e, f, c)
    {
    }

    OpenSubscriptionEndCodeType* OpenSubscriptionEndCodeType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class OpenSubscriptionEndCodeType (*this, f, c);
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, OpenSubscriptionEndCodeType >
    _xsd_OpenSubscriptionEndCodeType_type_factory_init (
      "OpenSubscriptionEndCodeType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");

    // Subscribe
    //

    Subscribe::
    Subscribe (const DeliveryType& Delivery)
    : ::xml_schema::Type (),
      EndTo_ (this),
      Delivery_ (Delivery, this),
      Expires_ (this),
      Filter_ (this)
    {
    }

    Subscribe::
    Subscribe (::std::unique_ptr< DeliveryType > Delivery)
    : ::xml_schema::Type (),
      EndTo_ (this),
      Delivery_ (std::move (Delivery), this),
      Expires_ (this),
      Filter_ (this)
    {
    }

    Subscribe::
    Subscribe (const Subscribe& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      EndTo_ (x.EndTo_, f, this),
      Delivery_ (x.Delivery_, f, this),
      Expires_ (x.Expires_, f, this),
      Filter_ (x.Filter_, f, this)
    {
    }

    Subscribe::
    Subscribe (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      EndTo_ (this),
      Delivery_ (this),
      Expires_ (this),
      Filter_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Subscribe::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // EndTo
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "EndTo",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< EndToType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->EndTo_)
            {
              ::std::unique_ptr< EndToType > r (
                dynamic_cast< EndToType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->EndTo_.set (::std::move (r));
              continue;
            }
          }
        }

        // Delivery
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Delivery",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< DeliveryType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Delivery_.present ())
            {
              ::std::unique_ptr< DeliveryType > r (
                dynamic_cast< DeliveryType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Delivery_.set (::std::move (r));
              continue;
            }
          }
        }

        // Expires
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Expires",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< ExpiresType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Expires_)
            {
              ::std::unique_ptr< ExpiresType > r (
                dynamic_cast< ExpiresType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Expires_.set (::std::move (r));
              continue;
            }
          }
        }

        // Filter
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Filter",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< FilterType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Filter_)
            {
              ::std::unique_ptr< FilterType > r (
                dynamic_cast< FilterType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Filter_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }

      if (!Delivery_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Delivery",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }
    }

    Subscribe* Subscribe::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Subscribe (*this, f, c);
    }

    Subscribe& Subscribe::
    operator= (const Subscribe& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->EndTo_ = x.EndTo_;
        this->Delivery_ = x.Delivery_;
        this->Expires_ = x.Expires_;
        this->Filter_ = x.Filter_;
      }

      return *this;
    }

    Subscribe::
    ~Subscribe ()
    {
    }

    // Identifier
    //

    Identifier::
    Identifier (const ::xml_schema::Uri& _xsd_Uri_base)
    : ::xml_schema::Uri (_xsd_Uri_base),
      IsReferenceParameter_ (this)
    {
    }

    Identifier::
    Identifier (const Identifier& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Uri (x, f, c),
      IsReferenceParameter_ (x.IsReferenceParameter_, f, this)
    {
    }

    Identifier::
    Identifier (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Uri (e, f | ::xml_schema::Flags::base, c),
      IsReferenceParameter_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void Identifier::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "IsReferenceParameter" && n.namespace_ () == "http://www.w3.org/2005/08/addressing")
        {
          this->IsReferenceParameter_.set (IsReferenceParameterTraits::create (i, f, this));
          continue;
        }
      }
    }

    Identifier* Identifier::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Identifier (*this, f, c);
    }

    Identifier& Identifier::
    operator= (const Identifier& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Uri& > (*this) = x;
        this->IsReferenceParameter_ = x.IsReferenceParameter_;
      }

      return *this;
    }

    Identifier::
    ~Identifier ()
    {
    }

    // SubscribeResponse
    //

    SubscribeResponse::
    SubscribeResponse (const SubscriptionManagerType& SubscriptionManager,
                       const ExpiresType& Expires)
    : ::xml_schema::Type (),
      SubscriptionManager_ (SubscriptionManager, this),
      Expires_ (Expires, this)
    {
    }

    SubscribeResponse::
    SubscribeResponse (::std::unique_ptr< SubscriptionManagerType > SubscriptionManager,
                       const ExpiresType& Expires)
    : ::xml_schema::Type (),
      SubscriptionManager_ (std::move (SubscriptionManager), this),
      Expires_ (Expires, this)
    {
    }

    SubscribeResponse::
    SubscribeResponse (::std::unique_ptr< SubscriptionManagerType > SubscriptionManager,
                       ::std::unique_ptr< ExpiresType > Expires)
    : ::xml_schema::Type (),
      SubscriptionManager_ (std::move (SubscriptionManager), this),
      Expires_ (std::move (Expires), this)
    {
    }

    SubscribeResponse::
    SubscribeResponse (const SubscribeResponse& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      SubscriptionManager_ (x.SubscriptionManager_, f, this),
      Expires_ (x.Expires_, f, this)
    {
    }

    SubscribeResponse::
    SubscribeResponse (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      SubscriptionManager_ (this),
      Expires_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SubscribeResponse::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SubscriptionManager
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "SubscriptionManager",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< SubscriptionManagerType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!SubscriptionManager_.present ())
            {
              ::std::unique_ptr< SubscriptionManagerType > r (
                dynamic_cast< SubscriptionManagerType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->SubscriptionManager_.set (::std::move (r));
              continue;
            }
          }
        }

        // Expires
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Expires",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< ExpiresType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Expires_.present ())
            {
              ::std::unique_ptr< ExpiresType > r (
                dynamic_cast< ExpiresType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Expires_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }

      if (!SubscriptionManager_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SubscriptionManager",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }

      if (!Expires_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Expires",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }
    }

    SubscribeResponse* SubscribeResponse::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SubscribeResponse (*this, f, c);
    }

    SubscribeResponse& SubscribeResponse::
    operator= (const SubscribeResponse& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->SubscriptionManager_ = x.SubscriptionManager_;
        this->Expires_ = x.Expires_;
      }

      return *this;
    }

    SubscribeResponse::
    ~SubscribeResponse ()
    {
    }

    // Renew
    //

    Renew::
    Renew ()
    : ::xml_schema::Type (),
      Expires_ (this)
    {
    }

    Renew::
    Renew (const Renew& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      Expires_ (x.Expires_, f, this)
    {
    }

    Renew::
    Renew (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      Expires_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Renew::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Expires
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Expires",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< ExpiresType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Expires_)
            {
              ::std::unique_ptr< ExpiresType > r (
                dynamic_cast< ExpiresType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Expires_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }
    }

    Renew* Renew::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Renew (*this, f, c);
    }

    Renew& Renew::
    operator= (const Renew& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->Expires_ = x.Expires_;
      }

      return *this;
    }

    Renew::
    ~Renew ()
    {
    }

    // RenewResponse
    //

    RenewResponse::
    RenewResponse ()
    : ::xml_schema::Type (),
      Expires_ (this)
    {
    }

    RenewResponse::
    RenewResponse (const RenewResponse& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      Expires_ (x.Expires_, f, this)
    {
    }

    RenewResponse::
    RenewResponse (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      Expires_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void RenewResponse::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Expires
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Expires",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< ExpiresType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Expires_)
            {
              ::std::unique_ptr< ExpiresType > r (
                dynamic_cast< ExpiresType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Expires_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }
    }

    RenewResponse* RenewResponse::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class RenewResponse (*this, f, c);
    }

    RenewResponse& RenewResponse::
    operator= (const RenewResponse& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->Expires_ = x.Expires_;
      }

      return *this;
    }

    RenewResponse::
    ~RenewResponse ()
    {
    }

    // GetStatus
    //

    GetStatus::
    GetStatus ()
    : ::xml_schema::Type ()
    {
    }

    GetStatus::
    GetStatus (const GetStatus& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c)
    {
    }

    GetStatus::
    GetStatus (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void GetStatus::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        break;
      }
    }

    GetStatus* GetStatus::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class GetStatus (*this, f, c);
    }

    GetStatus::
    ~GetStatus ()
    {
    }

    // GetStatusResponse
    //

    GetStatusResponse::
    GetStatusResponse ()
    : ::xml_schema::Type (),
      Expires_ (this)
    {
    }

    GetStatusResponse::
    GetStatusResponse (const GetStatusResponse& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      Expires_ (x.Expires_, f, this)
    {
    }

    GetStatusResponse::
    GetStatusResponse (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      Expires_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void GetStatusResponse::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Expires
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Expires",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< ExpiresType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Expires_)
            {
              ::std::unique_ptr< ExpiresType > r (
                dynamic_cast< ExpiresType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Expires_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }
    }

    GetStatusResponse* GetStatusResponse::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class GetStatusResponse (*this, f, c);
    }

    GetStatusResponse& GetStatusResponse::
    operator= (const GetStatusResponse& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->Expires_ = x.Expires_;
      }

      return *this;
    }

    GetStatusResponse::
    ~GetStatusResponse ()
    {
    }

    // Unsubscribe
    //

    Unsubscribe::
    Unsubscribe ()
    : ::xml_schema::Type ()
    {
    }

    Unsubscribe::
    Unsubscribe (const Unsubscribe& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c)
    {
    }

    Unsubscribe::
    Unsubscribe (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Unsubscribe::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        break;
      }
    }

    Unsubscribe* Unsubscribe::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Unsubscribe (*this, f, c);
    }

    Unsubscribe::
    ~Unsubscribe ()
    {
    }

    // SubscriptionEnd
    //

    SubscriptionEnd::
    SubscriptionEnd (const SubscriptionManagerType& SubscriptionManager,
                     const StatusType& Status)
    : ::xml_schema::Type (),
      SubscriptionManager_ (SubscriptionManager, this),
      Status_ (Status, this),
      Reason_ (this)
    {
    }

    SubscriptionEnd::
    SubscriptionEnd (::std::unique_ptr< SubscriptionManagerType > SubscriptionManager,
                     const StatusType& Status)
    : ::xml_schema::Type (),
      SubscriptionManager_ (std::move (SubscriptionManager), this),
      Status_ (Status, this),
      Reason_ (this)
    {
    }

    SubscriptionEnd::
    SubscriptionEnd (::std::unique_ptr< SubscriptionManagerType > SubscriptionManager,
                     ::std::unique_ptr< StatusType > Status)
    : ::xml_schema::Type (),
      SubscriptionManager_ (std::move (SubscriptionManager), this),
      Status_ (std::move (Status), this),
      Reason_ (this)
    {
    }

    SubscriptionEnd::
    SubscriptionEnd (const SubscriptionEnd& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      SubscriptionManager_ (x.SubscriptionManager_, f, this),
      Status_ (x.Status_, f, this),
      Reason_ (x.Reason_, f, this)
    {
    }

    SubscriptionEnd::
    SubscriptionEnd (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      SubscriptionManager_ (this),
      Status_ (this),
      Reason_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SubscriptionEnd::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SubscriptionManager
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "SubscriptionManager",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< SubscriptionManagerType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!SubscriptionManager_.present ())
            {
              ::std::unique_ptr< SubscriptionManagerType > r (
                dynamic_cast< SubscriptionManagerType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->SubscriptionManager_.set (::std::move (r));
              continue;
            }
          }
        }

        // Status
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Status",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< StatusType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Status_.present ())
            {
              ::std::unique_ptr< StatusType > r (
                dynamic_cast< StatusType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Status_.set (::std::move (r));
              continue;
            }
          }
        }

        // Reason
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Reason",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              &::xsd::cxx::tree::factory_impl< ReasonType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< ReasonType > r (
              dynamic_cast< ReasonType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Reason_.push_back (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!SubscriptionManager_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SubscriptionManager",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }

      if (!Status_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Status",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }
    }

    SubscriptionEnd* SubscriptionEnd::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SubscriptionEnd (*this, f, c);
    }

    SubscriptionEnd& SubscriptionEnd::
    operator= (const SubscriptionEnd& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->SubscriptionManager_ = x.SubscriptionManager_;
        this->Status_ = x.Status_;
        this->Reason_ = x.Reason_;
      }

      return *this;
    }

    SubscriptionEnd::
    ~SubscriptionEnd ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace WS
{
  namespace EVENTING
  {
    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (const ::std::string& u,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::EVENTING::parseNotifyTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (const ::std::string& u,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::EVENTING::parseNotifyTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::EVENTING::parseNotifyTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (::std::istream& is,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseNotifyTo (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (::std::istream& is,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseNotifyTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseNotifyTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseNotifyTo (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseNotifyTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseNotifyTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (::xercesc::InputSource& i,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::EVENTING::parseNotifyTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (::xercesc::InputSource& i,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::EVENTING::parseNotifyTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::EVENTING::parseNotifyTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
          ::WS::EVENTING::parseNotifyTo (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "NotifyTo",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::EndpointReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > r (
          dynamic_cast< ::WS::ADDRESSING::EndpointReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "NotifyTo",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    parseNotifyTo (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "NotifyTo",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::EndpointReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > r (
          dynamic_cast< ::WS::ADDRESSING::EndpointReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "NotifyTo",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (const ::std::string& u,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::Subscribe > (
        ::WS::EVENTING::parseSubscribe (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (const ::std::string& u,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Subscribe > (
        ::WS::EVENTING::parseSubscribe (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Subscribe > (
        ::WS::EVENTING::parseSubscribe (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (::std::istream& is,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSubscribe (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (::std::istream& is,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSubscribe (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSubscribe (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSubscribe (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSubscribe (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSubscribe (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (::xercesc::InputSource& i,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::Subscribe > (
        ::WS::EVENTING::parseSubscribe (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (::xercesc::InputSource& i,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Subscribe > (
        ::WS::EVENTING::parseSubscribe (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Subscribe > (
        ::WS::EVENTING::parseSubscribe (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::EVENTING::Subscribe > (
          ::WS::EVENTING::parseSubscribe (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Subscribe" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::Subscribe > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::Subscribe, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Subscribe",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::Subscribe >
    parseSubscribe (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Subscribe" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::Subscribe > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::Subscribe, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Subscribe",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (const ::std::string& u,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::Identifier > (
        ::WS::EVENTING::parseIdentifier (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (const ::std::string& u,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Identifier > (
        ::WS::EVENTING::parseIdentifier (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Identifier > (
        ::WS::EVENTING::parseIdentifier (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (::std::istream& is,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseIdentifier (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (::std::istream& is,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseIdentifier (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseIdentifier (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseIdentifier (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseIdentifier (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseIdentifier (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (::xercesc::InputSource& i,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::Identifier > (
        ::WS::EVENTING::parseIdentifier (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (::xercesc::InputSource& i,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Identifier > (
        ::WS::EVENTING::parseIdentifier (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Identifier > (
        ::WS::EVENTING::parseIdentifier (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::EVENTING::Identifier > (
          ::WS::EVENTING::parseIdentifier (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Identifier" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::Identifier > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::Identifier, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Identifier",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::Identifier >
    parseIdentifier (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Identifier" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::Identifier > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::Identifier, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Identifier",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (const ::std::string& u,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse > (
        ::WS::EVENTING::parseSubscribeResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (const ::std::string& u,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse > (
        ::WS::EVENTING::parseSubscribeResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse > (
        ::WS::EVENTING::parseSubscribeResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (::std::istream& is,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSubscribeResponse (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (::std::istream& is,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSubscribeResponse (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSubscribeResponse (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSubscribeResponse (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSubscribeResponse (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSubscribeResponse (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (::xercesc::InputSource& i,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse > (
        ::WS::EVENTING::parseSubscribeResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (::xercesc::InputSource& i,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse > (
        ::WS::EVENTING::parseSubscribeResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse > (
        ::WS::EVENTING::parseSubscribeResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse > (
          ::WS::EVENTING::parseSubscribeResponse (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SubscribeResponse" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::SubscribeResponse, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SubscribeResponse",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse >
    parseSubscribeResponse (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SubscribeResponse" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::SubscribeResponse > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::SubscribeResponse, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SubscribeResponse",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (const ::std::string& u,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::EVENTING::parseSupportedDialect (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (const ::std::string& u,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::EVENTING::parseSupportedDialect (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::EVENTING::parseSupportedDialect (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (::std::istream& is,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSupportedDialect (isrc, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (::std::istream& is,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSupportedDialect (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSupportedDialect (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSupportedDialect (isrc, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSupportedDialect (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSupportedDialect (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (::xercesc::InputSource& i,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::EVENTING::parseSupportedDialect (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (::xercesc::InputSource& i,
                           ::xml_schema::ErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::EVENTING::parseSupportedDialect (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::EVENTING::parseSupportedDialect (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::xml_schema::Uri > (
          ::WS::EVENTING::parseSupportedDialect (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "SupportedDialect",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::Uri >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::xml_schema::Uri > r (
          dynamic_cast< ::xml_schema::Uri* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SupportedDialect",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDialect (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::Flags f,
                           const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "SupportedDialect",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::Uri >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::xml_schema::Uri > r (
          dynamic_cast< ::xml_schema::Uri* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SupportedDialect",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (const ::std::string& u,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::EVENTING::parseSupportedDeliveryMode (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (const ::std::string& u,
                                ::xml_schema::ErrorHandler& h,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::EVENTING::parseSupportedDeliveryMode (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::EVENTING::parseSupportedDeliveryMode (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (::std::istream& is,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSupportedDeliveryMode (isrc, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (::std::istream& is,
                                ::xml_schema::ErrorHandler& h,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSupportedDeliveryMode (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSupportedDeliveryMode (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSupportedDeliveryMode (isrc, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::ErrorHandler& h,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSupportedDeliveryMode (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSupportedDeliveryMode (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (::xercesc::InputSource& i,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::EVENTING::parseSupportedDeliveryMode (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (::xercesc::InputSource& i,
                                ::xml_schema::ErrorHandler& h,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::EVENTING::parseSupportedDeliveryMode (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::EVENTING::parseSupportedDeliveryMode (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::xml_schema::Uri > (
          ::WS::EVENTING::parseSupportedDeliveryMode (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "SupportedDeliveryMode",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::Uri >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::xml_schema::Uri > r (
          dynamic_cast< ::xml_schema::Uri* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SupportedDeliveryMode",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseSupportedDeliveryMode (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::Flags f,
                                const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "SupportedDeliveryMode",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::Uri >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::xml_schema::Uri > r (
          dynamic_cast< ::xml_schema::Uri* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SupportedDeliveryMode",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (const ::std::string& u,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::Renew > (
        ::WS::EVENTING::parseRenew (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (const ::std::string& u,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Renew > (
        ::WS::EVENTING::parseRenew (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Renew > (
        ::WS::EVENTING::parseRenew (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (::std::istream& is,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseRenew (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (::std::istream& is,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseRenew (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseRenew (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseRenew (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseRenew (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseRenew (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (::xercesc::InputSource& i,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::Renew > (
        ::WS::EVENTING::parseRenew (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (::xercesc::InputSource& i,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Renew > (
        ::WS::EVENTING::parseRenew (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Renew > (
        ::WS::EVENTING::parseRenew (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (const ::xercesc::DOMDocument& doc,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::EVENTING::Renew > (
          ::WS::EVENTING::parseRenew (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Renew" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::Renew > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::Renew, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Renew",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::Renew >
    parseRenew (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Renew" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::Renew > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::Renew, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Renew",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (const ::std::string& u,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::RenewResponse > (
        ::WS::EVENTING::parseRenewResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (const ::std::string& u,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::RenewResponse > (
        ::WS::EVENTING::parseRenewResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::RenewResponse > (
        ::WS::EVENTING::parseRenewResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (::std::istream& is,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseRenewResponse (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (::std::istream& is,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseRenewResponse (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseRenewResponse (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseRenewResponse (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseRenewResponse (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseRenewResponse (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (::xercesc::InputSource& i,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::RenewResponse > (
        ::WS::EVENTING::parseRenewResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (::xercesc::InputSource& i,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::RenewResponse > (
        ::WS::EVENTING::parseRenewResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::RenewResponse > (
        ::WS::EVENTING::parseRenewResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::EVENTING::RenewResponse > (
          ::WS::EVENTING::parseRenewResponse (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "RenewResponse" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::RenewResponse > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::RenewResponse, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RenewResponse",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::RenewResponse >
    parseRenewResponse (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "RenewResponse" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::RenewResponse > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::RenewResponse, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RenewResponse",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (const ::std::string& u,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::GetStatus > (
        ::WS::EVENTING::parseGetStatus (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (const ::std::string& u,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::GetStatus > (
        ::WS::EVENTING::parseGetStatus (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::GetStatus > (
        ::WS::EVENTING::parseGetStatus (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (::std::istream& is,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseGetStatus (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (::std::istream& is,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseGetStatus (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseGetStatus (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseGetStatus (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseGetStatus (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseGetStatus (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (::xercesc::InputSource& i,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::GetStatus > (
        ::WS::EVENTING::parseGetStatus (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (::xercesc::InputSource& i,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::GetStatus > (
        ::WS::EVENTING::parseGetStatus (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::GetStatus > (
        ::WS::EVENTING::parseGetStatus (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::EVENTING::GetStatus > (
          ::WS::EVENTING::parseGetStatus (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "GetStatus" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::GetStatus > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::GetStatus, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetStatus",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatus >
    parseGetStatus (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "GetStatus" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::GetStatus > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::GetStatus, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetStatus",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (const ::std::string& u,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse > (
        ::WS::EVENTING::parseGetStatusResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (const ::std::string& u,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse > (
        ::WS::EVENTING::parseGetStatusResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse > (
        ::WS::EVENTING::parseGetStatusResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (::std::istream& is,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseGetStatusResponse (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (::std::istream& is,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseGetStatusResponse (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseGetStatusResponse (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseGetStatusResponse (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseGetStatusResponse (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseGetStatusResponse (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (::xercesc::InputSource& i,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse > (
        ::WS::EVENTING::parseGetStatusResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (::xercesc::InputSource& i,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse > (
        ::WS::EVENTING::parseGetStatusResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse > (
        ::WS::EVENTING::parseGetStatusResponse (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse > (
          ::WS::EVENTING::parseGetStatusResponse (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "GetStatusResponse" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::GetStatusResponse, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetStatusResponse",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse >
    parseGetStatusResponse (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "GetStatusResponse" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::GetStatusResponse > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::GetStatusResponse, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetStatusResponse",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (const ::std::string& u,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::Unsubscribe > (
        ::WS::EVENTING::parseUnsubscribe (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (const ::std::string& u,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Unsubscribe > (
        ::WS::EVENTING::parseUnsubscribe (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Unsubscribe > (
        ::WS::EVENTING::parseUnsubscribe (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (::std::istream& is,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseUnsubscribe (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (::std::istream& is,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseUnsubscribe (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseUnsubscribe (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseUnsubscribe (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseUnsubscribe (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseUnsubscribe (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (::xercesc::InputSource& i,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::Unsubscribe > (
        ::WS::EVENTING::parseUnsubscribe (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (::xercesc::InputSource& i,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Unsubscribe > (
        ::WS::EVENTING::parseUnsubscribe (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::Unsubscribe > (
        ::WS::EVENTING::parseUnsubscribe (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::EVENTING::Unsubscribe > (
          ::WS::EVENTING::parseUnsubscribe (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Unsubscribe" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::Unsubscribe > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::Unsubscribe, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Unsubscribe",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::Unsubscribe >
    parseUnsubscribe (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Unsubscribe" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::Unsubscribe > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::Unsubscribe, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Unsubscribe",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (const ::std::string& u,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd > (
        ::WS::EVENTING::parseSubscriptionEnd (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (const ::std::string& u,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd > (
        ::WS::EVENTING::parseSubscriptionEnd (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd > (
        ::WS::EVENTING::parseSubscriptionEnd (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (::std::istream& is,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSubscriptionEnd (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (::std::istream& is,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSubscriptionEnd (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::EVENTING::parseSubscriptionEnd (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSubscriptionEnd (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSubscriptionEnd (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::EVENTING::parseSubscriptionEnd (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (::xercesc::InputSource& i,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd > (
        ::WS::EVENTING::parseSubscriptionEnd (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (::xercesc::InputSource& i,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd > (
        ::WS::EVENTING::parseSubscriptionEnd (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd > (
        ::WS::EVENTING::parseSubscriptionEnd (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd > (
          ::WS::EVENTING::parseSubscriptionEnd (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SubscriptionEnd" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::SubscriptionEnd, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SubscriptionEnd",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }

    ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd >
    parseSubscriptionEnd (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SubscriptionEnd" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< ::WS::EVENTING::SubscriptionEnd > r (
          ::xsd::cxx::tree::traits< ::WS::EVENTING::SubscriptionEnd, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SubscriptionEnd",
        "http://schemas.xmlsoap.org/ws/2004/08/eventing");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace WS
{
  namespace EVENTING
  {
    void
    operator<< (::xercesc::DOMElement& e, const DeliveryType& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // NotifyTo
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const DeliveryType::NotifyToType& x (i.getNotifyTo ());
        if (typeid (DeliveryType::NotifyToType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NotifyTo",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "NotifyTo",
            "http://schemas.xmlsoap.org/ws/2004/08/eventing",
            true, true, e, x);
      }

      // Mode
      //
      if (i.getMode ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "Mode",
            e));

        a << *i.getMode ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DeliveryType >
    _xsd_DeliveryType_type_serializer_init (
      "DeliveryType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");


    void
    serializeNotifyTo (::std::ostream& o,
                       const ::WS::ADDRESSING::EndpointReferenceType& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeNotifyTo (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeNotifyTo (::std::ostream& o,
                       const ::WS::ADDRESSING::EndpointReferenceType& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeNotifyTo (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeNotifyTo (::std::ostream& o,
                       const ::WS::ADDRESSING::EndpointReferenceType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeNotifyTo (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeNotifyTo (::xercesc::XMLFormatTarget& t,
                       const ::WS::ADDRESSING::EndpointReferenceType& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeNotifyTo (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeNotifyTo (::xercesc::XMLFormatTarget& t,
                       const ::WS::ADDRESSING::EndpointReferenceType& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeNotifyTo (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeNotifyTo (::xercesc::XMLFormatTarget& t,
                       const ::WS::ADDRESSING::EndpointReferenceType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeNotifyTo (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeNotifyTo (::xercesc::DOMDocument& d,
                       const ::WS::ADDRESSING::EndpointReferenceType& s,
                       ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::WS::ADDRESSING::EndpointReferenceType) == typeid (s))
      {
        if (n.name () == "NotifyTo" &&
            n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "NotifyTo",
            "http://schemas.xmlsoap.org/ws/2004/08/eventing");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "NotifyTo",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e, n, s);
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeNotifyTo (const ::WS::ADDRESSING::EndpointReferenceType& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::WS::ADDRESSING::EndpointReferenceType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "NotifyTo",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "NotifyTo",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, s, f);
      }

      ::WS::EVENTING::serializeNotifyTo (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const NonNegativeDurationType& i)
    {
      e << static_cast< const ::xml_schema::Duration& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const NonNegativeDurationType& i)
    {
      a << static_cast< const ::xml_schema::Duration& > (i);
    }

    void
    operator<< (::xml_schema::ListStream& l,
                const NonNegativeDurationType& i)
    {
      l << static_cast< const ::xml_schema::Duration& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NonNegativeDurationType >
    _xsd_NonNegativeDurationType_type_serializer_init (
      "NonNegativeDurationType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");


    void
    operator<< (::xercesc::DOMElement& e, const ExpirationType& i)
    {
      e << static_cast< const ::xml_schema::String& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const ExpirationType& i)
    {
      a << static_cast< const ::xml_schema::String& > (i);
    }

    void
    operator<< (::xml_schema::ListStream& l,
                const ExpirationType& i)
    {
      l << static_cast< const ::xml_schema::String& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ExpirationType >
    _xsd_ExpirationType_type_serializer_init (
      "ExpirationType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");


    void
    operator<< (::xercesc::DOMElement& e, const ActionList& i)
    {
      e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::Uri, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const ActionList& i)
    {
      a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::Uri, char >& > (i);
    }

    void
    operator<< (::xml_schema::ListStream& l,
                const ActionList& i)
    {
      l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::Uri, char >& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ActionList >
    _xsd_ActionList_type_serializer_init (
      "ActionList",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");


    void
    operator<< (::xercesc::DOMElement& e, const FilterType& i)
    {
      e << static_cast< const ::WS::EVENTING::ActionList& > (i);

      // Dialect
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "Dialect",
            e));

        a << i.getDialect ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FilterType >
    _xsd_FilterType_type_serializer_init (
      "FilterType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");


    void
    operator<< (::xercesc::DOMElement& e, const LanguageSpecificStringType& i)
    {
      e << static_cast< const ::xml_schema::String& > (i);

      // lang
      //
      if (i.getLang ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "lang",
            e));

        a << *i.getLang ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LanguageSpecificStringType >
    _xsd_LanguageSpecificStringType_type_serializer_init (
      "LanguageSpecificStringType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");


    void
    serializeSubscribe (::std::ostream& o,
                        const ::WS::EVENTING::Subscribe& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscribe (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeSubscribe (::std::ostream& o,
                        const ::WS::EVENTING::Subscribe& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscribe (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSubscribe (::std::ostream& o,
                        const ::WS::EVENTING::Subscribe& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscribe (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSubscribe (::xercesc::XMLFormatTarget& t,
                        const ::WS::EVENTING::Subscribe& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscribe (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeSubscribe (::xercesc::XMLFormatTarget& t,
                        const ::WS::EVENTING::Subscribe& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscribe (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSubscribe (::xercesc::XMLFormatTarget& t,
                        const ::WS::EVENTING::Subscribe& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscribe (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSubscribe (::xercesc::DOMDocument& d,
                        const ::WS::EVENTING::Subscribe& s,
                        ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Subscribe" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Subscribe",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeSubscribe (const ::WS::EVENTING::Subscribe& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Subscribe",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, f));

      ::WS::EVENTING::serializeSubscribe (*d, s, f);
      return d;
    }

    void
    serializeIdentifier (::std::ostream& o,
                         const ::WS::EVENTING::Identifier& s,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeIdentifier (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeIdentifier (::std::ostream& o,
                         const ::WS::EVENTING::Identifier& s,
                         ::xml_schema::ErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeIdentifier (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeIdentifier (::std::ostream& o,
                         const ::WS::EVENTING::Identifier& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeIdentifier (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeIdentifier (::xercesc::XMLFormatTarget& t,
                         const ::WS::EVENTING::Identifier& s,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeIdentifier (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeIdentifier (::xercesc::XMLFormatTarget& t,
                         const ::WS::EVENTING::Identifier& s,
                         ::xml_schema::ErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeIdentifier (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeIdentifier (::xercesc::XMLFormatTarget& t,
                         const ::WS::EVENTING::Identifier& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeIdentifier (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeIdentifier (::xercesc::DOMDocument& d,
                         const ::WS::EVENTING::Identifier& s,
                         ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Identifier" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Identifier",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeIdentifier (const ::WS::EVENTING::Identifier& s,
                         const ::xml_schema::NamespaceInfomap& m,
                         ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Identifier",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, f));

      ::WS::EVENTING::serializeIdentifier (*d, s, f);
      return d;
    }

    void
    serializeSubscribeResponse (::std::ostream& o,
                                const ::WS::EVENTING::SubscribeResponse& s,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscribeResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeSubscribeResponse (::std::ostream& o,
                                const ::WS::EVENTING::SubscribeResponse& s,
                                ::xml_schema::ErrorHandler& h,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscribeResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSubscribeResponse (::std::ostream& o,
                                const ::WS::EVENTING::SubscribeResponse& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscribeResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSubscribeResponse (::xercesc::XMLFormatTarget& t,
                                const ::WS::EVENTING::SubscribeResponse& s,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscribeResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeSubscribeResponse (::xercesc::XMLFormatTarget& t,
                                const ::WS::EVENTING::SubscribeResponse& s,
                                ::xml_schema::ErrorHandler& h,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscribeResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSubscribeResponse (::xercesc::XMLFormatTarget& t,
                                const ::WS::EVENTING::SubscribeResponse& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscribeResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSubscribeResponse (::xercesc::DOMDocument& d,
                                const ::WS::EVENTING::SubscribeResponse& s,
                                ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SubscribeResponse" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SubscribeResponse",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeSubscribeResponse (const ::WS::EVENTING::SubscribeResponse& s,
                                const ::xml_schema::NamespaceInfomap& m,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "SubscribeResponse",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, f));

      ::WS::EVENTING::serializeSubscribeResponse (*d, s, f);
      return d;
    }

    void
    serializeSupportedDialect (::std::ostream& o,
                               const ::xml_schema::Uri& s,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSupportedDialect (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeSupportedDialect (::std::ostream& o,
                               const ::xml_schema::Uri& s,
                               ::xml_schema::ErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSupportedDialect (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSupportedDialect (::std::ostream& o,
                               const ::xml_schema::Uri& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSupportedDialect (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSupportedDialect (::xercesc::XMLFormatTarget& t,
                               const ::xml_schema::Uri& s,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSupportedDialect (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeSupportedDialect (::xercesc::XMLFormatTarget& t,
                               const ::xml_schema::Uri& s,
                               ::xml_schema::ErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSupportedDialect (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSupportedDialect (::xercesc::XMLFormatTarget& t,
                               const ::xml_schema::Uri& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSupportedDialect (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSupportedDialect (::xercesc::DOMDocument& d,
                               const ::xml_schema::Uri& s,
                               ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xml_schema::Uri) == typeid (s))
      {
        if (n.name () == "SupportedDialect" &&
            n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SupportedDialect",
            "http://schemas.xmlsoap.org/ws/2004/08/eventing");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "SupportedDialect",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e, n, s);
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeSupportedDialect (const ::xml_schema::Uri& s,
                               const ::xml_schema::NamespaceInfomap& m,
                               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xml_schema::Uri) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "SupportedDialect",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "SupportedDialect",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, s, f);
      }

      ::WS::EVENTING::serializeSupportedDialect (*d, s, f);
      return d;
    }

    void
    serializeSupportedDeliveryMode (::std::ostream& o,
                                    const ::xml_schema::Uri& s,
                                    const ::xml_schema::NamespaceInfomap& m,
                                    const ::std::string& e,
                                    ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSupportedDeliveryMode (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeSupportedDeliveryMode (::std::ostream& o,
                                    const ::xml_schema::Uri& s,
                                    ::xml_schema::ErrorHandler& h,
                                    const ::xml_schema::NamespaceInfomap& m,
                                    const ::std::string& e,
                                    ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSupportedDeliveryMode (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSupportedDeliveryMode (::std::ostream& o,
                                    const ::xml_schema::Uri& s,
                                    ::xercesc::DOMErrorHandler& h,
                                    const ::xml_schema::NamespaceInfomap& m,
                                    const ::std::string& e,
                                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSupportedDeliveryMode (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSupportedDeliveryMode (::xercesc::XMLFormatTarget& t,
                                    const ::xml_schema::Uri& s,
                                    const ::xml_schema::NamespaceInfomap& m,
                                    const ::std::string& e,
                                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSupportedDeliveryMode (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeSupportedDeliveryMode (::xercesc::XMLFormatTarget& t,
                                    const ::xml_schema::Uri& s,
                                    ::xml_schema::ErrorHandler& h,
                                    const ::xml_schema::NamespaceInfomap& m,
                                    const ::std::string& e,
                                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSupportedDeliveryMode (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSupportedDeliveryMode (::xercesc::XMLFormatTarget& t,
                                    const ::xml_schema::Uri& s,
                                    ::xercesc::DOMErrorHandler& h,
                                    const ::xml_schema::NamespaceInfomap& m,
                                    const ::std::string& e,
                                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSupportedDeliveryMode (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSupportedDeliveryMode (::xercesc::DOMDocument& d,
                                    const ::xml_schema::Uri& s,
                                    ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xml_schema::Uri) == typeid (s))
      {
        if (n.name () == "SupportedDeliveryMode" &&
            n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SupportedDeliveryMode",
            "http://schemas.xmlsoap.org/ws/2004/08/eventing");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "SupportedDeliveryMode",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e, n, s);
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeSupportedDeliveryMode (const ::xml_schema::Uri& s,
                                    const ::xml_schema::NamespaceInfomap& m,
                                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xml_schema::Uri) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "SupportedDeliveryMode",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "SupportedDeliveryMode",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, s, f);
      }

      ::WS::EVENTING::serializeSupportedDeliveryMode (*d, s, f);
      return d;
    }

    void
    serializeRenew (::std::ostream& o,
                    const ::WS::EVENTING::Renew& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeRenew (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeRenew (::std::ostream& o,
                    const ::WS::EVENTING::Renew& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeRenew (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeRenew (::std::ostream& o,
                    const ::WS::EVENTING::Renew& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeRenew (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeRenew (::xercesc::XMLFormatTarget& t,
                    const ::WS::EVENTING::Renew& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeRenew (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeRenew (::xercesc::XMLFormatTarget& t,
                    const ::WS::EVENTING::Renew& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeRenew (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeRenew (::xercesc::XMLFormatTarget& t,
                    const ::WS::EVENTING::Renew& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeRenew (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeRenew (::xercesc::DOMDocument& d,
                    const ::WS::EVENTING::Renew& s,
                    ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Renew" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Renew",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeRenew (const ::WS::EVENTING::Renew& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Renew",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, f));

      ::WS::EVENTING::serializeRenew (*d, s, f);
      return d;
    }

    void
    serializeRenewResponse (::std::ostream& o,
                            const ::WS::EVENTING::RenewResponse& s,
                            const ::xml_schema::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeRenewResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeRenewResponse (::std::ostream& o,
                            const ::WS::EVENTING::RenewResponse& s,
                            ::xml_schema::ErrorHandler& h,
                            const ::xml_schema::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeRenewResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeRenewResponse (::std::ostream& o,
                            const ::WS::EVENTING::RenewResponse& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeRenewResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeRenewResponse (::xercesc::XMLFormatTarget& t,
                            const ::WS::EVENTING::RenewResponse& s,
                            const ::xml_schema::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeRenewResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeRenewResponse (::xercesc::XMLFormatTarget& t,
                            const ::WS::EVENTING::RenewResponse& s,
                            ::xml_schema::ErrorHandler& h,
                            const ::xml_schema::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeRenewResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeRenewResponse (::xercesc::XMLFormatTarget& t,
                            const ::WS::EVENTING::RenewResponse& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeRenewResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeRenewResponse (::xercesc::DOMDocument& d,
                            const ::WS::EVENTING::RenewResponse& s,
                            ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "RenewResponse" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RenewResponse",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeRenewResponse (const ::WS::EVENTING::RenewResponse& s,
                            const ::xml_schema::NamespaceInfomap& m,
                            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "RenewResponse",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, f));

      ::WS::EVENTING::serializeRenewResponse (*d, s, f);
      return d;
    }

    void
    serializeGetStatus (::std::ostream& o,
                        const ::WS::EVENTING::GetStatus& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeGetStatus (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeGetStatus (::std::ostream& o,
                        const ::WS::EVENTING::GetStatus& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeGetStatus (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeGetStatus (::std::ostream& o,
                        const ::WS::EVENTING::GetStatus& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeGetStatus (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeGetStatus (::xercesc::XMLFormatTarget& t,
                        const ::WS::EVENTING::GetStatus& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeGetStatus (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeGetStatus (::xercesc::XMLFormatTarget& t,
                        const ::WS::EVENTING::GetStatus& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeGetStatus (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeGetStatus (::xercesc::XMLFormatTarget& t,
                        const ::WS::EVENTING::GetStatus& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeGetStatus (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeGetStatus (::xercesc::DOMDocument& d,
                        const ::WS::EVENTING::GetStatus& s,
                        ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "GetStatus" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GetStatus",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeGetStatus (const ::WS::EVENTING::GetStatus& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "GetStatus",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, f));

      ::WS::EVENTING::serializeGetStatus (*d, s, f);
      return d;
    }

    void
    serializeGetStatusResponse (::std::ostream& o,
                                const ::WS::EVENTING::GetStatusResponse& s,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeGetStatusResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeGetStatusResponse (::std::ostream& o,
                                const ::WS::EVENTING::GetStatusResponse& s,
                                ::xml_schema::ErrorHandler& h,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeGetStatusResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeGetStatusResponse (::std::ostream& o,
                                const ::WS::EVENTING::GetStatusResponse& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeGetStatusResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeGetStatusResponse (::xercesc::XMLFormatTarget& t,
                                const ::WS::EVENTING::GetStatusResponse& s,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeGetStatusResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeGetStatusResponse (::xercesc::XMLFormatTarget& t,
                                const ::WS::EVENTING::GetStatusResponse& s,
                                ::xml_schema::ErrorHandler& h,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeGetStatusResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeGetStatusResponse (::xercesc::XMLFormatTarget& t,
                                const ::WS::EVENTING::GetStatusResponse& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeGetStatusResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeGetStatusResponse (::xercesc::DOMDocument& d,
                                const ::WS::EVENTING::GetStatusResponse& s,
                                ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "GetStatusResponse" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GetStatusResponse",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeGetStatusResponse (const ::WS::EVENTING::GetStatusResponse& s,
                                const ::xml_schema::NamespaceInfomap& m,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "GetStatusResponse",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, f));

      ::WS::EVENTING::serializeGetStatusResponse (*d, s, f);
      return d;
    }

    void
    serializeUnsubscribe (::std::ostream& o,
                          const ::WS::EVENTING::Unsubscribe& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeUnsubscribe (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeUnsubscribe (::std::ostream& o,
                          const ::WS::EVENTING::Unsubscribe& s,
                          ::xml_schema::ErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeUnsubscribe (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeUnsubscribe (::std::ostream& o,
                          const ::WS::EVENTING::Unsubscribe& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeUnsubscribe (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeUnsubscribe (::xercesc::XMLFormatTarget& t,
                          const ::WS::EVENTING::Unsubscribe& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeUnsubscribe (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeUnsubscribe (::xercesc::XMLFormatTarget& t,
                          const ::WS::EVENTING::Unsubscribe& s,
                          ::xml_schema::ErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeUnsubscribe (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeUnsubscribe (::xercesc::XMLFormatTarget& t,
                          const ::WS::EVENTING::Unsubscribe& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeUnsubscribe (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeUnsubscribe (::xercesc::DOMDocument& d,
                          const ::WS::EVENTING::Unsubscribe& s,
                          ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Unsubscribe" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Unsubscribe",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeUnsubscribe (const ::WS::EVENTING::Unsubscribe& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Unsubscribe",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, f));

      ::WS::EVENTING::serializeUnsubscribe (*d, s, f);
      return d;
    }

    void
    serializeSubscriptionEnd (::std::ostream& o,
                              const ::WS::EVENTING::SubscriptionEnd& s,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscriptionEnd (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeSubscriptionEnd (::std::ostream& o,
                              const ::WS::EVENTING::SubscriptionEnd& s,
                              ::xml_schema::ErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscriptionEnd (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSubscriptionEnd (::std::ostream& o,
                              const ::WS::EVENTING::SubscriptionEnd& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscriptionEnd (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSubscriptionEnd (::xercesc::XMLFormatTarget& t,
                              const ::WS::EVENTING::SubscriptionEnd& s,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscriptionEnd (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeSubscriptionEnd (::xercesc::XMLFormatTarget& t,
                              const ::WS::EVENTING::SubscriptionEnd& s,
                              ::xml_schema::ErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscriptionEnd (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSubscriptionEnd (::xercesc::XMLFormatTarget& t,
                              const ::WS::EVENTING::SubscriptionEnd& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::EVENTING::serializeSubscriptionEnd (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSubscriptionEnd (::xercesc::DOMDocument& d,
                              const ::WS::EVENTING::SubscriptionEnd& s,
                              ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SubscriptionEnd" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SubscriptionEnd",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeSubscriptionEnd (const ::WS::EVENTING::SubscriptionEnd& s,
                              const ::xml_schema::NamespaceInfomap& m,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "SubscriptionEnd",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          m, f));

      ::WS::EVENTING::serializeSubscriptionEnd (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const SubscriptionEndCodeType& i)
    {
      e << static_cast< const ::xml_schema::Uri& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const SubscriptionEndCodeType& i)
    {
      a << static_cast< const ::xml_schema::Uri& > (i);
    }

    void
    operator<< (::xml_schema::ListStream& l,
                const SubscriptionEndCodeType& i)
    {
      l << static_cast< const ::xml_schema::Uri& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubscriptionEndCodeType >
    _xsd_SubscriptionEndCodeType_type_serializer_init (
      "SubscriptionEndCodeType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");


    void
    operator<< (::xercesc::DOMElement& e, const OpenSubscriptionEndCodeType& i)
    {
      e << static_cast< const ::xml_schema::String& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const OpenSubscriptionEndCodeType& i)
    {
      a << static_cast< const ::xml_schema::String& > (i);
    }

    void
    operator<< (::xml_schema::ListStream& l,
                const OpenSubscriptionEndCodeType& i)
    {
      l << static_cast< const ::xml_schema::String& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OpenSubscriptionEndCodeType >
    _xsd_OpenSubscriptionEndCodeType_type_serializer_init (
      "OpenSubscriptionEndCodeType",
      "http://schemas.xmlsoap.org/ws/2004/08/eventing");


    void
    operator<< (::xercesc::DOMElement& e, const Subscribe& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // EndTo
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.getEndTo ())
        {
          const Subscribe::EndToType& x (*i.getEndTo ());
          if (typeid (Subscribe::EndToType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "EndTo",
                "http://schemas.xmlsoap.org/ws/2004/08/eventing",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "EndTo",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              false, true, e, x);
        }
      }

      // Delivery
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const Subscribe::DeliveryType& x (i.getDelivery ());
        if (typeid (Subscribe::DeliveryType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Delivery",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Delivery",
            "http://schemas.xmlsoap.org/ws/2004/08/eventing",
            false, true, e, x);
      }

      // Expires
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.getExpires ())
        {
          const Subscribe::ExpiresType& x (*i.getExpires ());
          if (typeid (Subscribe::ExpiresType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Expires",
                "http://schemas.xmlsoap.org/ws/2004/08/eventing",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "Expires",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              false, true, e, x);
        }
      }

      // Filter
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.getFilter ())
        {
          const Subscribe::FilterType& x (*i.getFilter ());
          if (typeid (Subscribe::FilterType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Filter",
                "http://schemas.xmlsoap.org/ws/2004/08/eventing",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "Filter",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              false, true, e, x);
        }
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Identifier& i)
    {
      e << static_cast< const ::xml_schema::Uri& > (i);

      // IsReferenceParameter
      //
      if (i.getIsReferenceParameter ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "IsReferenceParameter",
            "http://www.w3.org/2005/08/addressing",
            e));

        a << *i.getIsReferenceParameter ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SubscribeResponse& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // SubscriptionManager
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const SubscribeResponse::SubscriptionManagerType& x (i.getSubscriptionManager ());
        if (typeid (SubscribeResponse::SubscriptionManagerType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SubscriptionManager",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "SubscriptionManager",
            "http://schemas.xmlsoap.org/ws/2004/08/eventing",
            false, true, e, x);
      }

      // Expires
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const SubscribeResponse::ExpiresType& x (i.getExpires ());
        if (typeid (SubscribeResponse::ExpiresType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Expires",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Expires",
            "http://schemas.xmlsoap.org/ws/2004/08/eventing",
            false, true, e, x);
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Renew& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // Expires
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.getExpires ())
        {
          const Renew::ExpiresType& x (*i.getExpires ());
          if (typeid (Renew::ExpiresType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Expires",
                "http://schemas.xmlsoap.org/ws/2004/08/eventing",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "Expires",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              false, true, e, x);
        }
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const RenewResponse& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // Expires
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.getExpires ())
        {
          const RenewResponse::ExpiresType& x (*i.getExpires ());
          if (typeid (RenewResponse::ExpiresType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Expires",
                "http://schemas.xmlsoap.org/ws/2004/08/eventing",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "Expires",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              false, true, e, x);
        }
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const GetStatus& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const GetStatusResponse& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // Expires
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.getExpires ())
        {
          const GetStatusResponse::ExpiresType& x (*i.getExpires ());
          if (typeid (GetStatusResponse::ExpiresType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Expires",
                "http://schemas.xmlsoap.org/ws/2004/08/eventing",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "Expires",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              false, true, e, x);
        }
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Unsubscribe& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const SubscriptionEnd& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // SubscriptionManager
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const SubscriptionEnd::SubscriptionManagerType& x (i.getSubscriptionManager ());
        if (typeid (SubscriptionEnd::SubscriptionManagerType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SubscriptionManager",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "SubscriptionManager",
            "http://schemas.xmlsoap.org/ws/2004/08/eventing",
            false, true, e, x);
      }

      // Status
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const SubscriptionEnd::StatusType& x (i.getStatus ());
        if (typeid (SubscriptionEnd::StatusType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Status",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Status",
            "http://schemas.xmlsoap.org/ws/2004/08/eventing",
            false, true, e, x);
      }

      // Reason
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (SubscriptionEnd::ReasonConstIterator
             b (i.getReason ().begin ()), n (i.getReason ().end ());
             b != n; ++b)
        {
          if (typeid (SubscriptionEnd::ReasonType) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Reason",
                "http://schemas.xmlsoap.org/ws/2004/08/eventing",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "Reason",
              "http://schemas.xmlsoap.org/ws/2004/08/eventing",
              false, true, e, *b);
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

