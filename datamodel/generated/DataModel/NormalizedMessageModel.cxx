// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "DataModel/NormalizedMessageModel.hxx"

namespace MESSAGEMODEL
{
  // Header
  // 

  const Header::ActionOptional& Header::
  getAction () const
  {
    return this->Action_;
  }

  Header::ActionOptional& Header::
  getAction ()
  {
    return this->Action_;
  }

  void Header::
  setAction (const ActionType& x)
  {
    this->Action_.set (x);
  }

  void Header::
  setAction (const ActionOptional& x)
  {
    this->Action_ = x;
  }

  void Header::
  setAction (::std::unique_ptr< ActionType > x)
  {
    this->Action_.set (std::move (x));
  }

  const Header::AppSequenceOptional& Header::
  getAppSequence () const
  {
    return this->AppSequence_;
  }

  Header::AppSequenceOptional& Header::
  getAppSequence ()
  {
    return this->AppSequence_;
  }

  void Header::
  setAppSequence (const AppSequenceType& x)
  {
    this->AppSequence_.set (x);
  }

  void Header::
  setAppSequence (const AppSequenceOptional& x)
  {
    this->AppSequence_ = x;
  }

  void Header::
  setAppSequence (::std::unique_ptr< AppSequenceType > x)
  {
    this->AppSequence_.set (std::move (x));
  }

  const Header::FaultToOptional& Header::
  getFaultTo () const
  {
    return this->FaultTo_;
  }

  Header::FaultToOptional& Header::
  getFaultTo ()
  {
    return this->FaultTo_;
  }

  void Header::
  setFaultTo (const FaultToType& x)
  {
    this->FaultTo_.set (x);
  }

  void Header::
  setFaultTo (const FaultToOptional& x)
  {
    this->FaultTo_ = x;
  }

  void Header::
  setFaultTo (::std::unique_ptr< FaultToType > x)
  {
    this->FaultTo_.set (std::move (x));
  }

  const Header::FromOptional& Header::
  getFrom () const
  {
    return this->From_;
  }

  Header::FromOptional& Header::
  getFrom ()
  {
    return this->From_;
  }

  void Header::
  setFrom (const FromType& x)
  {
    this->From_.set (x);
  }

  void Header::
  setFrom (const FromOptional& x)
  {
    this->From_ = x;
  }

  void Header::
  setFrom (::std::unique_ptr< FromType > x)
  {
    this->From_.set (std::move (x));
  }

  const Header::MessageIDOptional& Header::
  getMessageID () const
  {
    return this->MessageID_;
  }

  Header::MessageIDOptional& Header::
  getMessageID ()
  {
    return this->MessageID_;
  }

  void Header::
  setMessageID (const MessageIDType& x)
  {
    this->MessageID_.set (x);
  }

  void Header::
  setMessageID (const MessageIDOptional& x)
  {
    this->MessageID_ = x;
  }

  void Header::
  setMessageID (::std::unique_ptr< MessageIDType > x)
  {
    this->MessageID_.set (std::move (x));
  }

  const Header::ReferenceParametersOptional& Header::
  getReferenceParameters () const
  {
    return this->ReferenceParameters_;
  }

  Header::ReferenceParametersOptional& Header::
  getReferenceParameters ()
  {
    return this->ReferenceParameters_;
  }

  void Header::
  setReferenceParameters (const ReferenceParametersType& x)
  {
    this->ReferenceParameters_.set (x);
  }

  void Header::
  setReferenceParameters (const ReferenceParametersOptional& x)
  {
    this->ReferenceParameters_ = x;
  }

  void Header::
  setReferenceParameters (::std::unique_ptr< ReferenceParametersType > x)
  {
    this->ReferenceParameters_.set (std::move (x));
  }

  const Header::RelatesToOptional& Header::
  getRelatesTo () const
  {
    return this->RelatesTo_;
  }

  Header::RelatesToOptional& Header::
  getRelatesTo ()
  {
    return this->RelatesTo_;
  }

  void Header::
  setRelatesTo (const RelatesToType& x)
  {
    this->RelatesTo_.set (x);
  }

  void Header::
  setRelatesTo (const RelatesToOptional& x)
  {
    this->RelatesTo_ = x;
  }

  void Header::
  setRelatesTo (::std::unique_ptr< RelatesToType > x)
  {
    this->RelatesTo_.set (std::move (x));
  }

  const Header::ReplyToOptional& Header::
  getReplyTo () const
  {
    return this->ReplyTo_;
  }

  Header::ReplyToOptional& Header::
  getReplyTo ()
  {
    return this->ReplyTo_;
  }

  void Header::
  setReplyTo (const ReplyToType& x)
  {
    this->ReplyTo_.set (x);
  }

  void Header::
  setReplyTo (const ReplyToOptional& x)
  {
    this->ReplyTo_ = x;
  }

  void Header::
  setReplyTo (::std::unique_ptr< ReplyToType > x)
  {
    this->ReplyTo_.set (std::move (x));
  }

  const Header::ToOptional& Header::
  getTo () const
  {
    return this->To_;
  }

  Header::ToOptional& Header::
  getTo ()
  {
    return this->To_;
  }

  void Header::
  setTo (const ToType& x)
  {
    this->To_.set (x);
  }

  void Header::
  setTo (const ToOptional& x)
  {
    this->To_ = x;
  }

  void Header::
  setTo (::std::unique_ptr< ToType > x)
  {
    this->To_.set (std::move (x));
  }

  const Header::IdentifierOptional& Header::
  getIdentifier () const
  {
    return this->Identifier_;
  }

  Header::IdentifierOptional& Header::
  getIdentifier ()
  {
    return this->Identifier_;
  }

  void Header::
  setIdentifier (const IdentifierType& x)
  {
    this->Identifier_.set (x);
  }

  void Header::
  setIdentifier (const IdentifierOptional& x)
  {
    this->Identifier_ = x;
  }

  void Header::
  setIdentifier (::std::unique_ptr< IdentifierType > x)
  {
    this->Identifier_.set (std::move (x));
  }


  // Body
  // 

  const Body::ByeOptional& Body::
  getBye () const
  {
    return this->Bye_;
  }

  Body::ByeOptional& Body::
  getBye ()
  {
    return this->Bye_;
  }

  void Body::
  setBye (const ByeType& x)
  {
    this->Bye_.set (x);
  }

  void Body::
  setBye (const ByeOptional& x)
  {
    this->Bye_ = x;
  }

  void Body::
  setBye (::std::unique_ptr< ByeType > x)
  {
    this->Bye_.set (std::move (x));
  }

  const Body::HelloOptional& Body::
  getHello () const
  {
    return this->Hello_;
  }

  Body::HelloOptional& Body::
  getHello ()
  {
    return this->Hello_;
  }

  void Body::
  setHello (const HelloType& x)
  {
    this->Hello_.set (x);
  }

  void Body::
  setHello (const HelloOptional& x)
  {
    this->Hello_ = x;
  }

  void Body::
  setHello (::std::unique_ptr< HelloType > x)
  {
    this->Hello_.set (std::move (x));
  }

  const Body::ProbeOptional& Body::
  getProbe () const
  {
    return this->Probe_;
  }

  Body::ProbeOptional& Body::
  getProbe ()
  {
    return this->Probe_;
  }

  void Body::
  setProbe (const ProbeType& x)
  {
    this->Probe_.set (x);
  }

  void Body::
  setProbe (const ProbeOptional& x)
  {
    this->Probe_ = x;
  }

  void Body::
  setProbe (::std::unique_ptr< ProbeType > x)
  {
    this->Probe_.set (std::move (x));
  }

  const Body::ProbeMatchesOptional& Body::
  getProbeMatches () const
  {
    return this->ProbeMatches_;
  }

  Body::ProbeMatchesOptional& Body::
  getProbeMatches ()
  {
    return this->ProbeMatches_;
  }

  void Body::
  setProbeMatches (const ProbeMatchesType& x)
  {
    this->ProbeMatches_.set (x);
  }

  void Body::
  setProbeMatches (const ProbeMatchesOptional& x)
  {
    this->ProbeMatches_ = x;
  }

  void Body::
  setProbeMatches (::std::unique_ptr< ProbeMatchesType > x)
  {
    this->ProbeMatches_.set (std::move (x));
  }

  const Body::ResolveOptional& Body::
  getResolve () const
  {
    return this->Resolve_;
  }

  Body::ResolveOptional& Body::
  getResolve ()
  {
    return this->Resolve_;
  }

  void Body::
  setResolve (const ResolveType& x)
  {
    this->Resolve_.set (x);
  }

  void Body::
  setResolve (const ResolveOptional& x)
  {
    this->Resolve_ = x;
  }

  void Body::
  setResolve (::std::unique_ptr< ResolveType > x)
  {
    this->Resolve_.set (std::move (x));
  }

  const Body::ResolveMatchesOptional& Body::
  getResolveMatches () const
  {
    return this->ResolveMatches_;
  }

  Body::ResolveMatchesOptional& Body::
  getResolveMatches ()
  {
    return this->ResolveMatches_;
  }

  void Body::
  setResolveMatches (const ResolveMatchesType& x)
  {
    this->ResolveMatches_.set (x);
  }

  void Body::
  setResolveMatches (const ResolveMatchesOptional& x)
  {
    this->ResolveMatches_ = x;
  }

  void Body::
  setResolveMatches (::std::unique_ptr< ResolveMatchesType > x)
  {
    this->ResolveMatches_.set (std::move (x));
  }

  const Body::GetMetadataOptional& Body::
  getGetMetadata () const
  {
    return this->GetMetadata_;
  }

  Body::GetMetadataOptional& Body::
  getGetMetadata ()
  {
    return this->GetMetadata_;
  }

  void Body::
  setGetMetadata (const GetMetadataType& x)
  {
    this->GetMetadata_.set (x);
  }

  void Body::
  setGetMetadata (const GetMetadataOptional& x)
  {
    this->GetMetadata_ = x;
  }

  void Body::
  setGetMetadata (::std::unique_ptr< GetMetadataType > x)
  {
    this->GetMetadata_.set (std::move (x));
  }

  const Body::MetadataOptional& Body::
  getMetadata () const
  {
    return this->Metadata_;
  }

  Body::MetadataOptional& Body::
  getMetadata ()
  {
    return this->Metadata_;
  }

  void Body::
  setMetadata (const MetadataType& x)
  {
    this->Metadata_.set (x);
  }

  void Body::
  setMetadata (const MetadataOptional& x)
  {
    this->Metadata_ = x;
  }

  void Body::
  setMetadata (::std::unique_ptr< MetadataType > x)
  {
    this->Metadata_.set (std::move (x));
  }

  const Body::SubscribeOptional& Body::
  getSubscribe () const
  {
    return this->Subscribe_;
  }

  Body::SubscribeOptional& Body::
  getSubscribe ()
  {
    return this->Subscribe_;
  }

  void Body::
  setSubscribe (const SubscribeType& x)
  {
    this->Subscribe_.set (x);
  }

  void Body::
  setSubscribe (const SubscribeOptional& x)
  {
    this->Subscribe_ = x;
  }

  void Body::
  setSubscribe (::std::unique_ptr< SubscribeType > x)
  {
    this->Subscribe_.set (std::move (x));
  }

  const Body::SubscribeResponseOptional& Body::
  getSubscribeResponse () const
  {
    return this->SubscribeResponse_;
  }

  Body::SubscribeResponseOptional& Body::
  getSubscribeResponse ()
  {
    return this->SubscribeResponse_;
  }

  void Body::
  setSubscribeResponse (const SubscribeResponseType& x)
  {
    this->SubscribeResponse_.set (x);
  }

  void Body::
  setSubscribeResponse (const SubscribeResponseOptional& x)
  {
    this->SubscribeResponse_ = x;
  }

  void Body::
  setSubscribeResponse (::std::unique_ptr< SubscribeResponseType > x)
  {
    this->SubscribeResponse_.set (std::move (x));
  }

  const Body::UnsubscribeOptional& Body::
  getUnsubscribe () const
  {
    return this->Unsubscribe_;
  }

  Body::UnsubscribeOptional& Body::
  getUnsubscribe ()
  {
    return this->Unsubscribe_;
  }

  void Body::
  setUnsubscribe (const UnsubscribeType& x)
  {
    this->Unsubscribe_.set (x);
  }

  void Body::
  setUnsubscribe (const UnsubscribeOptional& x)
  {
    this->Unsubscribe_ = x;
  }

  void Body::
  setUnsubscribe (::std::unique_ptr< UnsubscribeType > x)
  {
    this->Unsubscribe_.set (std::move (x));
  }

  const Body::RenewOptional& Body::
  getRenew () const
  {
    return this->Renew_;
  }

  Body::RenewOptional& Body::
  getRenew ()
  {
    return this->Renew_;
  }

  void Body::
  setRenew (const RenewType& x)
  {
    this->Renew_.set (x);
  }

  void Body::
  setRenew (const RenewOptional& x)
  {
    this->Renew_ = x;
  }

  void Body::
  setRenew (::std::unique_ptr< RenewType > x)
  {
    this->Renew_.set (std::move (x));
  }

  const Body::RenewResponseOptional& Body::
  getRenewResponse () const
  {
    return this->RenewResponse_;
  }

  Body::RenewResponseOptional& Body::
  getRenewResponse ()
  {
    return this->RenewResponse_;
  }

  void Body::
  setRenewResponse (const RenewResponseType& x)
  {
    this->RenewResponse_.set (x);
  }

  void Body::
  setRenewResponse (const RenewResponseOptional& x)
  {
    this->RenewResponse_ = x;
  }

  void Body::
  setRenewResponse (::std::unique_ptr< RenewResponseType > x)
  {
    this->RenewResponse_.set (std::move (x));
  }

  const Body::GetStatusOptional& Body::
  getGetStatus () const
  {
    return this->GetStatus_;
  }

  Body::GetStatusOptional& Body::
  getGetStatus ()
  {
    return this->GetStatus_;
  }

  void Body::
  setGetStatus (const GetStatusType& x)
  {
    this->GetStatus_.set (x);
  }

  void Body::
  setGetStatus (const GetStatusOptional& x)
  {
    this->GetStatus_ = x;
  }

  void Body::
  setGetStatus (::std::unique_ptr< GetStatusType > x)
  {
    this->GetStatus_.set (std::move (x));
  }

  const Body::GetStatusResponseOptional& Body::
  getGetStatusResponse () const
  {
    return this->GetStatusResponse_;
  }

  Body::GetStatusResponseOptional& Body::
  getGetStatusResponse ()
  {
    return this->GetStatusResponse_;
  }

  void Body::
  setGetStatusResponse (const GetStatusResponseType& x)
  {
    this->GetStatusResponse_.set (x);
  }

  void Body::
  setGetStatusResponse (const GetStatusResponseOptional& x)
  {
    this->GetStatusResponse_ = x;
  }

  void Body::
  setGetStatusResponse (::std::unique_ptr< GetStatusResponseType > x)
  {
    this->GetStatusResponse_.set (std::move (x));
  }

  const Body::DescriptionModificationReportOptional& Body::
  getDescriptionModificationReport () const
  {
    return this->DescriptionModificationReport_;
  }

  Body::DescriptionModificationReportOptional& Body::
  getDescriptionModificationReport ()
  {
    return this->DescriptionModificationReport_;
  }

  void Body::
  setDescriptionModificationReport (const DescriptionModificationReportType& x)
  {
    this->DescriptionModificationReport_.set (x);
  }

  void Body::
  setDescriptionModificationReport (const DescriptionModificationReportOptional& x)
  {
    this->DescriptionModificationReport_ = x;
  }

  void Body::
  setDescriptionModificationReport (::std::unique_ptr< DescriptionModificationReportType > x)
  {
    this->DescriptionModificationReport_.set (std::move (x));
  }

  const Body::GetContextStatesOptional& Body::
  getGetContextStates () const
  {
    return this->GetContextStates_;
  }

  Body::GetContextStatesOptional& Body::
  getGetContextStates ()
  {
    return this->GetContextStates_;
  }

  void Body::
  setGetContextStates (const GetContextStatesType& x)
  {
    this->GetContextStates_.set (x);
  }

  void Body::
  setGetContextStates (const GetContextStatesOptional& x)
  {
    this->GetContextStates_ = x;
  }

  void Body::
  setGetContextStates (::std::unique_ptr< GetContextStatesType > x)
  {
    this->GetContextStates_.set (std::move (x));
  }

  const Body::GetContextStatesResponseOptional& Body::
  getGetContextStatesResponse () const
  {
    return this->GetContextStatesResponse_;
  }

  Body::GetContextStatesResponseOptional& Body::
  getGetContextStatesResponse ()
  {
    return this->GetContextStatesResponse_;
  }

  void Body::
  setGetContextStatesResponse (const GetContextStatesResponseType& x)
  {
    this->GetContextStatesResponse_.set (x);
  }

  void Body::
  setGetContextStatesResponse (const GetContextStatesResponseOptional& x)
  {
    this->GetContextStatesResponse_ = x;
  }

  void Body::
  setGetContextStatesResponse (::std::unique_ptr< GetContextStatesResponseType > x)
  {
    this->GetContextStatesResponse_.set (std::move (x));
  }

  const Body::SetContextStateOptional& Body::
  getSetContextState () const
  {
    return this->SetContextState_;
  }

  Body::SetContextStateOptional& Body::
  getSetContextState ()
  {
    return this->SetContextState_;
  }

  void Body::
  setSetContextState (const SetContextStateType& x)
  {
    this->SetContextState_.set (x);
  }

  void Body::
  setSetContextState (const SetContextStateOptional& x)
  {
    this->SetContextState_ = x;
  }

  void Body::
  setSetContextState (::std::unique_ptr< SetContextStateType > x)
  {
    this->SetContextState_.set (std::move (x));
  }

  const Body::SetContextStateResponseOptional& Body::
  getSetContextStateResponse () const
  {
    return this->SetContextStateResponse_;
  }

  Body::SetContextStateResponseOptional& Body::
  getSetContextStateResponse ()
  {
    return this->SetContextStateResponse_;
  }

  void Body::
  setSetContextStateResponse (const SetContextStateResponseType& x)
  {
    this->SetContextStateResponse_.set (x);
  }

  void Body::
  setSetContextStateResponse (const SetContextStateResponseOptional& x)
  {
    this->SetContextStateResponse_ = x;
  }

  void Body::
  setSetContextStateResponse (::std::unique_ptr< SetContextStateResponseType > x)
  {
    this->SetContextStateResponse_.set (std::move (x));
  }

  const Body::EpisodicContextReportOptional& Body::
  getEpisodicContextReport () const
  {
    return this->EpisodicContextReport_;
  }

  Body::EpisodicContextReportOptional& Body::
  getEpisodicContextReport ()
  {
    return this->EpisodicContextReport_;
  }

  void Body::
  setEpisodicContextReport (const EpisodicContextReportType& x)
  {
    this->EpisodicContextReport_.set (x);
  }

  void Body::
  setEpisodicContextReport (const EpisodicContextReportOptional& x)
  {
    this->EpisodicContextReport_ = x;
  }

  void Body::
  setEpisodicContextReport (::std::unique_ptr< EpisodicContextReportType > x)
  {
    this->EpisodicContextReport_.set (std::move (x));
  }

  const Body::PeriodicContextReportOptional& Body::
  getPeriodicContextReport () const
  {
    return this->PeriodicContextReport_;
  }

  Body::PeriodicContextReportOptional& Body::
  getPeriodicContextReport ()
  {
    return this->PeriodicContextReport_;
  }

  void Body::
  setPeriodicContextReport (const PeriodicContextReportType& x)
  {
    this->PeriodicContextReport_.set (x);
  }

  void Body::
  setPeriodicContextReport (const PeriodicContextReportOptional& x)
  {
    this->PeriodicContextReport_ = x;
  }

  void Body::
  setPeriodicContextReport (::std::unique_ptr< PeriodicContextReportType > x)
  {
    this->PeriodicContextReport_.set (std::move (x));
  }

  const Body::EpisodicAlertReportOptional& Body::
  getEpisodicAlertReport () const
  {
    return this->EpisodicAlertReport_;
  }

  Body::EpisodicAlertReportOptional& Body::
  getEpisodicAlertReport ()
  {
    return this->EpisodicAlertReport_;
  }

  void Body::
  setEpisodicAlertReport (const EpisodicAlertReportType& x)
  {
    this->EpisodicAlertReport_.set (x);
  }

  void Body::
  setEpisodicAlertReport (const EpisodicAlertReportOptional& x)
  {
    this->EpisodicAlertReport_ = x;
  }

  void Body::
  setEpisodicAlertReport (::std::unique_ptr< EpisodicAlertReportType > x)
  {
    this->EpisodicAlertReport_.set (std::move (x));
  }

  const Body::EpisodicComponentReportOptional& Body::
  getEpisodicComponentReport () const
  {
    return this->EpisodicComponentReport_;
  }

  Body::EpisodicComponentReportOptional& Body::
  getEpisodicComponentReport ()
  {
    return this->EpisodicComponentReport_;
  }

  void Body::
  setEpisodicComponentReport (const EpisodicComponentReportType& x)
  {
    this->EpisodicComponentReport_.set (x);
  }

  void Body::
  setEpisodicComponentReport (const EpisodicComponentReportOptional& x)
  {
    this->EpisodicComponentReport_ = x;
  }

  void Body::
  setEpisodicComponentReport (::std::unique_ptr< EpisodicComponentReportType > x)
  {
    this->EpisodicComponentReport_.set (std::move (x));
  }

  const Body::EpisodicMetricReportOptional& Body::
  getEpisodicMetricReport () const
  {
    return this->EpisodicMetricReport_;
  }

  Body::EpisodicMetricReportOptional& Body::
  getEpisodicMetricReport ()
  {
    return this->EpisodicMetricReport_;
  }

  void Body::
  setEpisodicMetricReport (const EpisodicMetricReportType& x)
  {
    this->EpisodicMetricReport_.set (x);
  }

  void Body::
  setEpisodicMetricReport (const EpisodicMetricReportOptional& x)
  {
    this->EpisodicMetricReport_ = x;
  }

  void Body::
  setEpisodicMetricReport (::std::unique_ptr< EpisodicMetricReportType > x)
  {
    this->EpisodicMetricReport_.set (std::move (x));
  }

  const Body::EpisodicOperationalStateReportOptional& Body::
  getEpisodicOperationalStateReport () const
  {
    return this->EpisodicOperationalStateReport_;
  }

  Body::EpisodicOperationalStateReportOptional& Body::
  getEpisodicOperationalStateReport ()
  {
    return this->EpisodicOperationalStateReport_;
  }

  void Body::
  setEpisodicOperationalStateReport (const EpisodicOperationalStateReportType& x)
  {
    this->EpisodicOperationalStateReport_.set (x);
  }

  void Body::
  setEpisodicOperationalStateReport (const EpisodicOperationalStateReportOptional& x)
  {
    this->EpisodicOperationalStateReport_ = x;
  }

  void Body::
  setEpisodicOperationalStateReport (::std::unique_ptr< EpisodicOperationalStateReportType > x)
  {
    this->EpisodicOperationalStateReport_.set (std::move (x));
  }

  const Body::PeriodicAlertReportOptional& Body::
  getPeriodicAlertReport () const
  {
    return this->PeriodicAlertReport_;
  }

  Body::PeriodicAlertReportOptional& Body::
  getPeriodicAlertReport ()
  {
    return this->PeriodicAlertReport_;
  }

  void Body::
  setPeriodicAlertReport (const PeriodicAlertReportType& x)
  {
    this->PeriodicAlertReport_.set (x);
  }

  void Body::
  setPeriodicAlertReport (const PeriodicAlertReportOptional& x)
  {
    this->PeriodicAlertReport_ = x;
  }

  void Body::
  setPeriodicAlertReport (::std::unique_ptr< PeriodicAlertReportType > x)
  {
    this->PeriodicAlertReport_.set (std::move (x));
  }

  const Body::PeriodicMetricReportOptional& Body::
  getPeriodicMetricReport () const
  {
    return this->PeriodicMetricReport_;
  }

  Body::PeriodicMetricReportOptional& Body::
  getPeriodicMetricReport ()
  {
    return this->PeriodicMetricReport_;
  }

  void Body::
  setPeriodicMetricReport (const PeriodicMetricReportType& x)
  {
    this->PeriodicMetricReport_.set (x);
  }

  void Body::
  setPeriodicMetricReport (const PeriodicMetricReportOptional& x)
  {
    this->PeriodicMetricReport_ = x;
  }

  void Body::
  setPeriodicMetricReport (::std::unique_ptr< PeriodicMetricReportType > x)
  {
    this->PeriodicMetricReport_.set (std::move (x));
  }

  const Body::OperationInvokedReportOptional& Body::
  getOperationInvokedReport () const
  {
    return this->OperationInvokedReport_;
  }

  Body::OperationInvokedReportOptional& Body::
  getOperationInvokedReport ()
  {
    return this->OperationInvokedReport_;
  }

  void Body::
  setOperationInvokedReport (const OperationInvokedReportType& x)
  {
    this->OperationInvokedReport_.set (x);
  }

  void Body::
  setOperationInvokedReport (const OperationInvokedReportOptional& x)
  {
    this->OperationInvokedReport_ = x;
  }

  void Body::
  setOperationInvokedReport (::std::unique_ptr< OperationInvokedReportType > x)
  {
    this->OperationInvokedReport_.set (std::move (x));
  }

  const Body::GetMdDescriptionOptional& Body::
  getGetMdDescription () const
  {
    return this->GetMdDescription_;
  }

  Body::GetMdDescriptionOptional& Body::
  getGetMdDescription ()
  {
    return this->GetMdDescription_;
  }

  void Body::
  setGetMdDescription (const GetMdDescriptionType& x)
  {
    this->GetMdDescription_.set (x);
  }

  void Body::
  setGetMdDescription (const GetMdDescriptionOptional& x)
  {
    this->GetMdDescription_ = x;
  }

  void Body::
  setGetMdDescription (::std::unique_ptr< GetMdDescriptionType > x)
  {
    this->GetMdDescription_.set (std::move (x));
  }

  const Body::GetMdDescriptionResponseOptional& Body::
  getGetMdDescriptionResponse () const
  {
    return this->GetMdDescriptionResponse_;
  }

  Body::GetMdDescriptionResponseOptional& Body::
  getGetMdDescriptionResponse ()
  {
    return this->GetMdDescriptionResponse_;
  }

  void Body::
  setGetMdDescriptionResponse (const GetMdDescriptionResponseType& x)
  {
    this->GetMdDescriptionResponse_.set (x);
  }

  void Body::
  setGetMdDescriptionResponse (const GetMdDescriptionResponseOptional& x)
  {
    this->GetMdDescriptionResponse_ = x;
  }

  void Body::
  setGetMdDescriptionResponse (::std::unique_ptr< GetMdDescriptionResponseType > x)
  {
    this->GetMdDescriptionResponse_.set (std::move (x));
  }

  const Body::GetMdibOptional& Body::
  getGetMdib () const
  {
    return this->GetMdib_;
  }

  Body::GetMdibOptional& Body::
  getGetMdib ()
  {
    return this->GetMdib_;
  }

  void Body::
  setGetMdib (const GetMdibType& x)
  {
    this->GetMdib_.set (x);
  }

  void Body::
  setGetMdib (const GetMdibOptional& x)
  {
    this->GetMdib_ = x;
  }

  void Body::
  setGetMdib (::std::unique_ptr< GetMdibType > x)
  {
    this->GetMdib_.set (std::move (x));
  }

  const Body::GetMdibResponseOptional& Body::
  getGetMdibResponse () const
  {
    return this->GetMdibResponse_;
  }

  Body::GetMdibResponseOptional& Body::
  getGetMdibResponse ()
  {
    return this->GetMdibResponse_;
  }

  void Body::
  setGetMdibResponse (const GetMdibResponseType& x)
  {
    this->GetMdibResponse_.set (x);
  }

  void Body::
  setGetMdibResponse (const GetMdibResponseOptional& x)
  {
    this->GetMdibResponse_ = x;
  }

  void Body::
  setGetMdibResponse (::std::unique_ptr< GetMdibResponseType > x)
  {
    this->GetMdibResponse_.set (std::move (x));
  }

  const Body::GetMdStateOptional& Body::
  getGetMdState () const
  {
    return this->GetMdState_;
  }

  Body::GetMdStateOptional& Body::
  getGetMdState ()
  {
    return this->GetMdState_;
  }

  void Body::
  setGetMdState (const GetMdStateType& x)
  {
    this->GetMdState_.set (x);
  }

  void Body::
  setGetMdState (const GetMdStateOptional& x)
  {
    this->GetMdState_ = x;
  }

  void Body::
  setGetMdState (::std::unique_ptr< GetMdStateType > x)
  {
    this->GetMdState_.set (std::move (x));
  }

  const Body::GetMdStateResponseOptional& Body::
  getGetMdStateResponse () const
  {
    return this->GetMdStateResponse_;
  }

  Body::GetMdStateResponseOptional& Body::
  getGetMdStateResponse ()
  {
    return this->GetMdStateResponse_;
  }

  void Body::
  setGetMdStateResponse (const GetMdStateResponseType& x)
  {
    this->GetMdStateResponse_.set (x);
  }

  void Body::
  setGetMdStateResponse (const GetMdStateResponseOptional& x)
  {
    this->GetMdStateResponse_ = x;
  }

  void Body::
  setGetMdStateResponse (::std::unique_ptr< GetMdStateResponseType > x)
  {
    this->GetMdStateResponse_.set (std::move (x));
  }

  const Body::ActivateOptional& Body::
  getActivate () const
  {
    return this->Activate_;
  }

  Body::ActivateOptional& Body::
  getActivate ()
  {
    return this->Activate_;
  }

  void Body::
  setActivate (const ActivateType& x)
  {
    this->Activate_.set (x);
  }

  void Body::
  setActivate (const ActivateOptional& x)
  {
    this->Activate_ = x;
  }

  void Body::
  setActivate (::std::unique_ptr< ActivateType > x)
  {
    this->Activate_.set (std::move (x));
  }

  const Body::ActivateResponseOptional& Body::
  getActivateResponse () const
  {
    return this->ActivateResponse_;
  }

  Body::ActivateResponseOptional& Body::
  getActivateResponse ()
  {
    return this->ActivateResponse_;
  }

  void Body::
  setActivateResponse (const ActivateResponseType& x)
  {
    this->ActivateResponse_.set (x);
  }

  void Body::
  setActivateResponse (const ActivateResponseOptional& x)
  {
    this->ActivateResponse_ = x;
  }

  void Body::
  setActivateResponse (::std::unique_ptr< ActivateResponseType > x)
  {
    this->ActivateResponse_.set (std::move (x));
  }

  const Body::SetAlertStateOptional& Body::
  getSetAlertState () const
  {
    return this->SetAlertState_;
  }

  Body::SetAlertStateOptional& Body::
  getSetAlertState ()
  {
    return this->SetAlertState_;
  }

  void Body::
  setSetAlertState (const SetAlertStateType& x)
  {
    this->SetAlertState_.set (x);
  }

  void Body::
  setSetAlertState (const SetAlertStateOptional& x)
  {
    this->SetAlertState_ = x;
  }

  void Body::
  setSetAlertState (::std::unique_ptr< SetAlertStateType > x)
  {
    this->SetAlertState_.set (std::move (x));
  }

  const Body::SetAlertStateResponseOptional& Body::
  getSetAlertStateResponse () const
  {
    return this->SetAlertStateResponse_;
  }

  Body::SetAlertStateResponseOptional& Body::
  getSetAlertStateResponse ()
  {
    return this->SetAlertStateResponse_;
  }

  void Body::
  setSetAlertStateResponse (const SetAlertStateResponseType& x)
  {
    this->SetAlertStateResponse_.set (x);
  }

  void Body::
  setSetAlertStateResponse (const SetAlertStateResponseOptional& x)
  {
    this->SetAlertStateResponse_ = x;
  }

  void Body::
  setSetAlertStateResponse (::std::unique_ptr< SetAlertStateResponseType > x)
  {
    this->SetAlertStateResponse_.set (std::move (x));
  }

  const Body::SetStringOptional& Body::
  getSetString () const
  {
    return this->SetString_;
  }

  Body::SetStringOptional& Body::
  getSetString ()
  {
    return this->SetString_;
  }

  void Body::
  setSetString (const SetStringType& x)
  {
    this->SetString_.set (x);
  }

  void Body::
  setSetString (const SetStringOptional& x)
  {
    this->SetString_ = x;
  }

  void Body::
  setSetString (::std::unique_ptr< SetStringType > x)
  {
    this->SetString_.set (std::move (x));
  }

  const Body::SetStringResponseOptional& Body::
  getSetStringResponse () const
  {
    return this->SetStringResponse_;
  }

  Body::SetStringResponseOptional& Body::
  getSetStringResponse ()
  {
    return this->SetStringResponse_;
  }

  void Body::
  setSetStringResponse (const SetStringResponseType& x)
  {
    this->SetStringResponse_.set (x);
  }

  void Body::
  setSetStringResponse (const SetStringResponseOptional& x)
  {
    this->SetStringResponse_ = x;
  }

  void Body::
  setSetStringResponse (::std::unique_ptr< SetStringResponseType > x)
  {
    this->SetStringResponse_.set (std::move (x));
  }

  const Body::SetValueOptional& Body::
  getSetValue () const
  {
    return this->SetValue_;
  }

  Body::SetValueOptional& Body::
  getSetValue ()
  {
    return this->SetValue_;
  }

  void Body::
  setSetValue (const SetValueType& x)
  {
    this->SetValue_.set (x);
  }

  void Body::
  setSetValue (const SetValueOptional& x)
  {
    this->SetValue_ = x;
  }

  void Body::
  setSetValue (::std::unique_ptr< SetValueType > x)
  {
    this->SetValue_.set (std::move (x));
  }

  const Body::SetValueResponseOptional& Body::
  getSetValueResponse () const
  {
    return this->SetValueResponse_;
  }

  Body::SetValueResponseOptional& Body::
  getSetValueResponse ()
  {
    return this->SetValueResponse_;
  }

  void Body::
  setSetValueResponse (const SetValueResponseType& x)
  {
    this->SetValueResponse_.set (x);
  }

  void Body::
  setSetValueResponse (const SetValueResponseOptional& x)
  {
    this->SetValueResponse_ = x;
  }

  void Body::
  setSetValueResponse (::std::unique_ptr< SetValueResponseType > x)
  {
    this->SetValueResponse_.set (std::move (x));
  }

  const Body::WaveformStreamOptional& Body::
  getWaveformStream () const
  {
    return this->WaveformStream_;
  }

  Body::WaveformStreamOptional& Body::
  getWaveformStream ()
  {
    return this->WaveformStream_;
  }

  void Body::
  setWaveformStream (const WaveformStreamType& x)
  {
    this->WaveformStream_.set (x);
  }

  void Body::
  setWaveformStream (const WaveformStreamOptional& x)
  {
    this->WaveformStream_ = x;
  }

  void Body::
  setWaveformStream (::std::unique_ptr< WaveformStreamType > x)
  {
    this->WaveformStream_.set (std::move (x));
  }


  // Envelope
  // 

  const Envelope::HeaderType& Envelope::
  getHeader () const
  {
    return this->Header_.get ();
  }

  Envelope::HeaderType& Envelope::
  getHeader ()
  {
    return this->Header_.get ();
  }

  void Envelope::
  setHeader (const HeaderType& x)
  {
    this->Header_.set (x);
  }

  void Envelope::
  setHeader (::std::unique_ptr< HeaderType > x)
  {
    this->Header_.set (std::move (x));
  }

  const Envelope::BodyType& Envelope::
  getBody () const
  {
    return this->Body_.get ();
  }

  Envelope::BodyType& Envelope::
  getBody ()
  {
    return this->Body_.get ();
  }

  void Envelope::
  setBody (const BodyType& x)
  {
    this->Body_.set (x);
  }

  void Envelope::
  setBody (::std::unique_ptr< BodyType > x)
  {
    this->Body_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace MESSAGEMODEL
{
  // Header
  //

  Header::
  Header ()
  : ::xml_schema::Type (),
    Action_ (this),
    AppSequence_ (this),
    FaultTo_ (this),
    From_ (this),
    MessageID_ (this),
    ReferenceParameters_ (this),
    RelatesTo_ (this),
    ReplyTo_ (this),
    To_ (this),
    Identifier_ (this)
  {
  }

  Header::
  Header (const Header& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Action_ (x.Action_, f, this),
    AppSequence_ (x.AppSequence_, f, this),
    FaultTo_ (x.FaultTo_, f, this),
    From_ (x.From_, f, this),
    MessageID_ (x.MessageID_, f, this),
    ReferenceParameters_ (x.ReferenceParameters_, f, this),
    RelatesTo_ (x.RelatesTo_, f, this),
    ReplyTo_ (x.ReplyTo_, f, this),
    To_ (x.To_, f, this),
    Identifier_ (x.Identifier_, f, this)
  {
  }

  Header::
  Header (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Action_ (this),
    AppSequence_ (this),
    FaultTo_ (this),
    From_ (this),
    MessageID_ (this),
    ReferenceParameters_ (this),
    RelatesTo_ (this),
    ReplyTo_ (this),
    To_ (this),
    Identifier_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Header::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Action
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Action",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< ActionType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->Action_)
          {
            ::std::unique_ptr< ActionType > r (
              dynamic_cast< ActionType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Action_.set (::std::move (r));
            continue;
          }
        }
      }

      // AppSequence
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "AppSequence",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< AppSequenceType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->AppSequence_)
          {
            ::std::unique_ptr< AppSequenceType > r (
              dynamic_cast< AppSequenceType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->AppSequence_.set (::std::move (r));
            continue;
          }
        }
      }

      // FaultTo
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "FaultTo",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< FaultToType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->FaultTo_)
          {
            ::std::unique_ptr< FaultToType > r (
              dynamic_cast< FaultToType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->FaultTo_.set (::std::move (r));
            continue;
          }
        }
      }

      // From
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "From",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< FromType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->From_)
          {
            ::std::unique_ptr< FromType > r (
              dynamic_cast< FromType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->From_.set (::std::move (r));
            continue;
          }
        }
      }

      // MessageID
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "MessageID",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< MessageIDType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->MessageID_)
          {
            ::std::unique_ptr< MessageIDType > r (
              dynamic_cast< MessageIDType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->MessageID_.set (::std::move (r));
            continue;
          }
        }
      }

      // ReferenceParameters
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ReferenceParameters",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< ReferenceParametersType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->ReferenceParameters_)
          {
            ::std::unique_ptr< ReferenceParametersType > r (
              dynamic_cast< ReferenceParametersType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ReferenceParameters_.set (::std::move (r));
            continue;
          }
        }
      }

      // RelatesTo
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "RelatesTo",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< RelatesToType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->RelatesTo_)
          {
            ::std::unique_ptr< RelatesToType > r (
              dynamic_cast< RelatesToType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->RelatesTo_.set (::std::move (r));
            continue;
          }
        }
      }

      // ReplyTo
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ReplyTo",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< ReplyToType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->ReplyTo_)
          {
            ::std::unique_ptr< ReplyToType > r (
              dynamic_cast< ReplyToType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ReplyTo_.set (::std::move (r));
            continue;
          }
        }
      }

      // To
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "To",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< ToType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->To_)
          {
            ::std::unique_ptr< ToType > r (
              dynamic_cast< ToType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->To_.set (::std::move (r));
            continue;
          }
        }
      }

      // Identifier
      //
      if (n.name () == "Identifier" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< IdentifierType > r (
          IdentifierTraits::create (i, f, this));

        if (!this->Identifier_)
        {
          this->Identifier_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  Header* Header::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Header (*this, f, c);
  }

  Header& Header::
  operator= (const Header& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Action_ = x.Action_;
      this->AppSequence_ = x.AppSequence_;
      this->FaultTo_ = x.FaultTo_;
      this->From_ = x.From_;
      this->MessageID_ = x.MessageID_;
      this->ReferenceParameters_ = x.ReferenceParameters_;
      this->RelatesTo_ = x.RelatesTo_;
      this->ReplyTo_ = x.ReplyTo_;
      this->To_ = x.To_;
      this->Identifier_ = x.Identifier_;
    }

    return *this;
  }

  Header::
  ~Header ()
  {
  }

  // Body
  //

  Body::
  Body ()
  : ::xml_schema::Type (),
    Bye_ (this),
    Hello_ (this),
    Probe_ (this),
    ProbeMatches_ (this),
    Resolve_ (this),
    ResolveMatches_ (this),
    GetMetadata_ (this),
    Metadata_ (this),
    Subscribe_ (this),
    SubscribeResponse_ (this),
    Unsubscribe_ (this),
    Renew_ (this),
    RenewResponse_ (this),
    GetStatus_ (this),
    GetStatusResponse_ (this),
    DescriptionModificationReport_ (this),
    GetContextStates_ (this),
    GetContextStatesResponse_ (this),
    SetContextState_ (this),
    SetContextStateResponse_ (this),
    EpisodicContextReport_ (this),
    PeriodicContextReport_ (this),
    EpisodicAlertReport_ (this),
    EpisodicComponentReport_ (this),
    EpisodicMetricReport_ (this),
    EpisodicOperationalStateReport_ (this),
    PeriodicAlertReport_ (this),
    PeriodicMetricReport_ (this),
    OperationInvokedReport_ (this),
    GetMdDescription_ (this),
    GetMdDescriptionResponse_ (this),
    GetMdib_ (this),
    GetMdibResponse_ (this),
    GetMdState_ (this),
    GetMdStateResponse_ (this),
    Activate_ (this),
    ActivateResponse_ (this),
    SetAlertState_ (this),
    SetAlertStateResponse_ (this),
    SetString_ (this),
    SetStringResponse_ (this),
    SetValue_ (this),
    SetValueResponse_ (this),
    WaveformStream_ (this)
  {
  }

  Body::
  Body (const Body& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Bye_ (x.Bye_, f, this),
    Hello_ (x.Hello_, f, this),
    Probe_ (x.Probe_, f, this),
    ProbeMatches_ (x.ProbeMatches_, f, this),
    Resolve_ (x.Resolve_, f, this),
    ResolveMatches_ (x.ResolveMatches_, f, this),
    GetMetadata_ (x.GetMetadata_, f, this),
    Metadata_ (x.Metadata_, f, this),
    Subscribe_ (x.Subscribe_, f, this),
    SubscribeResponse_ (x.SubscribeResponse_, f, this),
    Unsubscribe_ (x.Unsubscribe_, f, this),
    Renew_ (x.Renew_, f, this),
    RenewResponse_ (x.RenewResponse_, f, this),
    GetStatus_ (x.GetStatus_, f, this),
    GetStatusResponse_ (x.GetStatusResponse_, f, this),
    DescriptionModificationReport_ (x.DescriptionModificationReport_, f, this),
    GetContextStates_ (x.GetContextStates_, f, this),
    GetContextStatesResponse_ (x.GetContextStatesResponse_, f, this),
    SetContextState_ (x.SetContextState_, f, this),
    SetContextStateResponse_ (x.SetContextStateResponse_, f, this),
    EpisodicContextReport_ (x.EpisodicContextReport_, f, this),
    PeriodicContextReport_ (x.PeriodicContextReport_, f, this),
    EpisodicAlertReport_ (x.EpisodicAlertReport_, f, this),
    EpisodicComponentReport_ (x.EpisodicComponentReport_, f, this),
    EpisodicMetricReport_ (x.EpisodicMetricReport_, f, this),
    EpisodicOperationalStateReport_ (x.EpisodicOperationalStateReport_, f, this),
    PeriodicAlertReport_ (x.PeriodicAlertReport_, f, this),
    PeriodicMetricReport_ (x.PeriodicMetricReport_, f, this),
    OperationInvokedReport_ (x.OperationInvokedReport_, f, this),
    GetMdDescription_ (x.GetMdDescription_, f, this),
    GetMdDescriptionResponse_ (x.GetMdDescriptionResponse_, f, this),
    GetMdib_ (x.GetMdib_, f, this),
    GetMdibResponse_ (x.GetMdibResponse_, f, this),
    GetMdState_ (x.GetMdState_, f, this),
    GetMdStateResponse_ (x.GetMdStateResponse_, f, this),
    Activate_ (x.Activate_, f, this),
    ActivateResponse_ (x.ActivateResponse_, f, this),
    SetAlertState_ (x.SetAlertState_, f, this),
    SetAlertStateResponse_ (x.SetAlertStateResponse_, f, this),
    SetString_ (x.SetString_, f, this),
    SetStringResponse_ (x.SetStringResponse_, f, this),
    SetValue_ (x.SetValue_, f, this),
    SetValueResponse_ (x.SetValueResponse_, f, this),
    WaveformStream_ (x.WaveformStream_, f, this)
  {
  }

  Body::
  Body (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Bye_ (this),
    Hello_ (this),
    Probe_ (this),
    ProbeMatches_ (this),
    Resolve_ (this),
    ResolveMatches_ (this),
    GetMetadata_ (this),
    Metadata_ (this),
    Subscribe_ (this),
    SubscribeResponse_ (this),
    Unsubscribe_ (this),
    Renew_ (this),
    RenewResponse_ (this),
    GetStatus_ (this),
    GetStatusResponse_ (this),
    DescriptionModificationReport_ (this),
    GetContextStates_ (this),
    GetContextStatesResponse_ (this),
    SetContextState_ (this),
    SetContextStateResponse_ (this),
    EpisodicContextReport_ (this),
    PeriodicContextReport_ (this),
    EpisodicAlertReport_ (this),
    EpisodicComponentReport_ (this),
    EpisodicMetricReport_ (this),
    EpisodicOperationalStateReport_ (this),
    PeriodicAlertReport_ (this),
    PeriodicMetricReport_ (this),
    OperationInvokedReport_ (this),
    GetMdDescription_ (this),
    GetMdDescriptionResponse_ (this),
    GetMdib_ (this),
    GetMdibResponse_ (this),
    GetMdState_ (this),
    GetMdStateResponse_ (this),
    Activate_ (this),
    ActivateResponse_ (this),
    SetAlertState_ (this),
    SetAlertStateResponse_ (this),
    SetString_ (this),
    SetStringResponse_ (this),
    SetValue_ (this),
    SetValueResponse_ (this),
    WaveformStream_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Body::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Bye
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Bye",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< ByeType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->Bye_)
          {
            ::std::unique_ptr< ByeType > r (
              dynamic_cast< ByeType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Bye_.set (::std::move (r));
            continue;
          }
        }
      }

      // Hello
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Hello",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< HelloType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->Hello_)
          {
            ::std::unique_ptr< HelloType > r (
              dynamic_cast< HelloType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Hello_.set (::std::move (r));
            continue;
          }
        }
      }

      // Probe
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Probe",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< ProbeType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->Probe_)
          {
            ::std::unique_ptr< ProbeType > r (
              dynamic_cast< ProbeType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Probe_.set (::std::move (r));
            continue;
          }
        }
      }

      // ProbeMatches
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ProbeMatches",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< ProbeMatchesType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->ProbeMatches_)
          {
            ::std::unique_ptr< ProbeMatchesType > r (
              dynamic_cast< ProbeMatchesType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ProbeMatches_.set (::std::move (r));
            continue;
          }
        }
      }

      // Resolve
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Resolve",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< ResolveType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->Resolve_)
          {
            ::std::unique_ptr< ResolveType > r (
              dynamic_cast< ResolveType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Resolve_.set (::std::move (r));
            continue;
          }
        }
      }

      // ResolveMatches
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ResolveMatches",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< ResolveMatchesType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->ResolveMatches_)
          {
            ::std::unique_ptr< ResolveMatchesType > r (
              dynamic_cast< ResolveMatchesType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ResolveMatches_.set (::std::move (r));
            continue;
          }
        }
      }

      // GetMetadata
      //
      if (n.name () == "GetMetadata" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        ::std::unique_ptr< GetMetadataType > r (
          GetMetadataTraits::create (i, f, this));

        if (!this->GetMetadata_)
        {
          this->GetMetadata_.set (::std::move (r));
          continue;
        }
      }

      // Metadata
      //
      if (n.name () == "Metadata" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        ::std::unique_ptr< MetadataType > r (
          MetadataTraits::create (i, f, this));

        if (!this->Metadata_)
        {
          this->Metadata_.set (::std::move (r));
          continue;
        }
      }

      // Subscribe
      //
      if (n.name () == "Subscribe" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< SubscribeType > r (
          SubscribeTraits::create (i, f, this));

        if (!this->Subscribe_)
        {
          this->Subscribe_.set (::std::move (r));
          continue;
        }
      }

      // SubscribeResponse
      //
      if (n.name () == "SubscribeResponse" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< SubscribeResponseType > r (
          SubscribeResponseTraits::create (i, f, this));

        if (!this->SubscribeResponse_)
        {
          this->SubscribeResponse_.set (::std::move (r));
          continue;
        }
      }

      // Unsubscribe
      //
      if (n.name () == "Unsubscribe" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< UnsubscribeType > r (
          UnsubscribeTraits::create (i, f, this));

        if (!this->Unsubscribe_)
        {
          this->Unsubscribe_.set (::std::move (r));
          continue;
        }
      }

      // Renew
      //
      if (n.name () == "Renew" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< RenewType > r (
          RenewTraits::create (i, f, this));

        if (!this->Renew_)
        {
          this->Renew_.set (::std::move (r));
          continue;
        }
      }

      // RenewResponse
      //
      if (n.name () == "RenewResponse" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< RenewResponseType > r (
          RenewResponseTraits::create (i, f, this));

        if (!this->RenewResponse_)
        {
          this->RenewResponse_.set (::std::move (r));
          continue;
        }
      }

      // GetStatus
      //
      if (n.name () == "GetStatus" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< GetStatusType > r (
          GetStatusTraits::create (i, f, this));

        if (!this->GetStatus_)
        {
          this->GetStatus_.set (::std::move (r));
          continue;
        }
      }

      // GetStatusResponse
      //
      if (n.name () == "GetStatusResponse" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< GetStatusResponseType > r (
          GetStatusResponseTraits::create (i, f, this));

        if (!this->GetStatusResponse_)
        {
          this->GetStatusResponse_.set (::std::move (r));
          continue;
        }
      }

      // DescriptionModificationReport
      //
      if (n.name () == "DescriptionModificationReport" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< DescriptionModificationReportType > r (
          DescriptionModificationReportTraits::create (i, f, this));

        if (!this->DescriptionModificationReport_)
        {
          this->DescriptionModificationReport_.set (::std::move (r));
          continue;
        }
      }

      // GetContextStates
      //
      if (n.name () == "GetContextStates" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< GetContextStatesType > r (
          GetContextStatesTraits::create (i, f, this));

        if (!this->GetContextStates_)
        {
          this->GetContextStates_.set (::std::move (r));
          continue;
        }
      }

      // GetContextStatesResponse
      //
      if (n.name () == "GetContextStatesResponse" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< GetContextStatesResponseType > r (
          GetContextStatesResponseTraits::create (i, f, this));

        if (!this->GetContextStatesResponse_)
        {
          this->GetContextStatesResponse_.set (::std::move (r));
          continue;
        }
      }

      // SetContextState
      //
      if (n.name () == "SetContextState" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< SetContextStateType > r (
          SetContextStateTraits::create (i, f, this));

        if (!this->SetContextState_)
        {
          this->SetContextState_.set (::std::move (r));
          continue;
        }
      }

      // SetContextStateResponse
      //
      if (n.name () == "SetContextStateResponse" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< SetContextStateResponseType > r (
          SetContextStateResponseTraits::create (i, f, this));

        if (!this->SetContextStateResponse_)
        {
          this->SetContextStateResponse_.set (::std::move (r));
          continue;
        }
      }

      // EpisodicContextReport
      //
      if (n.name () == "EpisodicContextReport" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< EpisodicContextReportType > r (
          EpisodicContextReportTraits::create (i, f, this));

        if (!this->EpisodicContextReport_)
        {
          this->EpisodicContextReport_.set (::std::move (r));
          continue;
        }
      }

      // PeriodicContextReport
      //
      if (n.name () == "PeriodicContextReport" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< PeriodicContextReportType > r (
          PeriodicContextReportTraits::create (i, f, this));

        if (!this->PeriodicContextReport_)
        {
          this->PeriodicContextReport_.set (::std::move (r));
          continue;
        }
      }

      // EpisodicAlertReport
      //
      if (n.name () == "EpisodicAlertReport" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< EpisodicAlertReportType > r (
          EpisodicAlertReportTraits::create (i, f, this));

        if (!this->EpisodicAlertReport_)
        {
          this->EpisodicAlertReport_.set (::std::move (r));
          continue;
        }
      }

      // EpisodicComponentReport
      //
      if (n.name () == "EpisodicComponentReport" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< EpisodicComponentReportType > r (
          EpisodicComponentReportTraits::create (i, f, this));

        if (!this->EpisodicComponentReport_)
        {
          this->EpisodicComponentReport_.set (::std::move (r));
          continue;
        }
      }

      // EpisodicMetricReport
      //
      if (n.name () == "EpisodicMetricReport" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< EpisodicMetricReportType > r (
          EpisodicMetricReportTraits::create (i, f, this));

        if (!this->EpisodicMetricReport_)
        {
          this->EpisodicMetricReport_.set (::std::move (r));
          continue;
        }
      }

      // EpisodicOperationalStateReport
      //
      if (n.name () == "EpisodicOperationalStateReport" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< EpisodicOperationalStateReportType > r (
          EpisodicOperationalStateReportTraits::create (i, f, this));

        if (!this->EpisodicOperationalStateReport_)
        {
          this->EpisodicOperationalStateReport_.set (::std::move (r));
          continue;
        }
      }

      // PeriodicAlertReport
      //
      if (n.name () == "PeriodicAlertReport" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< PeriodicAlertReportType > r (
          PeriodicAlertReportTraits::create (i, f, this));

        if (!this->PeriodicAlertReport_)
        {
          this->PeriodicAlertReport_.set (::std::move (r));
          continue;
        }
      }

      // PeriodicMetricReport
      //
      if (n.name () == "PeriodicMetricReport" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< PeriodicMetricReportType > r (
          PeriodicMetricReportTraits::create (i, f, this));

        if (!this->PeriodicMetricReport_)
        {
          this->PeriodicMetricReport_.set (::std::move (r));
          continue;
        }
      }

      // OperationInvokedReport
      //
      if (n.name () == "OperationInvokedReport" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< OperationInvokedReportType > r (
          OperationInvokedReportTraits::create (i, f, this));

        if (!this->OperationInvokedReport_)
        {
          this->OperationInvokedReport_.set (::std::move (r));
          continue;
        }
      }

      // GetMdDescription
      //
      if (n.name () == "GetMdDescription" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< GetMdDescriptionType > r (
          GetMdDescriptionTraits::create (i, f, this));

        if (!this->GetMdDescription_)
        {
          this->GetMdDescription_.set (::std::move (r));
          continue;
        }
      }

      // GetMdDescriptionResponse
      //
      if (n.name () == "GetMdDescriptionResponse" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< GetMdDescriptionResponseType > r (
          GetMdDescriptionResponseTraits::create (i, f, this));

        if (!this->GetMdDescriptionResponse_)
        {
          this->GetMdDescriptionResponse_.set (::std::move (r));
          continue;
        }
      }

      // GetMdib
      //
      if (n.name () == "GetMdib" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< GetMdibType > r (
          GetMdibTraits::create (i, f, this));

        if (!this->GetMdib_)
        {
          this->GetMdib_.set (::std::move (r));
          continue;
        }
      }

      // GetMdibResponse
      //
      if (n.name () == "GetMdibResponse" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< GetMdibResponseType > r (
          GetMdibResponseTraits::create (i, f, this));

        if (!this->GetMdibResponse_)
        {
          this->GetMdibResponse_.set (::std::move (r));
          continue;
        }
      }

      // GetMdState
      //
      if (n.name () == "GetMdState" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< GetMdStateType > r (
          GetMdStateTraits::create (i, f, this));

        if (!this->GetMdState_)
        {
          this->GetMdState_.set (::std::move (r));
          continue;
        }
      }

      // GetMdStateResponse
      //
      if (n.name () == "GetMdStateResponse" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< GetMdStateResponseType > r (
          GetMdStateResponseTraits::create (i, f, this));

        if (!this->GetMdStateResponse_)
        {
          this->GetMdStateResponse_.set (::std::move (r));
          continue;
        }
      }

      // Activate
      //
      if (n.name () == "Activate" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< ActivateType > r (
          ActivateTraits::create (i, f, this));

        if (!this->Activate_)
        {
          this->Activate_.set (::std::move (r));
          continue;
        }
      }

      // ActivateResponse
      //
      if (n.name () == "ActivateResponse" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< ActivateResponseType > r (
          ActivateResponseTraits::create (i, f, this));

        if (!this->ActivateResponse_)
        {
          this->ActivateResponse_.set (::std::move (r));
          continue;
        }
      }

      // SetAlertState
      //
      if (n.name () == "SetAlertState" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< SetAlertStateType > r (
          SetAlertStateTraits::create (i, f, this));

        if (!this->SetAlertState_)
        {
          this->SetAlertState_.set (::std::move (r));
          continue;
        }
      }

      // SetAlertStateResponse
      //
      if (n.name () == "SetAlertStateResponse" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< SetAlertStateResponseType > r (
          SetAlertStateResponseTraits::create (i, f, this));

        if (!this->SetAlertStateResponse_)
        {
          this->SetAlertStateResponse_.set (::std::move (r));
          continue;
        }
      }

      // SetString
      //
      if (n.name () == "SetString" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< SetStringType > r (
          SetStringTraits::create (i, f, this));

        if (!this->SetString_)
        {
          this->SetString_.set (::std::move (r));
          continue;
        }
      }

      // SetStringResponse
      //
      if (n.name () == "SetStringResponse" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< SetStringResponseType > r (
          SetStringResponseTraits::create (i, f, this));

        if (!this->SetStringResponse_)
        {
          this->SetStringResponse_.set (::std::move (r));
          continue;
        }
      }

      // SetValue
      //
      if (n.name () == "SetValue" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< SetValueType > r (
          SetValueTraits::create (i, f, this));

        if (!this->SetValue_)
        {
          this->SetValue_.set (::std::move (r));
          continue;
        }
      }

      // SetValueResponse
      //
      if (n.name () == "SetValueResponse" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< SetValueResponseType > r (
          SetValueResponseTraits::create (i, f, this));

        if (!this->SetValueResponse_)
        {
          this->SetValueResponse_.set (::std::move (r));
          continue;
        }
      }

      // WaveformStream
      //
      if (n.name () == "WaveformStream" && n.namespace_ () == "http://standards.ieee.org/downloads/11073/11073-10207-2017/message")
      {
        ::std::unique_ptr< WaveformStreamType > r (
          WaveformStreamTraits::create (i, f, this));

        if (!this->WaveformStream_)
        {
          this->WaveformStream_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  Body* Body::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Body (*this, f, c);
  }

  Body& Body::
  operator= (const Body& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Bye_ = x.Bye_;
      this->Hello_ = x.Hello_;
      this->Probe_ = x.Probe_;
      this->ProbeMatches_ = x.ProbeMatches_;
      this->Resolve_ = x.Resolve_;
      this->ResolveMatches_ = x.ResolveMatches_;
      this->GetMetadata_ = x.GetMetadata_;
      this->Metadata_ = x.Metadata_;
      this->Subscribe_ = x.Subscribe_;
      this->SubscribeResponse_ = x.SubscribeResponse_;
      this->Unsubscribe_ = x.Unsubscribe_;
      this->Renew_ = x.Renew_;
      this->RenewResponse_ = x.RenewResponse_;
      this->GetStatus_ = x.GetStatus_;
      this->GetStatusResponse_ = x.GetStatusResponse_;
      this->DescriptionModificationReport_ = x.DescriptionModificationReport_;
      this->GetContextStates_ = x.GetContextStates_;
      this->GetContextStatesResponse_ = x.GetContextStatesResponse_;
      this->SetContextState_ = x.SetContextState_;
      this->SetContextStateResponse_ = x.SetContextStateResponse_;
      this->EpisodicContextReport_ = x.EpisodicContextReport_;
      this->PeriodicContextReport_ = x.PeriodicContextReport_;
      this->EpisodicAlertReport_ = x.EpisodicAlertReport_;
      this->EpisodicComponentReport_ = x.EpisodicComponentReport_;
      this->EpisodicMetricReport_ = x.EpisodicMetricReport_;
      this->EpisodicOperationalStateReport_ = x.EpisodicOperationalStateReport_;
      this->PeriodicAlertReport_ = x.PeriodicAlertReport_;
      this->PeriodicMetricReport_ = x.PeriodicMetricReport_;
      this->OperationInvokedReport_ = x.OperationInvokedReport_;
      this->GetMdDescription_ = x.GetMdDescription_;
      this->GetMdDescriptionResponse_ = x.GetMdDescriptionResponse_;
      this->GetMdib_ = x.GetMdib_;
      this->GetMdibResponse_ = x.GetMdibResponse_;
      this->GetMdState_ = x.GetMdState_;
      this->GetMdStateResponse_ = x.GetMdStateResponse_;
      this->Activate_ = x.Activate_;
      this->ActivateResponse_ = x.ActivateResponse_;
      this->SetAlertState_ = x.SetAlertState_;
      this->SetAlertStateResponse_ = x.SetAlertStateResponse_;
      this->SetString_ = x.SetString_;
      this->SetStringResponse_ = x.SetStringResponse_;
      this->SetValue_ = x.SetValue_;
      this->SetValueResponse_ = x.SetValueResponse_;
      this->WaveformStream_ = x.WaveformStream_;
    }

    return *this;
  }

  Body::
  ~Body ()
  {
  }

  // Envelope
  //

  Envelope::
  Envelope (const HeaderType& Header,
            const BodyType& Body)
  : ::xml_schema::Type (),
    Header_ (Header, this),
    Body_ (Body, this)
  {
  }

  Envelope::
  Envelope (::std::unique_ptr< HeaderType > Header,
            ::std::unique_ptr< BodyType > Body)
  : ::xml_schema::Type (),
    Header_ (std::move (Header), this),
    Body_ (std::move (Body), this)
  {
  }

  Envelope::
  Envelope (const Envelope& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Header_ (x.Header_, f, this),
    Body_ (x.Body_, f, this)
  {
  }

  Envelope::
  Envelope (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Header_ (this),
    Body_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Envelope::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Header
      //
      if (n.name () == "Header" && n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
      {
        ::std::unique_ptr< HeaderType > r (
          HeaderTraits::create (i, f, this));

        if (!Header_.present ())
        {
          this->Header_.set (::std::move (r));
          continue;
        }
      }

      // Body
      //
      if (n.name () == "Body" && n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
      {
        ::std::unique_ptr< BodyType > r (
          BodyTraits::create (i, f, this));

        if (!Body_.present ())
        {
          this->Body_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Header_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Header",
        "http://www.w3.org/2003/05/soap-envelope");
    }

    if (!Body_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Body",
        "http://www.w3.org/2003/05/soap-envelope");
    }
  }

  Envelope* Envelope::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Envelope (*this, f, c);
  }

  Envelope& Envelope::
  operator= (const Envelope& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Header_ = x.Header_;
      this->Body_ = x.Body_;
    }

    return *this;
  }

  Envelope::
  ~Envelope ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace MESSAGEMODEL
{
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (const ::std::string& u,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
      ::MESSAGEMODEL::parseEnvelope (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (const ::std::string& u,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
      ::MESSAGEMODEL::parseEnvelope (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
      ::MESSAGEMODEL::parseEnvelope (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::std::istream& is,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::MESSAGEMODEL::parseEnvelope (isrc, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::std::istream& is,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::MESSAGEMODEL::parseEnvelope (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::MESSAGEMODEL::parseEnvelope (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::MESSAGEMODEL::parseEnvelope (isrc, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::MESSAGEMODEL::parseEnvelope (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::MESSAGEMODEL::parseEnvelope (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::xercesc::InputSource& i,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
      ::MESSAGEMODEL::parseEnvelope (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::xercesc::InputSource& i,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
      ::MESSAGEMODEL::parseEnvelope (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
      ::MESSAGEMODEL::parseEnvelope (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
        ::MESSAGEMODEL::parseEnvelope (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Envelope" &&
        n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
    {
      ::std::unique_ptr< ::MESSAGEMODEL::Envelope > r (
        ::xsd::cxx::tree::traits< ::MESSAGEMODEL::Envelope, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Envelope",
      "http://www.w3.org/2003/05/soap-envelope");
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::treeNodeKey,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Envelope" &&
        n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
    {
      ::std::unique_ptr< ::MESSAGEMODEL::Envelope > r (
        ::xsd::cxx::tree::traits< ::MESSAGEMODEL::Envelope, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Envelope",
      "http://www.w3.org/2003/05/soap-envelope");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace MESSAGEMODEL
{
  void
  serializeEnvelope (::std::ostream& o,
                     const ::MESSAGEMODEL::Envelope& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::serializeEnvelope (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeEnvelope (::std::ostream& o,
                     const ::MESSAGEMODEL::Envelope& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::serializeEnvelope (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeEnvelope (::std::ostream& o,
                     const ::MESSAGEMODEL::Envelope& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::serializeEnvelope (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeEnvelope (::xercesc::XMLFormatTarget& t,
                     const ::MESSAGEMODEL::Envelope& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::serializeEnvelope (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeEnvelope (::xercesc::XMLFormatTarget& t,
                     const ::MESSAGEMODEL::Envelope& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::serializeEnvelope (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeEnvelope (::xercesc::XMLFormatTarget& t,
                     const ::MESSAGEMODEL::Envelope& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::serializeEnvelope (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeEnvelope (::xercesc::DOMDocument& d,
                     const ::MESSAGEMODEL::Envelope& s,
                     ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Envelope" &&
        n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Envelope",
        "http://www.w3.org/2003/05/soap-envelope");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  serializeEnvelope (const ::MESSAGEMODEL::Envelope& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "Envelope",
        "http://www.w3.org/2003/05/soap-envelope",
        m, f));

    ::MESSAGEMODEL::serializeEnvelope (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const Header& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Action
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getAction ())
      {
        const Header::ActionType& x (*i.getAction ());
        if (typeid (Header::ActionType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Action",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Action",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // AppSequence
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getAppSequence ())
      {
        const Header::AppSequenceType& x (*i.getAppSequence ());
        if (typeid (Header::AppSequenceType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AppSequence",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "AppSequence",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // FaultTo
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getFaultTo ())
      {
        const Header::FaultToType& x (*i.getFaultTo ());
        if (typeid (Header::FaultToType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FaultTo",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "FaultTo",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // From
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getFrom ())
      {
        const Header::FromType& x (*i.getFrom ());
        if (typeid (Header::FromType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "From",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "From",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // MessageID
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getMessageID ())
      {
        const Header::MessageIDType& x (*i.getMessageID ());
        if (typeid (Header::MessageIDType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MessageID",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "MessageID",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // ReferenceParameters
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getReferenceParameters ())
      {
        const Header::ReferenceParametersType& x (*i.getReferenceParameters ());
        if (typeid (Header::ReferenceParametersType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReferenceParameters",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "ReferenceParameters",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // RelatesTo
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getRelatesTo ())
      {
        const Header::RelatesToType& x (*i.getRelatesTo ());
        if (typeid (Header::RelatesToType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RelatesTo",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "RelatesTo",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // ReplyTo
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getReplyTo ())
      {
        const Header::ReplyToType& x (*i.getReplyTo ());
        if (typeid (Header::ReplyToType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReplyTo",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "ReplyTo",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // To
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getTo ())
      {
        const Header::ToType& x (*i.getTo ());
        if (typeid (Header::ToType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "To",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "To",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // Identifier
    //
    if (i.getIdentifier ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Identifier",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.getIdentifier ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Body& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Bye
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getBye ())
      {
        const Body::ByeType& x (*i.getBye ());
        if (typeid (Body::ByeType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Bye",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Bye",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // Hello
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getHello ())
      {
        const Body::HelloType& x (*i.getHello ());
        if (typeid (Body::HelloType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Hello",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Hello",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // Probe
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getProbe ())
      {
        const Body::ProbeType& x (*i.getProbe ());
        if (typeid (Body::ProbeType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Probe",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Probe",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // ProbeMatches
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getProbeMatches ())
      {
        const Body::ProbeMatchesType& x (*i.getProbeMatches ());
        if (typeid (Body::ProbeMatchesType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProbeMatches",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "ProbeMatches",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // Resolve
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getResolve ())
      {
        const Body::ResolveType& x (*i.getResolve ());
        if (typeid (Body::ResolveType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Resolve",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Resolve",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // ResolveMatches
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.getResolveMatches ())
      {
        const Body::ResolveMatchesType& x (*i.getResolveMatches ());
        if (typeid (Body::ResolveMatchesType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ResolveMatches",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "ResolveMatches",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // GetMetadata
    //
    if (i.getGetMetadata ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMetadata",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          e));

      s << *i.getGetMetadata ();
    }

    // Metadata
    //
    if (i.getMetadata ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Metadata",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          e));

      s << *i.getMetadata ();
    }

    // Subscribe
    //
    if (i.getSubscribe ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Subscribe",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.getSubscribe ();
    }

    // SubscribeResponse
    //
    if (i.getSubscribeResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SubscribeResponse",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.getSubscribeResponse ();
    }

    // Unsubscribe
    //
    if (i.getUnsubscribe ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Unsubscribe",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.getUnsubscribe ();
    }

    // Renew
    //
    if (i.getRenew ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Renew",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.getRenew ();
    }

    // RenewResponse
    //
    if (i.getRenewResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "RenewResponse",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.getRenewResponse ();
    }

    // GetStatus
    //
    if (i.getGetStatus ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetStatus",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.getGetStatus ();
    }

    // GetStatusResponse
    //
    if (i.getGetStatusResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetStatusResponse",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.getGetStatusResponse ();
    }

    // DescriptionModificationReport
    //
    if (i.getDescriptionModificationReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DescriptionModificationReport",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getDescriptionModificationReport ();
    }

    // GetContextStates
    //
    if (i.getGetContextStates ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetContextStates",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getGetContextStates ();
    }

    // GetContextStatesResponse
    //
    if (i.getGetContextStatesResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetContextStatesResponse",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getGetContextStatesResponse ();
    }

    // SetContextState
    //
    if (i.getSetContextState ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetContextState",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getSetContextState ();
    }

    // SetContextStateResponse
    //
    if (i.getSetContextStateResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetContextStateResponse",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getSetContextStateResponse ();
    }

    // EpisodicContextReport
    //
    if (i.getEpisodicContextReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EpisodicContextReport",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getEpisodicContextReport ();
    }

    // PeriodicContextReport
    //
    if (i.getPeriodicContextReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PeriodicContextReport",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getPeriodicContextReport ();
    }

    // EpisodicAlertReport
    //
    if (i.getEpisodicAlertReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EpisodicAlertReport",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getEpisodicAlertReport ();
    }

    // EpisodicComponentReport
    //
    if (i.getEpisodicComponentReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EpisodicComponentReport",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getEpisodicComponentReport ();
    }

    // EpisodicMetricReport
    //
    if (i.getEpisodicMetricReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EpisodicMetricReport",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getEpisodicMetricReport ();
    }

    // EpisodicOperationalStateReport
    //
    if (i.getEpisodicOperationalStateReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EpisodicOperationalStateReport",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getEpisodicOperationalStateReport ();
    }

    // PeriodicAlertReport
    //
    if (i.getPeriodicAlertReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PeriodicAlertReport",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getPeriodicAlertReport ();
    }

    // PeriodicMetricReport
    //
    if (i.getPeriodicMetricReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PeriodicMetricReport",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getPeriodicMetricReport ();
    }

    // OperationInvokedReport
    //
    if (i.getOperationInvokedReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OperationInvokedReport",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getOperationInvokedReport ();
    }

    // GetMdDescription
    //
    if (i.getGetMdDescription ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMdDescription",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getGetMdDescription ();
    }

    // GetMdDescriptionResponse
    //
    if (i.getGetMdDescriptionResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMdDescriptionResponse",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getGetMdDescriptionResponse ();
    }

    // GetMdib
    //
    if (i.getGetMdib ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMdib",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getGetMdib ();
    }

    // GetMdibResponse
    //
    if (i.getGetMdibResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMdibResponse",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getGetMdibResponse ();
    }

    // GetMdState
    //
    if (i.getGetMdState ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMdState",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getGetMdState ();
    }

    // GetMdStateResponse
    //
    if (i.getGetMdStateResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMdStateResponse",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getGetMdStateResponse ();
    }

    // Activate
    //
    if (i.getActivate ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Activate",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getActivate ();
    }

    // ActivateResponse
    //
    if (i.getActivateResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ActivateResponse",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getActivateResponse ();
    }

    // SetAlertState
    //
    if (i.getSetAlertState ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetAlertState",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getSetAlertState ();
    }

    // SetAlertStateResponse
    //
    if (i.getSetAlertStateResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetAlertStateResponse",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getSetAlertStateResponse ();
    }

    // SetString
    //
    if (i.getSetString ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetString",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getSetString ();
    }

    // SetStringResponse
    //
    if (i.getSetStringResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetStringResponse",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getSetStringResponse ();
    }

    // SetValue
    //
    if (i.getSetValue ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetValue",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getSetValue ();
    }

    // SetValueResponse
    //
    if (i.getSetValueResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetValueResponse",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getSetValueResponse ();
    }

    // WaveformStream
    //
    if (i.getWaveformStream ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "WaveformStream",
          "http://standards.ieee.org/downloads/11073/11073-10207-2017/message",
          e));

      s << *i.getWaveformStream ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Envelope& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Header
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Header",
          "http://www.w3.org/2003/05/soap-envelope",
          e));

      s << i.getHeader ();
    }

    // Body
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Body",
          "http://www.w3.org/2003/05/soap-envelope",
          e));

      s << i.getBody ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

