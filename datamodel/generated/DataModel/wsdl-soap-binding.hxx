// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from wsdl-soap-binding.xsd.
 */

#ifndef WSDL_SOAP_BINDING_HXX
#define WSDL_SOAP_BINDING_HXX

#include "DataModel/wsdl-soap-binding-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace WS
{
  namespace WSDL
  {
    /**
     * @brief C++ namespace for the %http://schemas.xmlsoap.org/wsdl/soap12/
     * schema namespace.
     */
    namespace SOAP_BINDING
    {
      /**
       * @brief Class corresponding to the %bindingType schema type.
       *
       * @nosubgrouping
       */
      class BindingType: public ::xml_schema::Type
      {
        public:
        /**
         * @name transport
         *
         * @brief Accessor and modifier functions for the %transport
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Uri TransportType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< TransportType > TransportOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< TransportType, char > TransportTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const TransportOptional&
        getTransport () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        TransportOptional&
        getTransport ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setTransport (const TransportType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setTransport (const TransportOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setTransport (::std::unique_ptr< TransportType > p);

        //@}

        /**
         * @name style
         *
         * @brief Accessor and modifier functions for the %style
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::WS::WSDL::SOAP_BINDING::StyleChoice StyleType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< StyleType > StyleOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< StyleType, char > StyleTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const StyleOptional&
        getStyle () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        StyleOptional&
        getStyle ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setStyle (const StyleType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setStyle (const StyleOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setStyle (::std::unique_ptr< StyleType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        BindingType ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BindingType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        BindingType (const BindingType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual BindingType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        BindingType&
        operator= (const BindingType& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~BindingType ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        TransportOptional transport_;
        StyleOptional style_;

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %styleChoice
       * schema type.
       */
      class StyleChoice: public ::xml_schema::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          rpc,
          document
        };

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        StyleChoice (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        StyleChoice (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        StyleChoice (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        StyleChoice (const ::xml_schema::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StyleChoice (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StyleChoice (const ::xercesc::DOMAttr& a,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StyleChoice (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        StyleChoice (const StyleChoice& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual StyleChoice*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        StyleChoice&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_StyleChoice_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_StyleChoice_convert () const;

        public:
        static const char* const _xsd_StyleChoice_literals_[2];
        static const Value _xsd_StyleChoice_indexes_[2];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %operationType schema type.
       *
       * @nosubgrouping
       */
      class OperationType: public ::xml_schema::Type
      {
        public:
        /**
         * @name soapAction
         *
         * @brief Accessor and modifier functions for the %soapAction
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Uri SoapActionType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< SoapActionType > SoapActionOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< SoapActionType, char > SoapActionTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const SoapActionOptional&
        getSoapAction () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        SoapActionOptional&
        getSoapAction ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setSoapAction (const SoapActionType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setSoapAction (const SoapActionOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setSoapAction (::std::unique_ptr< SoapActionType > p);

        //@}

        /**
         * @name style
         *
         * @brief Accessor and modifier functions for the %style
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::WS::WSDL::SOAP_BINDING::StyleChoice StyleType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< StyleType > StyleOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< StyleType, char > StyleTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const StyleOptional&
        getStyle () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        StyleOptional&
        getStyle ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setStyle (const StyleType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setStyle (const StyleOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setStyle (::std::unique_ptr< StyleType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        OperationType ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        OperationType (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        OperationType (const OperationType& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual OperationType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        OperationType&
        operator= (const OperationType& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~OperationType ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        SoapActionOptional soapAction_;
        StyleOptional style_;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %bodyType schema type.
       *
       * @nosubgrouping
       */
      class BodyType: public ::xml_schema::Type
      {
        public:
        /**
         * @name encodingStyle
         *
         * @brief Accessor and modifier functions for the %encodingStyle
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Uri EncodingStyleType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< EncodingStyleType > EncodingStyleOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< EncodingStyleType, char > EncodingStyleTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const EncodingStyleOptional&
        getEncodingStyle () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        EncodingStyleOptional&
        getEncodingStyle ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setEncodingStyle (const EncodingStyleType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setEncodingStyle (const EncodingStyleOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setEncodingStyle (::std::unique_ptr< EncodingStyleType > p);

        //@}

        /**
         * @name parts
         *
         * @brief Accessor and modifier functions for the %parts
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Nmtokens PartsType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< PartsType > PartsOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartsType, char > PartsTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const PartsOptional&
        getParts () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        PartsOptional&
        getParts ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setParts (const PartsType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setParts (const PartsOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setParts (::std::unique_ptr< PartsType > p);

        //@}

        /**
         * @name use
         *
         * @brief Accessor and modifier functions for the %use
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::WS::WSDL::SOAP_BINDING::UseChoice UseType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< UseType > UseOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseType, char > UseTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const UseOptional&
        getUse () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        UseOptional&
        getUse ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setUse (const UseType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setUse (const UseOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setUse (::std::unique_ptr< UseType > p);

        //@}

        /**
         * @name namespace
         *
         * @brief Accessor and modifier functions for the %namespace
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Uri NamespaceType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< NamespaceType > NamespaceOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< NamespaceType, char > NamespaceTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const NamespaceOptional&
        getNamespace () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        NamespaceOptional&
        getNamespace ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setNamespace (const NamespaceType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setNamespace (const NamespaceOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setNamespace (::std::unique_ptr< NamespaceType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        BodyType ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BodyType (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        BodyType (const BodyType& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual BodyType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        BodyType&
        operator= (const BodyType& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~BodyType ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        EncodingStyleOptional encodingStyle_;
        PartsOptional parts_;
        UseOptional use_;
        NamespaceOptional namespace__;

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %useChoice
       * schema type.
       */
      class UseChoice: public ::xml_schema::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          literal,
          encoded
        };

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        UseChoice (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        UseChoice (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        UseChoice (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        UseChoice (const ::xml_schema::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        UseChoice (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        UseChoice (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        UseChoice (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        UseChoice (const UseChoice& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual UseChoice*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        UseChoice&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_UseChoice_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_UseChoice_convert () const;

        public:
        static const char* const _xsd_UseChoice_literals_[2];
        static const Value _xsd_UseChoice_indexes_[2];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %faultType schema type.
       *
       * @nosubgrouping
       */
      class FaultType: public ::WS::WSDL::SOAP_BINDING::BodyType
      {
        public:
        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        FaultType ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FaultType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        FaultType (const FaultType& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual FaultType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~FaultType ();
      };

      /**
       * @brief Class corresponding to the %headerType schema type.
       *
       * @nosubgrouping
       */
      class HeaderType: public ::xml_schema::Type
      {
        public:
        /**
         * @name headerfault
         *
         * @brief Accessor and modifier functions for the %headerfault
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::WS::WSDL::SOAP_BINDING::HeaderfaultType HeaderfaultType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeaderfaultType, char > HeaderfaultTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HeaderfaultType&
        getHeaderfault () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HeaderfaultType&
        getHeaderfault ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHeaderfault (const HeaderfaultType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setHeaderfault (::std::unique_ptr< HeaderfaultType > p);

        //@}

        /**
         * @name message
         *
         * @brief Accessor and modifier functions for the %message
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Qname MessageType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< MessageType, char > MessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const MessageType&
        getMessage () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        MessageType&
        getMessage ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setMessage (const MessageType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setMessage (::std::unique_ptr< MessageType > p);

        //@}

        /**
         * @name parts
         *
         * @brief Accessor and modifier functions for the %parts
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Nmtokens PartsType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartsType, char > PartsTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const PartsType&
        getParts () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        PartsType&
        getParts ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setParts (const PartsType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setParts (::std::unique_ptr< PartsType > p);

        //@}

        /**
         * @name use
         *
         * @brief Accessor and modifier functions for the %use
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::WS::WSDL::SOAP_BINDING::UseChoice UseType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseType, char > UseTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const UseType&
        getUse () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        UseType&
        getUse ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setUse (const UseType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setUse (::std::unique_ptr< UseType > p);

        //@}

        /**
         * @name encodingStyle
         *
         * @brief Accessor and modifier functions for the %encodingStyle
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Uri EncodingStyleType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< EncodingStyleType > EncodingStyleOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< EncodingStyleType, char > EncodingStyleTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const EncodingStyleOptional&
        getEncodingStyle () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        EncodingStyleOptional&
        getEncodingStyle ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setEncodingStyle (const EncodingStyleType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setEncodingStyle (const EncodingStyleOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setEncodingStyle (::std::unique_ptr< EncodingStyleType > p);

        //@}

        /**
         * @name namespace
         *
         * @brief Accessor and modifier functions for the %namespace
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Uri NamespaceType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< NamespaceType > NamespaceOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< NamespaceType, char > NamespaceTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const NamespaceOptional&
        getNamespace () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        NamespaceOptional&
        getNamespace ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setNamespace (const NamespaceType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setNamespace (const NamespaceOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setNamespace (::std::unique_ptr< NamespaceType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        HeaderType (const HeaderfaultType&,
                    const MessageType&,
                    const PartsType&,
                    const UseType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (::std::unique_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        HeaderType (::std::unique_ptr< HeaderfaultType >,
                    const MessageType&,
                    const PartsType&,
                    const UseType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        HeaderType (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        HeaderType (const HeaderType& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual HeaderType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        HeaderType&
        operator= (const HeaderType& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~HeaderType ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< HeaderfaultType > headerfault_;
        ::xsd::cxx::tree::one< MessageType > message_;
        ::xsd::cxx::tree::one< PartsType > parts_;
        ::xsd::cxx::tree::one< UseType > use_;
        EncodingStyleOptional encodingStyle_;
        NamespaceOptional namespace__;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %headerfaultType schema type.
       *
       * @nosubgrouping
       */
      class HeaderfaultType: public ::xml_schema::Type
      {
        public:
        /**
         * @name message
         *
         * @brief Accessor and modifier functions for the %message
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Qname MessageType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< MessageType, char > MessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const MessageType&
        getMessage () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        MessageType&
        getMessage ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setMessage (const MessageType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setMessage (::std::unique_ptr< MessageType > p);

        //@}

        /**
         * @name parts
         *
         * @brief Accessor and modifier functions for the %parts
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Nmtokens PartsType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartsType, char > PartsTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const PartsType&
        getParts () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        PartsType&
        getParts ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setParts (const PartsType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setParts (::std::unique_ptr< PartsType > p);

        //@}

        /**
         * @name use
         *
         * @brief Accessor and modifier functions for the %use
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::WS::WSDL::SOAP_BINDING::UseChoice UseType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseType, char > UseTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const UseType&
        getUse () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        UseType&
        getUse ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setUse (const UseType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setUse (::std::unique_ptr< UseType > p);

        //@}

        /**
         * @name encodingStyle
         *
         * @brief Accessor and modifier functions for the %encodingStyle
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Uri EncodingStyleType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< EncodingStyleType > EncodingStyleOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< EncodingStyleType, char > EncodingStyleTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const EncodingStyleOptional&
        getEncodingStyle () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        EncodingStyleOptional&
        getEncodingStyle ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setEncodingStyle (const EncodingStyleType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setEncodingStyle (const EncodingStyleOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setEncodingStyle (::std::unique_ptr< EncodingStyleType > p);

        //@}

        /**
         * @name namespace
         *
         * @brief Accessor and modifier functions for the %namespace
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Uri NamespaceType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< NamespaceType > NamespaceOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< NamespaceType, char > NamespaceTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const NamespaceOptional&
        getNamespace () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        NamespaceOptional&
        getNamespace ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setNamespace (const NamespaceType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setNamespace (const NamespaceOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setNamespace (::std::unique_ptr< NamespaceType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        HeaderfaultType (const MessageType&,
                         const PartsType&,
                         const UseType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        HeaderfaultType (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        HeaderfaultType (const HeaderfaultType& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual HeaderfaultType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        HeaderfaultType&
        operator= (const HeaderfaultType& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~HeaderfaultType ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< MessageType > message_;
        ::xsd::cxx::tree::one< PartsType > parts_;
        ::xsd::cxx::tree::one< UseType > use_;
        EncodingStyleOptional encodingStyle_;
        NamespaceOptional namespace__;

        //@endcond
      };

      /**
       * @brief Class corresponding to the %addressType schema type.
       *
       * @nosubgrouping
       */
      class AddressType: public ::xml_schema::Type
      {
        public:
        /**
         * @name location
         *
         * @brief Accessor and modifier functions for the %location
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::Uri LocationType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< LocationType, char > LocationTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const LocationType&
        getLocation () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        LocationType&
        getLocation ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setLocation (const LocationType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLocation (::std::unique_ptr< LocationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        AddressType (const LocationType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AddressType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        AddressType (const AddressType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual AddressType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        /**
         * @brief Copy assignment operator.
         *
         * @param x An instance to make a copy of.
         * @return A reference to itself.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        AddressType&
        operator= (const AddressType& x);

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~AddressType ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< LocationType > location_;

        //@endcond
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace WS
{
  namespace WSDL
  {
    namespace SOAP_BINDING
    {
      /**
       * @name Parsing functions for the %binding document root.
       */
      //@{

      /**
       * @brief Parse a URI or a local file.
       *
       * @param uri A URI or a local file name.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (const ::std::string& uri,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with an error handler.
       *
       * @param uri A URI or a local file name.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (const ::std::string& uri,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with a Xerces-C++ DOM error
       * handler.
       *
       * @param uri A URI or a local file name.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream.
       *
       * @param is A standrad input stream.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (::std::istream& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with an error handler.
       *
       * @param is A standrad input stream.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (::std::istream& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a Xerces-C++ DOM error
       * handler.
       *
       * @param is A standrad input stream.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and an
       * error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and a
       * Xerces-C++ DOM error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source.
       *
       * @param is A Xerces-C++ input source.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (::xercesc::InputSource& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with an error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (::xercesc::InputSource& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
       * error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (const ::xercesc::DOMDocument& d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A pointer to the Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function is normally used together with the keep_dom and
       * own_dom parsing flags to assign ownership of the DOM document
       * to the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      parseBinding (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      //@}

      /**
       * @name Parsing functions for the %operation document root.
       */
      //@{

      /**
       * @brief Parse a URI or a local file.
       *
       * @param uri A URI or a local file name.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (const ::std::string& uri,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with an error handler.
       *
       * @param uri A URI or a local file name.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (const ::std::string& uri,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with a Xerces-C++ DOM error
       * handler.
       *
       * @param uri A URI or a local file name.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream.
       *
       * @param is A standrad input stream.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (::std::istream& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with an error handler.
       *
       * @param is A standrad input stream.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (::std::istream& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a Xerces-C++ DOM error
       * handler.
       *
       * @param is A standrad input stream.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and an
       * error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and a
       * Xerces-C++ DOM error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source.
       *
       * @param is A Xerces-C++ input source.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (::xercesc::InputSource& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with an error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (::xercesc::InputSource& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
       * error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (const ::xercesc::DOMDocument& d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A pointer to the Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function is normally used together with the keep_dom and
       * own_dom parsing flags to assign ownership of the DOM document
       * to the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      parseOperation (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      //@}

      /**
       * @name Parsing functions for the %body document root.
       */
      //@{

      /**
       * @brief Parse a URI or a local file.
       *
       * @param uri A URI or a local file name.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (const ::std::string& uri,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with an error handler.
       *
       * @param uri A URI or a local file name.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (const ::std::string& uri,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with a Xerces-C++ DOM error
       * handler.
       *
       * @param uri A URI or a local file name.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream.
       *
       * @param is A standrad input stream.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (::std::istream& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with an error handler.
       *
       * @param is A standrad input stream.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (::std::istream& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a Xerces-C++ DOM error
       * handler.
       *
       * @param is A standrad input stream.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and an
       * error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and a
       * Xerces-C++ DOM error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source.
       *
       * @param is A Xerces-C++ input source.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (::xercesc::InputSource& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with an error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (::xercesc::InputSource& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
       * error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (const ::xercesc::DOMDocument& d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A pointer to the Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function is normally used together with the keep_dom and
       * own_dom parsing flags to assign ownership of the DOM document
       * to the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      parseBody (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      //@}

      /**
       * @name Parsing functions for the %fault document root.
       */
      //@{

      /**
       * @brief Parse a URI or a local file.
       *
       * @param uri A URI or a local file name.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (const ::std::string& uri,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with an error handler.
       *
       * @param uri A URI or a local file name.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (const ::std::string& uri,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with a Xerces-C++ DOM error
       * handler.
       *
       * @param uri A URI or a local file name.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream.
       *
       * @param is A standrad input stream.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (::std::istream& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with an error handler.
       *
       * @param is A standrad input stream.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (::std::istream& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a Xerces-C++ DOM error
       * handler.
       *
       * @param is A standrad input stream.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and an
       * error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and a
       * Xerces-C++ DOM error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source.
       *
       * @param is A Xerces-C++ input source.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (::xercesc::InputSource& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with an error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (::xercesc::InputSource& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
       * error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A pointer to the Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function is normally used together with the keep_dom and
       * own_dom parsing flags to assign ownership of the DOM document
       * to the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      parseFault (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      //@}

      /**
       * @name Parsing functions for the %header document root.
       */
      //@{

      /**
       * @brief Parse a URI or a local file.
       *
       * @param uri A URI or a local file name.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (const ::std::string& uri,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with an error handler.
       *
       * @param uri A URI or a local file name.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (const ::std::string& uri,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with a Xerces-C++ DOM error
       * handler.
       *
       * @param uri A URI or a local file name.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream.
       *
       * @param is A standrad input stream.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (::std::istream& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with an error handler.
       *
       * @param is A standrad input stream.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (::std::istream& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a Xerces-C++ DOM error
       * handler.
       *
       * @param is A standrad input stream.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and an
       * error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and a
       * Xerces-C++ DOM error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source.
       *
       * @param is A Xerces-C++ input source.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (::xercesc::InputSource& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with an error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (::xercesc::InputSource& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
       * error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (const ::xercesc::DOMDocument& d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A pointer to the Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function is normally used together with the keep_dom and
       * own_dom parsing flags to assign ownership of the DOM document
       * to the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      parseHeader (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      //@}

      /**
       * @name Parsing functions for the %headerfault document root.
       */
      //@{

      /**
       * @brief Parse a URI or a local file.
       *
       * @param uri A URI or a local file name.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (const ::std::string& uri,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with an error handler.
       *
       * @param uri A URI or a local file name.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (const ::std::string& uri,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with a Xerces-C++ DOM error
       * handler.
       *
       * @param uri A URI or a local file name.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream.
       *
       * @param is A standrad input stream.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (::std::istream& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with an error handler.
       *
       * @param is A standrad input stream.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (::std::istream& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a Xerces-C++ DOM error
       * handler.
       *
       * @param is A standrad input stream.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and an
       * error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and a
       * Xerces-C++ DOM error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source.
       *
       * @param is A Xerces-C++ input source.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (::xercesc::InputSource& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with an error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (::xercesc::InputSource& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
       * error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A pointer to the Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function is normally used together with the keep_dom and
       * own_dom parsing flags to assign ownership of the DOM document
       * to the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      parseHeaderfault (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      //@}

      /**
       * @name Parsing functions for the %address document root.
       */
      //@{

      /**
       * @brief Parse a URI or a local file.
       *
       * @param uri A URI or a local file name.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (const ::std::string& uri,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with an error handler.
       *
       * @param uri A URI or a local file name.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (const ::std::string& uri,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a URI or a local file with a Xerces-C++ DOM error
       * handler.
       *
       * @param uri A URI or a local file name.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream.
       *
       * @param is A standrad input stream.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (::std::istream& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with an error handler.
       *
       * @param is A standrad input stream.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (::std::istream& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a Xerces-C++ DOM error
       * handler.
       *
       * @param is A standrad input stream.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and an
       * error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and a
       * Xerces-C++ DOM error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source.
       *
       * @param is A Xerces-C++ input source.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (::xercesc::InputSource& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with an error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (::xercesc::InputSource& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
       * error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (const ::xercesc::DOMDocument& d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A pointer to the Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function is normally used together with the keep_dom and
       * own_dom parsing flags to assign ownership of the DOM document
       * to the object model.
       */
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      parseAddress (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      //@}
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace WS
{
  namespace WSDL
  {
    namespace SOAP_BINDING
    {
      /**
       * @name Serialization functions for the %binding document root.
       */
      //@{

      /**
       * @brief Serialize to a standard output stream.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeBinding (::std::ostream& os,
                        const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with an error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeBinding (::std::ostream& os,
                        const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with a Xerces-C++ DOM
       * error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeBinding (::std::ostream& os,
                        const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeBinding (::xercesc::XMLFormatTarget& ft,
                        const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with an error
       * handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeBinding (::xercesc::XMLFormatTarget& ft,
                        const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with a
       * Xerces-C++ DOM error handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeBinding (::xercesc::XMLFormatTarget& ft,
                        const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to an existing Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param x An object model to serialize.
       * @param f Serialization flags.
       *
       * Note that it is your responsibility to create the DOM document
       * with the correct root element as well as set the necessary
       * namespace mapping attributes.
       */
      void
      serializeBinding (::xercesc::DOMDocument& d,
                        const ::WS::WSDL::SOAP_BINDING::BindingType& x,
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a new Xerces-C++ DOM document.
       *
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param f Serialization flags.
       * @return A pointer to the new Xerces-C++ DOM document.
       */
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeBinding (const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

      //@}

      void
      operator<< (::xercesc::DOMElement&, const BindingType&);

      void
      operator<< (::xercesc::DOMElement&, const StyleChoice&);

      void
      operator<< (::xercesc::DOMAttr&, const StyleChoice&);

      void
      operator<< (::xml_schema::ListStream&,
                  const StyleChoice&);

      /**
       * @name Serialization functions for the %operation document root.
       */
      //@{

      /**
       * @brief Serialize to a standard output stream.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeOperation (::std::ostream& os,
                          const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with an error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeOperation (::std::ostream& os,
                          const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with a Xerces-C++ DOM
       * error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeOperation (::std::ostream& os,
                          const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeOperation (::xercesc::XMLFormatTarget& ft,
                          const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with an error
       * handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeOperation (::xercesc::XMLFormatTarget& ft,
                          const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                          ::xml_schema::ErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with a
       * Xerces-C++ DOM error handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeOperation (::xercesc::XMLFormatTarget& ft,
                          const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to an existing Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param x An object model to serialize.
       * @param f Serialization flags.
       *
       * Note that it is your responsibility to create the DOM document
       * with the correct root element as well as set the necessary
       * namespace mapping attributes.
       */
      void
      serializeOperation (::xercesc::DOMDocument& d,
                          const ::WS::WSDL::SOAP_BINDING::OperationType& x,
                          ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a new Xerces-C++ DOM document.
       *
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param f Serialization flags.
       * @return A pointer to the new Xerces-C++ DOM document.
       */
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeOperation (const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                          ::xml_schema::Flags f = 0);

      //@}

      void
      operator<< (::xercesc::DOMElement&, const OperationType&);

      /**
       * @name Serialization functions for the %body document root.
       */
      //@{

      /**
       * @brief Serialize to a standard output stream.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeBody (::std::ostream& os,
                     const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with an error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeBody (::std::ostream& os,
                     const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with a Xerces-C++ DOM
       * error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeBody (::std::ostream& os,
                     const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeBody (::xercesc::XMLFormatTarget& ft,
                     const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with an error
       * handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeBody (::xercesc::XMLFormatTarget& ft,
                     const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with a
       * Xerces-C++ DOM error handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeBody (::xercesc::XMLFormatTarget& ft,
                     const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to an existing Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param x An object model to serialize.
       * @param f Serialization flags.
       *
       * Note that it is your responsibility to create the DOM document
       * with the correct root element as well as set the necessary
       * namespace mapping attributes.
       */
      void
      serializeBody (::xercesc::DOMDocument& d,
                     const ::WS::WSDL::SOAP_BINDING::BodyType& x,
                     ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a new Xerces-C++ DOM document.
       *
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param f Serialization flags.
       * @return A pointer to the new Xerces-C++ DOM document.
       */
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeBody (const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

      //@}

      void
      operator<< (::xercesc::DOMElement&, const BodyType&);

      void
      operator<< (::xercesc::DOMElement&, const UseChoice&);

      void
      operator<< (::xercesc::DOMAttr&, const UseChoice&);

      void
      operator<< (::xml_schema::ListStream&,
                  const UseChoice&);

      /**
       * @name Serialization functions for the %fault document root.
       */
      //@{

      /**
       * @brief Serialize to a standard output stream.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeFault (::std::ostream& os,
                      const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with an error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeFault (::std::ostream& os,
                      const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with a Xerces-C++ DOM
       * error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeFault (::std::ostream& os,
                      const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeFault (::xercesc::XMLFormatTarget& ft,
                      const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with an error
       * handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeFault (::xercesc::XMLFormatTarget& ft,
                      const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with a
       * Xerces-C++ DOM error handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeFault (::xercesc::XMLFormatTarget& ft,
                      const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to an existing Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param x An object model to serialize.
       * @param f Serialization flags.
       *
       * Note that it is your responsibility to create the DOM document
       * with the correct root element as well as set the necessary
       * namespace mapping attributes.
       */
      void
      serializeFault (::xercesc::DOMDocument& d,
                      const ::WS::WSDL::SOAP_BINDING::FaultType& x,
                      ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a new Xerces-C++ DOM document.
       *
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param f Serialization flags.
       * @return A pointer to the new Xerces-C++ DOM document.
       */
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeFault (const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      ::xml_schema::Flags f = 0);

      //@}

      void
      operator<< (::xercesc::DOMElement&, const FaultType&);

      /**
       * @name Serialization functions for the %header document root.
       */
      //@{

      /**
       * @brief Serialize to a standard output stream.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeHeader (::std::ostream& os,
                       const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with an error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeHeader (::std::ostream& os,
                       const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with a Xerces-C++ DOM
       * error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeHeader (::std::ostream& os,
                       const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeHeader (::xercesc::XMLFormatTarget& ft,
                       const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with an error
       * handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeHeader (::xercesc::XMLFormatTarget& ft,
                       const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with a
       * Xerces-C++ DOM error handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeHeader (::xercesc::XMLFormatTarget& ft,
                       const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to an existing Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param x An object model to serialize.
       * @param f Serialization flags.
       *
       * Note that it is your responsibility to create the DOM document
       * with the correct root element as well as set the necessary
       * namespace mapping attributes.
       */
      void
      serializeHeader (::xercesc::DOMDocument& d,
                       const ::WS::WSDL::SOAP_BINDING::HeaderType& x,
                       ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a new Xerces-C++ DOM document.
       *
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param f Serialization flags.
       * @return A pointer to the new Xerces-C++ DOM document.
       */
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeHeader (const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       ::xml_schema::Flags f = 0);

      //@}

      void
      operator<< (::xercesc::DOMElement&, const HeaderType&);

      /**
       * @name Serialization functions for the %headerfault document root.
       */
      //@{

      /**
       * @brief Serialize to a standard output stream.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeHeaderfault (::std::ostream& os,
                            const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with an error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeHeaderfault (::std::ostream& os,
                            const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                            ::xml_schema::ErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with a Xerces-C++ DOM
       * error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeHeaderfault (::std::ostream& os,
                            const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeHeaderfault (::xercesc::XMLFormatTarget& ft,
                            const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with an error
       * handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeHeaderfault (::xercesc::XMLFormatTarget& ft,
                            const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                            ::xml_schema::ErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with a
       * Xerces-C++ DOM error handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeHeaderfault (::xercesc::XMLFormatTarget& ft,
                            const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to an existing Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param x An object model to serialize.
       * @param f Serialization flags.
       *
       * Note that it is your responsibility to create the DOM document
       * with the correct root element as well as set the necessary
       * namespace mapping attributes.
       */
      void
      serializeHeaderfault (::xercesc::DOMDocument& d,
                            const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x,
                            ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a new Xerces-C++ DOM document.
       *
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param f Serialization flags.
       * @return A pointer to the new Xerces-C++ DOM document.
       */
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeHeaderfault (const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            ::xml_schema::Flags f = 0);

      //@}

      void
      operator<< (::xercesc::DOMElement&, const HeaderfaultType&);

      /**
       * @name Serialization functions for the %address document root.
       */
      //@{

      /**
       * @brief Serialize to a standard output stream.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeAddress (::std::ostream& os,
                        const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with an error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeAddress (::std::ostream& os,
                        const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with a Xerces-C++ DOM
       * error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeAddress (::std::ostream& os,
                        const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeAddress (::xercesc::XMLFormatTarget& ft,
                        const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with an error
       * handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeAddress (::xercesc::XMLFormatTarget& ft,
                        const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with a
       * Xerces-C++ DOM error handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeAddress (::xercesc::XMLFormatTarget& ft,
                        const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to an existing Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param x An object model to serialize.
       * @param f Serialization flags.
       *
       * Note that it is your responsibility to create the DOM document
       * with the correct root element as well as set the necessary
       * namespace mapping attributes.
       */
      void
      serializeAddress (::xercesc::DOMDocument& d,
                        const ::WS::WSDL::SOAP_BINDING::AddressType& x,
                        ::xml_schema::Flags f = 0);

      /**
       * @brief Serialize to a new Xerces-C++ DOM document.
       *
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param f Serialization flags.
       * @return A pointer to the new Xerces-C++ DOM document.
       */
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      serializeAddress (const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

      //@}

      void
      operator<< (::xercesc::DOMElement&, const AddressType&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // WSDL_SOAP_BINDING_HXX
