// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef NORMALIZED_MESSAGE_MODEL_HXX
#define NORMALIZED_MESSAGE_MODEL_HXX

#include "DataModel/NormalizedMessageModel-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "DataModel/ws-addressing.hxx"

#include "DataModel/MetadataExchange.hxx"

#include "DataModel/eventing.hxx"

#include "DataModel/ws-streaming.hxx"

#include "DataModel/BICEPS_MessageModel.hxx"

#include "DataModel/wsdd-discovery-1.1-schema-os.hxx"

namespace MESSAGEMODEL
{
  class Header: public ::xml_schema::Type
  {
    public:
    // Action
    //
    typedef ::WS::ADDRESSING::AttributedURIType ActionType;
    typedef ::xsd::cxx::tree::optional< ActionType > ActionOptional;
    typedef ::xsd::cxx::tree::traits< ActionType, char > ActionTraits;

    const ActionOptional&
    Action () const;

    ActionOptional&
    Action ();

    void
    Action (const ActionType& x);

    void
    Action (const ActionOptional& x);

    void
    Action (::std::unique_ptr< ActionType > p);

    // AppSequence
    //
    typedef ::WS::DISCOVERY::AppSequenceType AppSequenceType;
    typedef ::xsd::cxx::tree::optional< AppSequenceType > AppSequenceOptional;
    typedef ::xsd::cxx::tree::traits< AppSequenceType, char > AppSequenceTraits;

    const AppSequenceOptional&
    AppSequence () const;

    AppSequenceOptional&
    AppSequence ();

    void
    AppSequence (const AppSequenceType& x);

    void
    AppSequence (const AppSequenceOptional& x);

    void
    AppSequence (::std::unique_ptr< AppSequenceType > p);

    // FaultTo
    //
    typedef ::WS::ADDRESSING::EndpointReferenceType FaultToType;
    typedef ::xsd::cxx::tree::optional< FaultToType > FaultToOptional;
    typedef ::xsd::cxx::tree::traits< FaultToType, char > FaultToTraits;

    const FaultToOptional&
    FaultTo () const;

    FaultToOptional&
    FaultTo ();

    void
    FaultTo (const FaultToType& x);

    void
    FaultTo (const FaultToOptional& x);

    void
    FaultTo (::std::unique_ptr< FaultToType > p);

    // From
    //
    typedef ::WS::ADDRESSING::EndpointReferenceType FromType;
    typedef ::xsd::cxx::tree::optional< FromType > FromOptional;
    typedef ::xsd::cxx::tree::traits< FromType, char > FromTraits;

    const FromOptional&
    From () const;

    FromOptional&
    From ();

    void
    From (const FromType& x);

    void
    From (const FromOptional& x);

    void
    From (::std::unique_ptr< FromType > p);

    // MessageID
    //
    typedef ::WS::ADDRESSING::AttributedURIType MessageIDType;
    typedef ::xsd::cxx::tree::optional< MessageIDType > MessageIDOptional;
    typedef ::xsd::cxx::tree::traits< MessageIDType, char > MessageIDTraits;

    const MessageIDOptional&
    MessageID () const;

    MessageIDOptional&
    MessageID ();

    void
    MessageID (const MessageIDType& x);

    void
    MessageID (const MessageIDOptional& x);

    void
    MessageID (::std::unique_ptr< MessageIDType > p);

    // ReferenceParameters
    //
    typedef ::WS::ADDRESSING::ReferenceParametersType ReferenceParametersType;
    typedef ::xsd::cxx::tree::optional< ReferenceParametersType > ReferenceParametersOptional;
    typedef ::xsd::cxx::tree::traits< ReferenceParametersType, char > ReferenceParametersTraits;

    const ReferenceParametersOptional&
    ReferenceParameters () const;

    ReferenceParametersOptional&
    ReferenceParameters ();

    void
    ReferenceParameters (const ReferenceParametersType& x);

    void
    ReferenceParameters (const ReferenceParametersOptional& x);

    void
    ReferenceParameters (::std::unique_ptr< ReferenceParametersType > p);

    // RelatesTo
    //
    typedef ::WS::ADDRESSING::RelatesToType RelatesToType;
    typedef ::xsd::cxx::tree::optional< RelatesToType > RelatesToOptional;
    typedef ::xsd::cxx::tree::traits< RelatesToType, char > RelatesToTraits;

    const RelatesToOptional&
    RelatesTo () const;

    RelatesToOptional&
    RelatesTo ();

    void
    RelatesTo (const RelatesToType& x);

    void
    RelatesTo (const RelatesToOptional& x);

    void
    RelatesTo (::std::unique_ptr< RelatesToType > p);

    // ReplyTo
    //
    typedef ::WS::ADDRESSING::EndpointReferenceType ReplyToType;
    typedef ::xsd::cxx::tree::optional< ReplyToType > ReplyToOptional;
    typedef ::xsd::cxx::tree::traits< ReplyToType, char > ReplyToTraits;

    const ReplyToOptional&
    ReplyTo () const;

    ReplyToOptional&
    ReplyTo ();

    void
    ReplyTo (const ReplyToType& x);

    void
    ReplyTo (const ReplyToOptional& x);

    void
    ReplyTo (::std::unique_ptr< ReplyToType > p);

    // To
    //
    typedef ::WS::ADDRESSING::AttributedURIType ToType;
    typedef ::xsd::cxx::tree::optional< ToType > ToOptional;
    typedef ::xsd::cxx::tree::traits< ToType, char > ToTraits;

    const ToOptional&
    To () const;

    ToOptional&
    To ();

    void
    To (const ToType& x);

    void
    To (const ToOptional& x);

    void
    To (::std::unique_ptr< ToType > p);

    // Identifier
    //
    typedef ::WS::EVENTING::Identifier IdentifierType;
    typedef ::xsd::cxx::tree::optional< IdentifierType > IdentifierOptional;
    typedef ::xsd::cxx::tree::traits< IdentifierType, char > IdentifierTraits;

    const IdentifierOptional&
    Identifier () const;

    IdentifierOptional&
    Identifier ();

    void
    Identifier (const IdentifierType& x);

    void
    Identifier (const IdentifierOptional& x);

    void
    Identifier (::std::unique_ptr< IdentifierType > p);

    // Constructors.
    //
    Header ();

    Header (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    Header (const Header& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    virtual Header*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Header&
    operator= (const Header& x);

    virtual 
    ~Header ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ActionOptional Action_;
    AppSequenceOptional AppSequence_;
    FaultToOptional FaultTo_;
    FromOptional From_;
    MessageIDOptional MessageID_;
    ReferenceParametersOptional ReferenceParameters_;
    RelatesToOptional RelatesTo_;
    ReplyToOptional ReplyTo_;
    ToOptional To_;
    IdentifierOptional Identifier_;
  };

  class Body: public ::xml_schema::Type
  {
    public:
    // Bye
    //
    typedef ::WS::DISCOVERY::ByeType ByeType;
    typedef ::xsd::cxx::tree::optional< ByeType > ByeOptional;
    typedef ::xsd::cxx::tree::traits< ByeType, char > ByeTraits;

    const ByeOptional&
    Bye () const;

    ByeOptional&
    Bye ();

    void
    Bye (const ByeType& x);

    void
    Bye (const ByeOptional& x);

    void
    Bye (::std::unique_ptr< ByeType > p);

    // Hello
    //
    typedef ::WS::DISCOVERY::HelloType HelloType;
    typedef ::xsd::cxx::tree::optional< HelloType > HelloOptional;
    typedef ::xsd::cxx::tree::traits< HelloType, char > HelloTraits;

    const HelloOptional&
    Hello () const;

    HelloOptional&
    Hello ();

    void
    Hello (const HelloType& x);

    void
    Hello (const HelloOptional& x);

    void
    Hello (::std::unique_ptr< HelloType > p);

    // Probe
    //
    typedef ::WS::DISCOVERY::ProbeType ProbeType;
    typedef ::xsd::cxx::tree::optional< ProbeType > ProbeOptional;
    typedef ::xsd::cxx::tree::traits< ProbeType, char > ProbeTraits;

    const ProbeOptional&
    Probe () const;

    ProbeOptional&
    Probe ();

    void
    Probe (const ProbeType& x);

    void
    Probe (const ProbeOptional& x);

    void
    Probe (::std::unique_ptr< ProbeType > p);

    // ProbeMatches
    //
    typedef ::WS::DISCOVERY::ProbeMatchesType ProbeMatchesType;
    typedef ::xsd::cxx::tree::optional< ProbeMatchesType > ProbeMatchesOptional;
    typedef ::xsd::cxx::tree::traits< ProbeMatchesType, char > ProbeMatchesTraits;

    const ProbeMatchesOptional&
    ProbeMatches () const;

    ProbeMatchesOptional&
    ProbeMatches ();

    void
    ProbeMatches (const ProbeMatchesType& x);

    void
    ProbeMatches (const ProbeMatchesOptional& x);

    void
    ProbeMatches (::std::unique_ptr< ProbeMatchesType > p);

    // Resolve
    //
    typedef ::WS::DISCOVERY::ResolveType ResolveType;
    typedef ::xsd::cxx::tree::optional< ResolveType > ResolveOptional;
    typedef ::xsd::cxx::tree::traits< ResolveType, char > ResolveTraits;

    const ResolveOptional&
    Resolve () const;

    ResolveOptional&
    Resolve ();

    void
    Resolve (const ResolveType& x);

    void
    Resolve (const ResolveOptional& x);

    void
    Resolve (::std::unique_ptr< ResolveType > p);

    // ResolveMatches
    //
    typedef ::WS::DISCOVERY::ResolveMatchesType ResolveMatchesType;
    typedef ::xsd::cxx::tree::optional< ResolveMatchesType > ResolveMatchesOptional;
    typedef ::xsd::cxx::tree::traits< ResolveMatchesType, char > ResolveMatchesTraits;

    const ResolveMatchesOptional&
    ResolveMatches () const;

    ResolveMatchesOptional&
    ResolveMatches ();

    void
    ResolveMatches (const ResolveMatchesType& x);

    void
    ResolveMatches (const ResolveMatchesOptional& x);

    void
    ResolveMatches (::std::unique_ptr< ResolveMatchesType > p);

    // GetMetadata
    //
    typedef ::WS::MEX::GetMetadata GetMetadataType;
    typedef ::xsd::cxx::tree::optional< GetMetadataType > GetMetadataOptional;
    typedef ::xsd::cxx::tree::traits< GetMetadataType, char > GetMetadataTraits;

    const GetMetadataOptional&
    GetMetadata () const;

    GetMetadataOptional&
    GetMetadata ();

    void
    GetMetadata (const GetMetadataType& x);

    void
    GetMetadata (const GetMetadataOptional& x);

    void
    GetMetadata (::std::unique_ptr< GetMetadataType > p);

    // Metadata
    //
    typedef ::WS::MEX::Metadata MetadataType;
    typedef ::xsd::cxx::tree::optional< MetadataType > MetadataOptional;
    typedef ::xsd::cxx::tree::traits< MetadataType, char > MetadataTraits;

    const MetadataOptional&
    Metadata () const;

    MetadataOptional&
    Metadata ();

    void
    Metadata (const MetadataType& x);

    void
    Metadata (const MetadataOptional& x);

    void
    Metadata (::std::unique_ptr< MetadataType > p);

    // Subscribe
    //
    typedef ::WS::EVENTING::Subscribe SubscribeType;
    typedef ::xsd::cxx::tree::optional< SubscribeType > SubscribeOptional;
    typedef ::xsd::cxx::tree::traits< SubscribeType, char > SubscribeTraits;

    const SubscribeOptional&
    Subscribe () const;

    SubscribeOptional&
    Subscribe ();

    void
    Subscribe (const SubscribeType& x);

    void
    Subscribe (const SubscribeOptional& x);

    void
    Subscribe (::std::unique_ptr< SubscribeType > p);

    // SubscribeResponse
    //
    typedef ::WS::EVENTING::SubscribeResponse SubscribeResponseType;
    typedef ::xsd::cxx::tree::optional< SubscribeResponseType > SubscribeResponseOptional;
    typedef ::xsd::cxx::tree::traits< SubscribeResponseType, char > SubscribeResponseTraits;

    const SubscribeResponseOptional&
    SubscribeResponse () const;

    SubscribeResponseOptional&
    SubscribeResponse ();

    void
    SubscribeResponse (const SubscribeResponseType& x);

    void
    SubscribeResponse (const SubscribeResponseOptional& x);

    void
    SubscribeResponse (::std::unique_ptr< SubscribeResponseType > p);

    // Unsubscribe
    //
    typedef ::WS::EVENTING::Unsubscribe UnsubscribeType;
    typedef ::xsd::cxx::tree::optional< UnsubscribeType > UnsubscribeOptional;
    typedef ::xsd::cxx::tree::traits< UnsubscribeType, char > UnsubscribeTraits;

    const UnsubscribeOptional&
    Unsubscribe () const;

    UnsubscribeOptional&
    Unsubscribe ();

    void
    Unsubscribe (const UnsubscribeType& x);

    void
    Unsubscribe (const UnsubscribeOptional& x);

    void
    Unsubscribe (::std::unique_ptr< UnsubscribeType > p);

    // Renew
    //
    typedef ::WS::EVENTING::Renew RenewType;
    typedef ::xsd::cxx::tree::optional< RenewType > RenewOptional;
    typedef ::xsd::cxx::tree::traits< RenewType, char > RenewTraits;

    const RenewOptional&
    Renew () const;

    RenewOptional&
    Renew ();

    void
    Renew (const RenewType& x);

    void
    Renew (const RenewOptional& x);

    void
    Renew (::std::unique_ptr< RenewType > p);

    // RenewResponse
    //
    typedef ::WS::EVENTING::RenewResponse RenewResponseType;
    typedef ::xsd::cxx::tree::optional< RenewResponseType > RenewResponseOptional;
    typedef ::xsd::cxx::tree::traits< RenewResponseType, char > RenewResponseTraits;

    const RenewResponseOptional&
    RenewResponse () const;

    RenewResponseOptional&
    RenewResponse ();

    void
    RenewResponse (const RenewResponseType& x);

    void
    RenewResponse (const RenewResponseOptional& x);

    void
    RenewResponse (::std::unique_ptr< RenewResponseType > p);

    // GetStatus
    //
    typedef ::WS::EVENTING::GetStatus GetStatusType;
    typedef ::xsd::cxx::tree::optional< GetStatusType > GetStatusOptional;
    typedef ::xsd::cxx::tree::traits< GetStatusType, char > GetStatusTraits;

    const GetStatusOptional&
    GetStatus () const;

    GetStatusOptional&
    GetStatus ();

    void
    GetStatus (const GetStatusType& x);

    void
    GetStatus (const GetStatusOptional& x);

    void
    GetStatus (::std::unique_ptr< GetStatusType > p);

    // GetStatusResponse
    //
    typedef ::WS::EVENTING::GetStatusResponse GetStatusResponseType;
    typedef ::xsd::cxx::tree::optional< GetStatusResponseType > GetStatusResponseOptional;
    typedef ::xsd::cxx::tree::traits< GetStatusResponseType, char > GetStatusResponseTraits;

    const GetStatusResponseOptional&
    GetStatusResponse () const;

    GetStatusResponseOptional&
    GetStatusResponse ();

    void
    GetStatusResponse (const GetStatusResponseType& x);

    void
    GetStatusResponse (const GetStatusResponseOptional& x);

    void
    GetStatusResponse (::std::unique_ptr< GetStatusResponseType > p);

    // GetContextStates
    //
    typedef ::MDM::GetContextStates GetContextStatesType;
    typedef ::xsd::cxx::tree::optional< GetContextStatesType > GetContextStatesOptional;
    typedef ::xsd::cxx::tree::traits< GetContextStatesType, char > GetContextStatesTraits;

    const GetContextStatesOptional&
    GetContextStates () const;

    GetContextStatesOptional&
    GetContextStates ();

    void
    GetContextStates (const GetContextStatesType& x);

    void
    GetContextStates (const GetContextStatesOptional& x);

    void
    GetContextStates (::std::unique_ptr< GetContextStatesType > p);

    // GetContextStatesResponse
    //
    typedef ::MDM::GetContextStatesResponse GetContextStatesResponseType;
    typedef ::xsd::cxx::tree::optional< GetContextStatesResponseType > GetContextStatesResponseOptional;
    typedef ::xsd::cxx::tree::traits< GetContextStatesResponseType, char > GetContextStatesResponseTraits;

    const GetContextStatesResponseOptional&
    GetContextStatesResponse () const;

    GetContextStatesResponseOptional&
    GetContextStatesResponse ();

    void
    GetContextStatesResponse (const GetContextStatesResponseType& x);

    void
    GetContextStatesResponse (const GetContextStatesResponseOptional& x);

    void
    GetContextStatesResponse (::std::unique_ptr< GetContextStatesResponseType > p);

    // SetContextState
    //
    typedef ::MDM::SetContextState SetContextStateType;
    typedef ::xsd::cxx::tree::optional< SetContextStateType > SetContextStateOptional;
    typedef ::xsd::cxx::tree::traits< SetContextStateType, char > SetContextStateTraits;

    const SetContextStateOptional&
    SetContextState () const;

    SetContextStateOptional&
    SetContextState ();

    void
    SetContextState (const SetContextStateType& x);

    void
    SetContextState (const SetContextStateOptional& x);

    void
    SetContextState (::std::unique_ptr< SetContextStateType > p);

    // SetContextStateResponse
    //
    typedef ::MDM::SetContextStateResponse SetContextStateResponseType;
    typedef ::xsd::cxx::tree::optional< SetContextStateResponseType > SetContextStateResponseOptional;
    typedef ::xsd::cxx::tree::traits< SetContextStateResponseType, char > SetContextStateResponseTraits;

    const SetContextStateResponseOptional&
    SetContextStateResponse () const;

    SetContextStateResponseOptional&
    SetContextStateResponse ();

    void
    SetContextStateResponse (const SetContextStateResponseType& x);

    void
    SetContextStateResponse (const SetContextStateResponseOptional& x);

    void
    SetContextStateResponse (::std::unique_ptr< SetContextStateResponseType > p);

    // EpisodicContextReport
    //
    typedef ::MDM::EpisodicContextReport EpisodicContextReportType;
    typedef ::xsd::cxx::tree::optional< EpisodicContextReportType > EpisodicContextReportOptional;
    typedef ::xsd::cxx::tree::traits< EpisodicContextReportType, char > EpisodicContextReportTraits;

    const EpisodicContextReportOptional&
    EpisodicContextReport () const;

    EpisodicContextReportOptional&
    EpisodicContextReport ();

    void
    EpisodicContextReport (const EpisodicContextReportType& x);

    void
    EpisodicContextReport (const EpisodicContextReportOptional& x);

    void
    EpisodicContextReport (::std::unique_ptr< EpisodicContextReportType > p);

    // PeriodicContextReport
    //
    typedef ::MDM::PeriodicContextReport PeriodicContextReportType;
    typedef ::xsd::cxx::tree::optional< PeriodicContextReportType > PeriodicContextReportOptional;
    typedef ::xsd::cxx::tree::traits< PeriodicContextReportType, char > PeriodicContextReportTraits;

    const PeriodicContextReportOptional&
    PeriodicContextReport () const;

    PeriodicContextReportOptional&
    PeriodicContextReport ();

    void
    PeriodicContextReport (const PeriodicContextReportType& x);

    void
    PeriodicContextReport (const PeriodicContextReportOptional& x);

    void
    PeriodicContextReport (::std::unique_ptr< PeriodicContextReportType > p);

    // EpisodicAlertReport
    //
    typedef ::MDM::EpisodicAlertReport EpisodicAlertReportType;
    typedef ::xsd::cxx::tree::optional< EpisodicAlertReportType > EpisodicAlertReportOptional;
    typedef ::xsd::cxx::tree::traits< EpisodicAlertReportType, char > EpisodicAlertReportTraits;

    const EpisodicAlertReportOptional&
    EpisodicAlertReport () const;

    EpisodicAlertReportOptional&
    EpisodicAlertReport ();

    void
    EpisodicAlertReport (const EpisodicAlertReportType& x);

    void
    EpisodicAlertReport (const EpisodicAlertReportOptional& x);

    void
    EpisodicAlertReport (::std::unique_ptr< EpisodicAlertReportType > p);

    // EpisodicMetricReport
    //
    typedef ::MDM::EpisodicMetricReport EpisodicMetricReportType;
    typedef ::xsd::cxx::tree::optional< EpisodicMetricReportType > EpisodicMetricReportOptional;
    typedef ::xsd::cxx::tree::traits< EpisodicMetricReportType, char > EpisodicMetricReportTraits;

    const EpisodicMetricReportOptional&
    EpisodicMetricReport () const;

    EpisodicMetricReportOptional&
    EpisodicMetricReport ();

    void
    EpisodicMetricReport (const EpisodicMetricReportType& x);

    void
    EpisodicMetricReport (const EpisodicMetricReportOptional& x);

    void
    EpisodicMetricReport (::std::unique_ptr< EpisodicMetricReportType > p);

    // PeriodicAlertReport
    //
    typedef ::MDM::PeriodicAlertReport PeriodicAlertReportType;
    typedef ::xsd::cxx::tree::optional< PeriodicAlertReportType > PeriodicAlertReportOptional;
    typedef ::xsd::cxx::tree::traits< PeriodicAlertReportType, char > PeriodicAlertReportTraits;

    const PeriodicAlertReportOptional&
    PeriodicAlertReport () const;

    PeriodicAlertReportOptional&
    PeriodicAlertReport ();

    void
    PeriodicAlertReport (const PeriodicAlertReportType& x);

    void
    PeriodicAlertReport (const PeriodicAlertReportOptional& x);

    void
    PeriodicAlertReport (::std::unique_ptr< PeriodicAlertReportType > p);

    // PeriodicMetricReport
    //
    typedef ::MDM::PeriodicMetricReport PeriodicMetricReportType;
    typedef ::xsd::cxx::tree::optional< PeriodicMetricReportType > PeriodicMetricReportOptional;
    typedef ::xsd::cxx::tree::traits< PeriodicMetricReportType, char > PeriodicMetricReportTraits;

    const PeriodicMetricReportOptional&
    PeriodicMetricReport () const;

    PeriodicMetricReportOptional&
    PeriodicMetricReport ();

    void
    PeriodicMetricReport (const PeriodicMetricReportType& x);

    void
    PeriodicMetricReport (const PeriodicMetricReportOptional& x);

    void
    PeriodicMetricReport (::std::unique_ptr< PeriodicMetricReportType > p);

    // OperationInvokedReport
    //
    typedef ::MDM::OperationInvokedReport OperationInvokedReportType;
    typedef ::xsd::cxx::tree::optional< OperationInvokedReportType > OperationInvokedReportOptional;
    typedef ::xsd::cxx::tree::traits< OperationInvokedReportType, char > OperationInvokedReportTraits;

    const OperationInvokedReportOptional&
    OperationInvokedReport () const;

    OperationInvokedReportOptional&
    OperationInvokedReport ();

    void
    OperationInvokedReport (const OperationInvokedReportType& x);

    void
    OperationInvokedReport (const OperationInvokedReportOptional& x);

    void
    OperationInvokedReport (::std::unique_ptr< OperationInvokedReportType > p);

    // GetMdDescription
    //
    typedef ::MDM::GetMdDescription GetMdDescriptionType;
    typedef ::xsd::cxx::tree::optional< GetMdDescriptionType > GetMdDescriptionOptional;
    typedef ::xsd::cxx::tree::traits< GetMdDescriptionType, char > GetMdDescriptionTraits;

    const GetMdDescriptionOptional&
    GetMdDescription () const;

    GetMdDescriptionOptional&
    GetMdDescription ();

    void
    GetMdDescription (const GetMdDescriptionType& x);

    void
    GetMdDescription (const GetMdDescriptionOptional& x);

    void
    GetMdDescription (::std::unique_ptr< GetMdDescriptionType > p);

    // GetMdDescriptionResponse
    //
    typedef ::MDM::GetMdDescriptionResponse GetMdDescriptionResponseType;
    typedef ::xsd::cxx::tree::optional< GetMdDescriptionResponseType > GetMdDescriptionResponseOptional;
    typedef ::xsd::cxx::tree::traits< GetMdDescriptionResponseType, char > GetMdDescriptionResponseTraits;

    const GetMdDescriptionResponseOptional&
    GetMdDescriptionResponse () const;

    GetMdDescriptionResponseOptional&
    GetMdDescriptionResponse ();

    void
    GetMdDescriptionResponse (const GetMdDescriptionResponseType& x);

    void
    GetMdDescriptionResponse (const GetMdDescriptionResponseOptional& x);

    void
    GetMdDescriptionResponse (::std::unique_ptr< GetMdDescriptionResponseType > p);

    // GetMdib
    //
    typedef ::MDM::GetMdib GetMdibType;
    typedef ::xsd::cxx::tree::optional< GetMdibType > GetMdibOptional;
    typedef ::xsd::cxx::tree::traits< GetMdibType, char > GetMdibTraits;

    const GetMdibOptional&
    GetMdib () const;

    GetMdibOptional&
    GetMdib ();

    void
    GetMdib (const GetMdibType& x);

    void
    GetMdib (const GetMdibOptional& x);

    void
    GetMdib (::std::unique_ptr< GetMdibType > p);

    // GetMdibResponse
    //
    typedef ::MDM::GetMdibResponse GetMdibResponseType;
    typedef ::xsd::cxx::tree::optional< GetMdibResponseType > GetMdibResponseOptional;
    typedef ::xsd::cxx::tree::traits< GetMdibResponseType, char > GetMdibResponseTraits;

    const GetMdibResponseOptional&
    GetMdibResponse () const;

    GetMdibResponseOptional&
    GetMdibResponse ();

    void
    GetMdibResponse (const GetMdibResponseType& x);

    void
    GetMdibResponse (const GetMdibResponseOptional& x);

    void
    GetMdibResponse (::std::unique_ptr< GetMdibResponseType > p);

    // GetMdState
    //
    typedef ::MDM::GetMdState GetMdStateType;
    typedef ::xsd::cxx::tree::optional< GetMdStateType > GetMdStateOptional;
    typedef ::xsd::cxx::tree::traits< GetMdStateType, char > GetMdStateTraits;

    const GetMdStateOptional&
    GetMdState () const;

    GetMdStateOptional&
    GetMdState ();

    void
    GetMdState (const GetMdStateType& x);

    void
    GetMdState (const GetMdStateOptional& x);

    void
    GetMdState (::std::unique_ptr< GetMdStateType > p);

    // GetMdStateResponse
    //
    typedef ::MDM::GetMdStateResponse GetMdStateResponseType;
    typedef ::xsd::cxx::tree::optional< GetMdStateResponseType > GetMdStateResponseOptional;
    typedef ::xsd::cxx::tree::traits< GetMdStateResponseType, char > GetMdStateResponseTraits;

    const GetMdStateResponseOptional&
    GetMdStateResponse () const;

    GetMdStateResponseOptional&
    GetMdStateResponse ();

    void
    GetMdStateResponse (const GetMdStateResponseType& x);

    void
    GetMdStateResponse (const GetMdStateResponseOptional& x);

    void
    GetMdStateResponse (::std::unique_ptr< GetMdStateResponseType > p);

    // Activate
    //
    typedef ::MDM::Activate ActivateType;
    typedef ::xsd::cxx::tree::optional< ActivateType > ActivateOptional;
    typedef ::xsd::cxx::tree::traits< ActivateType, char > ActivateTraits;

    const ActivateOptional&
    Activate () const;

    ActivateOptional&
    Activate ();

    void
    Activate (const ActivateType& x);

    void
    Activate (const ActivateOptional& x);

    void
    Activate (::std::unique_ptr< ActivateType > p);

    // ActivateResponse
    //
    typedef ::MDM::ActivateResponse ActivateResponseType;
    typedef ::xsd::cxx::tree::optional< ActivateResponseType > ActivateResponseOptional;
    typedef ::xsd::cxx::tree::traits< ActivateResponseType, char > ActivateResponseTraits;

    const ActivateResponseOptional&
    ActivateResponse () const;

    ActivateResponseOptional&
    ActivateResponse ();

    void
    ActivateResponse (const ActivateResponseType& x);

    void
    ActivateResponse (const ActivateResponseOptional& x);

    void
    ActivateResponse (::std::unique_ptr< ActivateResponseType > p);

    // SetAlertState
    //
    typedef ::MDM::SetAlertState SetAlertStateType;
    typedef ::xsd::cxx::tree::optional< SetAlertStateType > SetAlertStateOptional;
    typedef ::xsd::cxx::tree::traits< SetAlertStateType, char > SetAlertStateTraits;

    const SetAlertStateOptional&
    SetAlertState () const;

    SetAlertStateOptional&
    SetAlertState ();

    void
    SetAlertState (const SetAlertStateType& x);

    void
    SetAlertState (const SetAlertStateOptional& x);

    void
    SetAlertState (::std::unique_ptr< SetAlertStateType > p);

    // SetAlertStateResponse
    //
    typedef ::MDM::SetAlertStateResponse SetAlertStateResponseType;
    typedef ::xsd::cxx::tree::optional< SetAlertStateResponseType > SetAlertStateResponseOptional;
    typedef ::xsd::cxx::tree::traits< SetAlertStateResponseType, char > SetAlertStateResponseTraits;

    const SetAlertStateResponseOptional&
    SetAlertStateResponse () const;

    SetAlertStateResponseOptional&
    SetAlertStateResponse ();

    void
    SetAlertStateResponse (const SetAlertStateResponseType& x);

    void
    SetAlertStateResponse (const SetAlertStateResponseOptional& x);

    void
    SetAlertStateResponse (::std::unique_ptr< SetAlertStateResponseType > p);

    // SetString
    //
    typedef ::MDM::SetString SetStringType;
    typedef ::xsd::cxx::tree::optional< SetStringType > SetStringOptional;
    typedef ::xsd::cxx::tree::traits< SetStringType, char > SetStringTraits;

    const SetStringOptional&
    SetString () const;

    SetStringOptional&
    SetString ();

    void
    SetString (const SetStringType& x);

    void
    SetString (const SetStringOptional& x);

    void
    SetString (::std::unique_ptr< SetStringType > p);

    // SetStringResponse
    //
    typedef ::MDM::SetStringResponse SetStringResponseType;
    typedef ::xsd::cxx::tree::optional< SetStringResponseType > SetStringResponseOptional;
    typedef ::xsd::cxx::tree::traits< SetStringResponseType, char > SetStringResponseTraits;

    const SetStringResponseOptional&
    SetStringResponse () const;

    SetStringResponseOptional&
    SetStringResponse ();

    void
    SetStringResponse (const SetStringResponseType& x);

    void
    SetStringResponse (const SetStringResponseOptional& x);

    void
    SetStringResponse (::std::unique_ptr< SetStringResponseType > p);

    // SetValue
    //
    typedef ::MDM::SetValue SetValueType;
    typedef ::xsd::cxx::tree::optional< SetValueType > SetValueOptional;
    typedef ::xsd::cxx::tree::traits< SetValueType, char > SetValueTraits;

    const SetValueOptional&
    SetValue () const;

    SetValueOptional&
    SetValue ();

    void
    SetValue (const SetValueType& x);

    void
    SetValue (const SetValueOptional& x);

    void
    SetValue (::std::unique_ptr< SetValueType > p);

    // SetValueResponse
    //
    typedef ::MDM::SetValueResponse SetValueResponseType;
    typedef ::xsd::cxx::tree::optional< SetValueResponseType > SetValueResponseOptional;
    typedef ::xsd::cxx::tree::traits< SetValueResponseType, char > SetValueResponseTraits;

    const SetValueResponseOptional&
    SetValueResponse () const;

    SetValueResponseOptional&
    SetValueResponse ();

    void
    SetValueResponse (const SetValueResponseType& x);

    void
    SetValueResponse (const SetValueResponseOptional& x);

    void
    SetValueResponse (::std::unique_ptr< SetValueResponseType > p);

    // WaveformStream
    //
    typedef ::MDM::WaveformStream WaveformStreamType;
    typedef ::xsd::cxx::tree::optional< WaveformStreamType > WaveformStreamOptional;
    typedef ::xsd::cxx::tree::traits< WaveformStreamType, char > WaveformStreamTraits;

    const WaveformStreamOptional&
    WaveformStream () const;

    WaveformStreamOptional&
    WaveformStream ();

    void
    WaveformStream (const WaveformStreamType& x);

    void
    WaveformStream (const WaveformStreamOptional& x);

    void
    WaveformStream (::std::unique_ptr< WaveformStreamType > p);

    // Constructors.
    //
    Body ();

    Body (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    Body (const Body& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    virtual Body*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Body&
    operator= (const Body& x);

    virtual 
    ~Body ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ByeOptional Bye_;
    HelloOptional Hello_;
    ProbeOptional Probe_;
    ProbeMatchesOptional ProbeMatches_;
    ResolveOptional Resolve_;
    ResolveMatchesOptional ResolveMatches_;
    GetMetadataOptional GetMetadata_;
    MetadataOptional Metadata_;
    SubscribeOptional Subscribe_;
    SubscribeResponseOptional SubscribeResponse_;
    UnsubscribeOptional Unsubscribe_;
    RenewOptional Renew_;
    RenewResponseOptional RenewResponse_;
    GetStatusOptional GetStatus_;
    GetStatusResponseOptional GetStatusResponse_;
    GetContextStatesOptional GetContextStates_;
    GetContextStatesResponseOptional GetContextStatesResponse_;
    SetContextStateOptional SetContextState_;
    SetContextStateResponseOptional SetContextStateResponse_;
    EpisodicContextReportOptional EpisodicContextReport_;
    PeriodicContextReportOptional PeriodicContextReport_;
    EpisodicAlertReportOptional EpisodicAlertReport_;
    EpisodicMetricReportOptional EpisodicMetricReport_;
    PeriodicAlertReportOptional PeriodicAlertReport_;
    PeriodicMetricReportOptional PeriodicMetricReport_;
    OperationInvokedReportOptional OperationInvokedReport_;
    GetMdDescriptionOptional GetMdDescription_;
    GetMdDescriptionResponseOptional GetMdDescriptionResponse_;
    GetMdibOptional GetMdib_;
    GetMdibResponseOptional GetMdibResponse_;
    GetMdStateOptional GetMdState_;
    GetMdStateResponseOptional GetMdStateResponse_;
    ActivateOptional Activate_;
    ActivateResponseOptional ActivateResponse_;
    SetAlertStateOptional SetAlertState_;
    SetAlertStateResponseOptional SetAlertStateResponse_;
    SetStringOptional SetString_;
    SetStringResponseOptional SetStringResponse_;
    SetValueOptional SetValue_;
    SetValueResponseOptional SetValueResponse_;
    WaveformStreamOptional WaveformStream_;
  };

  class Envelope: public ::xml_schema::Type
  {
    public:
    // Header
    //
    typedef ::MESSAGEMODEL::Header HeaderType;
    typedef ::xsd::cxx::tree::traits< HeaderType, char > HeaderTraits;

    const HeaderType&
    Header () const;

    HeaderType&
    Header ();

    void
    Header (const HeaderType& x);

    void
    Header (::std::unique_ptr< HeaderType > p);

    // Body
    //
    typedef ::MESSAGEMODEL::Body BodyType;
    typedef ::xsd::cxx::tree::traits< BodyType, char > BodyTraits;

    const BodyType&
    Body () const;

    BodyType&
    Body ();

    void
    Body (const BodyType& x);

    void
    Body (::std::unique_ptr< BodyType > p);

    // Constructors.
    //
    Envelope (const HeaderType&,
              const BodyType&);

    Envelope (::std::unique_ptr< HeaderType >,
              ::std::unique_ptr< BodyType >);

    Envelope (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    Envelope (const Envelope& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual Envelope*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Envelope&
    operator= (const Envelope& x);

    virtual 
    ~Envelope ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< HeaderType > Header_;
    ::xsd::cxx::tree::one< BodyType > Body_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace MESSAGEMODEL
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (const ::std::string& uri,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (const ::std::string& uri,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::std::istream& is,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::std::istream& is,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::xercesc::InputSource& is,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::xercesc::InputSource& is,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (const ::std::string& uri,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (const ::std::string& uri,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::std::istream& is,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::std::istream& is,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::xercesc::InputSource& is,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::xercesc::InputSource& is,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace MESSAGEMODEL
{
  // Serialize to std::ostream.
  //

  void
  Header_ (::std::ostream& os,
           const ::MESSAGEMODEL::Header& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

  void
  Header_ (::std::ostream& os,
           const ::MESSAGEMODEL::Header& x, 
           ::xml_schema::ErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

  void
  Header_ (::std::ostream& os,
           const ::MESSAGEMODEL::Header& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Header_ (::xercesc::XMLFormatTarget& ft,
           const ::MESSAGEMODEL::Header& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

  void
  Header_ (::xercesc::XMLFormatTarget& ft,
           const ::MESSAGEMODEL::Header& x, 
           ::xml_schema::ErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

  void
  Header_ (::xercesc::XMLFormatTarget& ft,
           const ::MESSAGEMODEL::Header& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Header_ (::xercesc::DOMDocument& d,
           const ::MESSAGEMODEL::Header& x,
           ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Header_ (const ::MESSAGEMODEL::Header& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Body_ (::std::ostream& os,
         const ::MESSAGEMODEL::Body& x, 
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

  void
  Body_ (::std::ostream& os,
         const ::MESSAGEMODEL::Body& x, 
         ::xml_schema::ErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

  void
  Body_ (::std::ostream& os,
         const ::MESSAGEMODEL::Body& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Body_ (::xercesc::XMLFormatTarget& ft,
         const ::MESSAGEMODEL::Body& x, 
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

  void
  Body_ (::xercesc::XMLFormatTarget& ft,
         const ::MESSAGEMODEL::Body& x, 
         ::xml_schema::ErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

  void
  Body_ (::xercesc::XMLFormatTarget& ft,
         const ::MESSAGEMODEL::Body& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Body_ (::xercesc::DOMDocument& d,
         const ::MESSAGEMODEL::Body& x,
         ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Body_ (const ::MESSAGEMODEL::Body& x, 
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         ::xml_schema::Flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Envelope_ (::std::ostream& os,
             const ::MESSAGEMODEL::Envelope& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  Envelope_ (::std::ostream& os,
             const ::MESSAGEMODEL::Envelope& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  Envelope_ (::std::ostream& os,
             const ::MESSAGEMODEL::Envelope& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Envelope_ (::xercesc::XMLFormatTarget& ft,
             const ::MESSAGEMODEL::Envelope& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  Envelope_ (::xercesc::XMLFormatTarget& ft,
             const ::MESSAGEMODEL::Envelope& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  Envelope_ (::xercesc::XMLFormatTarget& ft,
             const ::MESSAGEMODEL::Envelope& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Envelope_ (::xercesc::DOMDocument& d,
             const ::MESSAGEMODEL::Envelope& x,
             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Envelope_ (const ::MESSAGEMODEL::Envelope& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const Header&);

  void
  operator<< (::xercesc::DOMElement&, const Body&);

  void
  operator<< (::xercesc::DOMElement&, const Envelope&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // NORMALIZED_MESSAGE_MODEL_HXX
