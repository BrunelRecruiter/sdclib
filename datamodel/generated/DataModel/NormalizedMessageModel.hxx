// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from NormalizedMessageModel.xsd.
 */

#ifndef NORMALIZED_MESSAGE_MODEL_HXX
#define NORMALIZED_MESSAGE_MODEL_HXX

#include "DataModel/NormalizedMessageModel-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "DataModel/ws-addressing.hxx"

#include "DataModel/MetadataExchange.hxx"

#include "DataModel/eventing.hxx"

#include "DataModel/ws-streaming.hxx"

#include "DataModel/BICEPS_MessageModel.hxx"

#include "DataModel/wsdd-discovery-1.1-schema-os.hxx"

/**
 * @brief C++ namespace for the %http://www.w3.org/2003/05/soap-envelope
 * schema namespace.
 */
namespace MESSAGEMODEL
{
  /**
   * @brief Class corresponding to the %Header schema type.
   *
   * @nosubgrouping
   */
  class Header: public ::xml_schema::Type
  {
    public:
    /**
     * @name Action
     *
     * @brief Accessor and modifier functions for the %Action
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::ADDRESSING::AttributedURIType ActionType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ActionType > ActionOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ActionType, char > ActionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ActionOptional&
    getAction () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ActionOptional&
    getAction ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setAction (const ActionType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setAction (const ActionOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setAction (::std::unique_ptr< ActionType > p);

    //@}

    /**
     * @name AppSequence
     *
     * @brief Accessor and modifier functions for the %AppSequence
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::DISCOVERY::AppSequenceType AppSequenceType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< AppSequenceType > AppSequenceOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AppSequenceType, char > AppSequenceTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const AppSequenceOptional&
    getAppSequence () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    AppSequenceOptional&
    getAppSequence ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setAppSequence (const AppSequenceType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setAppSequence (const AppSequenceOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setAppSequence (::std::unique_ptr< AppSequenceType > p);

    //@}

    /**
     * @name FaultTo
     *
     * @brief Accessor and modifier functions for the %FaultTo
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::ADDRESSING::EndpointReferenceType FaultToType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< FaultToType > FaultToOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< FaultToType, char > FaultToTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const FaultToOptional&
    getFaultTo () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    FaultToOptional&
    getFaultTo ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setFaultTo (const FaultToType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setFaultTo (const FaultToOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setFaultTo (::std::unique_ptr< FaultToType > p);

    //@}

    /**
     * @name From
     *
     * @brief Accessor and modifier functions for the %From
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::ADDRESSING::EndpointReferenceType FromType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< FromType > FromOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< FromType, char > FromTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const FromOptional&
    getFrom () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    FromOptional&
    getFrom ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setFrom (const FromType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setFrom (const FromOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setFrom (::std::unique_ptr< FromType > p);

    //@}

    /**
     * @name MessageID
     *
     * @brief Accessor and modifier functions for the %MessageID
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::ADDRESSING::AttributedURIType MessageIDType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< MessageIDType > MessageIDOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MessageIDType, char > MessageIDTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const MessageIDOptional&
    getMessageID () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    MessageIDOptional&
    getMessageID ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMessageID (const MessageIDType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setMessageID (const MessageIDOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setMessageID (::std::unique_ptr< MessageIDType > p);

    //@}

    /**
     * @name ReferenceParameters
     *
     * @brief Accessor and modifier functions for the %ReferenceParameters
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::ADDRESSING::ReferenceParametersType ReferenceParametersType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ReferenceParametersType > ReferenceParametersOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ReferenceParametersType, char > ReferenceParametersTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ReferenceParametersOptional&
    getReferenceParameters () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ReferenceParametersOptional&
    getReferenceParameters ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setReferenceParameters (const ReferenceParametersType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setReferenceParameters (const ReferenceParametersOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setReferenceParameters (::std::unique_ptr< ReferenceParametersType > p);

    //@}

    /**
     * @name RelatesTo
     *
     * @brief Accessor and modifier functions for the %RelatesTo
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::ADDRESSING::RelatesToType RelatesToType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< RelatesToType > RelatesToOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RelatesToType, char > RelatesToTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const RelatesToOptional&
    getRelatesTo () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    RelatesToOptional&
    getRelatesTo ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setRelatesTo (const RelatesToType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setRelatesTo (const RelatesToOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setRelatesTo (::std::unique_ptr< RelatesToType > p);

    //@}

    /**
     * @name ReplyTo
     *
     * @brief Accessor and modifier functions for the %ReplyTo
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::ADDRESSING::EndpointReferenceType ReplyToType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ReplyToType > ReplyToOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ReplyToType, char > ReplyToTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ReplyToOptional&
    getReplyTo () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ReplyToOptional&
    getReplyTo ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setReplyTo (const ReplyToType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setReplyTo (const ReplyToOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setReplyTo (::std::unique_ptr< ReplyToType > p);

    //@}

    /**
     * @name To
     *
     * @brief Accessor and modifier functions for the %To
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::ADDRESSING::AttributedURIType ToType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ToType > ToOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ToType, char > ToTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ToOptional&
    getTo () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ToOptional&
    getTo ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setTo (const ToType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setTo (const ToOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setTo (::std::unique_ptr< ToType > p);

    //@}

    /**
     * @name Identifier
     *
     * @brief Accessor and modifier functions for the %Identifier
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::EVENTING::Identifier IdentifierType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IdentifierType > IdentifierOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdentifierType, char > IdentifierTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IdentifierOptional&
    getIdentifier () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    IdentifierOptional&
    getIdentifier ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setIdentifier (const IdentifierType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setIdentifier (const IdentifierOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setIdentifier (::std::unique_ptr< IdentifierType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Header ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Header (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Header (const Header& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Header*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Header&
    operator= (const Header& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Header ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ActionOptional Action_;
    AppSequenceOptional AppSequence_;
    FaultToOptional FaultTo_;
    FromOptional From_;
    MessageIDOptional MessageID_;
    ReferenceParametersOptional ReferenceParameters_;
    RelatesToOptional RelatesTo_;
    ReplyToOptional ReplyTo_;
    ToOptional To_;
    IdentifierOptional Identifier_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Body schema type.
   *
   * @nosubgrouping
   */
  class Body: public ::xml_schema::Type
  {
    public:
    /**
     * @name Bye
     *
     * @brief Accessor and modifier functions for the %Bye
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::DISCOVERY::ByeType ByeType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ByeType > ByeOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ByeType, char > ByeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ByeOptional&
    getBye () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ByeOptional&
    getBye ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setBye (const ByeType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setBye (const ByeOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setBye (::std::unique_ptr< ByeType > p);

    //@}

    /**
     * @name Hello
     *
     * @brief Accessor and modifier functions for the %Hello
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::DISCOVERY::HelloType HelloType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< HelloType > HelloOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< HelloType, char > HelloTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const HelloOptional&
    getHello () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    HelloOptional&
    getHello ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setHello (const HelloType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setHello (const HelloOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setHello (::std::unique_ptr< HelloType > p);

    //@}

    /**
     * @name Probe
     *
     * @brief Accessor and modifier functions for the %Probe
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::DISCOVERY::ProbeType ProbeType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ProbeType > ProbeOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ProbeType, char > ProbeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ProbeOptional&
    getProbe () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ProbeOptional&
    getProbe ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setProbe (const ProbeType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setProbe (const ProbeOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setProbe (::std::unique_ptr< ProbeType > p);

    //@}

    /**
     * @name ProbeMatches
     *
     * @brief Accessor and modifier functions for the %ProbeMatches
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::DISCOVERY::ProbeMatchesType ProbeMatchesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ProbeMatchesType > ProbeMatchesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ProbeMatchesType, char > ProbeMatchesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ProbeMatchesOptional&
    getProbeMatches () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ProbeMatchesOptional&
    getProbeMatches ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setProbeMatches (const ProbeMatchesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setProbeMatches (const ProbeMatchesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setProbeMatches (::std::unique_ptr< ProbeMatchesType > p);

    //@}

    /**
     * @name Resolve
     *
     * @brief Accessor and modifier functions for the %Resolve
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::DISCOVERY::ResolveType ResolveType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ResolveType > ResolveOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ResolveType, char > ResolveTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ResolveOptional&
    getResolve () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ResolveOptional&
    getResolve ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setResolve (const ResolveType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setResolve (const ResolveOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setResolve (::std::unique_ptr< ResolveType > p);

    //@}

    /**
     * @name ResolveMatches
     *
     * @brief Accessor and modifier functions for the %ResolveMatches
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::DISCOVERY::ResolveMatchesType ResolveMatchesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ResolveMatchesType > ResolveMatchesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ResolveMatchesType, char > ResolveMatchesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ResolveMatchesOptional&
    getResolveMatches () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ResolveMatchesOptional&
    getResolveMatches ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setResolveMatches (const ResolveMatchesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setResolveMatches (const ResolveMatchesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setResolveMatches (::std::unique_ptr< ResolveMatchesType > p);

    //@}

    /**
     * @name GetMetadata
     *
     * @brief Accessor and modifier functions for the %GetMetadata
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::MEX::GetMetadata GetMetadataType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< GetMetadataType > GetMetadataOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GetMetadataType, char > GetMetadataTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const GetMetadataOptional&
    getGetMetadata () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    GetMetadataOptional&
    getGetMetadata ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setGetMetadata (const GetMetadataType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setGetMetadata (const GetMetadataOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setGetMetadata (::std::unique_ptr< GetMetadataType > p);

    //@}

    /**
     * @name Metadata
     *
     * @brief Accessor and modifier functions for the %Metadata
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::MEX::Metadata MetadataType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< MetadataType > MetadataOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MetadataType, char > MetadataTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const MetadataOptional&
    getMetadata () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    MetadataOptional&
    getMetadata ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setMetadata (const MetadataType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setMetadata (const MetadataOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setMetadata (::std::unique_ptr< MetadataType > p);

    //@}

    /**
     * @name Subscribe
     *
     * @brief Accessor and modifier functions for the %Subscribe
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::EVENTING::Subscribe SubscribeType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SubscribeType > SubscribeOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SubscribeType, char > SubscribeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SubscribeOptional&
    getSubscribe () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SubscribeOptional&
    getSubscribe ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSubscribe (const SubscribeType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setSubscribe (const SubscribeOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setSubscribe (::std::unique_ptr< SubscribeType > p);

    //@}

    /**
     * @name SubscribeResponse
     *
     * @brief Accessor and modifier functions for the %SubscribeResponse
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::EVENTING::SubscribeResponse SubscribeResponseType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SubscribeResponseType > SubscribeResponseOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SubscribeResponseType, char > SubscribeResponseTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SubscribeResponseOptional&
    getSubscribeResponse () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SubscribeResponseOptional&
    getSubscribeResponse ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSubscribeResponse (const SubscribeResponseType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setSubscribeResponse (const SubscribeResponseOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setSubscribeResponse (::std::unique_ptr< SubscribeResponseType > p);

    //@}

    /**
     * @name Unsubscribe
     *
     * @brief Accessor and modifier functions for the %Unsubscribe
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::EVENTING::Unsubscribe UnsubscribeType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< UnsubscribeType > UnsubscribeOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< UnsubscribeType, char > UnsubscribeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const UnsubscribeOptional&
    getUnsubscribe () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    UnsubscribeOptional&
    getUnsubscribe ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setUnsubscribe (const UnsubscribeType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setUnsubscribe (const UnsubscribeOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setUnsubscribe (::std::unique_ptr< UnsubscribeType > p);

    //@}

    /**
     * @name Renew
     *
     * @brief Accessor and modifier functions for the %Renew
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::EVENTING::Renew RenewType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< RenewType > RenewOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RenewType, char > RenewTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const RenewOptional&
    getRenew () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    RenewOptional&
    getRenew ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setRenew (const RenewType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setRenew (const RenewOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setRenew (::std::unique_ptr< RenewType > p);

    //@}

    /**
     * @name RenewResponse
     *
     * @brief Accessor and modifier functions for the %RenewResponse
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::EVENTING::RenewResponse RenewResponseType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< RenewResponseType > RenewResponseOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RenewResponseType, char > RenewResponseTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const RenewResponseOptional&
    getRenewResponse () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    RenewResponseOptional&
    getRenewResponse ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setRenewResponse (const RenewResponseType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setRenewResponse (const RenewResponseOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setRenewResponse (::std::unique_ptr< RenewResponseType > p);

    //@}

    /**
     * @name GetStatus
     *
     * @brief Accessor and modifier functions for the %GetStatus
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::EVENTING::GetStatus GetStatusType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< GetStatusType > GetStatusOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GetStatusType, char > GetStatusTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const GetStatusOptional&
    getGetStatus () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    GetStatusOptional&
    getGetStatus ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setGetStatus (const GetStatusType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setGetStatus (const GetStatusOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setGetStatus (::std::unique_ptr< GetStatusType > p);

    //@}

    /**
     * @name GetStatusResponse
     *
     * @brief Accessor and modifier functions for the %GetStatusResponse
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::WS::EVENTING::GetStatusResponse GetStatusResponseType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< GetStatusResponseType > GetStatusResponseOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GetStatusResponseType, char > GetStatusResponseTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const GetStatusResponseOptional&
    getGetStatusResponse () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    GetStatusResponseOptional&
    getGetStatusResponse ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setGetStatusResponse (const GetStatusResponseType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setGetStatusResponse (const GetStatusResponseOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setGetStatusResponse (::std::unique_ptr< GetStatusResponseType > p);

    //@}

    /**
     * @name DescriptionModificationReport
     *
     * @brief Accessor and modifier functions for the %DescriptionModificationReport
     * optional element.
     *
     * DescriptionModificationReport is an msg:AbstractReport that is
     * delivered episodically. It is sent if at least one
     * pm:AbstractDescriptor has changed. It SHALL contain only
     * pm:AbstractDescriptor instances where at least one child ELEMENT or
     * ATTRIBUTE have changed, i.e., inserted, updated, or deleted.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::DescriptionModificationReport DescriptionModificationReportType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< DescriptionModificationReportType > DescriptionModificationReportOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DescriptionModificationReportType, char > DescriptionModificationReportTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const DescriptionModificationReportOptional&
    getDescriptionModificationReport () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    DescriptionModificationReportOptional&
    getDescriptionModificationReport ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setDescriptionModificationReport (const DescriptionModificationReportType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setDescriptionModificationReport (const DescriptionModificationReportOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setDescriptionModificationReport (::std::unique_ptr< DescriptionModificationReportType > p);

    //@}

    /**
     * @name GetContextStates
     *
     * @brief Accessor and modifier functions for the %GetContextStates
     * optional element.
     *
     * GetContextStates is the request to a msg:GetContextStatesResponse
     * MESSAGE.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::GetContextStates GetContextStatesType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< GetContextStatesType > GetContextStatesOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GetContextStatesType, char > GetContextStatesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const GetContextStatesOptional&
    getGetContextStates () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    GetContextStatesOptional&
    getGetContextStates ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setGetContextStates (const GetContextStatesType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setGetContextStates (const GetContextStatesOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setGetContextStates (::std::unique_ptr< GetContextStatesType > p);

    //@}

    /**
     * @name GetContextStatesResponse
     *
     * @brief Accessor and modifier functions for the %GetContextStatesResponse
     * optional element.
     *
     * GetContextStatesResponse is the response to a msg:GetContextStates
     * MESSAGE.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::GetContextStatesResponse GetContextStatesResponseType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< GetContextStatesResponseType > GetContextStatesResponseOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GetContextStatesResponseType, char > GetContextStatesResponseTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const GetContextStatesResponseOptional&
    getGetContextStatesResponse () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    GetContextStatesResponseOptional&
    getGetContextStatesResponse ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setGetContextStatesResponse (const GetContextStatesResponseType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setGetContextStatesResponse (const GetContextStatesResponseOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setGetContextStatesResponse (::std::unique_ptr< GetContextStatesResponseType > p);

    //@}

    /**
     * @name SetContextState
     *
     * @brief Accessor and modifier functions for the %SetContextState
     * optional element.
     *
     * SetContextState is the request to a msg:SetContextStateResponse
     * MESSAGE. Its function is to insert a new or modify an existing context
     * state.
     * 
     * The corresponding operation description is defined by
     * pm:SetContextStateOperationDescriptor.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::SetContextState SetContextStateType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SetContextStateType > SetContextStateOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SetContextStateType, char > SetContextStateTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SetContextStateOptional&
    getSetContextState () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SetContextStateOptional&
    getSetContextState ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSetContextState (const SetContextStateType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setSetContextState (const SetContextStateOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setSetContextState (::std::unique_ptr< SetContextStateType > p);

    //@}

    /**
     * @name SetContextStateResponse
     *
     * @brief Accessor and modifier functions for the %SetContextStateResponse
     * optional element.
     *
     * Response MESSAGE to a SetContextState request MESSAGE.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::SetContextStateResponse SetContextStateResponseType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SetContextStateResponseType > SetContextStateResponseOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SetContextStateResponseType, char > SetContextStateResponseTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SetContextStateResponseOptional&
    getSetContextStateResponse () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SetContextStateResponseOptional&
    getSetContextStateResponse ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSetContextStateResponse (const SetContextStateResponseType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setSetContextStateResponse (const SetContextStateResponseOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setSetContextStateResponse (::std::unique_ptr< SetContextStateResponseType > p);

    //@}

    /**
     * @name EpisodicContextReport
     *
     * @brief Accessor and modifier functions for the %EpisodicContextReport
     * optional element.
     *
     * EpisodicContextReport is an msg:AbstractContextReport that is
     * delivered episodically. It is sent if at least one
     * pm:AbstractContextState has changed. It SHALL contain only
     * pm:AbstractContextState instances where at least one child ELEMENT or
     * ATTRIBUTE have changed.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::EpisodicContextReport EpisodicContextReportType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< EpisodicContextReportType > EpisodicContextReportOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EpisodicContextReportType, char > EpisodicContextReportTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const EpisodicContextReportOptional&
    getEpisodicContextReport () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    EpisodicContextReportOptional&
    getEpisodicContextReport ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setEpisodicContextReport (const EpisodicContextReportType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setEpisodicContextReport (const EpisodicContextReportOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setEpisodicContextReport (::std::unique_ptr< EpisodicContextReportType > p);

    //@}

    /**
     * @name PeriodicContextReport
     *
     * @brief Accessor and modifier functions for the %PeriodicContextReport
     * optional element.
     *
     * PeriodicContextReport is an msg:AbstractContextReport that is
     * delivered periodically.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::PeriodicContextReport PeriodicContextReportType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< PeriodicContextReportType > PeriodicContextReportOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< PeriodicContextReportType, char > PeriodicContextReportTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const PeriodicContextReportOptional&
    getPeriodicContextReport () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    PeriodicContextReportOptional&
    getPeriodicContextReport ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setPeriodicContextReport (const PeriodicContextReportType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setPeriodicContextReport (const PeriodicContextReportOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setPeriodicContextReport (::std::unique_ptr< PeriodicContextReportType > p);

    //@}

    /**
     * @name EpisodicAlertReport
     *
     * @brief Accessor and modifier functions for the %EpisodicAlertReport
     * optional element.
     *
     * EpisodicAlertReport is an msg:AbstractAlertReport that is delivered
     * episodically. It is sent if at least one pm:AbstractAlertState has
     * changed. It SHALL contain only pm:AbstractAlertState instances where
     * at least one child ELEMENT or ATTRIBUTE have changed.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::EpisodicAlertReport EpisodicAlertReportType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< EpisodicAlertReportType > EpisodicAlertReportOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EpisodicAlertReportType, char > EpisodicAlertReportTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const EpisodicAlertReportOptional&
    getEpisodicAlertReport () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    EpisodicAlertReportOptional&
    getEpisodicAlertReport ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setEpisodicAlertReport (const EpisodicAlertReportType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setEpisodicAlertReport (const EpisodicAlertReportOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setEpisodicAlertReport (::std::unique_ptr< EpisodicAlertReportType > p);

    //@}

    /**
     * @name EpisodicComponentReport
     *
     * @brief Accessor and modifier functions for the %EpisodicComponentReport
     * optional element.
     *
     * EpisodicComponentReport is an msg:AbstractComponentReport that is
     * delivered episodically. It is sent if at least one
     * pm:AbstractComponentState has changed. It SHALL contain only
     * pm:AbstractComponentState instances where at least one child ELEMENT
     * or ATTRIBUTE have changed.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::EpisodicComponentReport EpisodicComponentReportType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< EpisodicComponentReportType > EpisodicComponentReportOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EpisodicComponentReportType, char > EpisodicComponentReportTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const EpisodicComponentReportOptional&
    getEpisodicComponentReport () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    EpisodicComponentReportOptional&
    getEpisodicComponentReport ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setEpisodicComponentReport (const EpisodicComponentReportType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setEpisodicComponentReport (const EpisodicComponentReportOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setEpisodicComponentReport (::std::unique_ptr< EpisodicComponentReportType > p);

    //@}

    /**
     * @name EpisodicMetricReport
     *
     * @brief Accessor and modifier functions for the %EpisodicMetricReport
     * optional element.
     *
     * EpisodicMetricReport is an msg::AbstractMetricReport that is delivered
     * episodically. It is sent if at least one pm:AbstractMetricState has
     * changed. It SHALL contain only pm:AbstractMetricState instances where
     * at least one child ELEMENT or ATTRIBUTE have changed.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::EpisodicMetricReport EpisodicMetricReportType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< EpisodicMetricReportType > EpisodicMetricReportOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EpisodicMetricReportType, char > EpisodicMetricReportTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const EpisodicMetricReportOptional&
    getEpisodicMetricReport () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    EpisodicMetricReportOptional&
    getEpisodicMetricReport ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setEpisodicMetricReport (const EpisodicMetricReportType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setEpisodicMetricReport (const EpisodicMetricReportOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setEpisodicMetricReport (::std::unique_ptr< EpisodicMetricReportType > p);

    //@}

    /**
     * @name EpisodicOperationalStateReport
     *
     * @brief Accessor and modifier functions for the %EpisodicOperationalStateReport
     * optional element.
     *
     * EpisodicOperationalStateReport is an
     * msg:AbstractOperationalStateReport that is delivered episodically. It
     * is sent if at least one pm:AbstractOperationState has changed. It
     * SHALL contain only pm:AbstractOperationState instances where at least
     * one child ELEMENT or ATTRIBUTE have changed.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::EpisodicOperationalStateReport EpisodicOperationalStateReportType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< EpisodicOperationalStateReportType > EpisodicOperationalStateReportOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EpisodicOperationalStateReportType, char > EpisodicOperationalStateReportTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const EpisodicOperationalStateReportOptional&
    getEpisodicOperationalStateReport () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    EpisodicOperationalStateReportOptional&
    getEpisodicOperationalStateReport ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setEpisodicOperationalStateReport (const EpisodicOperationalStateReportType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setEpisodicOperationalStateReport (const EpisodicOperationalStateReportOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setEpisodicOperationalStateReport (::std::unique_ptr< EpisodicOperationalStateReportType > p);

    //@}

    /**
     * @name PeriodicAlertReport
     *
     * @brief Accessor and modifier functions for the %PeriodicAlertReport
     * optional element.
     *
     * PeriodicAlertReport is an msg:AbstractAlertReport that is delivered
     * periodically.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::PeriodicAlertReport PeriodicAlertReportType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< PeriodicAlertReportType > PeriodicAlertReportOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< PeriodicAlertReportType, char > PeriodicAlertReportTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const PeriodicAlertReportOptional&
    getPeriodicAlertReport () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    PeriodicAlertReportOptional&
    getPeriodicAlertReport ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setPeriodicAlertReport (const PeriodicAlertReportType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setPeriodicAlertReport (const PeriodicAlertReportOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setPeriodicAlertReport (::std::unique_ptr< PeriodicAlertReportType > p);

    //@}

    /**
     * @name PeriodicMetricReport
     *
     * @brief Accessor and modifier functions for the %PeriodicMetricReport
     * optional element.
     *
     * PeriodicMetricReport is an msg:AbstractMetricReport that is delivered
     * periodically.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::PeriodicMetricReport PeriodicMetricReportType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< PeriodicMetricReportType > PeriodicMetricReportOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< PeriodicMetricReportType, char > PeriodicMetricReportTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const PeriodicMetricReportOptional&
    getPeriodicMetricReport () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    PeriodicMetricReportOptional&
    getPeriodicMetricReport ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setPeriodicMetricReport (const PeriodicMetricReportType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setPeriodicMetricReport (const PeriodicMetricReportOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setPeriodicMetricReport (::std::unique_ptr< PeriodicMetricReportType > p);

    //@}

    /**
     * @name OperationInvokedReport
     *
     * @brief Accessor and modifier functions for the %OperationInvokedReport
     * optional element.
     *
     * OperationInvokedReport is a change report that contains updated
     * invocation information. It is delivered if the state of the execution
     * of a remote operation request has changed.
     * 
     * To identify which state of a multi state is changed or created,
     * OperationInvokedReport SHALL include
     * msg:OperationInvokedReportPart/@OperationTarget. This ATTRIBUTE
     * defines the multi state that is created or updated.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::OperationInvokedReport OperationInvokedReportType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< OperationInvokedReportType > OperationInvokedReportOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OperationInvokedReportType, char > OperationInvokedReportTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const OperationInvokedReportOptional&
    getOperationInvokedReport () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    OperationInvokedReportOptional&
    getOperationInvokedReport ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setOperationInvokedReport (const OperationInvokedReportType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setOperationInvokedReport (const OperationInvokedReportOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setOperationInvokedReport (::std::unique_ptr< OperationInvokedReportType > p);

    //@}

    /**
     * @name GetMdDescription
     *
     * @brief Accessor and modifier functions for the %GetMdDescription
     * optional element.
     *
     * GetMdDescription is the request to a msg:GetMdDescriptionResponse
     * MESSAGE.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::GetMdDescription GetMdDescriptionType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< GetMdDescriptionType > GetMdDescriptionOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GetMdDescriptionType, char > GetMdDescriptionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const GetMdDescriptionOptional&
    getGetMdDescription () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    GetMdDescriptionOptional&
    getGetMdDescription ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setGetMdDescription (const GetMdDescriptionType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setGetMdDescription (const GetMdDescriptionOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setGetMdDescription (::std::unique_ptr< GetMdDescriptionType > p);

    //@}

    /**
     * @name GetMdDescriptionResponse
     *
     * @brief Accessor and modifier functions for the %GetMdDescriptionResponse
     * optional element.
     *
     * GetMdDescriptionResponse is the response to a msg:GetMdDescription
     * MESSAGE. It transports a set of MDS descriptors.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::GetMdDescriptionResponse GetMdDescriptionResponseType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< GetMdDescriptionResponseType > GetMdDescriptionResponseOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GetMdDescriptionResponseType, char > GetMdDescriptionResponseTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const GetMdDescriptionResponseOptional&
    getGetMdDescriptionResponse () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    GetMdDescriptionResponseOptional&
    getGetMdDescriptionResponse ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setGetMdDescriptionResponse (const GetMdDescriptionResponseType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setGetMdDescriptionResponse (const GetMdDescriptionResponseOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setGetMdDescriptionResponse (::std::unique_ptr< GetMdDescriptionResponseType > p);

    //@}

    /**
     * @name GetMdib
     *
     * @brief Accessor and modifier functions for the %GetMdib
     * optional element.
     *
     * GetMdib is the request to a msg:GetMdibResponse MESSAGE.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::GetMdib GetMdibType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< GetMdibType > GetMdibOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GetMdibType, char > GetMdibTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const GetMdibOptional&
    getGetMdib () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    GetMdibOptional&
    getGetMdib ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setGetMdib (const GetMdibType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setGetMdib (const GetMdibOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setGetMdib (::std::unique_ptr< GetMdibType > p);

    //@}

    /**
     * @name GetMdibResponse
     *
     * @brief Accessor and modifier functions for the %GetMdibResponse
     * optional element.
     *
     * GetMdibResponse is the response to a msg:GetMdib MESSAGE It conveys
     * the complete MDIB. 
     * 
     * Since contexts might include privacy-related information, a SERVICE
     * PROVIDER MAY decide to leave the MDS contexts empty. To acquire
     * context information, a client has to send a msg:GetContextStates
     * request.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::GetMdibResponse GetMdibResponseType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< GetMdibResponseType > GetMdibResponseOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GetMdibResponseType, char > GetMdibResponseTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const GetMdibResponseOptional&
    getGetMdibResponse () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    GetMdibResponseOptional&
    getGetMdibResponse ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setGetMdibResponse (const GetMdibResponseType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setGetMdibResponse (const GetMdibResponseOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setGetMdibResponse (::std::unique_ptr< GetMdibResponseType > p);

    //@}

    /**
     * @name GetMdState
     *
     * @brief Accessor and modifier functions for the %GetMdState
     * optional element.
     *
     * GetMdState is the request to a msg:GetMdStateResponse MESSAGE.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::GetMdState GetMdStateType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< GetMdStateType > GetMdStateOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GetMdStateType, char > GetMdStateTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const GetMdStateOptional&
    getGetMdState () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    GetMdStateOptional&
    getGetMdState ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setGetMdState (const GetMdStateType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setGetMdState (const GetMdStateOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setGetMdState (::std::unique_ptr< GetMdStateType > p);

    //@}

    /**
     * @name GetMdStateResponse
     *
     * @brief Accessor and modifier functions for the %GetMdStateResponse
     * optional element.
     *
     * GetMdStateResponse is the response to a msg:GetMdState MESSAGE.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::GetMdStateResponse GetMdStateResponseType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< GetMdStateResponseType > GetMdStateResponseOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GetMdStateResponseType, char > GetMdStateResponseTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const GetMdStateResponseOptional&
    getGetMdStateResponse () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    GetMdStateResponseOptional&
    getGetMdStateResponse ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setGetMdStateResponse (const GetMdStateResponseType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setGetMdStateResponse (const GetMdStateResponseOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setGetMdStateResponse (::std::unique_ptr< GetMdStateResponseType > p);

    //@}

    /**
     * @name Activate
     *
     * @brief Accessor and modifier functions for the %Activate
     * optional element.
     *
     * Activate is the request to an msg:ActivateResponse MESSAGE. It allows
     * invocation of a predefined job, e.g., to silence alarms.
     * 
     * The corresponding operation description is defined by
     * pm:ActivateOperationDescriptor.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::Activate ActivateType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ActivateType > ActivateOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ActivateType, char > ActivateTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ActivateOptional&
    getActivate () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ActivateOptional&
    getActivate ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setActivate (const ActivateType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setActivate (const ActivateOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setActivate (::std::unique_ptr< ActivateType > p);

    //@}

    /**
     * @name ActivateResponse
     *
     * @brief Accessor and modifier functions for the %ActivateResponse
     * optional element.
     *
     * ActivateResponse is the response to an msg:Activate MESSAGE.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::ActivateResponse ActivateResponseType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ActivateResponseType > ActivateResponseOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ActivateResponseType, char > ActivateResponseTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ActivateResponseOptional&
    getActivateResponse () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ActivateResponseOptional&
    getActivateResponse ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setActivateResponse (const ActivateResponseType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setActivateResponse (const ActivateResponseOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setActivateResponse (::std::unique_ptr< ActivateResponseType > p);

    //@}

    /**
     * @name SetAlertState
     *
     * @brief Accessor and modifier functions for the %SetAlertState
     * optional element.
     *
     * SetAlertState is the request to a msg:SetAlertStateResponse MESSAGE.
     * The intended use is to modifiy alert states.
     * 
     * The corresponding operation description is defined by
     * pm:SetAlertStateOperationDescriptor.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::SetAlertState SetAlertStateType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SetAlertStateType > SetAlertStateOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SetAlertStateType, char > SetAlertStateTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SetAlertStateOptional&
    getSetAlertState () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SetAlertStateOptional&
    getSetAlertState ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSetAlertState (const SetAlertStateType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setSetAlertState (const SetAlertStateOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setSetAlertState (::std::unique_ptr< SetAlertStateType > p);

    //@}

    /**
     * @name SetAlertStateResponse
     *
     * @brief Accessor and modifier functions for the %SetAlertStateResponse
     * optional element.
     *
     * SetAlertStateResponse is the response to a msg:SetAlertState MESSAGE.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::SetAlertStateResponse SetAlertStateResponseType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SetAlertStateResponseType > SetAlertStateResponseOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SetAlertStateResponseType, char > SetAlertStateResponseTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SetAlertStateResponseOptional&
    getSetAlertStateResponse () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SetAlertStateResponseOptional&
    getSetAlertStateResponse ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSetAlertStateResponse (const SetAlertStateResponseType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setSetAlertStateResponse (const SetAlertStateResponseOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setSetAlertStateResponse (::std::unique_ptr< SetAlertStateResponseType > p);

    //@}

    /**
     * @name SetString
     *
     * @brief Accessor and modifier functions for the %SetString
     * optional element.
     *
     * SetString is the request to a msg:SetStringResponse MESSAGE.
     * 
     * The corresponding operation description is defined by
     * pm:SetStringOperationDescriptor.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::SetString SetStringType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SetStringType > SetStringOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SetStringType, char > SetStringTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SetStringOptional&
    getSetString () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SetStringOptional&
    getSetString ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSetString (const SetStringType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setSetString (const SetStringOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setSetString (::std::unique_ptr< SetStringType > p);

    //@}

    /**
     * @name SetStringResponse
     *
     * @brief Accessor and modifier functions for the %SetStringResponse
     * optional element.
     *
     * SetStringResponse is the response to a msg:SetString MESSAGE.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::SetStringResponse SetStringResponseType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SetStringResponseType > SetStringResponseOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SetStringResponseType, char > SetStringResponseTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SetStringResponseOptional&
    getSetStringResponse () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SetStringResponseOptional&
    getSetStringResponse ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSetStringResponse (const SetStringResponseType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setSetStringResponse (const SetStringResponseOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setSetStringResponse (::std::unique_ptr< SetStringResponseType > p);

    //@}

    /**
     * @name SetValue
     *
     * @brief Accessor and modifier functions for the %SetValue
     * optional element.
     *
     * SetValue is the request to a msg:SetValueResponse MESSAGE.
     * 
     * The corresponding operation description is defined by
     * pm:SetValueOperationDescriptor.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::SetValue SetValueType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SetValueType > SetValueOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SetValueType, char > SetValueTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SetValueOptional&
    getSetValue () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SetValueOptional&
    getSetValue ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSetValue (const SetValueType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setSetValue (const SetValueOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setSetValue (::std::unique_ptr< SetValueType > p);

    //@}

    /**
     * @name SetValueResponse
     *
     * @brief Accessor and modifier functions for the %SetValueResponse
     * optional element.
     *
     * SetValueResponse is the response to a msg:SetValue MESSAGE.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::SetValueResponse SetValueResponseType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SetValueResponseType > SetValueResponseOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SetValueResponseType, char > SetValueResponseTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SetValueResponseOptional&
    getSetValueResponse () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SetValueResponseOptional&
    getSetValueResponse ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setSetValueResponse (const SetValueResponseType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setSetValueResponse (const SetValueResponseOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setSetValueResponse (::std::unique_ptr< SetValueResponseType > p);

    //@}

    /**
     * @name WaveformStream
     *
     * @brief Accessor and modifier functions for the %WaveformStream
     * optional element.
     *
     * The WaveformStream MESSAGE is sent in order to transmit a set of
     * samples of one or more waveforms.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MDM::WaveformStream WaveformStreamType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< WaveformStreamType > WaveformStreamOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< WaveformStreamType, char > WaveformStreamTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const WaveformStreamOptional&
    getWaveformStream () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    WaveformStreamOptional&
    getWaveformStream ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setWaveformStream (const WaveformStreamType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    setWaveformStream (const WaveformStreamOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setWaveformStream (::std::unique_ptr< WaveformStreamType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Body ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Body (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Body (const Body& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Body*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Body&
    operator= (const Body& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Body ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ByeOptional Bye_;
    HelloOptional Hello_;
    ProbeOptional Probe_;
    ProbeMatchesOptional ProbeMatches_;
    ResolveOptional Resolve_;
    ResolveMatchesOptional ResolveMatches_;
    GetMetadataOptional GetMetadata_;
    MetadataOptional Metadata_;
    SubscribeOptional Subscribe_;
    SubscribeResponseOptional SubscribeResponse_;
    UnsubscribeOptional Unsubscribe_;
    RenewOptional Renew_;
    RenewResponseOptional RenewResponse_;
    GetStatusOptional GetStatus_;
    GetStatusResponseOptional GetStatusResponse_;
    DescriptionModificationReportOptional DescriptionModificationReport_;
    GetContextStatesOptional GetContextStates_;
    GetContextStatesResponseOptional GetContextStatesResponse_;
    SetContextStateOptional SetContextState_;
    SetContextStateResponseOptional SetContextStateResponse_;
    EpisodicContextReportOptional EpisodicContextReport_;
    PeriodicContextReportOptional PeriodicContextReport_;
    EpisodicAlertReportOptional EpisodicAlertReport_;
    EpisodicComponentReportOptional EpisodicComponentReport_;
    EpisodicMetricReportOptional EpisodicMetricReport_;
    EpisodicOperationalStateReportOptional EpisodicOperationalStateReport_;
    PeriodicAlertReportOptional PeriodicAlertReport_;
    PeriodicMetricReportOptional PeriodicMetricReport_;
    OperationInvokedReportOptional OperationInvokedReport_;
    GetMdDescriptionOptional GetMdDescription_;
    GetMdDescriptionResponseOptional GetMdDescriptionResponse_;
    GetMdibOptional GetMdib_;
    GetMdibResponseOptional GetMdibResponse_;
    GetMdStateOptional GetMdState_;
    GetMdStateResponseOptional GetMdStateResponse_;
    ActivateOptional Activate_;
    ActivateResponseOptional ActivateResponse_;
    SetAlertStateOptional SetAlertState_;
    SetAlertStateResponseOptional SetAlertStateResponse_;
    SetStringOptional SetString_;
    SetStringResponseOptional SetStringResponse_;
    SetValueOptional SetValue_;
    SetValueResponseOptional SetValueResponse_;
    WaveformStreamOptional WaveformStream_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Envelope schema type.
   *
   * @nosubgrouping
   */
  class Envelope: public ::xml_schema::Type
  {
    public:
    /**
     * @name Header
     *
     * @brief Accessor and modifier functions for the %Header
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MESSAGEMODEL::Header HeaderType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< HeaderType, char > HeaderTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const HeaderType&
    getHeader () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    HeaderType&
    getHeader ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setHeader (const HeaderType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setHeader (::std::unique_ptr< HeaderType > p);

    //@}

    /**
     * @name Body
     *
     * @brief Accessor and modifier functions for the %Body
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::MESSAGEMODEL::Body BodyType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< BodyType, char > BodyTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const BodyType&
    getBody () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    BodyType&
    getBody ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    setBody (const BodyType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setBody (::std::unique_ptr< BodyType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Envelope (const HeaderType&,
              const BodyType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Envelope (::std::unique_ptr< HeaderType >,
              ::std::unique_ptr< BodyType >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Envelope (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Envelope (const Envelope& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Envelope*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Envelope&
    operator= (const Envelope& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Envelope ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< HeaderType > Header_;
    ::xsd::cxx::tree::one< BodyType > Body_;

    //@endcond
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace MESSAGEMODEL
{
  /**
   * @name Parsing functions for the %Envelope document root.
   */
  //@{

  /**
   * @brief Parse a URI or a local file.
   *
   * @param uri A URI or a local file name.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (const ::std::string& uri,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a URI or a local file with an error handler.
   *
   * @param uri A URI or a local file name.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (const ::std::string& uri,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a URI or a local file with a Xerces-C++ DOM error
   * handler.
   *
   * @param uri A URI or a local file name.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream.
   *
   * @param is A standrad input stream.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::std::istream& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with an error handler.
   *
   * @param is A standrad input stream.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::std::istream& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a Xerces-C++ DOM error
   * handler.
   *
   * @param is A standrad input stream.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a resource id.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a resource id and an
   * error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a resource id and a
   * Xerces-C++ DOM error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ input source.
   *
   * @param is A Xerces-C++ input source.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::xercesc::InputSource& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ input source with an error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::xercesc::InputSource& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
   * error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (const ::xercesc::DOMDocument& d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A pointer to the Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function is normally used together with the keep_dom and
   * own_dom parsing flags to assign ownership of the DOM document
   * to the object model.
   */
  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  parseEnvelope (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  //@}
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace MESSAGEMODEL
{
  /**
   * @name Serialization functions for the %Envelope document root.
   */
  //@{

  /**
   * @brief Serialize to a standard output stream.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  void
  serializeEnvelope (::std::ostream& os,
                     const ::MESSAGEMODEL::Envelope& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a standard output stream with an error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  serializeEnvelope (::std::ostream& os,
                     const ::MESSAGEMODEL::Envelope& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a standard output stream with a Xerces-C++ DOM
   * error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  serializeEnvelope (::std::ostream& os,
                     const ::MESSAGEMODEL::Envelope& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  void
  serializeEnvelope (::xercesc::XMLFormatTarget& ft,
                     const ::MESSAGEMODEL::Envelope& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with an error
   * handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  serializeEnvelope (::xercesc::XMLFormatTarget& ft,
                     const ::MESSAGEMODEL::Envelope& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with a
   * Xerces-C++ DOM error handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  serializeEnvelope (::xercesc::XMLFormatTarget& ft,
                     const ::MESSAGEMODEL::Envelope& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to an existing Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param x An object model to serialize.
   * @param f Serialization flags.
   *
   * Note that it is your responsibility to create the DOM document
   * with the correct root element as well as set the necessary
   * namespace mapping attributes.
   */
  void
  serializeEnvelope (::xercesc::DOMDocument& d,
                     const ::MESSAGEMODEL::Envelope& x,
                     ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a new Xerces-C++ DOM document.
   *
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param f Serialization flags.
   * @return A pointer to the new Xerces-C++ DOM document.
   */
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  serializeEnvelope (const ::MESSAGEMODEL::Envelope& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

  //@}

  void
  operator<< (::xercesc::DOMElement&, const Header&);

  void
  operator<< (::xercesc::DOMElement&, const Body&);

  void
  operator<< (::xercesc::DOMElement&, const Envelope&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // NORMALIZED_MESSAGE_MODEL_HXX
