// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "DataModel/MetadataExchange.hxx"

namespace WS
{
  namespace MEX
  {
    // GetMetadata
    // 

    const GetMetadata::DialectOptional& GetMetadata::
    getDialect () const
    {
      return this->Dialect_;
    }

    GetMetadata::DialectOptional& GetMetadata::
    getDialect ()
    {
      return this->Dialect_;
    }

    void GetMetadata::
    setDialect (const DialectType& x)
    {
      this->Dialect_.set (x);
    }

    void GetMetadata::
    setDialect (const DialectOptional& x)
    {
      this->Dialect_ = x;
    }

    void GetMetadata::
    setDialect (::std::unique_ptr< DialectType > x)
    {
      this->Dialect_.set (std::move (x));
    }

    const GetMetadata::IdentifierOptional& GetMetadata::
    getIdentifier () const
    {
      return this->Identifier_;
    }

    GetMetadata::IdentifierOptional& GetMetadata::
    getIdentifier ()
    {
      return this->Identifier_;
    }

    void GetMetadata::
    setIdentifier (const IdentifierType& x)
    {
      this->Identifier_.set (x);
    }

    void GetMetadata::
    setIdentifier (const IdentifierOptional& x)
    {
      this->Identifier_ = x;
    }

    void GetMetadata::
    setIdentifier (::std::unique_ptr< IdentifierType > x)
    {
      this->Identifier_.set (std::move (x));
    }


    // Metadata
    // 

    const Metadata::MetadataSectionSequence& Metadata::
    getMetadataSection () const
    {
      return this->MetadataSection_;
    }

    Metadata::MetadataSectionSequence& Metadata::
    getMetadataSection ()
    {
      return this->MetadataSection_;
    }

    void Metadata::
    setMetadataSection (const MetadataSectionSequence& s)
    {
      this->MetadataSection_ = s;
    }


    // MetadataSection
    // 

    const MetadataSection::MetadataReferenceOptional& MetadataSection::
    getMetadataReference () const
    {
      return this->MetadataReference_;
    }

    MetadataSection::MetadataReferenceOptional& MetadataSection::
    getMetadataReference ()
    {
      return this->MetadataReference_;
    }

    void MetadataSection::
    setMetadataReference (const MetadataReferenceType& x)
    {
      this->MetadataReference_.set (x);
    }

    void MetadataSection::
    setMetadataReference (const MetadataReferenceOptional& x)
    {
      this->MetadataReference_ = x;
    }

    void MetadataSection::
    setMetadataReference (::std::unique_ptr< MetadataReferenceType > x)
    {
      this->MetadataReference_.set (std::move (x));
    }

    const MetadataSection::LocationOptional& MetadataSection::
    getLocation () const
    {
      return this->Location_;
    }

    MetadataSection::LocationOptional& MetadataSection::
    getLocation ()
    {
      return this->Location_;
    }

    void MetadataSection::
    setLocation (const LocationType& x)
    {
      this->Location_.set (x);
    }

    void MetadataSection::
    setLocation (const LocationOptional& x)
    {
      this->Location_ = x;
    }

    void MetadataSection::
    setLocation (::std::unique_ptr< LocationType > x)
    {
      this->Location_.set (std::move (x));
    }

    const MetadataSection::ThisModelOptional& MetadataSection::
    getThisModel () const
    {
      return this->ThisModel_;
    }

    MetadataSection::ThisModelOptional& MetadataSection::
    getThisModel ()
    {
      return this->ThisModel_;
    }

    void MetadataSection::
    setThisModel (const ThisModelType& x)
    {
      this->ThisModel_.set (x);
    }

    void MetadataSection::
    setThisModel (const ThisModelOptional& x)
    {
      this->ThisModel_ = x;
    }

    void MetadataSection::
    setThisModel (::std::unique_ptr< ThisModelType > x)
    {
      this->ThisModel_.set (std::move (x));
    }

    const MetadataSection::ThisDeviceOptional& MetadataSection::
    getThisDevice () const
    {
      return this->ThisDevice_;
    }

    MetadataSection::ThisDeviceOptional& MetadataSection::
    getThisDevice ()
    {
      return this->ThisDevice_;
    }

    void MetadataSection::
    setThisDevice (const ThisDeviceType& x)
    {
      this->ThisDevice_.set (x);
    }

    void MetadataSection::
    setThisDevice (const ThisDeviceOptional& x)
    {
      this->ThisDevice_ = x;
    }

    void MetadataSection::
    setThisDevice (::std::unique_ptr< ThisDeviceType > x)
    {
      this->ThisDevice_.set (std::move (x));
    }

    const MetadataSection::RelationshipOptional& MetadataSection::
    getRelationship () const
    {
      return this->Relationship_;
    }

    MetadataSection::RelationshipOptional& MetadataSection::
    getRelationship ()
    {
      return this->Relationship_;
    }

    void MetadataSection::
    setRelationship (const RelationshipType& x)
    {
      this->Relationship_.set (x);
    }

    void MetadataSection::
    setRelationship (const RelationshipOptional& x)
    {
      this->Relationship_ = x;
    }

    void MetadataSection::
    setRelationship (::std::unique_ptr< RelationshipType > x)
    {
      this->Relationship_.set (std::move (x));
    }

    const MetadataSection::StreamDescriptionsOptional& MetadataSection::
    getStreamDescriptions () const
    {
      return this->StreamDescriptions_;
    }

    MetadataSection::StreamDescriptionsOptional& MetadataSection::
    getStreamDescriptions ()
    {
      return this->StreamDescriptions_;
    }

    void MetadataSection::
    setStreamDescriptions (const StreamDescriptionsType& x)
    {
      this->StreamDescriptions_.set (x);
    }

    void MetadataSection::
    setStreamDescriptions (const StreamDescriptionsOptional& x)
    {
      this->StreamDescriptions_ = x;
    }

    void MetadataSection::
    setStreamDescriptions (::std::unique_ptr< StreamDescriptionsType > x)
    {
      this->StreamDescriptions_.set (std::move (x));
    }

    const MetadataSection::DialectType& MetadataSection::
    getDialect () const
    {
      return this->Dialect_.get ();
    }

    MetadataSection::DialectType& MetadataSection::
    getDialect ()
    {
      return this->Dialect_.get ();
    }

    void MetadataSection::
    setDialect (const DialectType& x)
    {
      this->Dialect_.set (x);
    }

    void MetadataSection::
    setDialect (::std::unique_ptr< DialectType > x)
    {
      this->Dialect_.set (std::move (x));
    }

    const MetadataSection::IdentifierOptional& MetadataSection::
    getIdentifier () const
    {
      return this->Identifier_;
    }

    MetadataSection::IdentifierOptional& MetadataSection::
    getIdentifier ()
    {
      return this->Identifier_;
    }

    void MetadataSection::
    setIdentifier (const IdentifierType& x)
    {
      this->Identifier_.set (x);
    }

    void MetadataSection::
    setIdentifier (const IdentifierOptional& x)
    {
      this->Identifier_ = x;
    }

    void MetadataSection::
    setIdentifier (::std::unique_ptr< IdentifierType > x)
    {
      this->Identifier_.set (std::move (x));
    }


    // MetadataReference
    // 
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace WS
{
  namespace MEX
  {
    // GetMetadata
    //

    GetMetadata::
    GetMetadata ()
    : ::xml_schema::Type (),
      Dialect_ (this),
      Identifier_ (this)
    {
    }

    GetMetadata::
    GetMetadata (const GetMetadata& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      Dialect_ (x.Dialect_, f, this),
      Identifier_ (x.Identifier_, f, this)
    {
    }

    GetMetadata::
    GetMetadata (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      Dialect_ (this),
      Identifier_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void GetMetadata::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Dialect
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Dialect",
              "http://schemas.xmlsoap.org/ws/2004/09/mex",
              &::xsd::cxx::tree::factory_impl< DialectType >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Dialect_)
            {
              ::std::unique_ptr< DialectType > r (
                dynamic_cast< DialectType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Dialect_.set (::std::move (r));
              continue;
            }
          }
        }

        // Identifier
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Identifier",
              "http://schemas.xmlsoap.org/ws/2004/09/mex",
              &::xsd::cxx::tree::factory_impl< IdentifierType >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Identifier_)
            {
              ::std::unique_ptr< IdentifierType > r (
                dynamic_cast< IdentifierType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Identifier_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }
    }

    GetMetadata* GetMetadata::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class GetMetadata (*this, f, c);
    }

    GetMetadata& GetMetadata::
    operator= (const GetMetadata& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->Dialect_ = x.Dialect_;
        this->Identifier_ = x.Identifier_;
      }

      return *this;
    }

    GetMetadata::
    ~GetMetadata ()
    {
    }

    // Metadata
    //

    Metadata::
    Metadata ()
    : ::xml_schema::Type (),
      MetadataSection_ (this)
    {
    }

    Metadata::
    Metadata (const Metadata& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      MetadataSection_ (x.MetadataSection_, f, this)
    {
    }

    Metadata::
    Metadata (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      MetadataSection_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Metadata::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MetadataSection
        //
        if (n.name () == "MetadataSection" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
        {
          ::std::unique_ptr< MetadataSectionType > r (
            MetadataSectionTraits::create (i, f, this));

          this->MetadataSection_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    Metadata* Metadata::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Metadata (*this, f, c);
    }

    Metadata& Metadata::
    operator= (const Metadata& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->MetadataSection_ = x.MetadataSection_;
      }

      return *this;
    }

    Metadata::
    ~Metadata ()
    {
    }

    // MetadataSection
    //

    MetadataSection::
    MetadataSection (const DialectType& Dialect)
    : ::xml_schema::Type (),
      MetadataReference_ (this),
      Location_ (this),
      ThisModel_ (this),
      ThisDevice_ (this),
      Relationship_ (this),
      StreamDescriptions_ (this),
      Dialect_ (Dialect, this),
      Identifier_ (this)
    {
    }

    MetadataSection::
    MetadataSection (const MetadataSection& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      MetadataReference_ (x.MetadataReference_, f, this),
      Location_ (x.Location_, f, this),
      ThisModel_ (x.ThisModel_, f, this),
      ThisDevice_ (x.ThisDevice_, f, this),
      Relationship_ (x.Relationship_, f, this),
      StreamDescriptions_ (x.StreamDescriptions_, f, this),
      Dialect_ (x.Dialect_, f, this),
      Identifier_ (x.Identifier_, f, this)
    {
    }

    MetadataSection::
    MetadataSection (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      MetadataReference_ (this),
      Location_ (this),
      ThisModel_ (this),
      ThisDevice_ (this),
      Relationship_ (this),
      StreamDescriptions_ (this),
      Dialect_ (this),
      Identifier_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void MetadataSection::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MetadataReference
        //
        if (n.name () == "MetadataReference" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
        {
          ::std::unique_ptr< MetadataReferenceType > r (
            MetadataReferenceTraits::create (i, f, this));

          if (!this->MetadataReference_)
          {
            this->MetadataReference_.set (::std::move (r));
            continue;
          }
        }

        // Location
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Location",
              "http://schemas.xmlsoap.org/ws/2004/09/mex",
              &::xsd::cxx::tree::factory_impl< LocationType >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Location_)
            {
              ::std::unique_ptr< LocationType > r (
                dynamic_cast< LocationType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Location_.set (::std::move (r));
              continue;
            }
          }
        }

        // ThisModel
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ThisModel",
              "http://docs.oasis-open.org/ws-dd/ns/dpws/2009/01",
              &::xsd::cxx::tree::factory_impl< ThisModelType >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->ThisModel_)
            {
              ::std::unique_ptr< ThisModelType > r (
                dynamic_cast< ThisModelType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->ThisModel_.set (::std::move (r));
              continue;
            }
          }
        }

        // ThisDevice
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ThisDevice",
              "http://docs.oasis-open.org/ws-dd/ns/dpws/2009/01",
              &::xsd::cxx::tree::factory_impl< ThisDeviceType >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->ThisDevice_)
            {
              ::std::unique_ptr< ThisDeviceType > r (
                dynamic_cast< ThisDeviceType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->ThisDevice_.set (::std::move (r));
              continue;
            }
          }
        }

        // Relationship
        //
        if (n.name () == "Relationship" && n.namespace_ () == "http://docs.oasis-open.org/ws-dd/ns/dpws/2009/01")
        {
          ::std::unique_ptr< RelationshipType > r (
            RelationshipTraits::create (i, f, this));

          if (!this->Relationship_)
          {
            this->Relationship_.set (::std::move (r));
            continue;
          }
        }

        // StreamDescriptions
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "StreamDescriptions",
              "http://standards.ieee.org/downloads/11073/11073-20702-2016",
              &::xsd::cxx::tree::factory_impl< StreamDescriptionsType >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->StreamDescriptions_)
            {
              ::std::unique_ptr< StreamDescriptionsType > r (
                dynamic_cast< StreamDescriptionsType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->StreamDescriptions_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "Dialect" && n.namespace_ ().empty ())
        {
          this->Dialect_.set (DialectTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "Identifier" && n.namespace_ ().empty ())
        {
          this->Identifier_.set (IdentifierTraits::create (i, f, this));
          continue;
        }
      }

      if (!Dialect_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "Dialect",
          "");
      }
    }

    MetadataSection* MetadataSection::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class MetadataSection (*this, f, c);
    }

    MetadataSection& MetadataSection::
    operator= (const MetadataSection& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->MetadataReference_ = x.MetadataReference_;
        this->Location_ = x.Location_;
        this->ThisModel_ = x.ThisModel_;
        this->ThisDevice_ = x.ThisDevice_;
        this->Relationship_ = x.Relationship_;
        this->StreamDescriptions_ = x.StreamDescriptions_;
        this->Dialect_ = x.Dialect_;
        this->Identifier_ = x.Identifier_;
      }

      return *this;
    }

    MetadataSection::
    ~MetadataSection ()
    {
    }

    // MetadataReference
    //

    MetadataReference::
    MetadataReference ()
    : ::xml_schema::Type ()
    {
    }

    MetadataReference::
    MetadataReference (const MetadataReference& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c)
    {
    }

    MetadataReference::
    MetadataReference (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void MetadataReference::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        break;
      }
    }

    MetadataReference* MetadataReference::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class MetadataReference (*this, f, c);
    }

    MetadataReference::
    ~MetadataReference ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace WS
{
  namespace MEX
  {
    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (const ::std::string& u,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::MEX::GetMetadata > (
        ::WS::MEX::parseGetMetadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (const ::std::string& u,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::GetMetadata > (
        ::WS::MEX::parseGetMetadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::GetMetadata > (
        ::WS::MEX::parseGetMetadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (::std::istream& is,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseGetMetadata (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (::std::istream& is,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseGetMetadata (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseGetMetadata (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseGetMetadata (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseGetMetadata (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseGetMetadata (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (::xercesc::InputSource& i,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::MEX::GetMetadata > (
        ::WS::MEX::parseGetMetadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (::xercesc::InputSource& i,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::GetMetadata > (
        ::WS::MEX::parseGetMetadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::GetMetadata > (
        ::WS::MEX::parseGetMetadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::MEX::GetMetadata > (
          ::WS::MEX::parseGetMetadata (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "GetMetadata" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        ::std::unique_ptr< ::WS::MEX::GetMetadata > r (
          ::xsd::cxx::tree::traits< ::WS::MEX::GetMetadata, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetMetadata",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::WS::MEX::GetMetadata >
    parseGetMetadata (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "GetMetadata" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        ::std::unique_ptr< ::WS::MEX::GetMetadata > r (
          ::xsd::cxx::tree::traits< ::WS::MEX::GetMetadata, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GetMetadata",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (const ::std::string& u,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseDialect (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (const ::std::string& u,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseDialect (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseDialect (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (::std::istream& is,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseDialect (isrc, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (::std::istream& is,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseDialect (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseDialect (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseDialect (isrc, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseDialect (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseDialect (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (::xercesc::InputSource& i,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseDialect (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (::xercesc::InputSource& i,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseDialect (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseDialect (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::xml_schema::Uri > (
          ::WS::MEX::parseDialect (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Dialect",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::Uri >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::xml_schema::Uri > r (
          dynamic_cast< ::xml_schema::Uri* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Dialect",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseDialect (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Dialect",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::Uri >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::xml_schema::Uri > r (
          dynamic_cast< ::xml_schema::Uri* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Dialect",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (const ::std::string& u,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseIdentifier (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (const ::std::string& u,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseIdentifier (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseIdentifier (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (::std::istream& is,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseIdentifier (isrc, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (::std::istream& is,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseIdentifier (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseIdentifier (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseIdentifier (isrc, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseIdentifier (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseIdentifier (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (::xercesc::InputSource& i,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseIdentifier (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (::xercesc::InputSource& i,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseIdentifier (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseIdentifier (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::xml_schema::Uri > (
          ::WS::MEX::parseIdentifier (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Identifier",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::Uri >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::xml_schema::Uri > r (
          dynamic_cast< ::xml_schema::Uri* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Identifier",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseIdentifier (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Identifier",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::Uri >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::xml_schema::Uri > r (
          dynamic_cast< ::xml_schema::Uri* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Identifier",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (const ::std::string& u,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::MEX::Metadata > (
        ::WS::MEX::parseMetadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (const ::std::string& u,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::Metadata > (
        ::WS::MEX::parseMetadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::Metadata > (
        ::WS::MEX::parseMetadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (::std::istream& is,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseMetadata (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (::std::istream& is,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseMetadata (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseMetadata (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseMetadata (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseMetadata (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseMetadata (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (::xercesc::InputSource& i,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::MEX::Metadata > (
        ::WS::MEX::parseMetadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (::xercesc::InputSource& i,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::Metadata > (
        ::WS::MEX::parseMetadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::Metadata > (
        ::WS::MEX::parseMetadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::MEX::Metadata > (
          ::WS::MEX::parseMetadata (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Metadata" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        ::std::unique_ptr< ::WS::MEX::Metadata > r (
          ::xsd::cxx::tree::traits< ::WS::MEX::Metadata, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Metadata",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::WS::MEX::Metadata >
    parseMetadata (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Metadata" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        ::std::unique_ptr< ::WS::MEX::Metadata > r (
          ::xsd::cxx::tree::traits< ::WS::MEX::Metadata, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Metadata",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (const ::std::string& u,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::MEX::MetadataSection > (
        ::WS::MEX::parseMetadataSection (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (const ::std::string& u,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::MetadataSection > (
        ::WS::MEX::parseMetadataSection (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::MetadataSection > (
        ::WS::MEX::parseMetadataSection (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (::std::istream& is,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseMetadataSection (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (::std::istream& is,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseMetadataSection (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseMetadataSection (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseMetadataSection (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseMetadataSection (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseMetadataSection (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (::xercesc::InputSource& i,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::MEX::MetadataSection > (
        ::WS::MEX::parseMetadataSection (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (::xercesc::InputSource& i,
                          ::xml_schema::ErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::MetadataSection > (
        ::WS::MEX::parseMetadataSection (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::MetadataSection > (
        ::WS::MEX::parseMetadataSection (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::MEX::MetadataSection > (
          ::WS::MEX::parseMetadataSection (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "MetadataSection" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        ::std::unique_ptr< ::WS::MEX::MetadataSection > r (
          ::xsd::cxx::tree::traits< ::WS::MEX::MetadataSection, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MetadataSection",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::WS::MEX::MetadataSection >
    parseMetadataSection (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::Flags f,
                          const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "MetadataSection" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        ::std::unique_ptr< ::WS::MEX::MetadataSection > r (
          ::xsd::cxx::tree::traits< ::WS::MEX::MetadataSection, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MetadataSection",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (const ::std::string& u,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::MEX::MetadataReference > (
        ::WS::MEX::parseMetadataReference (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (const ::std::string& u,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::MetadataReference > (
        ::WS::MEX::parseMetadataReference (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::MetadataReference > (
        ::WS::MEX::parseMetadataReference (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (::std::istream& is,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseMetadataReference (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (::std::istream& is,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseMetadataReference (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseMetadataReference (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseMetadataReference (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseMetadataReference (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseMetadataReference (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (::xercesc::InputSource& i,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::MEX::MetadataReference > (
        ::WS::MEX::parseMetadataReference (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (::xercesc::InputSource& i,
                            ::xml_schema::ErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::MetadataReference > (
        ::WS::MEX::parseMetadataReference (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::MEX::MetadataReference > (
        ::WS::MEX::parseMetadataReference (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::MEX::MetadataReference > (
          ::WS::MEX::parseMetadataReference (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "MetadataReference" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        ::std::unique_ptr< ::WS::MEX::MetadataReference > r (
          ::xsd::cxx::tree::traits< ::WS::MEX::MetadataReference, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MetadataReference",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::WS::MEX::MetadataReference >
    parseMetadataReference (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::Flags f,
                            const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "MetadataReference" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        ::std::unique_ptr< ::WS::MEX::MetadataReference > r (
          ::xsd::cxx::tree::traits< ::WS::MEX::MetadataReference, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MetadataReference",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (const ::std::string& u,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseLocation (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (const ::std::string& u,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseLocation (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseLocation (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (::std::istream& is,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseLocation (isrc, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (::std::istream& is,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseLocation (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::MEX::parseLocation (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseLocation (isrc, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseLocation (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::MEX::parseLocation (isrc, h, f, p);
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (::xercesc::InputSource& i,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseLocation (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (::xercesc::InputSource& i,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseLocation (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::xml_schema::Uri > (
        ::WS::MEX::parseLocation (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::xml_schema::Uri > (
          ::WS::MEX::parseLocation (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Location",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::Uri >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::xml_schema::Uri > r (
          dynamic_cast< ::xml_schema::Uri* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Location",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }

    ::std::unique_ptr< ::xml_schema::Uri >
    parseLocation (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Location",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::Uri >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::xml_schema::Uri > r (
          dynamic_cast< ::xml_schema::Uri* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Location",
        "http://schemas.xmlsoap.org/ws/2004/09/mex");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace WS
{
  namespace MEX
  {
    void
    serializeGetMetadata (::std::ostream& o,
                          const ::WS::MEX::GetMetadata& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeGetMetadata (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeGetMetadata (::std::ostream& o,
                          const ::WS::MEX::GetMetadata& s,
                          ::xml_schema::ErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeGetMetadata (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeGetMetadata (::std::ostream& o,
                          const ::WS::MEX::GetMetadata& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeGetMetadata (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeGetMetadata (::xercesc::XMLFormatTarget& t,
                          const ::WS::MEX::GetMetadata& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeGetMetadata (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeGetMetadata (::xercesc::XMLFormatTarget& t,
                          const ::WS::MEX::GetMetadata& s,
                          ::xml_schema::ErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeGetMetadata (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeGetMetadata (::xercesc::XMLFormatTarget& t,
                          const ::WS::MEX::GetMetadata& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeGetMetadata (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeGetMetadata (::xercesc::DOMDocument& d,
                          const ::WS::MEX::GetMetadata& s,
                          ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "GetMetadata" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GetMetadata",
          "http://schemas.xmlsoap.org/ws/2004/09/mex");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeGetMetadata (const ::WS::MEX::GetMetadata& s,
                          const ::xml_schema::NamespaceInfomap& m,
                          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "GetMetadata",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          m, f));

      ::WS::MEX::serializeGetMetadata (*d, s, f);
      return d;
    }

    void
    serializeDialect (::std::ostream& o,
                      const ::xml_schema::Uri& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeDialect (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeDialect (::std::ostream& o,
                      const ::xml_schema::Uri& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeDialect (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeDialect (::std::ostream& o,
                      const ::xml_schema::Uri& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeDialect (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeDialect (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::Uri& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeDialect (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeDialect (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::Uri& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeDialect (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeDialect (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::Uri& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeDialect (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeDialect (::xercesc::DOMDocument& d,
                      const ::xml_schema::Uri& s,
                      ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xml_schema::Uri) == typeid (s))
      {
        if (n.name () == "Dialect" &&
            n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Dialect",
            "http://schemas.xmlsoap.org/ws/2004/09/mex");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Dialect",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          e, n, s);
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeDialect (const ::xml_schema::Uri& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xml_schema::Uri) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "Dialect",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Dialect",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          m, s, f);
      }

      ::WS::MEX::serializeDialect (*d, s, f);
      return d;
    }

    void
    serializeIdentifier (::std::ostream& o,
                         const ::xml_schema::Uri& s,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeIdentifier (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeIdentifier (::std::ostream& o,
                         const ::xml_schema::Uri& s,
                         ::xml_schema::ErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeIdentifier (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeIdentifier (::std::ostream& o,
                         const ::xml_schema::Uri& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeIdentifier (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeIdentifier (::xercesc::XMLFormatTarget& t,
                         const ::xml_schema::Uri& s,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeIdentifier (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeIdentifier (::xercesc::XMLFormatTarget& t,
                         const ::xml_schema::Uri& s,
                         ::xml_schema::ErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeIdentifier (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeIdentifier (::xercesc::XMLFormatTarget& t,
                         const ::xml_schema::Uri& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeIdentifier (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeIdentifier (::xercesc::DOMDocument& d,
                         const ::xml_schema::Uri& s,
                         ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xml_schema::Uri) == typeid (s))
      {
        if (n.name () == "Identifier" &&
            n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Identifier",
            "http://schemas.xmlsoap.org/ws/2004/09/mex");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Identifier",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          e, n, s);
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeIdentifier (const ::xml_schema::Uri& s,
                         const ::xml_schema::NamespaceInfomap& m,
                         ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xml_schema::Uri) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "Identifier",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Identifier",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          m, s, f);
      }

      ::WS::MEX::serializeIdentifier (*d, s, f);
      return d;
    }

    void
    serializeMetadata (::std::ostream& o,
                       const ::WS::MEX::Metadata& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadata (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeMetadata (::std::ostream& o,
                       const ::WS::MEX::Metadata& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadata (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeMetadata (::std::ostream& o,
                       const ::WS::MEX::Metadata& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadata (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeMetadata (::xercesc::XMLFormatTarget& t,
                       const ::WS::MEX::Metadata& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadata (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeMetadata (::xercesc::XMLFormatTarget& t,
                       const ::WS::MEX::Metadata& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadata (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeMetadata (::xercesc::XMLFormatTarget& t,
                       const ::WS::MEX::Metadata& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadata (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeMetadata (::xercesc::DOMDocument& d,
                       const ::WS::MEX::Metadata& s,
                       ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Metadata" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Metadata",
          "http://schemas.xmlsoap.org/ws/2004/09/mex");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeMetadata (const ::WS::MEX::Metadata& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Metadata",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          m, f));

      ::WS::MEX::serializeMetadata (*d, s, f);
      return d;
    }

    void
    serializeMetadataSection (::std::ostream& o,
                              const ::WS::MEX::MetadataSection& s,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadataSection (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeMetadataSection (::std::ostream& o,
                              const ::WS::MEX::MetadataSection& s,
                              ::xml_schema::ErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadataSection (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeMetadataSection (::std::ostream& o,
                              const ::WS::MEX::MetadataSection& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadataSection (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeMetadataSection (::xercesc::XMLFormatTarget& t,
                              const ::WS::MEX::MetadataSection& s,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadataSection (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeMetadataSection (::xercesc::XMLFormatTarget& t,
                              const ::WS::MEX::MetadataSection& s,
                              ::xml_schema::ErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadataSection (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeMetadataSection (::xercesc::XMLFormatTarget& t,
                              const ::WS::MEX::MetadataSection& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadataSection (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeMetadataSection (::xercesc::DOMDocument& d,
                              const ::WS::MEX::MetadataSection& s,
                              ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "MetadataSection" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MetadataSection",
          "http://schemas.xmlsoap.org/ws/2004/09/mex");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeMetadataSection (const ::WS::MEX::MetadataSection& s,
                              const ::xml_schema::NamespaceInfomap& m,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "MetadataSection",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          m, f));

      ::WS::MEX::serializeMetadataSection (*d, s, f);
      return d;
    }

    void
    serializeMetadataReference (::std::ostream& o,
                                const ::WS::MEX::MetadataReference& s,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadataReference (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeMetadataReference (::std::ostream& o,
                                const ::WS::MEX::MetadataReference& s,
                                ::xml_schema::ErrorHandler& h,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadataReference (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeMetadataReference (::std::ostream& o,
                                const ::WS::MEX::MetadataReference& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadataReference (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeMetadataReference (::xercesc::XMLFormatTarget& t,
                                const ::WS::MEX::MetadataReference& s,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadataReference (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeMetadataReference (::xercesc::XMLFormatTarget& t,
                                const ::WS::MEX::MetadataReference& s,
                                ::xml_schema::ErrorHandler& h,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadataReference (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeMetadataReference (::xercesc::XMLFormatTarget& t,
                                const ::WS::MEX::MetadataReference& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeMetadataReference (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeMetadataReference (::xercesc::DOMDocument& d,
                                const ::WS::MEX::MetadataReference& s,
                                ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "MetadataReference" &&
          n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MetadataReference",
          "http://schemas.xmlsoap.org/ws/2004/09/mex");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeMetadataReference (const ::WS::MEX::MetadataReference& s,
                                const ::xml_schema::NamespaceInfomap& m,
                                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "MetadataReference",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          m, f));

      ::WS::MEX::serializeMetadataReference (*d, s, f);
      return d;
    }

    void
    serializeLocation (::std::ostream& o,
                       const ::xml_schema::Uri& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeLocation (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeLocation (::std::ostream& o,
                       const ::xml_schema::Uri& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeLocation (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeLocation (::std::ostream& o,
                       const ::xml_schema::Uri& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeLocation (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeLocation (::xercesc::XMLFormatTarget& t,
                       const ::xml_schema::Uri& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeLocation (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeLocation (::xercesc::XMLFormatTarget& t,
                       const ::xml_schema::Uri& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeLocation (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeLocation (::xercesc::XMLFormatTarget& t,
                       const ::xml_schema::Uri& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::WS::MEX::serializeLocation (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeLocation (::xercesc::DOMDocument& d,
                       const ::xml_schema::Uri& s,
                       ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xml_schema::Uri) == typeid (s))
      {
        if (n.name () == "Location" &&
            n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Location",
            "http://schemas.xmlsoap.org/ws/2004/09/mex");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Location",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          e, n, s);
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    serializeLocation (const ::xml_schema::Uri& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xml_schema::Uri) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "Location",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Location",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          m, s, f);
      }

      ::WS::MEX::serializeLocation (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const GetMetadata& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // Dialect
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.getDialect ())
        {
          const GetMetadata::DialectType& x (*i.getDialect ());
          if (typeid (GetMetadata::DialectType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Dialect",
                "http://schemas.xmlsoap.org/ws/2004/09/mex",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "Dialect",
              "http://schemas.xmlsoap.org/ws/2004/09/mex",
              true, true, e, x);
        }
      }

      // Identifier
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.getIdentifier ())
        {
          const GetMetadata::IdentifierType& x (*i.getIdentifier ());
          if (typeid (GetMetadata::IdentifierType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Identifier",
                "http://schemas.xmlsoap.org/ws/2004/09/mex",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "Identifier",
              "http://schemas.xmlsoap.org/ws/2004/09/mex",
              true, true, e, x);
        }
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Metadata& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // MetadataSection
      //
      for (Metadata::MetadataSectionConstIterator
           b (i.getMetadataSection ().begin ()), n (i.getMetadataSection ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MetadataSection",
            "http://schemas.xmlsoap.org/ws/2004/09/mex",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const MetadataSection& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // MetadataReference
      //
      if (i.getMetadataReference ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MetadataReference",
            "http://schemas.xmlsoap.org/ws/2004/09/mex",
            e));

        s << *i.getMetadataReference ();
      }

      // Location
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.getLocation ())
        {
          const MetadataSection::LocationType& x (*i.getLocation ());
          if (typeid (MetadataSection::LocationType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Location",
                "http://schemas.xmlsoap.org/ws/2004/09/mex",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "Location",
              "http://schemas.xmlsoap.org/ws/2004/09/mex",
              true, true, e, x);
        }
      }

      // ThisModel
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.getThisModel ())
        {
          const MetadataSection::ThisModelType& x (*i.getThisModel ());
          if (typeid (MetadataSection::ThisModelType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ThisModel",
                "http://docs.oasis-open.org/ws-dd/ns/dpws/2009/01",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "ThisModel",
              "http://docs.oasis-open.org/ws-dd/ns/dpws/2009/01",
              true, true, e, x);
        }
      }

      // ThisDevice
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.getThisDevice ())
        {
          const MetadataSection::ThisDeviceType& x (*i.getThisDevice ());
          if (typeid (MetadataSection::ThisDeviceType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ThisDevice",
                "http://docs.oasis-open.org/ws-dd/ns/dpws/2009/01",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "ThisDevice",
              "http://docs.oasis-open.org/ws-dd/ns/dpws/2009/01",
              true, true, e, x);
        }
      }

      // Relationship
      //
      if (i.getRelationship ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Relationship",
            "http://docs.oasis-open.org/ws-dd/ns/dpws/2009/01",
            e));

        s << *i.getRelationship ();
      }

      // StreamDescriptions
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.getStreamDescriptions ())
        {
          const MetadataSection::StreamDescriptionsType& x (*i.getStreamDescriptions ());
          if (typeid (MetadataSection::StreamDescriptionsType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StreamDescriptions",
                "http://standards.ieee.org/downloads/11073/11073-20702-2016",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "StreamDescriptions",
              "http://standards.ieee.org/downloads/11073/11073-20702-2016",
              true, true, e, x);
        }
      }

      // Dialect
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "Dialect",
            e));

        a << i.getDialect ();
      }

      // Identifier
      //
      if (i.getIdentifier ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "Identifier",
            e));

        a << *i.getIdentifier ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const MetadataReference& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

