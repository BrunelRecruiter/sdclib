// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef WSDD_DISCOVERY_1_1_SCHEMA_OS_HXX
#define WSDD_DISCOVERY_1_1_SCHEMA_OS_HXX

#include "wsdd-discovery-1.1-schema-os-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ws-addressing.hxx"

namespace WS
{
  namespace DISCOVERY
  {
    class HelloType: public ::xml_schema::Type
    {
      public:
      // EndpointReference
      //
      typedef ::WS::ADDRESSING::EndpointReferenceType EndpointReferenceType;
      typedef ::xsd::cxx::tree::traits< EndpointReferenceType, char > EndpointReferenceTraits;

      const EndpointReferenceType&
      EndpointReference () const;

      EndpointReferenceType&
      EndpointReference ();

      void
      EndpointReference (const EndpointReferenceType& x);

      void
      EndpointReference (::std::unique_ptr< EndpointReferenceType > p);

      // Types
      //
      typedef ::WS::DISCOVERY::QNameListType TypesType;
      typedef ::xsd::cxx::tree::optional< TypesType > TypesOptional;
      typedef ::xsd::cxx::tree::traits< TypesType, char > TypesTraits;

      const TypesOptional&
      Types () const;

      TypesOptional&
      Types ();

      void
      Types (const TypesType& x);

      void
      Types (const TypesOptional& x);

      void
      Types (::std::unique_ptr< TypesType > p);

      // Scopes
      //
      typedef ::WS::DISCOVERY::ScopesType ScopesType;
      typedef ::xsd::cxx::tree::optional< ScopesType > ScopesOptional;
      typedef ::xsd::cxx::tree::traits< ScopesType, char > ScopesTraits;

      const ScopesOptional&
      Scopes () const;

      ScopesOptional&
      Scopes ();

      void
      Scopes (const ScopesType& x);

      void
      Scopes (const ScopesOptional& x);

      void
      Scopes (::std::unique_ptr< ScopesType > p);

      // XAddrs
      //
      typedef ::WS::DISCOVERY::UriListType XAddrsType;
      typedef ::xsd::cxx::tree::optional< XAddrsType > XAddrsOptional;
      typedef ::xsd::cxx::tree::traits< XAddrsType, char > XAddrsTraits;

      const XAddrsOptional&
      XAddrs () const;

      XAddrsOptional&
      XAddrs ();

      void
      XAddrs (const XAddrsType& x);

      void
      XAddrs (const XAddrsOptional& x);

      void
      XAddrs (::std::unique_ptr< XAddrsType > p);

      // MetadataVersion
      //
      typedef ::xml_schema::UnsignedInt MetadataVersionType;
      typedef ::xsd::cxx::tree::traits< MetadataVersionType, char > MetadataVersionTraits;

      const MetadataVersionType&
      MetadataVersion () const;

      MetadataVersionType&
      MetadataVersion ();

      void
      MetadataVersion (const MetadataVersionType& x);

      // Constructors.
      //
      HelloType (const EndpointReferenceType&,
                 const MetadataVersionType&);

      HelloType (::std::unique_ptr< EndpointReferenceType >,
                 const MetadataVersionType&);

      HelloType (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      HelloType (const HelloType& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      virtual HelloType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      HelloType&
      operator= (const HelloType& x);

      virtual 
      ~HelloType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< EndpointReferenceType > EndpointReference_;
      TypesOptional Types_;
      ScopesOptional Scopes_;
      XAddrsOptional XAddrs_;
      ::xsd::cxx::tree::one< MetadataVersionType > MetadataVersion_;
    };

    class ByeType: public ::xml_schema::Type
    {
      public:
      // EndpointReference
      //
      typedef ::WS::ADDRESSING::EndpointReferenceType EndpointReferenceType;
      typedef ::xsd::cxx::tree::traits< EndpointReferenceType, char > EndpointReferenceTraits;

      const EndpointReferenceType&
      EndpointReference () const;

      EndpointReferenceType&
      EndpointReference ();

      void
      EndpointReference (const EndpointReferenceType& x);

      void
      EndpointReference (::std::unique_ptr< EndpointReferenceType > p);

      // Types
      //
      typedef ::WS::DISCOVERY::QNameListType TypesType;
      typedef ::xsd::cxx::tree::optional< TypesType > TypesOptional;
      typedef ::xsd::cxx::tree::traits< TypesType, char > TypesTraits;

      const TypesOptional&
      Types () const;

      TypesOptional&
      Types ();

      void
      Types (const TypesType& x);

      void
      Types (const TypesOptional& x);

      void
      Types (::std::unique_ptr< TypesType > p);

      // Scopes
      //
      typedef ::WS::DISCOVERY::ScopesType ScopesType;
      typedef ::xsd::cxx::tree::optional< ScopesType > ScopesOptional;
      typedef ::xsd::cxx::tree::traits< ScopesType, char > ScopesTraits;

      const ScopesOptional&
      Scopes () const;

      ScopesOptional&
      Scopes ();

      void
      Scopes (const ScopesType& x);

      void
      Scopes (const ScopesOptional& x);

      void
      Scopes (::std::unique_ptr< ScopesType > p);

      // XAddrs
      //
      typedef ::WS::DISCOVERY::UriListType XAddrsType;
      typedef ::xsd::cxx::tree::optional< XAddrsType > XAddrsOptional;
      typedef ::xsd::cxx::tree::traits< XAddrsType, char > XAddrsTraits;

      const XAddrsOptional&
      XAddrs () const;

      XAddrsOptional&
      XAddrs ();

      void
      XAddrs (const XAddrsType& x);

      void
      XAddrs (const XAddrsOptional& x);

      void
      XAddrs (::std::unique_ptr< XAddrsType > p);

      // MetadataVersion
      //
      typedef ::xml_schema::UnsignedInt MetadataVersionType;
      typedef ::xsd::cxx::tree::optional< MetadataVersionType > MetadataVersionOptional;
      typedef ::xsd::cxx::tree::traits< MetadataVersionType, char > MetadataVersionTraits;

      const MetadataVersionOptional&
      MetadataVersion () const;

      MetadataVersionOptional&
      MetadataVersion ();

      void
      MetadataVersion (const MetadataVersionType& x);

      void
      MetadataVersion (const MetadataVersionOptional& x);

      // Constructors.
      //
      ByeType (const EndpointReferenceType&);

      ByeType (::std::unique_ptr< EndpointReferenceType >);

      ByeType (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

      ByeType (const ByeType& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

      virtual ByeType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      ByeType&
      operator= (const ByeType& x);

      virtual 
      ~ByeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< EndpointReferenceType > EndpointReference_;
      TypesOptional Types_;
      ScopesOptional Scopes_;
      XAddrsOptional XAddrs_;
      MetadataVersionOptional MetadataVersion_;
    };

    class ProbeType: public ::xml_schema::Type
    {
      public:
      // Types
      //
      typedef ::WS::DISCOVERY::QNameListType TypesType;
      typedef ::xsd::cxx::tree::optional< TypesType > TypesOptional;
      typedef ::xsd::cxx::tree::traits< TypesType, char > TypesTraits;

      const TypesOptional&
      Types () const;

      TypesOptional&
      Types ();

      void
      Types (const TypesType& x);

      void
      Types (const TypesOptional& x);

      void
      Types (::std::unique_ptr< TypesType > p);

      // Scopes
      //
      typedef ::WS::DISCOVERY::ScopesType ScopesType;
      typedef ::xsd::cxx::tree::optional< ScopesType > ScopesOptional;
      typedef ::xsd::cxx::tree::traits< ScopesType, char > ScopesTraits;

      const ScopesOptional&
      Scopes () const;

      ScopesOptional&
      Scopes ();

      void
      Scopes (const ScopesType& x);

      void
      Scopes (const ScopesOptional& x);

      void
      Scopes (::std::unique_ptr< ScopesType > p);

      // Constructors.
      //
      ProbeType ();

      ProbeType (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      ProbeType (const ProbeType& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      virtual ProbeType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      ProbeType&
      operator= (const ProbeType& x);

      virtual 
      ~ProbeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      TypesOptional Types_;
      ScopesOptional Scopes_;
    };

    class ProbeMatchesType: public ::xml_schema::Type
    {
      public:
      // ProbeMatch
      //
      typedef ::WS::DISCOVERY::ProbeMatchType ProbeMatchType;
      typedef ::xsd::cxx::tree::sequence< ProbeMatchType > ProbeMatchSequence;
      typedef ProbeMatchSequence::iterator ProbeMatchIterator;
      typedef ProbeMatchSequence::const_iterator ProbeMatchConstIterator;
      typedef ::xsd::cxx::tree::traits< ProbeMatchType, char > ProbeMatchTraits;

      const ProbeMatchSequence&
      ProbeMatch () const;

      ProbeMatchSequence&
      ProbeMatch ();

      void
      ProbeMatch (const ProbeMatchSequence& s);

      // Constructors.
      //
      ProbeMatchesType ();

      ProbeMatchesType (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      ProbeMatchesType (const ProbeMatchesType& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      virtual ProbeMatchesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      ProbeMatchesType&
      operator= (const ProbeMatchesType& x);

      virtual 
      ~ProbeMatchesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ProbeMatchSequence ProbeMatch_;
    };

    class ProbeMatchType: public ::xml_schema::Type
    {
      public:
      // EndpointReference
      //
      typedef ::WS::ADDRESSING::EndpointReferenceType EndpointReferenceType;
      typedef ::xsd::cxx::tree::traits< EndpointReferenceType, char > EndpointReferenceTraits;

      const EndpointReferenceType&
      EndpointReference () const;

      EndpointReferenceType&
      EndpointReference ();

      void
      EndpointReference (const EndpointReferenceType& x);

      void
      EndpointReference (::std::unique_ptr< EndpointReferenceType > p);

      // Types
      //
      typedef ::WS::DISCOVERY::QNameListType TypesType;
      typedef ::xsd::cxx::tree::optional< TypesType > TypesOptional;
      typedef ::xsd::cxx::tree::traits< TypesType, char > TypesTraits;

      const TypesOptional&
      Types () const;

      TypesOptional&
      Types ();

      void
      Types (const TypesType& x);

      void
      Types (const TypesOptional& x);

      void
      Types (::std::unique_ptr< TypesType > p);

      // Scopes
      //
      typedef ::WS::DISCOVERY::ScopesType ScopesType;
      typedef ::xsd::cxx::tree::optional< ScopesType > ScopesOptional;
      typedef ::xsd::cxx::tree::traits< ScopesType, char > ScopesTraits;

      const ScopesOptional&
      Scopes () const;

      ScopesOptional&
      Scopes ();

      void
      Scopes (const ScopesType& x);

      void
      Scopes (const ScopesOptional& x);

      void
      Scopes (::std::unique_ptr< ScopesType > p);

      // XAddrs
      //
      typedef ::WS::DISCOVERY::UriListType XAddrsType;
      typedef ::xsd::cxx::tree::optional< XAddrsType > XAddrsOptional;
      typedef ::xsd::cxx::tree::traits< XAddrsType, char > XAddrsTraits;

      const XAddrsOptional&
      XAddrs () const;

      XAddrsOptional&
      XAddrs ();

      void
      XAddrs (const XAddrsType& x);

      void
      XAddrs (const XAddrsOptional& x);

      void
      XAddrs (::std::unique_ptr< XAddrsType > p);

      // MetadataVersion
      //
      typedef ::xml_schema::UnsignedInt MetadataVersionType;
      typedef ::xsd::cxx::tree::traits< MetadataVersionType, char > MetadataVersionTraits;

      const MetadataVersionType&
      MetadataVersion () const;

      MetadataVersionType&
      MetadataVersion ();

      void
      MetadataVersion (const MetadataVersionType& x);

      // Constructors.
      //
      ProbeMatchType (const EndpointReferenceType&,
                      const MetadataVersionType&);

      ProbeMatchType (::std::unique_ptr< EndpointReferenceType >,
                      const MetadataVersionType&);

      ProbeMatchType (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      ProbeMatchType (const ProbeMatchType& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      virtual ProbeMatchType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      ProbeMatchType&
      operator= (const ProbeMatchType& x);

      virtual 
      ~ProbeMatchType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< EndpointReferenceType > EndpointReference_;
      TypesOptional Types_;
      ScopesOptional Scopes_;
      XAddrsOptional XAddrs_;
      ::xsd::cxx::tree::one< MetadataVersionType > MetadataVersion_;
    };

    class ResolveType: public ::xml_schema::Type
    {
      public:
      // EndpointReference
      //
      typedef ::WS::ADDRESSING::EndpointReferenceType EndpointReferenceType;
      typedef ::xsd::cxx::tree::traits< EndpointReferenceType, char > EndpointReferenceTraits;

      const EndpointReferenceType&
      EndpointReference () const;

      EndpointReferenceType&
      EndpointReference ();

      void
      EndpointReference (const EndpointReferenceType& x);

      void
      EndpointReference (::std::unique_ptr< EndpointReferenceType > p);

      // Constructors.
      //
      ResolveType (const EndpointReferenceType&);

      ResolveType (::std::unique_ptr< EndpointReferenceType >);

      ResolveType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      ResolveType (const ResolveType& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      virtual ResolveType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      ResolveType&
      operator= (const ResolveType& x);

      virtual 
      ~ResolveType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< EndpointReferenceType > EndpointReference_;
    };

    class ResolveMatchesType: public ::xml_schema::Type
    {
      public:
      // ResolveMatch
      //
      typedef ::WS::DISCOVERY::ResolveMatchType ResolveMatchType;
      typedef ::xsd::cxx::tree::optional< ResolveMatchType > ResolveMatchOptional;
      typedef ::xsd::cxx::tree::traits< ResolveMatchType, char > ResolveMatchTraits;

      const ResolveMatchOptional&
      ResolveMatch () const;

      ResolveMatchOptional&
      ResolveMatch ();

      void
      ResolveMatch (const ResolveMatchType& x);

      void
      ResolveMatch (const ResolveMatchOptional& x);

      void
      ResolveMatch (::std::unique_ptr< ResolveMatchType > p);

      // Constructors.
      //
      ResolveMatchesType ();

      ResolveMatchesType (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

      ResolveMatchesType (const ResolveMatchesType& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

      virtual ResolveMatchesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      ResolveMatchesType&
      operator= (const ResolveMatchesType& x);

      virtual 
      ~ResolveMatchesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ResolveMatchOptional ResolveMatch_;
    };

    class ResolveMatchType: public ::xml_schema::Type
    {
      public:
      // EndpointReference
      //
      typedef ::WS::ADDRESSING::EndpointReferenceType EndpointReferenceType;
      typedef ::xsd::cxx::tree::traits< EndpointReferenceType, char > EndpointReferenceTraits;

      const EndpointReferenceType&
      EndpointReference () const;

      EndpointReferenceType&
      EndpointReference ();

      void
      EndpointReference (const EndpointReferenceType& x);

      void
      EndpointReference (::std::unique_ptr< EndpointReferenceType > p);

      // Types
      //
      typedef ::WS::DISCOVERY::QNameListType TypesType;
      typedef ::xsd::cxx::tree::optional< TypesType > TypesOptional;
      typedef ::xsd::cxx::tree::traits< TypesType, char > TypesTraits;

      const TypesOptional&
      Types () const;

      TypesOptional&
      Types ();

      void
      Types (const TypesType& x);

      void
      Types (const TypesOptional& x);

      void
      Types (::std::unique_ptr< TypesType > p);

      // Scopes
      //
      typedef ::WS::DISCOVERY::ScopesType ScopesType;
      typedef ::xsd::cxx::tree::optional< ScopesType > ScopesOptional;
      typedef ::xsd::cxx::tree::traits< ScopesType, char > ScopesTraits;

      const ScopesOptional&
      Scopes () const;

      ScopesOptional&
      Scopes ();

      void
      Scopes (const ScopesType& x);

      void
      Scopes (const ScopesOptional& x);

      void
      Scopes (::std::unique_ptr< ScopesType > p);

      // XAddrs
      //
      typedef ::WS::DISCOVERY::UriListType XAddrsType;
      typedef ::xsd::cxx::tree::optional< XAddrsType > XAddrsOptional;
      typedef ::xsd::cxx::tree::traits< XAddrsType, char > XAddrsTraits;

      const XAddrsOptional&
      XAddrs () const;

      XAddrsOptional&
      XAddrs ();

      void
      XAddrs (const XAddrsType& x);

      void
      XAddrs (const XAddrsOptional& x);

      void
      XAddrs (::std::unique_ptr< XAddrsType > p);

      // MetadataVersion
      //
      typedef ::xml_schema::UnsignedInt MetadataVersionType;
      typedef ::xsd::cxx::tree::traits< MetadataVersionType, char > MetadataVersionTraits;

      const MetadataVersionType&
      MetadataVersion () const;

      MetadataVersionType&
      MetadataVersion ();

      void
      MetadataVersion (const MetadataVersionType& x);

      // Constructors.
      //
      ResolveMatchType (const EndpointReferenceType&,
                        const MetadataVersionType&);

      ResolveMatchType (::std::unique_ptr< EndpointReferenceType >,
                        const MetadataVersionType&);

      ResolveMatchType (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      ResolveMatchType (const ResolveMatchType& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      virtual ResolveMatchType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      ResolveMatchType&
      operator= (const ResolveMatchType& x);

      virtual 
      ~ResolveMatchType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< EndpointReferenceType > EndpointReference_;
      TypesOptional Types_;
      ScopesOptional Scopes_;
      XAddrsOptional XAddrs_;
      ::xsd::cxx::tree::one< MetadataVersionType > MetadataVersion_;
    };

    class QNameListType: public ::xml_schema::SimpleType,
      public ::xsd::cxx::tree::list< ::xml_schema::Qname, char >
    {
      public:
      QNameListType ();

      QNameListType (size_type n, const ::xml_schema::Qname& x);

      template < typename I >
      QNameListType (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xml_schema::Qname, char > (begin, end, this)
      {
      }

      QNameListType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      QNameListType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      QNameListType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      QNameListType (const QNameListType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      virtual QNameListType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~QNameListType ();
    };

    class UriListType: public ::xml_schema::SimpleType,
      public ::xsd::cxx::tree::list< ::xml_schema::Uri, char >
    {
      public:
      UriListType ();

      UriListType (size_type n, const ::xml_schema::Uri& x);

      template < typename I >
      UriListType (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xml_schema::Uri, char > (begin, end, this)
      {
      }

      UriListType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      UriListType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      UriListType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      UriListType (const UriListType& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      virtual UriListType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~UriListType ();
    };

    class ScopesType: public ::WS::DISCOVERY::UriListType
    {
      public:
      // MatchBy
      //
      typedef ::xml_schema::Uri MatchByType;
      typedef ::xsd::cxx::tree::optional< MatchByType > MatchByOptional;
      typedef ::xsd::cxx::tree::traits< MatchByType, char > MatchByTraits;

      const MatchByOptional&
      MatchBy () const;

      MatchByOptional&
      MatchBy ();

      void
      MatchBy (const MatchByType& x);

      void
      MatchBy (const MatchByOptional& x);

      void
      MatchBy (::std::unique_ptr< MatchByType > p);

      // Constructors.
      //
      ScopesType ();

      ScopesType (const ::WS::DISCOVERY::UriListType&);

      ScopesType (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      ScopesType (const ScopesType& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      virtual ScopesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      ScopesType&
      operator= (const ScopesType& x);

      virtual 
      ~ScopesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      MatchByOptional MatchBy_;
    };

    class FaultCodeType: public ::xml_schema::Qname
    {
      public:
      FaultCodeType (const ::xml_schema::Qname& v);

      FaultCodeType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      FaultCodeType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      FaultCodeType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      FaultCodeType (const FaultCodeType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      virtual FaultCodeType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class FaultCodeOpenType: public ::xml_schema::String
    {
      public:

      FaultCodeOpenType (const char* v);

      FaultCodeOpenType (const ::std::string& v);

      FaultCodeOpenType (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      FaultCodeOpenType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      FaultCodeOpenType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      FaultCodeOpenType (const FaultCodeOpenType& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      virtual FaultCodeOpenType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class SecurityType: public ::xml_schema::Type
    {
      public:
      // Sig
      //
      typedef ::WS::DISCOVERY::SigType SigType;
      typedef ::xsd::cxx::tree::optional< SigType > SigOptional;
      typedef ::xsd::cxx::tree::traits< SigType, char > SigTraits;

      const SigOptional&
      Sig () const;

      SigOptional&
      Sig ();

      void
      Sig (const SigType& x);

      void
      Sig (const SigOptional& x);

      void
      Sig (::std::unique_ptr< SigType > p);

      // Constructors.
      //
      SecurityType ();

      SecurityType (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      SecurityType (const SecurityType& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      virtual SecurityType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      SecurityType&
      operator= (const SecurityType& x);

      virtual 
      ~SecurityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      SigOptional Sig_;
    };

    class SigType: public ::xml_schema::Type
    {
      public:
      // Scheme
      //
      typedef ::xml_schema::Uri SchemeType;
      typedef ::xsd::cxx::tree::traits< SchemeType, char > SchemeTraits;

      const SchemeType&
      Scheme () const;

      SchemeType&
      Scheme ();

      void
      Scheme (const SchemeType& x);

      void
      Scheme (::std::unique_ptr< SchemeType > p);

      // KeyId
      //
      typedef ::xml_schema::Base64Binary KeyIdType;
      typedef ::xsd::cxx::tree::optional< KeyIdType > KeyIdOptional;
      typedef ::xsd::cxx::tree::traits< KeyIdType, char > KeyIdTraits;

      const KeyIdOptional&
      KeyId () const;

      KeyIdOptional&
      KeyId ();

      void
      KeyId (const KeyIdType& x);

      void
      KeyId (const KeyIdOptional& x);

      void
      KeyId (::std::unique_ptr< KeyIdType > p);

      // Refs
      //
      typedef ::xml_schema::Idrefs RefsType;
      typedef ::xsd::cxx::tree::traits< RefsType, char > RefsTraits;

      const RefsType&
      Refs () const;

      RefsType&
      Refs ();

      void
      Refs (const RefsType& x);

      void
      Refs (::std::unique_ptr< RefsType > p);

      // Sig
      //
      typedef ::xml_schema::Base64Binary SigType1;
      typedef ::xsd::cxx::tree::traits< SigType1, char > SigTraits;

      const SigType1&
      Sig () const;

      SigType1&
      Sig ();

      void
      Sig (const SigType1& x);

      void
      Sig (::std::unique_ptr< SigType1 > p);

      // Constructors.
      //
      SigType (const SchemeType&,
               const RefsType&,
               const SigType1&);

      SigType (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

      SigType (const SigType& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

      virtual SigType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      SigType&
      operator= (const SigType& x);

      virtual 
      ~SigType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< SchemeType > Scheme_;
      KeyIdOptional KeyId_;
      ::xsd::cxx::tree::one< RefsType > Refs_;
      ::xsd::cxx::tree::one< SigType1 > Sig_;
    };

    class AppSequenceType: public ::xml_schema::Type
    {
      public:
      // InstanceId
      //
      typedef ::xml_schema::UnsignedInt InstanceIdType;
      typedef ::xsd::cxx::tree::traits< InstanceIdType, char > InstanceIdTraits;

      const InstanceIdType&
      InstanceId () const;

      InstanceIdType&
      InstanceId ();

      void
      InstanceId (const InstanceIdType& x);

      // SequenceId
      //
      typedef ::xml_schema::Uri SequenceIdType;
      typedef ::xsd::cxx::tree::optional< SequenceIdType > SequenceIdOptional;
      typedef ::xsd::cxx::tree::traits< SequenceIdType, char > SequenceIdTraits;

      const SequenceIdOptional&
      SequenceId () const;

      SequenceIdOptional&
      SequenceId ();

      void
      SequenceId (const SequenceIdType& x);

      void
      SequenceId (const SequenceIdOptional& x);

      void
      SequenceId (::std::unique_ptr< SequenceIdType > p);

      // MessageNumber
      //
      typedef ::xml_schema::UnsignedInt MessageNumberType;
      typedef ::xsd::cxx::tree::traits< MessageNumberType, char > MessageNumberTraits;

      const MessageNumberType&
      MessageNumber () const;

      MessageNumberType&
      MessageNumber ();

      void
      MessageNumber (const MessageNumberType& x);

      // Constructors.
      //
      AppSequenceType (const InstanceIdType&,
                       const MessageNumberType&);

      AppSequenceType (const ::xml_schema::Type&,
                       const InstanceIdType&,
                       const MessageNumberType&);

      AppSequenceType (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      AppSequenceType (const AppSequenceType& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      virtual AppSequenceType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      AppSequenceType&
      operator= (const AppSequenceType& x);

      virtual 
      ~AppSequenceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< InstanceIdType > InstanceId_;
      SequenceIdOptional SequenceId_;
      ::xsd::cxx::tree::one< MessageNumberType > MessageNumber_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace WS
{
  namespace DISCOVERY
  {
    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (const ::std::string& uri,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (const ::std::string& uri,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (::std::istream& is,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (::std::istream& is,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (::xercesc::InputSource& is,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (::xercesc::InputSource& is,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (const ::xercesc::DOMDocument& d,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::HelloType >
    Hello (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (const ::std::string& uri,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (const ::std::string& uri,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (::std::istream& is,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (::std::istream& is,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (::xercesc::InputSource& is,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (::xercesc::InputSource& is,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (const ::xercesc::DOMDocument& d,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ByeType >
    Bye (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (const ::std::string& uri,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (const ::std::string& uri,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (::std::istream& is,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (::std::istream& is,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (::xercesc::InputSource& is,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (::xercesc::InputSource& is,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (const ::xercesc::DOMDocument& d,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeType >
    Probe (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (const ::std::string& uri,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (const ::std::string& uri,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (::std::istream& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (::std::istream& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (::xercesc::InputSource& is,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (::xercesc::InputSource& is,
                  ::xml_schema::ErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ProbeMatchesType >
    ProbeMatches (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::Flags f = 0,
                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveType >
    Resolve (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (const ::std::string& uri,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (const ::std::string& uri,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (::std::istream& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (::std::istream& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (::xercesc::InputSource& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (::xercesc::InputSource& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (const ::xercesc::DOMDocument& d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ResolveMatchesType >
    ResolveMatches (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (const ::std::string& uri,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (const ::std::string& uri,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (::std::istream& is,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (::std::istream& is,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (::xercesc::InputSource& is,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (::xercesc::InputSource& is,
           ::xml_schema::ErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (const ::xercesc::DOMDocument& d,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::QNameListType >
    Types (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::Flags f = 0,
           const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (const ::std::string& uri,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (const ::std::string& uri,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (::std::istream& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (::std::istream& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (::xercesc::InputSource& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (::xercesc::InputSource& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::ScopesType >
    Scopes (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (const ::std::string& uri,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (const ::std::string& uri,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (::std::istream& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (::std::istream& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (::xercesc::InputSource& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (::xercesc::InputSource& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    XAddrs (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (const ::std::string& uri,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (const ::std::string& uri,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (::std::istream& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (::std::istream& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (::xercesc::InputSource& is,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (::xercesc::InputSource& is,
                     ::xml_schema::ErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::xml_schema::UnsignedInt >
    MetadataVersion (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::Flags f = 0,
                     const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (const ::std::string& uri,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (const ::std::string& uri,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (::std::istream& is,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (::std::istream& is,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (::xercesc::InputSource& is,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (::xercesc::InputSource& is,
                            ::xml_schema::ErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (const ::xercesc::DOMDocument& d,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::UriListType >
    SupportedMatchingRules (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::Flags f = 0,
                            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (const ::std::string& uri,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (const ::std::string& uri,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (::std::istream& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (::std::istream& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (::xercesc::InputSource& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (::xercesc::InputSource& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (const ::xercesc::DOMDocument& d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SecurityType >
    Security (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (const ::std::string& uri,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (const ::std::string& uri,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (::std::istream& is,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (::std::istream& is,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (::xercesc::InputSource& is,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (::xercesc::InputSource& is,
         ::xml_schema::ErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (const ::xercesc::DOMDocument& d,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::SigType >
    Sig (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::Flags f = 0,
         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (const ::std::string& uri,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (const ::std::string& uri,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (::std::istream& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (::std::istream& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (::xercesc::InputSource& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (::xercesc::InputSource& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (const ::xercesc::DOMDocument& d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::DISCOVERY::AppSequenceType >
    AppSequence (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace WS
{
  namespace DISCOVERY
  {
    // Serialize to std::ostream.
    //

    void
    Hello (::std::ostream& os,
           const ::WS::DISCOVERY::HelloType& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Hello (::std::ostream& os,
           const ::WS::DISCOVERY::HelloType& x, 
           ::xml_schema::ErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Hello (::std::ostream& os,
           const ::WS::DISCOVERY::HelloType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Hello (::xercesc::XMLFormatTarget& ft,
           const ::WS::DISCOVERY::HelloType& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Hello (::xercesc::XMLFormatTarget& ft,
           const ::WS::DISCOVERY::HelloType& x, 
           ::xml_schema::ErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Hello (::xercesc::XMLFormatTarget& ft,
           const ::WS::DISCOVERY::HelloType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Hello (::xercesc::DOMDocument& d,
           const ::WS::DISCOVERY::HelloType& x,
           ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Hello (const ::WS::DISCOVERY::HelloType& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const HelloType&);

    // Serialize to std::ostream.
    //

    void
    Bye (::std::ostream& os,
         const ::WS::DISCOVERY::ByeType& x, 
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    void
    Bye (::std::ostream& os,
         const ::WS::DISCOVERY::ByeType& x, 
         ::xml_schema::ErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    void
    Bye (::std::ostream& os,
         const ::WS::DISCOVERY::ByeType& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Bye (::xercesc::XMLFormatTarget& ft,
         const ::WS::DISCOVERY::ByeType& x, 
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    void
    Bye (::xercesc::XMLFormatTarget& ft,
         const ::WS::DISCOVERY::ByeType& x, 
         ::xml_schema::ErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    void
    Bye (::xercesc::XMLFormatTarget& ft,
         const ::WS::DISCOVERY::ByeType& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Bye (::xercesc::DOMDocument& d,
         const ::WS::DISCOVERY::ByeType& x,
         ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Bye (const ::WS::DISCOVERY::ByeType& x, 
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ByeType&);

    // Serialize to std::ostream.
    //

    void
    Probe (::std::ostream& os,
           const ::WS::DISCOVERY::ProbeType& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Probe (::std::ostream& os,
           const ::WS::DISCOVERY::ProbeType& x, 
           ::xml_schema::ErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Probe (::std::ostream& os,
           const ::WS::DISCOVERY::ProbeType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Probe (::xercesc::XMLFormatTarget& ft,
           const ::WS::DISCOVERY::ProbeType& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Probe (::xercesc::XMLFormatTarget& ft,
           const ::WS::DISCOVERY::ProbeType& x, 
           ::xml_schema::ErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Probe (::xercesc::XMLFormatTarget& ft,
           const ::WS::DISCOVERY::ProbeType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Probe (::xercesc::DOMDocument& d,
           const ::WS::DISCOVERY::ProbeType& x,
           ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Probe (const ::WS::DISCOVERY::ProbeType& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ProbeType&);

    // Serialize to std::ostream.
    //

    void
    ProbeMatches (::std::ostream& os,
                  const ::WS::DISCOVERY::ProbeMatchesType& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

    void
    ProbeMatches (::std::ostream& os,
                  const ::WS::DISCOVERY::ProbeMatchesType& x, 
                  ::xml_schema::ErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

    void
    ProbeMatches (::std::ostream& os,
                  const ::WS::DISCOVERY::ProbeMatchesType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProbeMatches (::xercesc::XMLFormatTarget& ft,
                  const ::WS::DISCOVERY::ProbeMatchesType& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

    void
    ProbeMatches (::xercesc::XMLFormatTarget& ft,
                  const ::WS::DISCOVERY::ProbeMatchesType& x, 
                  ::xml_schema::ErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

    void
    ProbeMatches (::xercesc::XMLFormatTarget& ft,
                  const ::WS::DISCOVERY::ProbeMatchesType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProbeMatches (::xercesc::DOMDocument& d,
                  const ::WS::DISCOVERY::ProbeMatchesType& x,
                  ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    ProbeMatches (const ::WS::DISCOVERY::ProbeMatchesType& x, 
                  const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                  ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ProbeMatchesType&);

    void
    operator<< (::xercesc::DOMElement&, const ProbeMatchType&);

    // Serialize to std::ostream.
    //

    void
    Resolve (::std::ostream& os,
             const ::WS::DISCOVERY::ResolveType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    Resolve (::std::ostream& os,
             const ::WS::DISCOVERY::ResolveType& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    Resolve (::std::ostream& os,
             const ::WS::DISCOVERY::ResolveType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Resolve (::xercesc::XMLFormatTarget& ft,
             const ::WS::DISCOVERY::ResolveType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    Resolve (::xercesc::XMLFormatTarget& ft,
             const ::WS::DISCOVERY::ResolveType& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    Resolve (::xercesc::XMLFormatTarget& ft,
             const ::WS::DISCOVERY::ResolveType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Resolve (::xercesc::DOMDocument& d,
             const ::WS::DISCOVERY::ResolveType& x,
             ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Resolve (const ::WS::DISCOVERY::ResolveType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ResolveType&);

    // Serialize to std::ostream.
    //

    void
    ResolveMatches (::std::ostream& os,
                    const ::WS::DISCOVERY::ResolveMatchesType& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    void
    ResolveMatches (::std::ostream& os,
                    const ::WS::DISCOVERY::ResolveMatchesType& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    void
    ResolveMatches (::std::ostream& os,
                    const ::WS::DISCOVERY::ResolveMatchesType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ResolveMatches (::xercesc::XMLFormatTarget& ft,
                    const ::WS::DISCOVERY::ResolveMatchesType& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    void
    ResolveMatches (::xercesc::XMLFormatTarget& ft,
                    const ::WS::DISCOVERY::ResolveMatchesType& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    void
    ResolveMatches (::xercesc::XMLFormatTarget& ft,
                    const ::WS::DISCOVERY::ResolveMatchesType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ResolveMatches (::xercesc::DOMDocument& d,
                    const ::WS::DISCOVERY::ResolveMatchesType& x,
                    ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    ResolveMatches (const ::WS::DISCOVERY::ResolveMatchesType& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ResolveMatchesType&);

    void
    operator<< (::xercesc::DOMElement&, const ResolveMatchType&);

    // Serialize to std::ostream.
    //

    void
    Types (::std::ostream& os,
           const ::WS::DISCOVERY::QNameListType& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Types (::std::ostream& os,
           const ::WS::DISCOVERY::QNameListType& x, 
           ::xml_schema::ErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Types (::std::ostream& os,
           const ::WS::DISCOVERY::QNameListType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Types (::xercesc::XMLFormatTarget& ft,
           const ::WS::DISCOVERY::QNameListType& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Types (::xercesc::XMLFormatTarget& ft,
           const ::WS::DISCOVERY::QNameListType& x, 
           ::xml_schema::ErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    void
    Types (::xercesc::XMLFormatTarget& ft,
           const ::WS::DISCOVERY::QNameListType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Types (::xercesc::DOMDocument& d,
           const ::WS::DISCOVERY::QNameListType& x,
           ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Types (const ::WS::DISCOVERY::QNameListType& x, 
           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
           ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const QNameListType&);

    void
    operator<< (::xercesc::DOMAttr&, const QNameListType&);

    void
    operator<< (::xml_schema::ListStream&,
                const QNameListType&);

    // Serialize to std::ostream.
    //

    void
    Scopes (::std::ostream& os,
            const ::WS::DISCOVERY::ScopesType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Scopes (::std::ostream& os,
            const ::WS::DISCOVERY::ScopesType& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Scopes (::std::ostream& os,
            const ::WS::DISCOVERY::ScopesType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Scopes (::xercesc::XMLFormatTarget& ft,
            const ::WS::DISCOVERY::ScopesType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Scopes (::xercesc::XMLFormatTarget& ft,
            const ::WS::DISCOVERY::ScopesType& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Scopes (::xercesc::XMLFormatTarget& ft,
            const ::WS::DISCOVERY::ScopesType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Scopes (::xercesc::DOMDocument& d,
            const ::WS::DISCOVERY::ScopesType& x,
            ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Scopes (const ::WS::DISCOVERY::ScopesType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const UriListType&);

    void
    operator<< (::xercesc::DOMAttr&, const UriListType&);

    void
    operator<< (::xml_schema::ListStream&,
                const UriListType&);

    void
    operator<< (::xercesc::DOMElement&, const ScopesType&);

    // Serialize to std::ostream.
    //

    void
    XAddrs (::std::ostream& os,
            const ::WS::DISCOVERY::UriListType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    XAddrs (::std::ostream& os,
            const ::WS::DISCOVERY::UriListType& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    XAddrs (::std::ostream& os,
            const ::WS::DISCOVERY::UriListType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    XAddrs (::xercesc::XMLFormatTarget& ft,
            const ::WS::DISCOVERY::UriListType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    XAddrs (::xercesc::XMLFormatTarget& ft,
            const ::WS::DISCOVERY::UriListType& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    XAddrs (::xercesc::XMLFormatTarget& ft,
            const ::WS::DISCOVERY::UriListType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    XAddrs (::xercesc::DOMDocument& d,
            const ::WS::DISCOVERY::UriListType& x,
            ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    XAddrs (const ::WS::DISCOVERY::UriListType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    MetadataVersion (::std::ostream& os,
                     const ::xml_schema::UnsignedInt& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

    void
    MetadataVersion (::std::ostream& os,
                     const ::xml_schema::UnsignedInt& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

    void
    MetadataVersion (::std::ostream& os,
                     const ::xml_schema::UnsignedInt& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    MetadataVersion (::xercesc::XMLFormatTarget& ft,
                     const ::xml_schema::UnsignedInt& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

    void
    MetadataVersion (::xercesc::XMLFormatTarget& ft,
                     const ::xml_schema::UnsignedInt& x, 
                     ::xml_schema::ErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

    void
    MetadataVersion (::xercesc::XMLFormatTarget& ft,
                     const ::xml_schema::UnsignedInt& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    MetadataVersion (::xercesc::DOMDocument& d,
                     const ::xml_schema::UnsignedInt& x,
                     ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    MetadataVersion (const ::xml_schema::UnsignedInt& x, 
                     const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                     ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const FaultCodeType&);

    void
    operator<< (::xercesc::DOMAttr&, const FaultCodeType&);

    void
    operator<< (::xml_schema::ListStream&,
                const FaultCodeType&);

    void
    operator<< (::xercesc::DOMElement&, const FaultCodeOpenType&);

    void
    operator<< (::xercesc::DOMAttr&, const FaultCodeOpenType&);

    void
    operator<< (::xml_schema::ListStream&,
                const FaultCodeOpenType&);

    // Serialize to std::ostream.
    //

    void
    SupportedMatchingRules (::std::ostream& os,
                            const ::WS::DISCOVERY::UriListType& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

    void
    SupportedMatchingRules (::std::ostream& os,
                            const ::WS::DISCOVERY::UriListType& x, 
                            ::xml_schema::ErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

    void
    SupportedMatchingRules (::std::ostream& os,
                            const ::WS::DISCOVERY::UriListType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SupportedMatchingRules (::xercesc::XMLFormatTarget& ft,
                            const ::WS::DISCOVERY::UriListType& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

    void
    SupportedMatchingRules (::xercesc::XMLFormatTarget& ft,
                            const ::WS::DISCOVERY::UriListType& x, 
                            ::xml_schema::ErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

    void
    SupportedMatchingRules (::xercesc::XMLFormatTarget& ft,
                            const ::WS::DISCOVERY::UriListType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SupportedMatchingRules (::xercesc::DOMDocument& d,
                            const ::WS::DISCOVERY::UriListType& x,
                            ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    SupportedMatchingRules (const ::WS::DISCOVERY::UriListType& x, 
                            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                            ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Security (::std::ostream& os,
              const ::WS::DISCOVERY::SecurityType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    void
    Security (::std::ostream& os,
              const ::WS::DISCOVERY::SecurityType& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    void
    Security (::std::ostream& os,
              const ::WS::DISCOVERY::SecurityType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Security (::xercesc::XMLFormatTarget& ft,
              const ::WS::DISCOVERY::SecurityType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    void
    Security (::xercesc::XMLFormatTarget& ft,
              const ::WS::DISCOVERY::SecurityType& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    void
    Security (::xercesc::XMLFormatTarget& ft,
              const ::WS::DISCOVERY::SecurityType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Security (::xercesc::DOMDocument& d,
              const ::WS::DISCOVERY::SecurityType& x,
              ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Security (const ::WS::DISCOVERY::SecurityType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SecurityType&);

    // Serialize to std::ostream.
    //

    void
    Sig (::std::ostream& os,
         const ::WS::DISCOVERY::SigType& x, 
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    void
    Sig (::std::ostream& os,
         const ::WS::DISCOVERY::SigType& x, 
         ::xml_schema::ErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    void
    Sig (::std::ostream& os,
         const ::WS::DISCOVERY::SigType& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Sig (::xercesc::XMLFormatTarget& ft,
         const ::WS::DISCOVERY::SigType& x, 
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    void
    Sig (::xercesc::XMLFormatTarget& ft,
         const ::WS::DISCOVERY::SigType& x, 
         ::xml_schema::ErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    void
    Sig (::xercesc::XMLFormatTarget& ft,
         const ::WS::DISCOVERY::SigType& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Sig (::xercesc::DOMDocument& d,
         const ::WS::DISCOVERY::SigType& x,
         ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Sig (const ::WS::DISCOVERY::SigType& x, 
         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
         ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SigType&);

    // Serialize to std::ostream.
    //

    void
    AppSequence (::std::ostream& os,
                 const ::WS::DISCOVERY::AppSequenceType& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

    void
    AppSequence (::std::ostream& os,
                 const ::WS::DISCOVERY::AppSequenceType& x, 
                 ::xml_schema::ErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

    void
    AppSequence (::std::ostream& os,
                 const ::WS::DISCOVERY::AppSequenceType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AppSequence (::xercesc::XMLFormatTarget& ft,
                 const ::WS::DISCOVERY::AppSequenceType& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

    void
    AppSequence (::xercesc::XMLFormatTarget& ft,
                 const ::WS::DISCOVERY::AppSequenceType& x, 
                 ::xml_schema::ErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

    void
    AppSequence (::xercesc::XMLFormatTarget& ft,
                 const ::WS::DISCOVERY::AppSequenceType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AppSequence (::xercesc::DOMDocument& d,
                 const ::WS::DISCOVERY::AppSequenceType& x,
                 ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    AppSequence (const ::WS::DISCOVERY::AppSequenceType& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AppSequenceType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // WSDD_DISCOVERY_1_1_SCHEMA_OS_HXX
