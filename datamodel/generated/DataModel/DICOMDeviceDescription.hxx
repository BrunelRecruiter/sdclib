// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from DICOMDeviceDescription.xsd.
 */

#ifndef DICOMDEVICE_DESCRIPTION_HXX
#define DICOMDEVICE_DESCRIPTION_HXX

#include "DataModel/DICOMDeviceDescription-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "DataModel/BICEPS_ParticipantModel.hxx"

/**
 * @brief C++ namespace for the %http://dicom-extension-uri/09/08
 * schema namespace.
 */
namespace CDM
{
  /**
   * @brief Enumeration class corresponding to the %DicomTransferRole
   * schema type.
   *
   * Role can be either server (SCP) or client (SCU)
   */
  class DicomTransferRole: public ::xml_schema::String
  {
    public:

    /**
     * @brief Underlying enum type.
     */
    enum Value
    {
      /**
       * Client role
       */
      Scu,
      /**
       * Server role
       */
      Scp
    };

    /**
     * @brief Create an instance from the underlying enum value.
     *
     * @param v A enum value.
     */
    DicomTransferRole (Value v);

    /**
     * @brief Create an instance from a C string.
     *
     * @param v A string value.
     */
    DicomTransferRole (const char* v);

    /**
     * @brief Create an instance from a string.
     *
     * @param v A string value.
     */
    DicomTransferRole (const ::std::string& v);

    /**
     * @brief Create an instance from the base value.
     *
     * @param v A base value.
     */
    DicomTransferRole (const ::xml_schema::String& v);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DicomTransferRole (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DicomTransferRole (const ::xercesc::DOMAttr& a,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DicomTransferRole (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DicomTransferRole (const DicomTransferRole& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DicomTransferRole*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Assign the underlying enum value.
     *
     * @param v A enum value.
     * @return A refernce to the instance.
     */
    DicomTransferRole&
    operator= (Value v);

    /**
     * @brief Implicit conversion operator to the underlying
     * enum value.
     *
     * @return A enum value.
     */
    virtual
    operator Value () const
    {
      return _xsd_DicomTransferRole_convert ();
    }

    //@cond

    protected:
    Value
    _xsd_DicomTransferRole_convert () const;

    public:
    static const char* const _xsd_DicomTransferRole_literals_[2];
    static const Value _xsd_DicomTransferRole_indexes_[2];

    //@endcond
  };

  /**
   * @brief Class corresponding to the %DicomTransferCapability schema type.
   *
   * A DICOM transfer capability consists of a SOP class and whether the
   * SOP class is supported as a server (SCP) or client (SCU)
   *
   * @nosubgrouping
   */
  class DicomTransferCapability: public ::xml_schema::Type
  {
    public:
    /**
     * @name TransferSyntax
     *
     * @brief Accessor and modifier functions for the %TransferSyntax
     * sequence element.
     *
     * The transfer syntax defines the DICOM encoding used for the transfer
     * of data; this can also include compression of pixel data.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String TransferSyntaxType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< TransferSyntaxType > TransferSyntaxSequence;

    /**
     * @brief Element iterator type.
     */
    typedef TransferSyntaxSequence::iterator TransferSyntaxIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef TransferSyntaxSequence::const_iterator TransferSyntaxConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< TransferSyntaxType, char > TransferSyntaxTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const TransferSyntaxSequence&
    getTransferSyntax () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    TransferSyntaxSequence&
    getTransferSyntax ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setTransferSyntax (const TransferSyntaxSequence& s);

    //@}

    /**
     * @name SopClass
     *
     * @brief Accessor and modifier functions for the %SopClass
     * required attribute.
     *
     * The SOP Class (DICOM service)
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String SopClassType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< SopClassType, char > SopClassTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const SopClassType&
    getSopClass () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    SopClassType&
    getSopClass ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setSopClass (const SopClassType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setSopClass (::std::unique_ptr< SopClassType > p);

    //@}

    /**
     * @name TransferRole
     *
     * @brief Accessor and modifier functions for the %TransferRole
     * required attribute.
     *
     * Role for this service: Client (SCU) or Server (SCP)
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::CDM::DicomTransferRole TransferRoleType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< TransferRoleType, char > TransferRoleTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const TransferRoleType&
    getTransferRole () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    TransferRoleType&
    getTransferRole ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setTransferRole (const TransferRoleType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setTransferRole (::std::unique_ptr< TransferRoleType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DicomTransferCapability (const SopClassType&,
                             const TransferRoleType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DicomTransferCapability (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DicomTransferCapability (const DicomTransferCapability& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DicomTransferCapability*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DicomTransferCapability&
    operator= (const DicomTransferCapability& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~DicomTransferCapability ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    TransferSyntaxSequence TransferSyntax_;
    ::xsd::cxx::tree::one< SopClassType > SopClass_;
    ::xsd::cxx::tree::one< TransferRoleType > TransferRole_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %DicomNetworkAe schema type.
   *
   * A Network AE (Application Entity) is a DICOM network communication
   * component that is uniquely known on the DICOM network by its AE Ttile.
   * It refers to a network connection the AE uses for its communication.
   * The AE is marked whether it initiates and/or receives connections
   * (associations). Optionally a free text description is given.
   *
   * @nosubgrouping
   */
  class DicomNetworkAe: public ::xml_schema::Type
  {
    public:
    /**
     * @name TransferCapability
     *
     * @brief Accessor and modifier functions for the %TransferCapability
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CDM::DicomTransferCapability TransferCapabilityType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< TransferCapabilityType > TransferCapabilitySequence;

    /**
     * @brief Element iterator type.
     */
    typedef TransferCapabilitySequence::iterator TransferCapabilityIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef TransferCapabilitySequence::const_iterator TransferCapabilityConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< TransferCapabilityType, char > TransferCapabilityTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const TransferCapabilitySequence&
    getTransferCapability () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    TransferCapabilitySequence&
    getTransferCapability ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setTransferCapability (const TransferCapabilitySequence& s);

    //@}

    /**
     * @name ApplicationCluster
     *
     * @brief Accessor and modifier functions for the %ApplicationCluster
     * sequence element.
     *
     * Can be used to group DICOM Application Entities into a DICOM
     * Application Clusters
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CDM::LocalizedText ApplicationClusterType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< ApplicationClusterType > ApplicationClusterSequence;

    /**
     * @brief Element iterator type.
     */
    typedef ApplicationClusterSequence::iterator ApplicationClusterIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef ApplicationClusterSequence::const_iterator ApplicationClusterConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ApplicationClusterType, char > ApplicationClusterTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const ApplicationClusterSequence&
    getApplicationCluster () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    ApplicationClusterSequence&
    getApplicationCluster ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setApplicationCluster (const ApplicationClusterSequence& s);

    //@}

    /**
     * @name SupportedCharacterSet
     *
     * @brief Accessor and modifier functions for the %SupportedCharacterSet
     * sequence element.
     *
     * Character set supported by this Application Entity. All permitted
     * values can be found in part 3 of the DICOM standard (look for
     * "Specific Charcter Set"). Example: Use "ISO_IR 192" for UTF-8.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String SupportedCharacterSetType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< SupportedCharacterSetType > SupportedCharacterSetSequence;

    /**
     * @brief Element iterator type.
     */
    typedef SupportedCharacterSetSequence::iterator SupportedCharacterSetIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef SupportedCharacterSetSequence::const_iterator SupportedCharacterSetConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SupportedCharacterSetType, char > SupportedCharacterSetTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const SupportedCharacterSetSequence&
    getSupportedCharacterSet () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    SupportedCharacterSetSequence&
    getSupportedCharacterSet ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setSupportedCharacterSet (const SupportedCharacterSetSequence& s);

    //@}

    /**
     * @name Description
     *
     * @brief Accessor and modifier functions for the %Description
     * sequence element.
     *
     * Free text description of this Application Entity
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CDM::LocalizedText DescriptionType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< DescriptionType > DescriptionSequence;

    /**
     * @brief Element iterator type.
     */
    typedef DescriptionSequence::iterator DescriptionIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef DescriptionSequence::const_iterator DescriptionConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DescriptionType, char > DescriptionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const DescriptionSequence&
    getDescription () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    DescriptionSequence&
    getDescription ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setDescription (const DescriptionSequence& s);

    //@}

    /**
     * @name AeTitle
     *
     * @brief Accessor and modifier functions for the %AeTitle
     * required attribute.
     *
     * The AE Title defines a DICOM networking component uniquely on a
     * network.  Maximally 16 characters (ASCII, only upper case characters
     * and numbers highly recommended)
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String AeTitleType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< AeTitleType, char > AeTitleTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const AeTitleType&
    getAeTitle () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    AeTitleType&
    getAeTitle ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setAeTitle (const AeTitleType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setAeTitle (::std::unique_ptr< AeTitleType > p);

    //@}

    /**
     * @name NetworkConnectionReference
     *
     * @brief Accessor and modifier functions for the %NetworkConnectionReference
     * required attribute.
     *
     * The network connection that this AE uses
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Idrefs NetworkConnectionReferenceType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< NetworkConnectionReferenceType, char > NetworkConnectionReferenceTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const NetworkConnectionReferenceType&
    getNetworkConnectionReference () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    NetworkConnectionReferenceType&
    getNetworkConnectionReference ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setNetworkConnectionReference (const NetworkConnectionReferenceType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setNetworkConnectionReference (::std::unique_ptr< NetworkConnectionReferenceType > p);

    //@}

    /**
     * @name AssociationInitiator
     *
     * @brief Accessor and modifier functions for the %AssociationInitiator
     * required attribute.
     *
     * TRUE if  this AE may initiate connection (association) requests ,
     * FALSE otherwise
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Boolean AssociationInitiatorType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< AssociationInitiatorType, char > AssociationInitiatorTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const AssociationInitiatorType&
    getAssociationInitiator () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    AssociationInitiatorType&
    getAssociationInitiator ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setAssociationInitiator (const AssociationInitiatorType& x);

    //@}

    /**
     * @name AssociationAcceptor
     *
     * @brief Accessor and modifier functions for the %AssociationAcceptor
     * required attribute.
     *
     * TRUE if  this AE may accept connection (association) requests , FALSE
     * otherwise
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Boolean AssociationAcceptorType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< AssociationAcceptorType, char > AssociationAcceptorTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const AssociationAcceptorType&
    getAssociationAcceptor () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    AssociationAcceptorType&
    getAssociationAcceptor ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setAssociationAcceptor (const AssociationAcceptorType& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DicomNetworkAe (const AeTitleType&,
                    const NetworkConnectionReferenceType&,
                    const AssociationInitiatorType&,
                    const AssociationAcceptorType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DicomNetworkAe (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DicomNetworkAe (const DicomNetworkAe& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DicomNetworkAe*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DicomNetworkAe&
    operator= (const DicomNetworkAe& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~DicomNetworkAe ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    TransferCapabilitySequence TransferCapability_;
    ApplicationClusterSequence ApplicationCluster_;
    SupportedCharacterSetSequence SupportedCharacterSet_;
    DescriptionSequence Description_;
    ::xsd::cxx::tree::one< AeTitleType > AeTitle_;
    ::xsd::cxx::tree::one< NetworkConnectionReferenceType > NetworkConnectionReference_;
    ::xsd::cxx::tree::one< AssociationInitiatorType > AssociationInitiator_;
    ::xsd::cxx::tree::one< AssociationAcceptorType > AssociationAcceptor_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %DicomNetworkConnection schema type.
   *
   * A DICOM network connection (identified by its ID for reference
   * purposes, especially from the DICOMNetworkAE type), is described by a
   * host name (can be an IP address) and TCP port number.
   *
   * @nosubgrouping
   */
  class DicomNetworkConnection: public ::xml_schema::Type
  {
    public:
    /**
     * @name TlsCipherSuite
     *
     * @brief Accessor and modifier functions for the %TlsCipherSuite
     * sequence element.
     *
     * TLS Cipher Suites supported by this device. See DICOM standard part 15
     * for valid values (section on "Secure Transport Connection Profiles").
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String TlsCipherSuiteType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< TlsCipherSuiteType > TlsCipherSuiteSequence;

    /**
     * @brief Element iterator type.
     */
    typedef TlsCipherSuiteSequence::iterator TlsCipherSuiteIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef TlsCipherSuiteSequence::const_iterator TlsCipherSuiteConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< TlsCipherSuiteType, char > TlsCipherSuiteTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const TlsCipherSuiteSequence&
    getTlsCipherSuite () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    TlsCipherSuiteSequence&
    getTlsCipherSuite ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setTlsCipherSuite (const TlsCipherSuiteSequence& s);

    //@}

    /**
     * @name id
     *
     * @brief Accessor and modifier functions for the %id
     * required attribute.
     *
     * Unique ID for this network connections. Referenced by DICOMNetworkAE
     * type in order to bind an AE to a network connection.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::Id IdType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const IdType&
    getId () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    IdType&
    getId ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setId (const IdType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setId (::std::unique_ptr< IdType > p);

    //@}

    /**
     * @name Hostname
     *
     * @brief Accessor and modifier functions for the %Hostname
     * required attribute.
     *
     * Hostname or IP address
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String HostnameType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< HostnameType, char > HostnameTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const HostnameType&
    getHostname () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    HostnameType&
    getHostname ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setHostname (const HostnameType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    setHostname (::std::unique_ptr< HostnameType > p);

    //@}

    /**
     * @name Port
     *
     * @brief Accessor and modifier functions for the %Port
     * optional attribute.
     *
     * TCP-Port
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::UnsignedShort PortType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< PortType > PortOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< PortType, char > PortTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const PortOptional&
    getPort () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    PortOptional&
    getPort ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setPort (const PortType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    setPort (const PortOptional& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DicomNetworkConnection (const IdType&,
                            const HostnameType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DicomNetworkConnection (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DicomNetworkConnection (const DicomNetworkConnection& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DicomNetworkConnection*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DicomNetworkConnection&
    operator= (const DicomNetworkConnection& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~DicomNetworkConnection ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    TlsCipherSuiteSequence TlsCipherSuite_;
    ::xsd::cxx::tree::one< IdType > id_;
    ::xsd::cxx::tree::one< HostnameType > Hostname_;
    PortOptional Port_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %DicomDeviceDescriptor schema type.
   *
   * General description of a DICOM device. Includes basic description of
   * the device which may also be taken over into any DICOM objects created
   * by the device.
   *
   * @nosubgrouping
   */
  class DicomDeviceDescriptor: public ::CDM::AbstractComplexDeviceComponentDescriptor
  {
    public:
    /**
     * @name NetworkAe
     *
     * @brief Accessor and modifier functions for the %NetworkAe
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CDM::DicomNetworkAe NetworkAeType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< NetworkAeType > NetworkAeSequence;

    /**
     * @brief Element iterator type.
     */
    typedef NetworkAeSequence::iterator NetworkAeIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef NetworkAeSequence::const_iterator NetworkAeConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< NetworkAeType, char > NetworkAeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const NetworkAeSequence&
    getNetworkAe () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    NetworkAeSequence&
    getNetworkAe ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setNetworkAe (const NetworkAeSequence& s);

    //@}

    /**
     * @name NetworkConnection
     *
     * @brief Accessor and modifier functions for the %NetworkConnection
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CDM::DicomNetworkConnection NetworkConnectionType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< NetworkConnectionType > NetworkConnectionSequence;

    /**
     * @brief Element iterator type.
     */
    typedef NetworkConnectionSequence::iterator NetworkConnectionIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef NetworkConnectionSequence::const_iterator NetworkConnectionConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< NetworkConnectionType, char > NetworkConnectionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const NetworkConnectionSequence&
    getNetworkConnection () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    NetworkConnectionSequence&
    getNetworkConnection ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setNetworkConnection (const NetworkConnectionSequence& s);

    //@}

    /**
     * @name SoftwareVersion
     *
     * @brief Accessor and modifier functions for the %SoftwareVersion
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String SoftwareVersionType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< SoftwareVersionType > SoftwareVersionSequence;

    /**
     * @brief Element iterator type.
     */
    typedef SoftwareVersionSequence::iterator SoftwareVersionIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef SoftwareVersionSequence::const_iterator SoftwareVersionConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SoftwareVersionType, char > SoftwareVersionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const SoftwareVersionSequence&
    getSoftwareVersion () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    SoftwareVersionSequence&
    getSoftwareVersion ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setSoftwareVersion (const SoftwareVersionSequence& s);

    //@}

    /**
     * @name InstitutionName
     *
     * @brief Accessor and modifier functions for the %InstitutionName
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CDM::LocalizedText InstitutionNameType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< InstitutionNameType > InstitutionNameSequence;

    /**
     * @brief Element iterator type.
     */
    typedef InstitutionNameSequence::iterator InstitutionNameIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef InstitutionNameSequence::const_iterator InstitutionNameConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< InstitutionNameType, char > InstitutionNameTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const InstitutionNameSequence&
    getInstitutionName () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    InstitutionNameSequence&
    getInstitutionName ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setInstitutionName (const InstitutionNameSequence& s);

    //@}

    /**
     * @name InstitutionAddress
     *
     * @brief Accessor and modifier functions for the %InstitutionAddress
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CDM::LocalizedText InstitutionAddressType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< InstitutionAddressType > InstitutionAddressSequence;

    /**
     * @brief Element iterator type.
     */
    typedef InstitutionAddressSequence::iterator InstitutionAddressIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef InstitutionAddressSequence::const_iterator InstitutionAddressConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< InstitutionAddressType, char > InstitutionAddressTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const InstitutionAddressSequence&
    getInstitutionAddress () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    InstitutionAddressSequence&
    getInstitutionAddress ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setInstitutionAddress (const InstitutionAddressSequence& s);

    //@}

    /**
     * @name InstitutionalDepartmentName
     *
     * @brief Accessor and modifier functions for the %InstitutionalDepartmentName
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CDM::LocalizedText InstitutionalDepartmentNameType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< InstitutionalDepartmentNameType > InstitutionalDepartmentNameSequence;

    /**
     * @brief Element iterator type.
     */
    typedef InstitutionalDepartmentNameSequence::iterator InstitutionalDepartmentNameIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef InstitutionalDepartmentNameSequence::const_iterator InstitutionalDepartmentNameConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< InstitutionalDepartmentNameType, char > InstitutionalDepartmentNameTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const InstitutionalDepartmentNameSequence&
    getInstitutionalDepartmentName () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    InstitutionalDepartmentNameSequence&
    getInstitutionalDepartmentName ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setInstitutionalDepartmentName (const InstitutionalDepartmentNameSequence& s);

    //@}

    /**
     * @name PrimaryDeviceType
     *
     * @brief Accessor and modifier functions for the %PrimaryDeviceType
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CDM::LocalizedText PrimaryDeviceTypeType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< PrimaryDeviceTypeType > PrimaryDeviceTypeSequence;

    /**
     * @brief Element iterator type.
     */
    typedef PrimaryDeviceTypeSequence::iterator PrimaryDeviceTypeIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef PrimaryDeviceTypeSequence::const_iterator PrimaryDeviceTypeConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< PrimaryDeviceTypeType, char > PrimaryDeviceTypeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const PrimaryDeviceTypeSequence&
    getPrimaryDeviceType () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    PrimaryDeviceTypeSequence&
    getPrimaryDeviceType ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setPrimaryDeviceType (const PrimaryDeviceTypeSequence& s);

    //@}

    /**
     * @name PublicCertificate
     *
     * @brief Accessor and modifier functions for the %PublicCertificate
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Base64Binary PublicCertificateType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< PublicCertificateType > PublicCertificateSequence;

    /**
     * @brief Element iterator type.
     */
    typedef PublicCertificateSequence::iterator PublicCertificateIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef PublicCertificateSequence::const_iterator PublicCertificateConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< PublicCertificateType, char > PublicCertificateTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const PublicCertificateSequence&
    getPublicCertificate () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    PublicCertificateSequence&
    getPublicCertificate ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setPublicCertificate (const PublicCertificateSequence& s);

    //@}

    /**
     * @name Description
     *
     * @brief Accessor and modifier functions for the %Description
     * sequence element.
     *
     * Free text description of this device
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CDM::LocalizedText DescriptionType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< DescriptionType > DescriptionSequence;

    /**
     * @brief Element iterator type.
     */
    typedef DescriptionSequence::iterator DescriptionIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef DescriptionSequence::const_iterator DescriptionConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DescriptionType, char > DescriptionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const DescriptionSequence&
    getDescription () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    DescriptionSequence&
    getDescription ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setDescription (const DescriptionSequence& s);

    //@}

    /**
     * @name StationName
     *
     * @brief Accessor and modifier functions for the %StationName
     * sequence element.
     *
     * Free text station name, e.g. "High resolution CT 1"
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CDM::LocalizedText StationNameType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< StationNameType > StationNameSequence;

    /**
     * @brief Element iterator type.
     */
    typedef StationNameSequence::iterator StationNameIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef StationNameSequence::const_iterator StationNameConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< StationNameType, char > StationNameTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const StationNameSequence&
    getStationName () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    StationNameSequence&
    getStationName ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    setStationName (const StationNameSequence& s);

    //@}

    /**
     * @name IssuerOfPatientID
     *
     * @brief Accessor and modifier functions for the %IssuerOfPatientID
     * optional attribute.
     *
     * Issuer of Patient ID as written to the any DICOM objects that are
     * created by this device.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::String IssuerOfPatientIDType;

    /**
     * @brief Attribute optional container type.
     */
    typedef ::xsd::cxx::tree::optional< IssuerOfPatientIDType > IssuerOfPatientIDOptional;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< IssuerOfPatientIDType, char > IssuerOfPatientIDTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const IssuerOfPatientIDOptional&
    getIssuerOfPatientID () const;

    /**
     * @brief Return a read-write reference to the attribute container.
     *
     * @return A reference to the optional container.
     */
    IssuerOfPatientIDOptional&
    getIssuerOfPatientID ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    setIssuerOfPatientID (const IssuerOfPatientIDType& x);

    /**
     * @brief Set the attribute value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the attribute.
     * Otherwise the attribute container is set the 'not present' state.
     */
    void
    setIssuerOfPatientID (const IssuerOfPatientIDOptional& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    setIssuerOfPatientID (::std::unique_ptr< IssuerOfPatientIDType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DicomDeviceDescriptor (const HandleType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DicomDeviceDescriptor (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DicomDeviceDescriptor (const DicomDeviceDescriptor& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DicomDeviceDescriptor*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DicomDeviceDescriptor&
    operator= (const DicomDeviceDescriptor& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~DicomDeviceDescriptor ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    NetworkAeSequence NetworkAe_;
    NetworkConnectionSequence NetworkConnection_;
    SoftwareVersionSequence SoftwareVersion_;
    InstitutionNameSequence InstitutionName_;
    InstitutionAddressSequence InstitutionAddress_;
    InstitutionalDepartmentNameSequence InstitutionalDepartmentName_;
    PrimaryDeviceTypeSequence PrimaryDeviceType_;
    PublicCertificateSequence PublicCertificate_;
    DescriptionSequence Description_;
    StationNameSequence StationName_;
    IssuerOfPatientIDOptional IssuerOfPatientID_;

    //@endcond
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace CDM
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace CDM
{
  void
  operator<< (::xercesc::DOMElement&, const DicomTransferRole&);

  void
  operator<< (::xercesc::DOMAttr&, const DicomTransferRole&);

  void
  operator<< (::xml_schema::ListStream&,
              const DicomTransferRole&);

  void
  operator<< (::xercesc::DOMElement&, const DicomTransferCapability&);

  void
  operator<< (::xercesc::DOMElement&, const DicomNetworkAe&);

  void
  operator<< (::xercesc::DOMElement&, const DicomNetworkConnection&);

  void
  operator<< (::xercesc::DOMElement&, const DicomDeviceDescriptor&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // DICOMDEVICE_DESCRIPTION_HXX
