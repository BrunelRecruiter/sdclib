// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "DICOMDeviceDescription.hxx"

namespace CDM
{
  // DicomTransferRole
  // 

  DicomTransferRole::
  DicomTransferRole (Value v)
  : ::xml_schema::String (_xsd_DicomTransferRole_literals_[v])
  {
  }

  DicomTransferRole::
  DicomTransferRole (const char* v)
  : ::xml_schema::String (v)
  {
  }

  DicomTransferRole::
  DicomTransferRole (const ::std::string& v)
  : ::xml_schema::String (v)
  {
  }

  DicomTransferRole::
  DicomTransferRole (const ::xml_schema::String& v)
  : ::xml_schema::String (v)
  {
  }

  DicomTransferRole::
  DicomTransferRole (const DicomTransferRole& v,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::String (v, f, c)
  {
  }

  DicomTransferRole& DicomTransferRole::
  operator= (Value v)
  {
    static_cast< ::xml_schema::String& > (*this) = 
    ::xml_schema::String (_xsd_DicomTransferRole_literals_[v]);

    return *this;
  }


  // DicomTransferCapability
  // 

  const DicomTransferCapability::TransferSyntaxSequence& DicomTransferCapability::
  TransferSyntax () const
  {
    return this->TransferSyntax_;
  }

  DicomTransferCapability::TransferSyntaxSequence& DicomTransferCapability::
  TransferSyntax ()
  {
    return this->TransferSyntax_;
  }

  void DicomTransferCapability::
  TransferSyntax (const TransferSyntaxSequence& s)
  {
    this->TransferSyntax_ = s;
  }

  const DicomTransferCapability::SopClassType& DicomTransferCapability::
  SopClass () const
  {
    return this->SopClass_.get ();
  }

  DicomTransferCapability::SopClassType& DicomTransferCapability::
  SopClass ()
  {
    return this->SopClass_.get ();
  }

  void DicomTransferCapability::
  SopClass (const SopClassType& x)
  {
    this->SopClass_.set (x);
  }

  void DicomTransferCapability::
  SopClass (::std::unique_ptr< SopClassType > x)
  {
    this->SopClass_.set (std::move (x));
  }

  const DicomTransferCapability::TransferRoleType& DicomTransferCapability::
  TransferRole () const
  {
    return this->TransferRole_.get ();
  }

  DicomTransferCapability::TransferRoleType& DicomTransferCapability::
  TransferRole ()
  {
    return this->TransferRole_.get ();
  }

  void DicomTransferCapability::
  TransferRole (const TransferRoleType& x)
  {
    this->TransferRole_.set (x);
  }

  void DicomTransferCapability::
  TransferRole (::std::unique_ptr< TransferRoleType > x)
  {
    this->TransferRole_.set (std::move (x));
  }


  // DicomNetworkAe
  // 

  const DicomNetworkAe::TransferCapabilitySequence& DicomNetworkAe::
  TransferCapability () const
  {
    return this->TransferCapability_;
  }

  DicomNetworkAe::TransferCapabilitySequence& DicomNetworkAe::
  TransferCapability ()
  {
    return this->TransferCapability_;
  }

  void DicomNetworkAe::
  TransferCapability (const TransferCapabilitySequence& s)
  {
    this->TransferCapability_ = s;
  }

  const DicomNetworkAe::ApplicationClusterSequence& DicomNetworkAe::
  ApplicationCluster () const
  {
    return this->ApplicationCluster_;
  }

  DicomNetworkAe::ApplicationClusterSequence& DicomNetworkAe::
  ApplicationCluster ()
  {
    return this->ApplicationCluster_;
  }

  void DicomNetworkAe::
  ApplicationCluster (const ApplicationClusterSequence& s)
  {
    this->ApplicationCluster_ = s;
  }

  const DicomNetworkAe::SupportedCharacterSetSequence& DicomNetworkAe::
  SupportedCharacterSet () const
  {
    return this->SupportedCharacterSet_;
  }

  DicomNetworkAe::SupportedCharacterSetSequence& DicomNetworkAe::
  SupportedCharacterSet ()
  {
    return this->SupportedCharacterSet_;
  }

  void DicomNetworkAe::
  SupportedCharacterSet (const SupportedCharacterSetSequence& s)
  {
    this->SupportedCharacterSet_ = s;
  }

  const DicomNetworkAe::DescriptionSequence& DicomNetworkAe::
  Description () const
  {
    return this->Description_;
  }

  DicomNetworkAe::DescriptionSequence& DicomNetworkAe::
  Description ()
  {
    return this->Description_;
  }

  void DicomNetworkAe::
  Description (const DescriptionSequence& s)
  {
    this->Description_ = s;
  }

  const DicomNetworkAe::AeTitleType& DicomNetworkAe::
  AeTitle () const
  {
    return this->AeTitle_.get ();
  }

  DicomNetworkAe::AeTitleType& DicomNetworkAe::
  AeTitle ()
  {
    return this->AeTitle_.get ();
  }

  void DicomNetworkAe::
  AeTitle (const AeTitleType& x)
  {
    this->AeTitle_.set (x);
  }

  void DicomNetworkAe::
  AeTitle (::std::unique_ptr< AeTitleType > x)
  {
    this->AeTitle_.set (std::move (x));
  }

  const DicomNetworkAe::NetworkConnectionReferenceType& DicomNetworkAe::
  NetworkConnectionReference () const
  {
    return this->NetworkConnectionReference_.get ();
  }

  DicomNetworkAe::NetworkConnectionReferenceType& DicomNetworkAe::
  NetworkConnectionReference ()
  {
    return this->NetworkConnectionReference_.get ();
  }

  void DicomNetworkAe::
  NetworkConnectionReference (const NetworkConnectionReferenceType& x)
  {
    this->NetworkConnectionReference_.set (x);
  }

  void DicomNetworkAe::
  NetworkConnectionReference (::std::unique_ptr< NetworkConnectionReferenceType > x)
  {
    this->NetworkConnectionReference_.set (std::move (x));
  }

  const DicomNetworkAe::AssociationInitiatorType& DicomNetworkAe::
  AssociationInitiator () const
  {
    return this->AssociationInitiator_.get ();
  }

  DicomNetworkAe::AssociationInitiatorType& DicomNetworkAe::
  AssociationInitiator ()
  {
    return this->AssociationInitiator_.get ();
  }

  void DicomNetworkAe::
  AssociationInitiator (const AssociationInitiatorType& x)
  {
    this->AssociationInitiator_.set (x);
  }

  const DicomNetworkAe::AssociationAcceptorType& DicomNetworkAe::
  AssociationAcceptor () const
  {
    return this->AssociationAcceptor_.get ();
  }

  DicomNetworkAe::AssociationAcceptorType& DicomNetworkAe::
  AssociationAcceptor ()
  {
    return this->AssociationAcceptor_.get ();
  }

  void DicomNetworkAe::
  AssociationAcceptor (const AssociationAcceptorType& x)
  {
    this->AssociationAcceptor_.set (x);
  }


  // DicomNetworkConnection
  // 

  const DicomNetworkConnection::TlsCipherSuiteSequence& DicomNetworkConnection::
  TlsCipherSuite () const
  {
    return this->TlsCipherSuite_;
  }

  DicomNetworkConnection::TlsCipherSuiteSequence& DicomNetworkConnection::
  TlsCipherSuite ()
  {
    return this->TlsCipherSuite_;
  }

  void DicomNetworkConnection::
  TlsCipherSuite (const TlsCipherSuiteSequence& s)
  {
    this->TlsCipherSuite_ = s;
  }

  const DicomNetworkConnection::IdType& DicomNetworkConnection::
  id () const
  {
    return this->id_.get ();
  }

  DicomNetworkConnection::IdType& DicomNetworkConnection::
  id ()
  {
    return this->id_.get ();
  }

  void DicomNetworkConnection::
  id (const IdType& x)
  {
    this->id_.set (x);
  }

  void DicomNetworkConnection::
  id (::std::unique_ptr< IdType > x)
  {
    this->id_.set (std::move (x));
  }

  const DicomNetworkConnection::HostnameType& DicomNetworkConnection::
  Hostname () const
  {
    return this->Hostname_.get ();
  }

  DicomNetworkConnection::HostnameType& DicomNetworkConnection::
  Hostname ()
  {
    return this->Hostname_.get ();
  }

  void DicomNetworkConnection::
  Hostname (const HostnameType& x)
  {
    this->Hostname_.set (x);
  }

  void DicomNetworkConnection::
  Hostname (::std::unique_ptr< HostnameType > x)
  {
    this->Hostname_.set (std::move (x));
  }

  const DicomNetworkConnection::PortOptional& DicomNetworkConnection::
  Port () const
  {
    return this->Port_;
  }

  DicomNetworkConnection::PortOptional& DicomNetworkConnection::
  Port ()
  {
    return this->Port_;
  }

  void DicomNetworkConnection::
  Port (const PortType& x)
  {
    this->Port_.set (x);
  }

  void DicomNetworkConnection::
  Port (const PortOptional& x)
  {
    this->Port_ = x;
  }


  // DicomDeviceDescriptor
  // 

  const DicomDeviceDescriptor::NetworkAeSequence& DicomDeviceDescriptor::
  NetworkAe () const
  {
    return this->NetworkAe_;
  }

  DicomDeviceDescriptor::NetworkAeSequence& DicomDeviceDescriptor::
  NetworkAe ()
  {
    return this->NetworkAe_;
  }

  void DicomDeviceDescriptor::
  NetworkAe (const NetworkAeSequence& s)
  {
    this->NetworkAe_ = s;
  }

  const DicomDeviceDescriptor::NetworkConnectionSequence& DicomDeviceDescriptor::
  NetworkConnection () const
  {
    return this->NetworkConnection_;
  }

  DicomDeviceDescriptor::NetworkConnectionSequence& DicomDeviceDescriptor::
  NetworkConnection ()
  {
    return this->NetworkConnection_;
  }

  void DicomDeviceDescriptor::
  NetworkConnection (const NetworkConnectionSequence& s)
  {
    this->NetworkConnection_ = s;
  }

  const DicomDeviceDescriptor::SoftwareVersionSequence& DicomDeviceDescriptor::
  SoftwareVersion () const
  {
    return this->SoftwareVersion_;
  }

  DicomDeviceDescriptor::SoftwareVersionSequence& DicomDeviceDescriptor::
  SoftwareVersion ()
  {
    return this->SoftwareVersion_;
  }

  void DicomDeviceDescriptor::
  SoftwareVersion (const SoftwareVersionSequence& s)
  {
    this->SoftwareVersion_ = s;
  }

  const DicomDeviceDescriptor::InstitutionNameSequence& DicomDeviceDescriptor::
  InstitutionName () const
  {
    return this->InstitutionName_;
  }

  DicomDeviceDescriptor::InstitutionNameSequence& DicomDeviceDescriptor::
  InstitutionName ()
  {
    return this->InstitutionName_;
  }

  void DicomDeviceDescriptor::
  InstitutionName (const InstitutionNameSequence& s)
  {
    this->InstitutionName_ = s;
  }

  const DicomDeviceDescriptor::InstitutionAddressSequence& DicomDeviceDescriptor::
  InstitutionAddress () const
  {
    return this->InstitutionAddress_;
  }

  DicomDeviceDescriptor::InstitutionAddressSequence& DicomDeviceDescriptor::
  InstitutionAddress ()
  {
    return this->InstitutionAddress_;
  }

  void DicomDeviceDescriptor::
  InstitutionAddress (const InstitutionAddressSequence& s)
  {
    this->InstitutionAddress_ = s;
  }

  const DicomDeviceDescriptor::InstitutionalDepartmentNameSequence& DicomDeviceDescriptor::
  InstitutionalDepartmentName () const
  {
    return this->InstitutionalDepartmentName_;
  }

  DicomDeviceDescriptor::InstitutionalDepartmentNameSequence& DicomDeviceDescriptor::
  InstitutionalDepartmentName ()
  {
    return this->InstitutionalDepartmentName_;
  }

  void DicomDeviceDescriptor::
  InstitutionalDepartmentName (const InstitutionalDepartmentNameSequence& s)
  {
    this->InstitutionalDepartmentName_ = s;
  }

  const DicomDeviceDescriptor::PrimaryDeviceTypeSequence& DicomDeviceDescriptor::
  PrimaryDeviceType () const
  {
    return this->PrimaryDeviceType_;
  }

  DicomDeviceDescriptor::PrimaryDeviceTypeSequence& DicomDeviceDescriptor::
  PrimaryDeviceType ()
  {
    return this->PrimaryDeviceType_;
  }

  void DicomDeviceDescriptor::
  PrimaryDeviceType (const PrimaryDeviceTypeSequence& s)
  {
    this->PrimaryDeviceType_ = s;
  }

  const DicomDeviceDescriptor::PublicCertificateSequence& DicomDeviceDescriptor::
  PublicCertificate () const
  {
    return this->PublicCertificate_;
  }

  DicomDeviceDescriptor::PublicCertificateSequence& DicomDeviceDescriptor::
  PublicCertificate ()
  {
    return this->PublicCertificate_;
  }

  void DicomDeviceDescriptor::
  PublicCertificate (const PublicCertificateSequence& s)
  {
    this->PublicCertificate_ = s;
  }

  const DicomDeviceDescriptor::DescriptionSequence& DicomDeviceDescriptor::
  Description () const
  {
    return this->Description_;
  }

  DicomDeviceDescriptor::DescriptionSequence& DicomDeviceDescriptor::
  Description ()
  {
    return this->Description_;
  }

  void DicomDeviceDescriptor::
  Description (const DescriptionSequence& s)
  {
    this->Description_ = s;
  }

  const DicomDeviceDescriptor::StationNameSequence& DicomDeviceDescriptor::
  StationName () const
  {
    return this->StationName_;
  }

  DicomDeviceDescriptor::StationNameSequence& DicomDeviceDescriptor::
  StationName ()
  {
    return this->StationName_;
  }

  void DicomDeviceDescriptor::
  StationName (const StationNameSequence& s)
  {
    this->StationName_ = s;
  }

  const DicomDeviceDescriptor::IssuerOfPatientIDOptional& DicomDeviceDescriptor::
  IssuerOfPatientID () const
  {
    return this->IssuerOfPatientID_;
  }

  DicomDeviceDescriptor::IssuerOfPatientIDOptional& DicomDeviceDescriptor::
  IssuerOfPatientID ()
  {
    return this->IssuerOfPatientID_;
  }

  void DicomDeviceDescriptor::
  IssuerOfPatientID (const IssuerOfPatientIDType& x)
  {
    this->IssuerOfPatientID_.set (x);
  }

  void DicomDeviceDescriptor::
  IssuerOfPatientID (const IssuerOfPatientIDOptional& x)
  {
    this->IssuerOfPatientID_ = x;
  }

  void DicomDeviceDescriptor::
  IssuerOfPatientID (::std::unique_ptr< IssuerOfPatientIDType > x)
  {
    this->IssuerOfPatientID_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace CDM
{
  // DicomTransferRole
  //

  DicomTransferRole::
  DicomTransferRole (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::String (e, f, c)
  {
    _xsd_DicomTransferRole_convert ();
  }

  DicomTransferRole::
  DicomTransferRole (const ::xercesc::DOMAttr& a,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::String (a, f, c)
  {
    _xsd_DicomTransferRole_convert ();
  }

  DicomTransferRole::
  DicomTransferRole (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::xml_schema::String (s, e, f, c)
  {
    _xsd_DicomTransferRole_convert ();
  }

  DicomTransferRole* DicomTransferRole::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DicomTransferRole (*this, f, c);
  }

  DicomTransferRole::Value DicomTransferRole::
  _xsd_DicomTransferRole_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DicomTransferRole_literals_);
    const Value* i (::std::lower_bound (
                      _xsd_DicomTransferRole_indexes_,
                      _xsd_DicomTransferRole_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_DicomTransferRole_indexes_ + 2 || _xsd_DicomTransferRole_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const DicomTransferRole::
  _xsd_DicomTransferRole_literals_[2] =
  {
    "Scu",
    "Scp"
  };

  const DicomTransferRole::Value DicomTransferRole::
  _xsd_DicomTransferRole_indexes_[2] =
  {
    ::CDM::DicomTransferRole::Scp,
    ::CDM::DicomTransferRole::Scu
  };

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DicomTransferRole >
  _xsd_DicomTransferRole_type_factory_init (
    "DicomTransferRole",
    "http://dicom-extension-uri/09/08");

  // DicomTransferCapability
  //

  DicomTransferCapability::
  DicomTransferCapability (const SopClassType& SopClass,
                           const TransferRoleType& TransferRole)
  : ::xml_schema::Type (),
    TransferSyntax_ (this),
    SopClass_ (SopClass, this),
    TransferRole_ (TransferRole, this)
  {
  }

  DicomTransferCapability::
  DicomTransferCapability (const DicomTransferCapability& x,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    TransferSyntax_ (x.TransferSyntax_, f, this),
    SopClass_ (x.SopClass_, f, this),
    TransferRole_ (x.TransferRole_, f, this)
  {
  }

  DicomTransferCapability::
  DicomTransferCapability (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    TransferSyntax_ (this),
    SopClass_ (this),
    TransferRole_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void DicomTransferCapability::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // TransferSyntax
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "TransferSyntax",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< TransferSyntaxType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< TransferSyntaxType > r (
            dynamic_cast< TransferSyntaxType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->TransferSyntax_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "SopClass" && n.namespace_ ().empty ())
      {
        this->SopClass_.set (SopClassTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "TransferRole" && n.namespace_ ().empty ())
      {
        this->TransferRole_.set (TransferRoleTraits::create (i, f, this));
        continue;
      }
    }

    if (!SopClass_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "SopClass",
        "");
    }

    if (!TransferRole_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "TransferRole",
        "");
    }
  }

  DicomTransferCapability* DicomTransferCapability::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DicomTransferCapability (*this, f, c);
  }

  DicomTransferCapability& DicomTransferCapability::
  operator= (const DicomTransferCapability& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->TransferSyntax_ = x.TransferSyntax_;
      this->SopClass_ = x.SopClass_;
      this->TransferRole_ = x.TransferRole_;
    }

    return *this;
  }

  DicomTransferCapability::
  ~DicomTransferCapability ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DicomTransferCapability >
  _xsd_DicomTransferCapability_type_factory_init (
    "DicomTransferCapability",
    "http://dicom-extension-uri/09/08");

  // DicomNetworkAe
  //

  DicomNetworkAe::
  DicomNetworkAe (const AeTitleType& AeTitle,
                  const NetworkConnectionReferenceType& NetworkConnectionReference,
                  const AssociationInitiatorType& AssociationInitiator,
                  const AssociationAcceptorType& AssociationAcceptor)
  : ::xml_schema::Type (),
    TransferCapability_ (this),
    ApplicationCluster_ (this),
    SupportedCharacterSet_ (this),
    Description_ (this),
    AeTitle_ (AeTitle, this),
    NetworkConnectionReference_ (NetworkConnectionReference, this),
    AssociationInitiator_ (AssociationInitiator, this),
    AssociationAcceptor_ (AssociationAcceptor, this)
  {
  }

  DicomNetworkAe::
  DicomNetworkAe (const DicomNetworkAe& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    TransferCapability_ (x.TransferCapability_, f, this),
    ApplicationCluster_ (x.ApplicationCluster_, f, this),
    SupportedCharacterSet_ (x.SupportedCharacterSet_, f, this),
    Description_ (x.Description_, f, this),
    AeTitle_ (x.AeTitle_, f, this),
    NetworkConnectionReference_ (x.NetworkConnectionReference_, f, this),
    AssociationInitiator_ (x.AssociationInitiator_, f, this),
    AssociationAcceptor_ (x.AssociationAcceptor_, f, this)
  {
  }

  DicomNetworkAe::
  DicomNetworkAe (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    TransferCapability_ (this),
    ApplicationCluster_ (this),
    SupportedCharacterSet_ (this),
    Description_ (this),
    AeTitle_ (this),
    NetworkConnectionReference_ (this),
    AssociationInitiator_ (this),
    AssociationAcceptor_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void DicomNetworkAe::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // TransferCapability
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "TransferCapability",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< TransferCapabilityType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< TransferCapabilityType > r (
            dynamic_cast< TransferCapabilityType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->TransferCapability_.push_back (::std::move (r));
          continue;
        }
      }

      // ApplicationCluster
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ApplicationCluster",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< ApplicationClusterType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ApplicationClusterType > r (
            dynamic_cast< ApplicationClusterType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->ApplicationCluster_.push_back (::std::move (r));
          continue;
        }
      }

      // SupportedCharacterSet
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "SupportedCharacterSet",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< SupportedCharacterSetType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< SupportedCharacterSetType > r (
            dynamic_cast< SupportedCharacterSetType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->SupportedCharacterSet_.push_back (::std::move (r));
          continue;
        }
      }

      // Description
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Description",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< DescriptionType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< DescriptionType > r (
            dynamic_cast< DescriptionType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Description_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "AeTitle" && n.namespace_ ().empty ())
      {
        this->AeTitle_.set (AeTitleTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "NetworkConnectionReference" && n.namespace_ ().empty ())
      {
        this->NetworkConnectionReference_.set (NetworkConnectionReferenceTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "AssociationInitiator" && n.namespace_ ().empty ())
      {
        this->AssociationInitiator_.set (AssociationInitiatorTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "AssociationAcceptor" && n.namespace_ ().empty ())
      {
        this->AssociationAcceptor_.set (AssociationAcceptorTraits::create (i, f, this));
        continue;
      }
    }

    if (!AeTitle_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "AeTitle",
        "");
    }

    if (!NetworkConnectionReference_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "NetworkConnectionReference",
        "");
    }

    if (!AssociationInitiator_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "AssociationInitiator",
        "");
    }

    if (!AssociationAcceptor_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "AssociationAcceptor",
        "");
    }
  }

  DicomNetworkAe* DicomNetworkAe::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DicomNetworkAe (*this, f, c);
  }

  DicomNetworkAe& DicomNetworkAe::
  operator= (const DicomNetworkAe& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->TransferCapability_ = x.TransferCapability_;
      this->ApplicationCluster_ = x.ApplicationCluster_;
      this->SupportedCharacterSet_ = x.SupportedCharacterSet_;
      this->Description_ = x.Description_;
      this->AeTitle_ = x.AeTitle_;
      this->NetworkConnectionReference_ = x.NetworkConnectionReference_;
      this->AssociationInitiator_ = x.AssociationInitiator_;
      this->AssociationAcceptor_ = x.AssociationAcceptor_;
    }

    return *this;
  }

  DicomNetworkAe::
  ~DicomNetworkAe ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DicomNetworkAe >
  _xsd_DicomNetworkAe_type_factory_init (
    "DicomNetworkAe",
    "http://dicom-extension-uri/09/08");

  // DicomNetworkConnection
  //

  DicomNetworkConnection::
  DicomNetworkConnection (const IdType& id,
                          const HostnameType& Hostname)
  : ::xml_schema::Type (),
    TlsCipherSuite_ (this),
    id_ (id, this),
    Hostname_ (Hostname, this),
    Port_ (this)
  {
  }

  DicomNetworkConnection::
  DicomNetworkConnection (const DicomNetworkConnection& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    TlsCipherSuite_ (x.TlsCipherSuite_, f, this),
    id_ (x.id_, f, this),
    Hostname_ (x.Hostname_, f, this),
    Port_ (x.Port_, f, this)
  {
  }

  DicomNetworkConnection::
  DicomNetworkConnection (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    TlsCipherSuite_ (this),
    id_ (this),
    Hostname_ (this),
    Port_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void DicomNetworkConnection::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // TlsCipherSuite
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "TlsCipherSuite",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< TlsCipherSuiteType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< TlsCipherSuiteType > r (
            dynamic_cast< TlsCipherSuiteType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->TlsCipherSuite_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (IdTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "Hostname" && n.namespace_ ().empty ())
      {
        this->Hostname_.set (HostnameTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "Port" && n.namespace_ ().empty ())
      {
        this->Port_.set (PortTraits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!Hostname_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "Hostname",
        "");
    }
  }

  DicomNetworkConnection* DicomNetworkConnection::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DicomNetworkConnection (*this, f, c);
  }

  DicomNetworkConnection& DicomNetworkConnection::
  operator= (const DicomNetworkConnection& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->TlsCipherSuite_ = x.TlsCipherSuite_;
      this->id_ = x.id_;
      this->Hostname_ = x.Hostname_;
      this->Port_ = x.Port_;
    }

    return *this;
  }

  DicomNetworkConnection::
  ~DicomNetworkConnection ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DicomNetworkConnection >
  _xsd_DicomNetworkConnection_type_factory_init (
    "DicomNetworkConnection",
    "http://dicom-extension-uri/09/08");

  // DicomDeviceDescriptor
  //

  DicomDeviceDescriptor::
  DicomDeviceDescriptor (const HandleType& Handle)
  : ::CDM::AbstractComplexDeviceComponentDescriptor (Handle),
    NetworkAe_ (this),
    NetworkConnection_ (this),
    SoftwareVersion_ (this),
    InstitutionName_ (this),
    InstitutionAddress_ (this),
    InstitutionalDepartmentName_ (this),
    PrimaryDeviceType_ (this),
    PublicCertificate_ (this),
    Description_ (this),
    StationName_ (this),
    IssuerOfPatientID_ (this)
  {
  }

  DicomDeviceDescriptor::
  DicomDeviceDescriptor (const DicomDeviceDescriptor& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::CDM::AbstractComplexDeviceComponentDescriptor (x, f, c),
    NetworkAe_ (x.NetworkAe_, f, this),
    NetworkConnection_ (x.NetworkConnection_, f, this),
    SoftwareVersion_ (x.SoftwareVersion_, f, this),
    InstitutionName_ (x.InstitutionName_, f, this),
    InstitutionAddress_ (x.InstitutionAddress_, f, this),
    InstitutionalDepartmentName_ (x.InstitutionalDepartmentName_, f, this),
    PrimaryDeviceType_ (x.PrimaryDeviceType_, f, this),
    PublicCertificate_ (x.PublicCertificate_, f, this),
    Description_ (x.Description_, f, this),
    StationName_ (x.StationName_, f, this),
    IssuerOfPatientID_ (x.IssuerOfPatientID_, f, this)
  {
  }

  DicomDeviceDescriptor::
  DicomDeviceDescriptor (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
  : ::CDM::AbstractComplexDeviceComponentDescriptor (e, f | ::xml_schema::Flags::base, c),
    NetworkAe_ (this),
    NetworkConnection_ (this),
    SoftwareVersion_ (this),
    InstitutionName_ (this),
    InstitutionAddress_ (this),
    InstitutionalDepartmentName_ (this),
    PrimaryDeviceType_ (this),
    PublicCertificate_ (this),
    Description_ (this),
    StationName_ (this),
    IssuerOfPatientID_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void DicomDeviceDescriptor::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::CDM::AbstractComplexDeviceComponentDescriptor::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // NetworkAe
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "NetworkAe",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< NetworkAeType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< NetworkAeType > r (
            dynamic_cast< NetworkAeType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->NetworkAe_.push_back (::std::move (r));
          continue;
        }
      }

      // NetworkConnection
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "NetworkConnection",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< NetworkConnectionType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< NetworkConnectionType > r (
            dynamic_cast< NetworkConnectionType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->NetworkConnection_.push_back (::std::move (r));
          continue;
        }
      }

      // SoftwareVersion
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "SoftwareVersion",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< SoftwareVersionType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< SoftwareVersionType > r (
            dynamic_cast< SoftwareVersionType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->SoftwareVersion_.push_back (::std::move (r));
          continue;
        }
      }

      // InstitutionName
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "InstitutionName",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< InstitutionNameType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< InstitutionNameType > r (
            dynamic_cast< InstitutionNameType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->InstitutionName_.push_back (::std::move (r));
          continue;
        }
      }

      // InstitutionAddress
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "InstitutionAddress",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< InstitutionAddressType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< InstitutionAddressType > r (
            dynamic_cast< InstitutionAddressType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->InstitutionAddress_.push_back (::std::move (r));
          continue;
        }
      }

      // InstitutionalDepartmentName
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "InstitutionalDepartmentName",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< InstitutionalDepartmentNameType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< InstitutionalDepartmentNameType > r (
            dynamic_cast< InstitutionalDepartmentNameType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->InstitutionalDepartmentName_.push_back (::std::move (r));
          continue;
        }
      }

      // PrimaryDeviceType
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "PrimaryDeviceType",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< PrimaryDeviceTypeType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< PrimaryDeviceTypeType > r (
            dynamic_cast< PrimaryDeviceTypeType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->PrimaryDeviceType_.push_back (::std::move (r));
          continue;
        }
      }

      // PublicCertificate
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "PublicCertificate",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< PublicCertificateType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< PublicCertificateType > r (
            dynamic_cast< PublicCertificateType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->PublicCertificate_.push_back (::std::move (r));
          continue;
        }
      }

      // Description
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Description",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< DescriptionType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< DescriptionType > r (
            dynamic_cast< DescriptionType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Description_.push_back (::std::move (r));
          continue;
        }
      }

      // StationName
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "StationName",
            "http://dicom-extension-uri/09/08",
            &::xsd::cxx::tree::factory_impl< StationNameType >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< StationNameType > r (
            dynamic_cast< StationNameType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->StationName_.push_back (::std::move (r));
          continue;
        }
      }

      break;
    }

    p.reset_attributes ();

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "IssuerOfPatientID" && n.namespace_ ().empty ())
      {
        this->IssuerOfPatientID_.set (IssuerOfPatientIDTraits::create (i, f, this));
        continue;
      }
    }
  }

  DicomDeviceDescriptor* DicomDeviceDescriptor::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DicomDeviceDescriptor (*this, f, c);
  }

  DicomDeviceDescriptor& DicomDeviceDescriptor::
  operator= (const DicomDeviceDescriptor& x)
  {
    if (this != &x)
    {
      static_cast< ::CDM::AbstractComplexDeviceComponentDescriptor& > (*this) = x;
      this->NetworkAe_ = x.NetworkAe_;
      this->NetworkConnection_ = x.NetworkConnection_;
      this->SoftwareVersion_ = x.SoftwareVersion_;
      this->InstitutionName_ = x.InstitutionName_;
      this->InstitutionAddress_ = x.InstitutionAddress_;
      this->InstitutionalDepartmentName_ = x.InstitutionalDepartmentName_;
      this->PrimaryDeviceType_ = x.PrimaryDeviceType_;
      this->PublicCertificate_ = x.PublicCertificate_;
      this->Description_ = x.Description_;
      this->StationName_ = x.StationName_;
      this->IssuerOfPatientID_ = x.IssuerOfPatientID_;
    }

    return *this;
  }

  DicomDeviceDescriptor::
  ~DicomDeviceDescriptor ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DicomDeviceDescriptor >
  _xsd_DicomDeviceDescriptor_type_factory_init (
    "DicomDeviceDescriptor",
    "http://dicom-extension-uri/09/08");
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace CDM
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace CDM
{
  void
  operator<< (::xercesc::DOMElement& e, const DicomTransferRole& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const DicomTransferRole& i)
  {
    a << static_cast< const ::xml_schema::String& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const DicomTransferRole& i)
  {
    l << static_cast< const ::xml_schema::String& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DicomTransferRole >
  _xsd_DicomTransferRole_type_serializer_init (
    "DicomTransferRole",
    "http://dicom-extension-uri/09/08");


  void
  operator<< (::xercesc::DOMElement& e, const DicomTransferCapability& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // TransferSyntax
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomTransferCapability::TransferSyntaxConstIterator
           b (i.TransferSyntax ().begin ()), n (i.TransferSyntax ().end ());
           b != n; ++b)
      {
        if (typeid (DicomTransferCapability::TransferSyntaxType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TransferSyntax",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "TransferSyntax",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // SopClass
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "SopClass",
          e));

      a << i.SopClass ();
    }

    // TransferRole
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "TransferRole",
          e));

      a << i.TransferRole ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DicomTransferCapability >
  _xsd_DicomTransferCapability_type_serializer_init (
    "DicomTransferCapability",
    "http://dicom-extension-uri/09/08");


  void
  operator<< (::xercesc::DOMElement& e, const DicomNetworkAe& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // TransferCapability
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomNetworkAe::TransferCapabilityConstIterator
           b (i.TransferCapability ().begin ()), n (i.TransferCapability ().end ());
           b != n; ++b)
      {
        if (typeid (DicomNetworkAe::TransferCapabilityType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TransferCapability",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "TransferCapability",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // ApplicationCluster
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomNetworkAe::ApplicationClusterConstIterator
           b (i.ApplicationCluster ().begin ()), n (i.ApplicationCluster ().end ());
           b != n; ++b)
      {
        if (typeid (DicomNetworkAe::ApplicationClusterType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ApplicationCluster",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "ApplicationCluster",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // SupportedCharacterSet
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomNetworkAe::SupportedCharacterSetConstIterator
           b (i.SupportedCharacterSet ().begin ()), n (i.SupportedCharacterSet ().end ());
           b != n; ++b)
      {
        if (typeid (DicomNetworkAe::SupportedCharacterSetType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SupportedCharacterSet",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "SupportedCharacterSet",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // Description
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomNetworkAe::DescriptionConstIterator
           b (i.Description ().begin ()), n (i.Description ().end ());
           b != n; ++b)
      {
        if (typeid (DicomNetworkAe::DescriptionType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Description",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "Description",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // AeTitle
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "AeTitle",
          e));

      a << i.AeTitle ();
    }

    // NetworkConnectionReference
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "NetworkConnectionReference",
          e));

      a << i.NetworkConnectionReference ();
    }

    // AssociationInitiator
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "AssociationInitiator",
          e));

      a << i.AssociationInitiator ();
    }

    // AssociationAcceptor
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "AssociationAcceptor",
          e));

      a << i.AssociationAcceptor ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DicomNetworkAe >
  _xsd_DicomNetworkAe_type_serializer_init (
    "DicomNetworkAe",
    "http://dicom-extension-uri/09/08");


  void
  operator<< (::xercesc::DOMElement& e, const DicomNetworkConnection& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // TlsCipherSuite
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomNetworkConnection::TlsCipherSuiteConstIterator
           b (i.TlsCipherSuite ().begin ()), n (i.TlsCipherSuite ().end ());
           b != n; ++b)
      {
        if (typeid (DicomNetworkConnection::TlsCipherSuiteType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TlsCipherSuite",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "TlsCipherSuite",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // Hostname
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Hostname",
          e));

      a << i.Hostname ();
    }

    // Port
    //
    if (i.Port ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Port",
          e));

      a << *i.Port ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DicomNetworkConnection >
  _xsd_DicomNetworkConnection_type_serializer_init (
    "DicomNetworkConnection",
    "http://dicom-extension-uri/09/08");


  void
  operator<< (::xercesc::DOMElement& e, const DicomDeviceDescriptor& i)
  {
    e << static_cast< const ::CDM::AbstractComplexDeviceComponentDescriptor& > (i);

    // NetworkAe
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomDeviceDescriptor::NetworkAeConstIterator
           b (i.NetworkAe ().begin ()), n (i.NetworkAe ().end ());
           b != n; ++b)
      {
        if (typeid (DicomDeviceDescriptor::NetworkAeType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NetworkAe",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "NetworkAe",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // NetworkConnection
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomDeviceDescriptor::NetworkConnectionConstIterator
           b (i.NetworkConnection ().begin ()), n (i.NetworkConnection ().end ());
           b != n; ++b)
      {
        if (typeid (DicomDeviceDescriptor::NetworkConnectionType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NetworkConnection",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "NetworkConnection",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // SoftwareVersion
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomDeviceDescriptor::SoftwareVersionConstIterator
           b (i.SoftwareVersion ().begin ()), n (i.SoftwareVersion ().end ());
           b != n; ++b)
      {
        if (typeid (DicomDeviceDescriptor::SoftwareVersionType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SoftwareVersion",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "SoftwareVersion",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // InstitutionName
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomDeviceDescriptor::InstitutionNameConstIterator
           b (i.InstitutionName ().begin ()), n (i.InstitutionName ().end ());
           b != n; ++b)
      {
        if (typeid (DicomDeviceDescriptor::InstitutionNameType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InstitutionName",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "InstitutionName",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // InstitutionAddress
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomDeviceDescriptor::InstitutionAddressConstIterator
           b (i.InstitutionAddress ().begin ()), n (i.InstitutionAddress ().end ());
           b != n; ++b)
      {
        if (typeid (DicomDeviceDescriptor::InstitutionAddressType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InstitutionAddress",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "InstitutionAddress",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // InstitutionalDepartmentName
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomDeviceDescriptor::InstitutionalDepartmentNameConstIterator
           b (i.InstitutionalDepartmentName ().begin ()), n (i.InstitutionalDepartmentName ().end ());
           b != n; ++b)
      {
        if (typeid (DicomDeviceDescriptor::InstitutionalDepartmentNameType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InstitutionalDepartmentName",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "InstitutionalDepartmentName",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // PrimaryDeviceType
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomDeviceDescriptor::PrimaryDeviceTypeConstIterator
           b (i.PrimaryDeviceType ().begin ()), n (i.PrimaryDeviceType ().end ());
           b != n; ++b)
      {
        if (typeid (DicomDeviceDescriptor::PrimaryDeviceTypeType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrimaryDeviceType",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "PrimaryDeviceType",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // PublicCertificate
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomDeviceDescriptor::PublicCertificateConstIterator
           b (i.PublicCertificate ().begin ()), n (i.PublicCertificate ().end ());
           b != n; ++b)
      {
        if (typeid (DicomDeviceDescriptor::PublicCertificateType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PublicCertificate",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "PublicCertificate",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // Description
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomDeviceDescriptor::DescriptionConstIterator
           b (i.Description ().begin ()), n (i.Description ().end ());
           b != n; ++b)
      {
        if (typeid (DicomDeviceDescriptor::DescriptionType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Description",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "Description",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // StationName
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (DicomDeviceDescriptor::StationNameConstIterator
           b (i.StationName ().begin ()), n (i.StationName ().end ());
           b != n; ++b)
      {
        if (typeid (DicomDeviceDescriptor::StationNameType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StationName",
              "http://dicom-extension-uri/09/08",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "StationName",
            "http://dicom-extension-uri/09/08",
            false, true, e, *b);
      }
    }

    // IssuerOfPatientID
    //
    if (i.IssuerOfPatientID ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "IssuerOfPatientID",
          e));

      a << *i.IssuerOfPatientID ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DicomDeviceDescriptor >
  _xsd_DicomDeviceDescriptor_type_serializer_init (
    "DicomDeviceDescriptor",
    "http://dicom-extension-uri/09/08");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

