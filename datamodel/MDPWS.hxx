// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MDPWS_HXX
#define MDPWS_HXX

#include "MDPWS-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace MDPWS
{
  class StreamSourceType: public ::xml_schema::Type
  {
    public:
    // Constructors.
    //
    StreamSourceType ();

    StreamSourceType (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    StreamSourceType (const StreamSourceType& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual StreamSourceType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~StreamSourceType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
  };

  class StreamTransmissionType: public ::xml_schema::Type
  {
    public:
    // StreamAddress
    //
    typedef ::xml_schema::Uri StreamAddressType;
    typedef ::xsd::cxx::tree::optional< StreamAddressType > StreamAddressOptional;
    typedef ::xsd::cxx::tree::traits< StreamAddressType, char > StreamAddressTraits;

    const StreamAddressOptional&
    StreamAddress () const;

    StreamAddressOptional&
    StreamAddress ();

    void
    StreamAddress (const StreamAddressType& x);

    void
    StreamAddress (const StreamAddressOptional& x);

    void
    StreamAddress (::std::unique_ptr< StreamAddressType > p);

    // StreamPeriod
    //
    typedef ::xml_schema::Duration StreamPeriodType;
    typedef ::xsd::cxx::tree::optional< StreamPeriodType > StreamPeriodOptional;
    typedef ::xsd::cxx::tree::traits< StreamPeriodType, char > StreamPeriodTraits;

    const StreamPeriodOptional&
    StreamPeriod () const;

    StreamPeriodOptional&
    StreamPeriod ();

    void
    StreamPeriod (const StreamPeriodType& x);

    void
    StreamPeriod (const StreamPeriodOptional& x);

    void
    StreamPeriod (::std::unique_ptr< StreamPeriodType > p);

    // Type
    //
    typedef ::xml_schema::Uri TypeType;
    typedef ::xsd::cxx::tree::optional< TypeType > TypeOptional;
    typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

    const TypeOptional&
    Type () const;

    TypeOptional&
    Type ();

    void
    Type (const TypeType& x);

    void
    Type (const TypeOptional& x);

    void
    Type (::std::unique_ptr< TypeType > p);

    // Constructors.
    //
    StreamTransmissionType ();

    StreamTransmissionType (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    StreamTransmissionType (const StreamTransmissionType& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    virtual StreamTransmissionType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    StreamTransmissionType&
    operator= (const StreamTransmissionType& x);

    virtual 
    ~StreamTransmissionType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    StreamAddressOptional StreamAddress_;
    StreamPeriodOptional StreamPeriod_;
    TypeOptional Type_;
  };

  class StreamTypeType: public ::xml_schema::Type
  {
    public:
    // StreamTransmission
    //
    typedef ::MDPWS::StreamTransmissionType StreamTransmissionType;
    typedef ::xsd::cxx::tree::traits< StreamTransmissionType, char > StreamTransmissionTraits;

    const StreamTransmissionType&
    StreamTransmission () const;

    StreamTransmissionType&
    StreamTransmission ();

    void
    StreamTransmission (const StreamTransmissionType& x);

    void
    StreamTransmission (::std::unique_ptr< StreamTransmissionType > p);

    // Id
    //
    typedef ::xml_schema::Id IdType;
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    const IdType&
    Id () const;

    IdType&
    Id ();

    void
    Id (const IdType& x);

    void
    Id (::std::unique_ptr< IdType > p);

    // StreamType
    //
    typedef ::xml_schema::Uri StreamTypeType1;
    typedef ::xsd::cxx::tree::traits< StreamTypeType1, char > StreamTypeTraits;

    const StreamTypeType1&
    StreamType () const;

    StreamTypeType1&
    StreamType ();

    void
    StreamType (const StreamTypeType1& x);

    void
    StreamType (::std::unique_ptr< StreamTypeType1 > p);

    // Element
    //
    typedef ::xml_schema::Uri ElementType;
    typedef ::xsd::cxx::tree::optional< ElementType > ElementOptional;
    typedef ::xsd::cxx::tree::traits< ElementType, char > ElementTraits;

    const ElementOptional&
    Element () const;

    ElementOptional&
    Element ();

    void
    Element (const ElementType& x);

    void
    Element (const ElementOptional& x);

    void
    Element (::std::unique_ptr< ElementType > p);

    // ActionUri
    //
    typedef ::xml_schema::Uri ActionUriType;
    typedef ::xsd::cxx::tree::optional< ActionUriType > ActionUriOptional;
    typedef ::xsd::cxx::tree::traits< ActionUriType, char > ActionUriTraits;

    const ActionUriOptional&
    ActionUri () const;

    ActionUriOptional&
    ActionUri ();

    void
    ActionUri (const ActionUriType& x);

    void
    ActionUri (const ActionUriOptional& x);

    void
    ActionUri (::std::unique_ptr< ActionUriType > p);

    // Constructors.
    //
    StreamTypeType (const StreamTransmissionType&,
                    const IdType&,
                    const StreamTypeType1&);

    StreamTypeType (::std::unique_ptr< StreamTransmissionType >,
                    const IdType&,
                    const StreamTypeType1&);

    StreamTypeType (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    StreamTypeType (const StreamTypeType& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual StreamTypeType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    StreamTypeType&
    operator= (const StreamTypeType& x);

    virtual 
    ~StreamTypeType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< StreamTransmissionType > StreamTransmission_;
    ::xsd::cxx::tree::one< IdType > Id_;
    ::xsd::cxx::tree::one< StreamTypeType1 > StreamType_;
    ElementOptional Element_;
    ActionUriOptional ActionUri_;
  };

  class StreamDescriptionsType: public ::xml_schema::Type
  {
    public:
    // Types
    //
    typedef ::MDPWS::Types TypesType;
    typedef ::xsd::cxx::tree::optional< TypesType > TypesOptional;
    typedef ::xsd::cxx::tree::traits< TypesType, char > TypesTraits;

    const TypesOptional&
    Types () const;

    TypesOptional&
    Types ();

    void
    Types (const TypesType& x);

    void
    Types (const TypesOptional& x);

    void
    Types (::std::unique_ptr< TypesType > p);

    // StreamType
    //
    typedef ::MDPWS::StreamTypeType StreamTypeType;
    typedef ::xsd::cxx::tree::sequence< StreamTypeType > StreamTypeSequence;
    typedef StreamTypeSequence::iterator StreamTypeIterator;
    typedef StreamTypeSequence::const_iterator StreamTypeConstIterator;
    typedef ::xsd::cxx::tree::traits< StreamTypeType, char > StreamTypeTraits;

    const StreamTypeSequence&
    StreamType () const;

    StreamTypeSequence&
    StreamType ();

    void
    StreamType (const StreamTypeSequence& s);

    // TargetNamespace
    //
    typedef ::xml_schema::Uri TargetNamespaceType;
    typedef ::xsd::cxx::tree::traits< TargetNamespaceType, char > TargetNamespaceTraits;

    const TargetNamespaceType&
    TargetNamespace () const;

    TargetNamespaceType&
    TargetNamespace ();

    void
    TargetNamespace (const TargetNamespaceType& x);

    void
    TargetNamespace (::std::unique_ptr< TargetNamespaceType > p);

    // Constructors.
    //
    StreamDescriptionsType (const TargetNamespaceType&);

    StreamDescriptionsType (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    StreamDescriptionsType (const StreamDescriptionsType& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    virtual StreamDescriptionsType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    StreamDescriptionsType&
    operator= (const StreamDescriptionsType& x);

    virtual 
    ~StreamDescriptionsType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    TypesOptional Types_;
    StreamTypeSequence StreamType_;
    ::xsd::cxx::tree::one< TargetNamespaceType > TargetNamespace_;
  };

  class SafetyReqAssertionType: public ::xml_schema::Type
  {
    public:
    // TransmitDualChannel
    //
    typedef ::xml_schema::Boolean TransmitDualChannelType;
    typedef ::xsd::cxx::tree::traits< TransmitDualChannelType, char > TransmitDualChannelTraits;

    const TransmitDualChannelType&
    TransmitDualChannel () const;

    TransmitDualChannelType&
    TransmitDualChannel ();

    void
    TransmitDualChannel (const TransmitDualChannelType& x);

    static TransmitDualChannelType
    TransmitDualChannel_default_value ();

    // TransmitSafetyContext
    //
    typedef ::xml_schema::Boolean TransmitSafetyContextType;
    typedef ::xsd::cxx::tree::traits< TransmitSafetyContextType, char > TransmitSafetyContextTraits;

    const TransmitSafetyContextType&
    TransmitSafetyContext () const;

    TransmitSafetyContextType&
    TransmitSafetyContext ();

    void
    TransmitSafetyContext (const TransmitSafetyContextType& x);

    static TransmitSafetyContextType
    TransmitSafetyContext_default_value ();

    // Constructors.
    //
    SafetyReqAssertionType ();

    SafetyReqAssertionType (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    SafetyReqAssertionType (const SafetyReqAssertionType& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    virtual SafetyReqAssertionType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SafetyReqAssertionType&
    operator= (const SafetyReqAssertionType& x);

    virtual 
    ~SafetyReqAssertionType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< TransmitDualChannelType > TransmitDualChannel_;
    ::xsd::cxx::tree::one< TransmitSafetyContextType > TransmitSafetyContext_;
  };

  class SelectorType: public ::xml_schema::String
  {
    public:
    // Id
    //
    typedef ::xml_schema::String IdType;
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    const IdType&
    Id () const;

    IdType&
    Id ();

    void
    Id (const IdType& x);

    void
    Id (::std::unique_ptr< IdType > p);

    // Constructors.
    //
    SelectorType (const IdType&);

    SelectorType (const char*,
                  const IdType&);

    SelectorType (const ::std::string&,
                  const IdType&);

    SelectorType (const ::xml_schema::String&,
                  const IdType&);

    SelectorType (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    SelectorType (const SelectorType& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    virtual SelectorType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SelectorType&
    operator= (const SelectorType& x);

    virtual 
    ~SelectorType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< IdType > Id_;
  };

  class SafetyReqType: public ::xml_schema::Type
  {
    public:
    // DualChannelDef
    //
    typedef ::MDPWS::DualChannelDefType DualChannelDefType;
    typedef ::xsd::cxx::tree::optional< DualChannelDefType > DualChannelDefOptional;
    typedef ::xsd::cxx::tree::traits< DualChannelDefType, char > DualChannelDefTraits;

    const DualChannelDefOptional&
    DualChannelDef () const;

    DualChannelDefOptional&
    DualChannelDef ();

    void
    DualChannelDef (const DualChannelDefType& x);

    void
    DualChannelDef (const DualChannelDefOptional& x);

    void
    DualChannelDef (::std::unique_ptr< DualChannelDefType > p);

    // SafetyContextDef
    //
    typedef ::MDPWS::SafetyContextDefType SafetyContextDefType;
    typedef ::xsd::cxx::tree::optional< SafetyContextDefType > SafetyContextDefOptional;
    typedef ::xsd::cxx::tree::traits< SafetyContextDefType, char > SafetyContextDefTraits;

    const SafetyContextDefOptional&
    SafetyContextDef () const;

    SafetyContextDefOptional&
    SafetyContextDef ();

    void
    SafetyContextDef (const SafetyContextDefType& x);

    void
    SafetyContextDef (const SafetyContextDefOptional& x);

    void
    SafetyContextDef (::std::unique_ptr< SafetyContextDefType > p);

    // Constructors.
    //
    SafetyReqType ();

    SafetyReqType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    SafetyReqType (const SafetyReqType& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    virtual SafetyReqType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SafetyReqType&
    operator= (const SafetyReqType& x);

    virtual 
    ~SafetyReqType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DualChannelDefOptional DualChannelDef_;
    SafetyContextDefOptional SafetyContextDef_;
  };

  class DualChannelDefType: public ::xml_schema::Type
  {
    public:
    // Selector
    //
    typedef ::MDPWS::SelectorType SelectorType;
    typedef ::xsd::cxx::tree::sequence< SelectorType > SelectorSequence;
    typedef SelectorSequence::iterator SelectorIterator;
    typedef SelectorSequence::const_iterator SelectorConstIterator;
    typedef ::xsd::cxx::tree::traits< SelectorType, char > SelectorTraits;

    const SelectorSequence&
    Selector () const;

    SelectorSequence&
    Selector ();

    void
    Selector (const SelectorSequence& s);

    // Algorithm
    //
    typedef ::xml_schema::Qname AlgorithmType;
    typedef ::xsd::cxx::tree::optional< AlgorithmType > AlgorithmOptional;
    typedef ::xsd::cxx::tree::traits< AlgorithmType, char > AlgorithmTraits;

    const AlgorithmOptional&
    Algorithm () const;

    AlgorithmOptional&
    Algorithm ();

    void
    Algorithm (const AlgorithmType& x);

    void
    Algorithm (const AlgorithmOptional& x);

    void
    Algorithm (::std::unique_ptr< AlgorithmType > p);

    // Transform
    //
    typedef ::xml_schema::Qname TransformType;
    typedef ::xsd::cxx::tree::optional< TransformType > TransformOptional;
    typedef ::xsd::cxx::tree::traits< TransformType, char > TransformTraits;

    const TransformOptional&
    Transform () const;

    TransformOptional&
    Transform ();

    void
    Transform (const TransformType& x);

    void
    Transform (const TransformOptional& x);

    void
    Transform (::std::unique_ptr< TransformType > p);

    // Constructors.
    //
    DualChannelDefType ();

    DualChannelDefType (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    DualChannelDefType (const DualChannelDefType& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

    virtual DualChannelDefType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DualChannelDefType&
    operator= (const DualChannelDefType& x);

    virtual 
    ~DualChannelDefType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    SelectorSequence Selector_;
    AlgorithmOptional Algorithm_;
    TransformOptional Transform_;
  };

  class SafetyContextDefType: public ::xml_schema::Type
  {
    public:
    // Selector
    //
    typedef ::MDPWS::SelectorType SelectorType;
    typedef ::xsd::cxx::tree::sequence< SelectorType > SelectorSequence;
    typedef SelectorSequence::iterator SelectorIterator;
    typedef SelectorSequence::const_iterator SelectorConstIterator;
    typedef ::xsd::cxx::tree::traits< SelectorType, char > SelectorTraits;

    const SelectorSequence&
    Selector () const;

    SelectorSequence&
    Selector ();

    void
    Selector (const SelectorSequence& s);

    // Constructors.
    //
    SafetyContextDefType ();

    SafetyContextDefType (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    SafetyContextDefType (const SafetyContextDefType& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual SafetyContextDefType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SafetyContextDefType&
    operator= (const SafetyContextDefType& x);

    virtual 
    ~SafetyContextDefType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    SelectorSequence Selector_;
  };

  class SafetyInfoType: public ::xml_schema::Type
  {
    public:
    // DualChannel
    //
    typedef ::MDPWS::DualChannelType DualChannelType;
    typedef ::xsd::cxx::tree::optional< DualChannelType > DualChannelOptional;
    typedef ::xsd::cxx::tree::traits< DualChannelType, char > DualChannelTraits;

    const DualChannelOptional&
    DualChannel () const;

    DualChannelOptional&
    DualChannel ();

    void
    DualChannel (const DualChannelType& x);

    void
    DualChannel (const DualChannelOptional& x);

    void
    DualChannel (::std::unique_ptr< DualChannelType > p);

    // SafetyContext
    //
    typedef ::MDPWS::SafetyContextType SafetyContextType;
    typedef ::xsd::cxx::tree::optional< SafetyContextType > SafetyContextOptional;
    typedef ::xsd::cxx::tree::traits< SafetyContextType, char > SafetyContextTraits;

    const SafetyContextOptional&
    SafetyContext () const;

    SafetyContextOptional&
    SafetyContext ();

    void
    SafetyContext (const SafetyContextType& x);

    void
    SafetyContext (const SafetyContextOptional& x);

    void
    SafetyContext (::std::unique_ptr< SafetyContextType > p);

    // Constructors.
    //
    SafetyInfoType ();

    SafetyInfoType (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    SafetyInfoType (const SafetyInfoType& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual SafetyInfoType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SafetyInfoType&
    operator= (const SafetyInfoType& x);

    virtual 
    ~SafetyInfoType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DualChannelOptional DualChannel_;
    SafetyContextOptional SafetyContext_;
  };

  class DualChannelType: public ::xml_schema::Type
  {
    public:
    // DcValue
    //
    typedef ::MDPWS::DcValueType DcValueType;
    typedef ::xsd::cxx::tree::sequence< DcValueType > DcValueSequence;
    typedef DcValueSequence::iterator DcValueIterator;
    typedef DcValueSequence::const_iterator DcValueConstIterator;
    typedef ::xsd::cxx::tree::traits< DcValueType, char > DcValueTraits;

    const DcValueSequence&
    DcValue () const;

    DcValueSequence&
    DcValue ();

    void
    DcValue (const DcValueSequence& s);

    // Constructors.
    //
    DualChannelType ();

    DualChannelType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    DualChannelType (const DualChannelType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    virtual DualChannelType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DualChannelType&
    operator= (const DualChannelType& x);

    virtual 
    ~DualChannelType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DcValueSequence DcValue_;
  };

  class SafetyContextType: public ::xml_schema::Type
  {
    public:
    // CtxtValue
    //
    typedef ::MDPWS::CtxtValueType CtxtValueType;
    typedef ::xsd::cxx::tree::sequence< CtxtValueType > CtxtValueSequence;
    typedef CtxtValueSequence::iterator CtxtValueIterator;
    typedef CtxtValueSequence::const_iterator CtxtValueConstIterator;
    typedef ::xsd::cxx::tree::traits< CtxtValueType, char > CtxtValueTraits;

    const CtxtValueSequence&
    CtxtValue () const;

    CtxtValueSequence&
    CtxtValue ();

    void
    CtxtValue (const CtxtValueSequence& s);

    // Constructors.
    //
    SafetyContextType ();

    SafetyContextType (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    SafetyContextType (const SafetyContextType& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    virtual SafetyContextType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    SafetyContextType&
    operator= (const SafetyContextType& x);

    virtual 
    ~SafetyContextType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    CtxtValueSequence CtxtValue_;
  };

  class DcValueType: public ::xml_schema::SimpleType
  {
    public:
    // ReferencedSelector
    //
    typedef ::xml_schema::String ReferencedSelectorType;
    typedef ::xsd::cxx::tree::traits< ReferencedSelectorType, char > ReferencedSelectorTraits;

    const ReferencedSelectorType&
    ReferencedSelector () const;

    ReferencedSelectorType&
    ReferencedSelector ();

    void
    ReferencedSelector (const ReferencedSelectorType& x);

    void
    ReferencedSelector (::std::unique_ptr< ReferencedSelectorType > p);

    // Constructors.
    //
    DcValueType (const ReferencedSelectorType&);

    DcValueType (const ::xml_schema::SimpleType&,
                 const ReferencedSelectorType&);

    DcValueType (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    DcValueType (const DcValueType& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual DcValueType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DcValueType&
    operator= (const DcValueType& x);

    virtual 
    ~DcValueType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ReferencedSelectorType > ReferencedSelector_;
  };

  class CtxtValueType: public ::xml_schema::SimpleType
  {
    public:
    // ReferencedSelector
    //
    typedef ::xml_schema::String ReferencedSelectorType;
    typedef ::xsd::cxx::tree::traits< ReferencedSelectorType, char > ReferencedSelectorTraits;

    const ReferencedSelectorType&
    ReferencedSelector () const;

    ReferencedSelectorType&
    ReferencedSelector ();

    void
    ReferencedSelector (const ReferencedSelectorType& x);

    void
    ReferencedSelector (::std::unique_ptr< ReferencedSelectorType > p);

    // Constructors.
    //
    CtxtValueType (const ReferencedSelectorType&);

    CtxtValueType (const ::xml_schema::SimpleType&,
                   const ReferencedSelectorType&);

    CtxtValueType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    CtxtValueType (const CtxtValueType& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    virtual CtxtValueType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    CtxtValueType&
    operator= (const CtxtValueType& x);

    virtual 
    ~CtxtValueType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ReferencedSelectorType > ReferencedSelector_;
  };

  class Types: public ::xml_schema::Type
  {
    public:
    // Constructors.
    //
    Types ();

    Types (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    Types (const Types& x,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    virtual Types*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Types ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace MDPWS
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (const ::std::string& uri,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (const ::std::string& uri,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (::std::istream& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (::std::istream& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (::xercesc::InputSource& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (::xercesc::InputSource& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (const ::xercesc::DOMDocument& d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamSourceType >
  StreamSource (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (const ::std::string& uri,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (const ::std::string& uri,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (::std::istream& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (::std::istream& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (::xercesc::InputSource& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (::xercesc::InputSource& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (const ::xercesc::DOMDocument& d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::StreamDescriptionsType >
  StreamDescriptions (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (const ::std::string& uri,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (const ::std::string& uri,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (::std::istream& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (::std::istream& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (::xercesc::InputSource& is,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (::xercesc::InputSource& is,
                      ::xml_schema::ErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (const ::xercesc::DOMDocument& d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqAssertionType >
  SafetyReqAssertion (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::Flags f = 0,
                      const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyReqType >
  SafetyReq (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (const ::std::string& uri,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (const ::std::string& uri,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (::std::istream& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (::std::istream& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (::xercesc::InputSource& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (::xercesc::InputSource& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (const ::xercesc::DOMDocument& d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::MDPWS::SafetyInfoType >
  SafetyInfo (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace MDPWS
{
  void
  operator<< (::xercesc::DOMElement&, const StreamSourceType&);

  // Serialize to std::ostream.
  //

  void
  StreamSource (::std::ostream& os,
                const ::MDPWS::StreamSourceType& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

  void
  StreamSource (::std::ostream& os,
                const ::MDPWS::StreamSourceType& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

  void
  StreamSource (::std::ostream& os,
                const ::MDPWS::StreamSourceType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  StreamSource (::xercesc::XMLFormatTarget& ft,
                const ::MDPWS::StreamSourceType& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

  void
  StreamSource (::xercesc::XMLFormatTarget& ft,
                const ::MDPWS::StreamSourceType& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

  void
  StreamSource (::xercesc::XMLFormatTarget& ft,
                const ::MDPWS::StreamSourceType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  StreamSource (::xercesc::DOMDocument& d,
                const ::MDPWS::StreamSourceType& x,
                ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  StreamSource (const ::MDPWS::StreamSourceType& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const StreamTransmissionType&);

  void
  operator<< (::xercesc::DOMElement&, const StreamTypeType&);

  void
  operator<< (::xercesc::DOMElement&, const StreamDescriptionsType&);

  // Serialize to std::ostream.
  //

  void
  StreamDescriptions (::std::ostream& os,
                      const ::MDPWS::StreamDescriptionsType& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  StreamDescriptions (::std::ostream& os,
                      const ::MDPWS::StreamDescriptionsType& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  StreamDescriptions (::std::ostream& os,
                      const ::MDPWS::StreamDescriptionsType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  StreamDescriptions (::xercesc::XMLFormatTarget& ft,
                      const ::MDPWS::StreamDescriptionsType& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  StreamDescriptions (::xercesc::XMLFormatTarget& ft,
                      const ::MDPWS::StreamDescriptionsType& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  StreamDescriptions (::xercesc::XMLFormatTarget& ft,
                      const ::MDPWS::StreamDescriptionsType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  StreamDescriptions (::xercesc::DOMDocument& d,
                      const ::MDPWS::StreamDescriptionsType& x,
                      ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  StreamDescriptions (const ::MDPWS::StreamDescriptionsType& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const SafetyReqAssertionType&);

  // Serialize to std::ostream.
  //

  void
  SafetyReqAssertion (::std::ostream& os,
                      const ::MDPWS::SafetyReqAssertionType& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SafetyReqAssertion (::std::ostream& os,
                      const ::MDPWS::SafetyReqAssertionType& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SafetyReqAssertion (::std::ostream& os,
                      const ::MDPWS::SafetyReqAssertionType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SafetyReqAssertion (::xercesc::XMLFormatTarget& ft,
                      const ::MDPWS::SafetyReqAssertionType& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SafetyReqAssertion (::xercesc::XMLFormatTarget& ft,
                      const ::MDPWS::SafetyReqAssertionType& x, 
                      ::xml_schema::ErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  void
  SafetyReqAssertion (::xercesc::XMLFormatTarget& ft,
                      const ::MDPWS::SafetyReqAssertionType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SafetyReqAssertion (::xercesc::DOMDocument& d,
                      const ::MDPWS::SafetyReqAssertionType& x,
                      ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SafetyReqAssertion (const ::MDPWS::SafetyReqAssertionType& x, 
                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                      ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const SelectorType&);

  void
  operator<< (::xercesc::DOMElement&, const SafetyReqType&);

  // Serialize to std::ostream.
  //

  void
  SafetyReq (::std::ostream& os,
             const ::MDPWS::SafetyReqType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SafetyReq (::std::ostream& os,
             const ::MDPWS::SafetyReqType& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SafetyReq (::std::ostream& os,
             const ::MDPWS::SafetyReqType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SafetyReq (::xercesc::XMLFormatTarget& ft,
             const ::MDPWS::SafetyReqType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SafetyReq (::xercesc::XMLFormatTarget& ft,
             const ::MDPWS::SafetyReqType& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  SafetyReq (::xercesc::XMLFormatTarget& ft,
             const ::MDPWS::SafetyReqType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SafetyReq (::xercesc::DOMDocument& d,
             const ::MDPWS::SafetyReqType& x,
             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SafetyReq (const ::MDPWS::SafetyReqType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const DualChannelDefType&);

  void
  operator<< (::xercesc::DOMElement&, const SafetyContextDefType&);

  void
  operator<< (::xercesc::DOMElement&, const SafetyInfoType&);

  // Serialize to std::ostream.
  //

  void
  SafetyInfo (::std::ostream& os,
              const ::MDPWS::SafetyInfoType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  void
  SafetyInfo (::std::ostream& os,
              const ::MDPWS::SafetyInfoType& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  void
  SafetyInfo (::std::ostream& os,
              const ::MDPWS::SafetyInfoType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SafetyInfo (::xercesc::XMLFormatTarget& ft,
              const ::MDPWS::SafetyInfoType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  void
  SafetyInfo (::xercesc::XMLFormatTarget& ft,
              const ::MDPWS::SafetyInfoType& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  void
  SafetyInfo (::xercesc::XMLFormatTarget& ft,
              const ::MDPWS::SafetyInfoType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SafetyInfo (::xercesc::DOMDocument& d,
              const ::MDPWS::SafetyInfoType& x,
              ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  SafetyInfo (const ::MDPWS::SafetyInfoType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const DualChannelType&);

  void
  operator<< (::xercesc::DOMElement&, const SafetyContextType&);

  void
  operator<< (::xercesc::DOMElement&, const DcValueType&);

  void
  operator<< (::xercesc::DOMElement&, const CtxtValueType&);

  void
  operator<< (::xercesc::DOMElement&, const Types&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MDPWS_HXX
