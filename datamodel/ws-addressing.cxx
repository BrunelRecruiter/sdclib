// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ws-addressing.hxx"

namespace WS
{
  namespace ADDRESSING
  {
    // EndpointReferenceType
    // 

    const EndpointReferenceType::AddressType& EndpointReferenceType::
    Address () const
    {
      return this->Address_.get ();
    }

    EndpointReferenceType::AddressType& EndpointReferenceType::
    Address ()
    {
      return this->Address_.get ();
    }

    void EndpointReferenceType::
    Address (const AddressType& x)
    {
      this->Address_.set (x);
    }

    void EndpointReferenceType::
    Address (::std::unique_ptr< AddressType > x)
    {
      this->Address_.set (std::move (x));
    }

    const EndpointReferenceType::ReferenceParametersOptional& EndpointReferenceType::
    ReferenceParameters () const
    {
      return this->ReferenceParameters_;
    }

    EndpointReferenceType::ReferenceParametersOptional& EndpointReferenceType::
    ReferenceParameters ()
    {
      return this->ReferenceParameters_;
    }

    void EndpointReferenceType::
    ReferenceParameters (const ReferenceParametersType& x)
    {
      this->ReferenceParameters_.set (x);
    }

    void EndpointReferenceType::
    ReferenceParameters (const ReferenceParametersOptional& x)
    {
      this->ReferenceParameters_ = x;
    }

    void EndpointReferenceType::
    ReferenceParameters (::std::unique_ptr< ReferenceParametersType > x)
    {
      this->ReferenceParameters_.set (std::move (x));
    }

    const EndpointReferenceType::MetadataOptional& EndpointReferenceType::
    Metadata () const
    {
      return this->Metadata_;
    }

    EndpointReferenceType::MetadataOptional& EndpointReferenceType::
    Metadata ()
    {
      return this->Metadata_;
    }

    void EndpointReferenceType::
    Metadata (const MetadataType& x)
    {
      this->Metadata_.set (x);
    }

    void EndpointReferenceType::
    Metadata (const MetadataOptional& x)
    {
      this->Metadata_ = x;
    }

    void EndpointReferenceType::
    Metadata (::std::unique_ptr< MetadataType > x)
    {
      this->Metadata_.set (std::move (x));
    }


    // ReferenceParametersType
    // 

    const ReferenceParametersType::IdentifierOptional& ReferenceParametersType::
    Identifier () const
    {
      return this->Identifier_;
    }

    ReferenceParametersType::IdentifierOptional& ReferenceParametersType::
    Identifier ()
    {
      return this->Identifier_;
    }

    void ReferenceParametersType::
    Identifier (const IdentifierType& x)
    {
      this->Identifier_.set (x);
    }

    void ReferenceParametersType::
    Identifier (const IdentifierOptional& x)
    {
      this->Identifier_ = x;
    }

    void ReferenceParametersType::
    Identifier (::std::unique_ptr< IdentifierType > x)
    {
      this->Identifier_.set (std::move (x));
    }


    // MetadataType
    // 


    // RelatesToType
    // 

    const RelatesToType::RelationshipTypeOptional& RelatesToType::
    RelationshipType () const
    {
      return this->RelationshipType_;
    }

    RelatesToType::RelationshipTypeOptional& RelatesToType::
    RelationshipType ()
    {
      return this->RelationshipType_;
    }

    void RelatesToType::
    RelationshipType (const RelationshipTypeType& x)
    {
      this->RelationshipType_.set (x);
    }

    void RelatesToType::
    RelationshipType (const RelationshipTypeOptional& x)
    {
      this->RelationshipType_ = x;
    }

    void RelatesToType::
    RelationshipType (::std::unique_ptr< RelationshipTypeType > x)
    {
      this->RelationshipType_.set (std::move (x));
    }


    // RelationshipTypeOpenEnum
    //

    RelationshipTypeOpenEnum::
    RelationshipTypeOpenEnum (const char* s)
    : ::xml_schema::String (s)
    {
    }

    RelationshipTypeOpenEnum::
    RelationshipTypeOpenEnum (const ::std::string& s)
    : ::xml_schema::String (s)
    {
    }

    RelationshipTypeOpenEnum::
    RelationshipTypeOpenEnum (const RelationshipTypeOpenEnum& o,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
    : ::xml_schema::String (o, f, c)
    {
    }

    // RelationshipType
    // 

    RelationshipType::
    RelationshipType (const ::xml_schema::Uri& v)
    : ::xml_schema::Uri (v)
    {
    }

    RelationshipType::
    RelationshipType (const RelationshipType& v,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Uri (v, f, c)
    {
    }


    // AttributedURIType
    // 


    // FaultCodesOpenEnumType
    //

    FaultCodesOpenEnumType::
    FaultCodesOpenEnumType (const char* s)
    : ::xml_schema::String (s)
    {
    }

    FaultCodesOpenEnumType::
    FaultCodesOpenEnumType (const ::std::string& s)
    : ::xml_schema::String (s)
    {
    }

    FaultCodesOpenEnumType::
    FaultCodesOpenEnumType (const FaultCodesOpenEnumType& o,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::xml_schema::String (o, f, c)
    {
    }

    // FaultCodesType
    // 

    FaultCodesType::
    FaultCodesType (const ::xml_schema::Qname& v)
    : ::xml_schema::Qname (v)
    {
    }

    FaultCodesType::
    FaultCodesType (const FaultCodesType& v,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Qname (v, f, c)
    {
    }


    // AttributedUnsignedLongType
    // 


    // AttributedQNameType
    // 


    // ProblemActionType
    // 

    const ProblemActionType::ActionOptional& ProblemActionType::
    Action () const
    {
      return this->Action_;
    }

    ProblemActionType::ActionOptional& ProblemActionType::
    Action ()
    {
      return this->Action_;
    }

    void ProblemActionType::
    Action (const ActionType& x)
    {
      this->Action_.set (x);
    }

    void ProblemActionType::
    Action (const ActionOptional& x)
    {
      this->Action_ = x;
    }

    void ProblemActionType::
    Action (::std::unique_ptr< ActionType > x)
    {
      this->Action_.set (std::move (x));
    }

    const ProblemActionType::SoapActionOptional& ProblemActionType::
    SoapAction () const
    {
      return this->SoapAction_;
    }

    ProblemActionType::SoapActionOptional& ProblemActionType::
    SoapAction ()
    {
      return this->SoapAction_;
    }

    void ProblemActionType::
    SoapAction (const SoapActionType& x)
    {
      this->SoapAction_.set (x);
    }

    void ProblemActionType::
    SoapAction (const SoapActionOptional& x)
    {
      this->SoapAction_ = x;
    }

    void ProblemActionType::
    SoapAction (::std::unique_ptr< SoapActionType > x)
    {
      this->SoapAction_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace WS
{
  namespace ADDRESSING
  {
    // EndpointReferenceType
    //

    EndpointReferenceType::
    EndpointReferenceType (const AddressType& Address)
    : ::xml_schema::Type (),
      Address_ (Address, this),
      ReferenceParameters_ (this),
      Metadata_ (this)
    {
    }

    EndpointReferenceType::
    EndpointReferenceType (::std::unique_ptr< AddressType > Address)
    : ::xml_schema::Type (),
      Address_ (std::move (Address), this),
      ReferenceParameters_ (this),
      Metadata_ (this)
    {
    }

    EndpointReferenceType::
    EndpointReferenceType (const EndpointReferenceType& x,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      Address_ (x.Address_, f, this),
      ReferenceParameters_ (x.ReferenceParameters_, f, this),
      Metadata_ (x.Metadata_, f, this)
    {
    }

    EndpointReferenceType::
    EndpointReferenceType (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      Address_ (this),
      ReferenceParameters_ (this),
      Metadata_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void EndpointReferenceType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Address
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Address",
              "http://www.w3.org/2005/08/addressing",
              &::xsd::cxx::tree::factory_impl< AddressType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Address_.present ())
            {
              ::std::unique_ptr< AddressType > r (
                dynamic_cast< AddressType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Address_.set (::std::move (r));
              continue;
            }
          }
        }

        // ReferenceParameters
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "ReferenceParameters",
              "http://www.w3.org/2005/08/addressing",
              &::xsd::cxx::tree::factory_impl< ReferenceParametersType >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->ReferenceParameters_)
            {
              ::std::unique_ptr< ReferenceParametersType > r (
                dynamic_cast< ReferenceParametersType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->ReferenceParameters_.set (::std::move (r));
              continue;
            }
          }
        }

        // Metadata
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Metadata",
              "http://www.w3.org/2005/08/addressing",
              &::xsd::cxx::tree::factory_impl< MetadataType >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Metadata_)
            {
              ::std::unique_ptr< MetadataType > r (
                dynamic_cast< MetadataType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Metadata_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }

      if (!Address_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Address",
          "http://www.w3.org/2005/08/addressing");
      }
    }

    EndpointReferenceType* EndpointReferenceType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class EndpointReferenceType (*this, f, c);
    }

    EndpointReferenceType& EndpointReferenceType::
    operator= (const EndpointReferenceType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->Address_ = x.Address_;
        this->ReferenceParameters_ = x.ReferenceParameters_;
        this->Metadata_ = x.Metadata_;
      }

      return *this;
    }

    EndpointReferenceType::
    ~EndpointReferenceType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, EndpointReferenceType >
    _xsd_EndpointReferenceType_type_factory_init (
      "EndpointReferenceType",
      "http://www.w3.org/2005/08/addressing");

    // ReferenceParametersType
    //

    ReferenceParametersType::
    ReferenceParametersType ()
    : ::xml_schema::Type (),
      Identifier_ (this)
    {
    }

    ReferenceParametersType::
    ReferenceParametersType (const ReferenceParametersType& x,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      Identifier_ (x.Identifier_, f, this)
    {
    }

    ReferenceParametersType::
    ReferenceParametersType (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      Identifier_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ReferenceParametersType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Identifier
        //
        if (n.name () == "Identifier" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
        {
          ::std::unique_ptr< IdentifierType > r (
            IdentifierTraits::create (i, f, this));

          if (!this->Identifier_)
          {
            this->Identifier_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ReferenceParametersType* ReferenceParametersType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ReferenceParametersType (*this, f, c);
    }

    ReferenceParametersType& ReferenceParametersType::
    operator= (const ReferenceParametersType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->Identifier_ = x.Identifier_;
      }

      return *this;
    }

    ReferenceParametersType::
    ~ReferenceParametersType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReferenceParametersType >
    _xsd_ReferenceParametersType_type_factory_init (
      "ReferenceParametersType",
      "http://www.w3.org/2005/08/addressing");

    // MetadataType
    //

    MetadataType::
    MetadataType ()
    : ::xml_schema::Type ()
    {
    }

    MetadataType::
    MetadataType (const MetadataType& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c)
    {
    }

    MetadataType::
    MetadataType (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void MetadataType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        break;
      }
    }

    MetadataType* MetadataType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class MetadataType (*this, f, c);
    }

    MetadataType::
    ~MetadataType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, MetadataType >
    _xsd_MetadataType_type_factory_init (
      "MetadataType",
      "http://www.w3.org/2005/08/addressing");

    // RelatesToType
    //

    RelatesToType::
    RelatesToType (const ::xml_schema::Uri& _xsd_Uri_base)
    : ::xml_schema::Uri (_xsd_Uri_base),
      RelationshipType_ (this)
    {
    }

    RelatesToType::
    RelatesToType (const RelatesToType& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Uri (x, f, c),
      RelationshipType_ (x.RelationshipType_, f, this)
    {
    }

    RelatesToType::
    RelatesToType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Uri (e, f | ::xml_schema::Flags::base, c),
      RelationshipType_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void RelatesToType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "RelationshipType" && n.namespace_ ().empty ())
        {
          this->RelationshipType_.set (RelationshipTypeTraits::create (i, f, this));
          continue;
        }
      }
    }

    RelatesToType* RelatesToType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class RelatesToType (*this, f, c);
    }

    RelatesToType& RelatesToType::
    operator= (const RelatesToType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Uri& > (*this) = x;
        this->RelationshipType_ = x.RelationshipType_;
      }

      return *this;
    }

    RelatesToType::
    ~RelatesToType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, RelatesToType >
    _xsd_RelatesToType_type_factory_init (
      "RelatesToType",
      "http://www.w3.org/2005/08/addressing");

    // RelationshipTypeOpenEnum
    //

    RelationshipTypeOpenEnum::
    RelationshipTypeOpenEnum (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
    : ::xml_schema::String (e, f, c)
    {
    }

    RelationshipTypeOpenEnum::
    RelationshipTypeOpenEnum (const ::xercesc::DOMAttr& a,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
    : ::xml_schema::String (a, f, c)
    {
    }

    RelationshipTypeOpenEnum::
    RelationshipTypeOpenEnum (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
    : ::xml_schema::String (s, e, f, c)
    {
    }

    RelationshipTypeOpenEnum* RelationshipTypeOpenEnum::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class RelationshipTypeOpenEnum (*this, f, c);
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, RelationshipTypeOpenEnum >
    _xsd_RelationshipTypeOpenEnum_type_factory_init (
      "RelationshipTypeOpenEnum",
      "http://www.w3.org/2005/08/addressing");

    // RelationshipType
    //

    RelationshipType::
    RelationshipType (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Uri (e, f, c)
    {
    }

    RelationshipType::
    RelationshipType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Uri (a, f, c)
    {
    }

    RelationshipType::
    RelationshipType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Uri (s, e, f, c)
    {
    }

    RelationshipType* RelationshipType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class RelationshipType (*this, f, c);
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, RelationshipType >
    _xsd_RelationshipType_type_factory_init (
      "RelationshipType",
      "http://www.w3.org/2005/08/addressing");

    // AttributedURIType
    //

    AttributedURIType::
    AttributedURIType (const ::xml_schema::Uri& _xsd_Uri_base)
    : ::xml_schema::Uri (_xsd_Uri_base)
    {
    }

    AttributedURIType::
    AttributedURIType (const AttributedURIType& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Uri (x, f, c)
    {
    }

    AttributedURIType::
    AttributedURIType (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Uri (e, f, c)
    {
    }

    AttributedURIType* AttributedURIType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class AttributedURIType (*this, f, c);
    }

    AttributedURIType::
    ~AttributedURIType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, AttributedURIType >
    _xsd_AttributedURIType_type_factory_init (
      "AttributedURIType",
      "http://www.w3.org/2005/08/addressing");

    // FaultCodesOpenEnumType
    //

    FaultCodesOpenEnumType::
    FaultCodesOpenEnumType (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::xml_schema::String (e, f, c)
    {
    }

    FaultCodesOpenEnumType::
    FaultCodesOpenEnumType (const ::xercesc::DOMAttr& a,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::xml_schema::String (a, f, c)
    {
    }

    FaultCodesOpenEnumType::
    FaultCodesOpenEnumType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::xml_schema::String (s, e, f, c)
    {
    }

    FaultCodesOpenEnumType* FaultCodesOpenEnumType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FaultCodesOpenEnumType (*this, f, c);
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FaultCodesOpenEnumType >
    _xsd_FaultCodesOpenEnumType_type_factory_init (
      "FaultCodesOpenEnumType",
      "http://www.w3.org/2005/08/addressing");

    // FaultCodesType
    //

    FaultCodesType::
    FaultCodesType (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Qname (e, f, c)
    {
    }

    FaultCodesType::
    FaultCodesType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Qname (a, f, c)
    {
    }

    FaultCodesType::
    FaultCodesType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Qname (s, e, f, c)
    {
    }

    FaultCodesType* FaultCodesType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FaultCodesType (*this, f, c);
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FaultCodesType >
    _xsd_FaultCodesType_type_factory_init (
      "FaultCodesType",
      "http://www.w3.org/2005/08/addressing");

    // AttributedUnsignedLongType
    //

    AttributedUnsignedLongType::
    AttributedUnsignedLongType (const ::xml_schema::UnsignedLong& _xsd_UnsignedLong_base)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedLong, char, ::xml_schema::SimpleType > (_xsd_UnsignedLong_base)
    {
    }

    AttributedUnsignedLongType::
    AttributedUnsignedLongType (const AttributedUnsignedLongType& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedLong, char, ::xml_schema::SimpleType > (x, f, c)
    {
    }

    AttributedUnsignedLongType::
    AttributedUnsignedLongType (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedLong, char, ::xml_schema::SimpleType > (e, f, c)
    {
    }

    AttributedUnsignedLongType* AttributedUnsignedLongType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class AttributedUnsignedLongType (*this, f, c);
    }

    AttributedUnsignedLongType::
    ~AttributedUnsignedLongType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, AttributedUnsignedLongType >
    _xsd_AttributedUnsignedLongType_type_factory_init (
      "AttributedUnsignedLongType",
      "http://www.w3.org/2005/08/addressing");

    // AttributedQNameType
    //

    AttributedQNameType::
    AttributedQNameType (const ::xml_schema::Qname& _xsd_Qname_base)
    : ::xml_schema::Qname (_xsd_Qname_base)
    {
    }

    AttributedQNameType::
    AttributedQNameType (const AttributedQNameType& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
    : ::xml_schema::Qname (x, f, c)
    {
    }

    AttributedQNameType::
    AttributedQNameType (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
    : ::xml_schema::Qname (e, f, c)
    {
    }

    AttributedQNameType* AttributedQNameType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class AttributedQNameType (*this, f, c);
    }

    AttributedQNameType::
    ~AttributedQNameType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, AttributedQNameType >
    _xsd_AttributedQNameType_type_factory_init (
      "AttributedQNameType",
      "http://www.w3.org/2005/08/addressing");

    // ProblemActionType
    //

    ProblemActionType::
    ProblemActionType ()
    : ::xml_schema::Type (),
      Action_ (this),
      SoapAction_ (this)
    {
    }

    ProblemActionType::
    ProblemActionType (const ProblemActionType& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      Action_ (x.Action_, f, this),
      SoapAction_ (x.SoapAction_, f, this)
    {
    }

    ProblemActionType::
    ProblemActionType (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      Action_ (this),
      SoapAction_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ProblemActionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Action
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Action",
              "http://www.w3.org/2005/08/addressing",
              &::xsd::cxx::tree::factory_impl< ActionType >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Action_)
            {
              ::std::unique_ptr< ActionType > r (
                dynamic_cast< ActionType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Action_.set (::std::move (r));
              continue;
            }
          }
        }

        // SoapAction
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "SoapAction",
              "http://www.w3.org/2005/08/addressing",
              &::xsd::cxx::tree::factory_impl< SoapActionType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->SoapAction_)
            {
              ::std::unique_ptr< SoapActionType > r (
                dynamic_cast< SoapActionType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->SoapAction_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }
    }

    ProblemActionType* ProblemActionType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ProblemActionType (*this, f, c);
    }

    ProblemActionType& ProblemActionType::
    operator= (const ProblemActionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->Action_ = x.Action_;
        this->SoapAction_ = x.SoapAction_;
      }

      return *this;
    }

    ProblemActionType::
    ~ProblemActionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ProblemActionType >
    _xsd_ProblemActionType_type_factory_init (
      "ProblemActionType",
      "http://www.w3.org/2005/08/addressing");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace WS
{
  namespace ADDRESSING
  {
    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (const ::std::string& u,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::EndpointReference (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (const ::std::string& u,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::EndpointReference (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::EndpointReference (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::std::istream& is,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::EndpointReference (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::std::istream& is,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::EndpointReference (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::EndpointReference (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::EndpointReference (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::EndpointReference (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::EndpointReference (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::xercesc::InputSource& i,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::EndpointReference (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::xercesc::InputSource& i,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::EndpointReference (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::EndpointReference (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
          ::WS::ADDRESSING::EndpointReference (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "EndpointReference",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::EndpointReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > r (
          dynamic_cast< ::WS::ADDRESSING::EndpointReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "EndpointReference",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "EndpointReference",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::EndpointReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > r (
          dynamic_cast< ::WS::ADDRESSING::EndpointReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "EndpointReference",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (const ::std::string& u,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType > (
        ::WS::ADDRESSING::ReferenceParameters (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (const ::std::string& u,
                         ::xml_schema::ErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType > (
        ::WS::ADDRESSING::ReferenceParameters (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType > (
        ::WS::ADDRESSING::ReferenceParameters (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::std::istream& is,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::ReferenceParameters (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::std::istream& is,
                         ::xml_schema::ErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::ReferenceParameters (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::ReferenceParameters (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::ReferenceParameters (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::ErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::ReferenceParameters (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::ReferenceParameters (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::xercesc::InputSource& i,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType > (
        ::WS::ADDRESSING::ReferenceParameters (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::xercesc::InputSource& i,
                         ::xml_schema::ErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType > (
        ::WS::ADDRESSING::ReferenceParameters (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType > (
        ::WS::ADDRESSING::ReferenceParameters (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType > (
          ::WS::ADDRESSING::ReferenceParameters (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ReferenceParameters",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::ReferenceParametersType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType > r (
          dynamic_cast< ::WS::ADDRESSING::ReferenceParametersType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ReferenceParameters",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::Flags f,
                         const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ReferenceParameters",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::ReferenceParametersType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType > r (
          dynamic_cast< ::WS::ADDRESSING::ReferenceParametersType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ReferenceParameters",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (const ::std::string& u,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::MetadataType > (
        ::WS::ADDRESSING::Metadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (const ::std::string& u,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::MetadataType > (
        ::WS::ADDRESSING::Metadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::MetadataType > (
        ::WS::ADDRESSING::Metadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::std::istream& is,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::Metadata (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::std::istream& is,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::Metadata (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::Metadata (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::Metadata (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::Metadata (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::Metadata (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::xercesc::InputSource& i,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::MetadataType > (
        ::WS::ADDRESSING::Metadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::xercesc::InputSource& i,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::MetadataType > (
        ::WS::ADDRESSING::Metadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::MetadataType > (
        ::WS::ADDRESSING::Metadata (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (const ::xercesc::DOMDocument& doc,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::ADDRESSING::MetadataType > (
          ::WS::ADDRESSING::Metadata (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Metadata",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::MetadataType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::WS::ADDRESSING::MetadataType > r (
          dynamic_cast< ::WS::ADDRESSING::MetadataType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Metadata",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Metadata",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::MetadataType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::WS::ADDRESSING::MetadataType > r (
          dynamic_cast< ::WS::ADDRESSING::MetadataType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Metadata",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (const ::std::string& u,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::MessageID (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (const ::std::string& u,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::MessageID (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::MessageID (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::std::istream& is,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::MessageID (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::std::istream& is,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::MessageID (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::MessageID (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::MessageID (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::MessageID (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::MessageID (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::xercesc::InputSource& i,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::MessageID (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::xercesc::InputSource& i,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::MessageID (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::MessageID (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (const ::xercesc::DOMDocument& doc,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
          ::WS::ADDRESSING::MessageID (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "MessageID",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::AttributedURIType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > r (
          dynamic_cast< ::WS::ADDRESSING::AttributedURIType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MessageID",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "MessageID",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::AttributedURIType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > r (
          dynamic_cast< ::WS::ADDRESSING::AttributedURIType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MessageID",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (const ::std::string& u,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType > (
        ::WS::ADDRESSING::RelatesTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (const ::std::string& u,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType > (
        ::WS::ADDRESSING::RelatesTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType > (
        ::WS::ADDRESSING::RelatesTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::std::istream& is,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::RelatesTo (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::std::istream& is,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::RelatesTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::RelatesTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::RelatesTo (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::RelatesTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::RelatesTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::xercesc::InputSource& i,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType > (
        ::WS::ADDRESSING::RelatesTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::xercesc::InputSource& i,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType > (
        ::WS::ADDRESSING::RelatesTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType > (
        ::WS::ADDRESSING::RelatesTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (const ::xercesc::DOMDocument& doc,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType > (
          ::WS::ADDRESSING::RelatesTo (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "RelatesTo",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::RelatesToType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType > r (
          dynamic_cast< ::WS::ADDRESSING::RelatesToType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RelatesTo",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "RelatesTo",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::RelatesToType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType > r (
          dynamic_cast< ::WS::ADDRESSING::RelatesToType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RelatesTo",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::ReplyTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::ReplyTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::ReplyTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::ReplyTo (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::ReplyTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::ReplyTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::ReplyTo (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::ReplyTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::ReplyTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::ReplyTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::ReplyTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::ReplyTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
          ::WS::ADDRESSING::ReplyTo (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ReplyTo",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::EndpointReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > r (
          dynamic_cast< ::WS::ADDRESSING::EndpointReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ReplyTo",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ReplyTo",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::EndpointReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > r (
          dynamic_cast< ::WS::ADDRESSING::EndpointReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ReplyTo",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (const ::std::string& u,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::From (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (const ::std::string& u,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::From (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::From (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::std::istream& is,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::From (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::std::istream& is,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::From (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::From (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::From (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::From (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::From (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::xercesc::InputSource& i,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::From (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::xercesc::InputSource& i,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::From (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::From (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (const ::xercesc::DOMDocument& doc,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
          ::WS::ADDRESSING::From (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "From",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::EndpointReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > r (
          dynamic_cast< ::WS::ADDRESSING::EndpointReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "From",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "From",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::EndpointReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > r (
          dynamic_cast< ::WS::ADDRESSING::EndpointReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "From",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::FaultTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::FaultTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::FaultTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::FaultTo (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::FaultTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::FaultTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::FaultTo (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::FaultTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::FaultTo (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::FaultTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::FaultTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
        ::WS::ADDRESSING::FaultTo (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > (
          ::WS::ADDRESSING::FaultTo (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FaultTo",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::EndpointReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > r (
          dynamic_cast< ::WS::ADDRESSING::EndpointReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FaultTo",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FaultTo",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::EndpointReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType > r (
          dynamic_cast< ::WS::ADDRESSING::EndpointReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FaultTo",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (const ::std::string& u,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::To (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (const ::std::string& u,
        ::xml_schema::ErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::To (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::To (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::std::istream& is,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::To (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::std::istream& is,
        ::xml_schema::ErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::To (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::To (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::To (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::ErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::To (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::To (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::xercesc::InputSource& i,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::To (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::xercesc::InputSource& i,
        ::xml_schema::ErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::To (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::To (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (const ::xercesc::DOMDocument& doc,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
          ::WS::ADDRESSING::To (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "To",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::AttributedURIType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > r (
          dynamic_cast< ::WS::ADDRESSING::AttributedURIType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "To",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "To",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::AttributedURIType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > r (
          dynamic_cast< ::WS::ADDRESSING::AttributedURIType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "To",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (const ::std::string& u,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::Action (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (const ::std::string& u,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::Action (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::Action (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::std::istream& is,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::Action (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::std::istream& is,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::Action (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::Action (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::Action (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::Action (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::Action (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::xercesc::InputSource& i,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::Action (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::xercesc::InputSource& i,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::Action (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
        ::WS::ADDRESSING::Action (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (const ::xercesc::DOMDocument& doc,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > (
          ::WS::ADDRESSING::Action (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Action",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::AttributedURIType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > r (
          dynamic_cast< ::WS::ADDRESSING::AttributedURIType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Action",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Action",
          "http://www.w3.org/2005/08/addressing",
          &::xsd::cxx::tree::factory_impl< ::WS::ADDRESSING::AttributedURIType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType > r (
          dynamic_cast< ::WS::ADDRESSING::AttributedURIType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Action",
        "http://www.w3.org/2005/08/addressing");
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (const ::std::string& u,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType > (
        ::WS::ADDRESSING::RetryAfter (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (const ::std::string& u,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType > (
        ::WS::ADDRESSING::RetryAfter (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType > (
        ::WS::ADDRESSING::RetryAfter (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::std::istream& is,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::RetryAfter (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::std::istream& is,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::RetryAfter (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::WS::ADDRESSING::RetryAfter (isrc, h, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::WS::ADDRESSING::RetryAfter (isrc, f, p);
    }

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::std::istream& is,
                const ::std::string& sid,
                ::xm