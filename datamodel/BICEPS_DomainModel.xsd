<?xml version="1.0" encoding="utf-8"?>
<!--
	Clue for documentation elements: Please start and end a documentation by directly beginning after/ending before the opening/closing tag. Example:
	<xsd:documentation>Here the doc starts [...] and ends.</document>

	Do not do something like this:
	<xsd:documentation>
		Here the doc starts [...] and ends.
	</document>


	Always begin a new line at the beginning of the line and do not indent with whitespaces or tabs. Example:
	<xsd:documentation>Here the doc starts [...]
Here, a new line starts [...]
Another new line starts [...]
and the doc ends.</document>

	Do not do something like this:
	<xsd:documentation>Here the doc starts [...]
		Here, a new line starts [...]
		Another new line starts [...]
		and the doc ends.</document>

	All these rules prevent the documentation output format (that is generated using Altova XML Spy) from looking akward/not well-shaped.

	=====

	Information: Search for "TODO: add documentation" for missing documentation items
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ext="http://extension-point-uri/15/03" xmlns:dom="http://domain-model-uri/15/04" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:npre="http://jaxb2-commons.dev.java.net/namespace-prefix" targetNamespace="http://domain-model-uri/15/04" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0-BETA_04" xml:lang="en" jaxb:version="2.0">
	<xsd:import namespace="http://extension-point-uri/15/03" schemaLocation="ExtensionPoint.xsd"/>
	<xsd:annotation>
		<xsd:documentation>This XML schema defines  the 'Basic Integrated Clinical Environment Protocol Specification' (BICEPS) that is a Domain Information Model (DIM) for point of care medical device communication. It encompasses the device model and the corresponding messages. This XML Schema is based on the ISO/IEEE 11073-10201 Domain Information Model standard, which belongs to the "Point-of-care medical device communication" standard family in ISO/IEEE 11073. This standard family should not to be confused with the ISO/IEEE 11073 "Personal Health Device" standard family.
While former is based on the standards ISO/IEEE 11073-10101, 11073-10201, 11073-20101, and 11073-30200, the latter is based on ISO/IEEE 11073-20601 and ISO/IEEE 11073-104xx.
The Domain Information model is subdivided into two parts, a static part (referred to as Descriptor) that provides general information about the the hardware specification of the elements and a dynamic part (referred to as State) that may change during time.</xsd:documentation>
		<xsd:appinfo>
			<jaxb:schemaBindings>
				<jaxb:nameXmlTransform>
					<!--jaxb:elementName prefix="Msg"/>
						<jaxb:typeName prefix="Msg"/>
						<jaxb:anonymousTypeName prefix="Msg"/-->
				</jaxb:nameXmlTransform>
			</jaxb:schemaBindings>
			<!--jaxb:globalBindings generateValueClass="false" /-->
			<!--jaxb.globalBindings>
			<jaxb:javaType name="java.util.Calendar" xmlType="xs:dateTime" 
parseMethod="javax.xml.bind.DatatypeConverter.parseDateTime" 
printMethod="javax.xml.bind.DatatypeConverter.printDateTime"/> 
			</jaxb.globalBindings-->
		</xsd:appinfo>
	</xsd:annotation>
	<!--Common Data Types-->
	<xsd:simpleType name="Handle">
		<xsd:annotation>
			<xsd:documentation>Handles are used to efficiently identify various objects in the MDIB. A handle SHALL be locally unique.

Note: Locally unique means unique within one MDIB context. This is in contrast to 11073 where locally unique has the scope of an MDS only.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="1"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="HandleRef">
		<xsd:annotation>
			<xsd:documentation>HandleRef describes a handle reference. This data type is used to form logical connections to elements that possesses a Handle attribute.
			
Example: Metric states reference associated metric descriptors by means of a HandleRef attribute called DescriptorHandle.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="1"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="Timestamp">
		<xsd:annotation>
			<xsd:documentation>A 64-bit integer value that represents a time stamp. It SHALL count the milliseconds between the current time and midnight, January 1, 1970 UTC.

Note that while the unit of time of Timestamp is a millisecond, the granularity of the value depends on the hardware/software system and MAY be larger (e.g., tens of milliseconds).

Timestamps in the MDIB SHALL be optional. If anywhere in the MDIB a timestamp is used, the device SHALL provide a Clock object.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:unsignedLong"/>
	</xsd:simpleType>
	<xsd:simpleType name="VersionCounter">
		<xsd:annotation>
			<xsd:documentation>Counter of a version of an entity of the MDIB. Typically used by descriptors, states, the whole MDIB or localized texts to describe a particular revision.

Note: An event that increases a version counter MAY also be a cold boot.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:unsignedLong"/>
	</xsd:simpleType>
	<xsd:simpleType name="ReferencedVersion">
		<xsd:annotation>
			<xsd:documentation>In contrast to VersionCounter, ReferencedVersion does not represent a version of an entity but a reference to a particular version of an entity.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="dom:VersionCounter"/>
	</xsd:simpleType>
	<xsd:attribute name="MDIBVersion" type="dom:VersionCounter">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:property name="SequenceNumber"/>
			</xsd:appinfo>
			<xsd:documentation>The unique change version number of the MDIB. The change sequence number SHALL be incremented by one everytime the MDIB of the device changes. The sequence number MAY be reseted during a device restart and if no persistence of the MDIB could be guaranteed.</xsd:documentation>
		</xsd:annotation>
	</xsd:attribute>
	<xsd:simpleType name="Activation">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
			<xsd:documentation>Activation provides a simple set of activation states of a state object.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="On">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ON"/>
					</xsd:appinfo>
					<xsd:documentation>Defines an object to be set "On".</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Off">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="OFF"/>
					</xsd:appinfo>
					<xsd:documentation>Defines an object to be set "Off".</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="CodeIdentifier">
		<xsd:annotation>
			<xsd:documentation>Defines the type of a CodeId element.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="1"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="LocalizedTextRef">
		<xsd:annotation>
			<xsd:documentation>Defines a reference to a localized text. </xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="1"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="LocalizedText">
		<xsd:annotation>
			<xsd:documentation>LocalizedText is a bundled element to reference texts in different languages or to provide a text in a specific language.

The goal of text references is to shrink the overall size of the MDIB by only providing a single reference to a text file that translates a text to multiple languages instead of inserting all translations to the MDIB. Referenced texts MAY be requestable by any transport specific means. If no means exist to request localized texts, the application SHOULD use LocalizedText to represent a text in a single language.</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="Lang" type="xsd:language" use="optional">
					<xsd:annotation>
						<xsd:documentation>Optional language identifier in accordance with RFC 5646 (see http://tools.ietf.org/html/rfc5646).

The following rules apply to this attribute:
- If a Ref attribute is given, Lang MAY be defined. If Lang is defined in conjunction with Ref, it indicates that the text is only available in the language specified by Lang.
- If no Ref attribute is given, Lang SHOULD be defined. In this case Lang specifies the language of the LocalizedText content. If Lang is not specified, the language of the content is unknown.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="Ref" type="dom:LocalizedTextRef" use="optional">
					<xsd:annotation>
						<xsd:documentation>References a text in a localized text file. How this text is retrieved is part of the service/transport model.

Text references SHALL be unique, but are independent of any handle names.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="Version" type="dom:ReferencedVersion" use="optional">
					<xsd:annotation>
						<xsd:documentation>Current revision of the referenced text in the localized text file.

Texts might change over time, but references are per definitionem unique and typically do not change. To check if a text that is referenced by Ref has changed, LocalizedText SHOULD include Version. This saves to query a localized text file if the referencing element has changed, but the referenced text has not. If no version number is given, a client has to assume that the text changes everytime the referencing element changes. Hence, the client has to query the localized text file on each modification.

To keep things simple, every translated text in a localized text file that belongs to a particular reference SHALL share the same version number. From this it follows that if Version has changed, every translation of a referenced text is obsolete even if only a single translation has changed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:element name="CodingSystemId" type="xsd:anyURI">
		<xsd:annotation>
			<xsd:documentation>Unique identifier of a coding system.

Example: "urn:oid:1.3.6.1.4.1.19376.1.6.7.1" for the ISO/IEC 11073-10101-2004.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="CodingSystemName" type="dom:LocalizedText">
		<xsd:annotation>
			<xsd:documentation>Human-readable name of a coding system described by CodingSystemId.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="VersionId" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation>Describes a particular version of a coding system.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="CodeId" type="dom:CodeIdentifier">
		<xsd:annotation>
			<xsd:documentation>Mandatory unique identifier of the code in the coding system and partition. No default value is implied.

Example:  As "20720" from Block 2, of 11073-10101:2004 is the id for  "MDC_PRESS_AWAY", the context-free code id (CF_Code10) is "151792" which SHOULD be used.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- Instance Identifier & CodedValue 
	see 			http://www.hl7.org/documentcenter/public_temp_50880C1B-1C23-BA17-0C922B819FE091A2/standards/V3/core_principles/infrastructure/coreprinciples/v3modelcoreprinciples.html#coreP_Identifying-ii-cd 
-->
	<xsd:complexType name="InstanceIdentifier">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="InstanceIdentifier"/>
			</xsd:appinfo>
			<xsd:documentation>An identifier that uniquely identifies a thing or object. Examples are object identifier for medical record number, order ids, Location Ids, etc. Note that an InstanceIdentifier does not identify the type of the object being identified, or the type of the association between the object and the identifier - it is only the identifier itself.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="IdentifierName" type="dom:LocalizedText" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>This is a localized human-readable name for the namespace represented in the root.
					The Identifier Name has no computational value. identifierName can never modify the meaning of root. The purpose of a Identifier Name is to assist an unaided human interpreter of an II value to interpret the identifier. Applications SHALL NOT attempt to perform any decision-making, matching, filtering or other processing based on this presence or value of this property. It is for display and development assistance only. All decision logic SHALL be based solely on the root and extension properties. Conformant systems MAY choose not to implement identifierName but SHALL NOT reject instances because identifierName is present.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="IdentifierNames"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="root" type="xsd:anyURI" use="required">
			<xsd:annotation>
				<xsd:documentation>A unique identifier that guarantees the global uniqueness of the instance identifier. The root alone may be the entire instance identifier.
				In the presence of a non-null extension, the root is the unique identifier for the "namespace" of the identifier in the extension.
				In situations where an extension is known, but the root is not known, the InstanceIdentifier should be populated with a nullFlavor "Unknown" and an extension with the value. These situations may arise e.g. with point-of-care devices that contain a simple bar code scanner. In some of these cases, it may be possible to create a new InstanceIdentifier with a known root at a later time.
				How the nullFlavor "Unknown" is encoded depends on the type of URI.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="extension" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>A character string as a unique identifier within the scope of the identifier root.
				If a non-null extension exists, the root specifies a namespace ("assigning authority" or "identifier type"). The extension property MAY be empty in which case the root OID is the complete unique identifier. If the root is not a complete unique identifier, and the extension is not known, then the extension should be populated with a nullFlavor "Unknown". How the nullFlavor "Unknown" is encoded depends on the type of root URI.
				</xsd:documentation>
				<xsd:appinfo>
					<jaxb:property name="ext"/>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="CodedValue">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="CodedValue"/>
			</xsd:appinfo>
			<xsd:documentation>In general, in an interoperability format, objects, attributes, and methods are identified by nomenclature codes. CodedValue offers the ability to represent such nomenclature codes.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element ref="dom:CodingSystemId" minOccurs="0">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:property name="CodingSystem"/>
					</xsd:appinfo>
					<xsd:documentation>Optional unique identifier of the coding system that the code originating from. If no identifier is defined, the default value SHALL be "urn:oid:1.3.6.1.4.1.19376.1.6.7.1" which references to ISO/IEC 11073-10101:2004.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="dom:CodingSystemName" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:property name="CodingSystemName"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="dom:VersionId" minOccurs="0">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:property name="Version"/>
					</xsd:appinfo>
					<xsd:documentation>Describes a particular version of the coding system defined by CodingSystem. VersionId SHALL be set if multiple versions of the underlying coding system exist and a unique identification of the coded value is not possible by other means.

Example: "20041215" for the ISO/IEC 11073-10101:2004, as it is the release date of this first edition of the standard.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="dom:CodeId">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:property name="Code"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="ConceptDescription" type="dom:LocalizedText" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Multiple optional texts that describe the code in more detail. The descriptions SHALL distinguish in their language code. No default value is implied.

Example: "A metric exceeds a given threshold." for the above used "MDC_EVT_LIMIT_AL_HI".</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="Descriptions"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="CodedWithTranslations">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="CodedWithEquivalents"/>
			</xsd:appinfo>
			<xsd:documentation>Defines a coded value that references synonymous coded values.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:CodedValue">
				<xsd:sequence>
					<xsd:element name="Translation" type="dom:CodedValue" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>Set of alternative or equivalent representations.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="CauseInfo">
		<xsd:annotation>
			<xsd:documentation>Cause information for an alert condition.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="Remedy" type="dom:RemedyInfo" minOccurs="0">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:property name="RemedyInfo"/>
					</xsd:appinfo>
					<xsd:documentation>Optional information on how to remedy the alert condition.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Description" type="dom:LocalizedText" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Multiple optional texts that describe cause information. The descriptions SHALL distinguish in their language code. No default value is implied.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="RemedyInfo">
		<xsd:annotation>
			<xsd:documentation>Remedy information for a cause of an alert condition.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="Description" type="dom:LocalizedText" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Multiple optional texts that describe remedy information. The descriptions SHALL distinguish in their language code. No default value is implied.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:attributeGroup name="RangeBounds">
		<xsd:annotation>
			<xsd:documentation>Attribute group that defines constraints to a given range.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="Lower" type="xsd:decimal" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="Lower"/>
				</xsd:appinfo>
				<xsd:documentation>The including lower bound of the range. No default value is implied.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="Upper" type="xsd:decimal" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="Upper"/>
				</xsd:appinfo>
				<xsd:documentation>The including upper bound of the range. No default value is implied.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="StepWidth" type="xsd:decimal" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="StepWidth"/>
				</xsd:appinfo>
				<xsd:documentation>The numerical distance between two values in the range of the given upper and lower bound. No default value is implied.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>
	<xsd:complexType name="Range">
		<xsd:annotation>
			<xsd:documentation>A range of decimal values which provides a lower and an upper bound as well as a step width.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="dom:RangeBounds"/>
	</xsd:complexType>
	<xsd:complexType name="Measure">
		<xsd:annotation>
			<xsd:documentation>This type describes a measure and is used only for stateful object attributes that do not have a reference on a descriptor object. For this reason, the measurement unit is directly embedded.

Example: Weight of a patient.
				</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="MeasurementUnit" type="dom:CodedValue">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:property name="UnitCode"/>
					</xsd:appinfo>
					<xsd:documentation>The unit (dimension) of the measure.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="MeasuredValue" type="xsd:decimal">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="MeasuredValue"/>
				</xsd:appinfo>
				<xsd:documentation>The value of the measure.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:simpleType name="IntendedUse">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
			<xsd:documentation>Defines the usage for a medical object in the MDIB.

Enumeration values prefixed with "Med" indicate the maximum acceptable "severity" the information is suitable to support. The severity levels refer to the levels given in IEC 62304.

The risk assessment of the manufacturer shall consider for each information the effects of erroneous information on third party devices, especially the severity of the resulting harm, which may be limited to the severity stated by this flag.
E.g., a manufacturer flags an information as suitable to contribute to hazards with severity "No injury or damage to health is possible". Within his risk assessment the manufacturer may assume that erroneous information will not lead to harm and the associated risk is acceptable.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Inf">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="INFORMATIONAL"/>
					</xsd:appinfo>
					<xsd:documentation>Inf = Informational. The descriptor and the related state information shall be used for information purposes only. They are not intended to be used in medical-grade algorithms or applications.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="MedA">
				<xsd:annotation>
					<xsd:documentation>MedA = Medical Class A. The descriptor and related state information are intended to be used in medical-grade algorithms or applications. Class A indicates that no injury or damage to health is possible if the descriptor and/or related state information is somehow erroneous.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="MedB">
				<xsd:annotation>
					<xsd:documentation>MedB = Medical Class B. The descriptor and related state information are intended to be used in medical-grade algorithms or applications. Class B indicates that non-serious injury is possible if the descriptor and/or related state information is somehow erroneous.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="MedC">
				<xsd:annotation>
					<xsd:documentation>MedC = Medical Class C. The descriptor and related state information are intended to be used in medical-grade algorithms or applications. Class C indicates that death or serious injury is possible if the descriptor and/or related state information is somehow erroneous.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="AbstractDescriptor">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="Descriptor"/>
			</xsd:appinfo>
			<xsd:documentation>AbstractDescriptor defines foundational meta information of any object that is included in the descriptive part of the MDIB (hence, MDDescription includes a set of AbstractDescriptor objects). Any descriptor object is derived from AbstractDescriptor. The AbstractDescriptor's counterpart is AbstractState.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="Type" type="dom:CodedValue" minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>The type of a descriptor that provides specific information about the descriptor instance, e.g., a coded value of an MDS descriptor that designates an anaesthesia workstation.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="Handle" type="dom:Handle" use="required">
			<xsd:annotation>
				<xsd:documentation>The unique handle of the descriptor. Can be used by AbstractState instances to reference the descriptor.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="DescriptorVersion" type="dom:VersionCounter" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="DescriptorVersion"/>
				</xsd:appinfo>
				<xsd:documentation>A version number that is incremented by one with every descriptor modification. The implied value for the initial descriptor instance SHALL be "0".</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="IntendedUse" type="dom:IntendedUse" use="optional">
			<xsd:annotation>
				<xsd:documentation>The indented use of the data that is described with this descriptor. Default value SHALL be "Inf".</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="AbstractState">
		<xsd:annotation>
			<xsd:documentation>AbstractState defines foundational meta information of any object that is included in the state part of the MDIB (hence, MDState includes a set of AbstractState objects). Any state object is derived from AbstractState. The AbstractState's counterpart is AbstractDescriptor.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="State"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attribute name="Handle" type="dom:Handle" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="Handle"/>
				</xsd:appinfo>
				<xsd:documentation>An optional name to uniquely identify a state. Handle names are only required if the relation to a descriptor is ambiguous. The semantics are as follows:
- A state SHALL not own a handle attribute if it is and will be the only state belonging to a descriptor (defined as a single state). Single states are uniquely identifiable by the corresponding descriptor handle.
- A state SHALL own a handle attribute if it is a multi state. A state is a multi state if there are or will be other states referencing the same descriptor.
- The handle of two states SHALL be equal if and only if they describe the same state even so in a different MDIB/State version.

From this it follows that a state is a single state if it not possesses a handle attribute and a state is a multi state if it possesses a handle attribute.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="StateVersion" type="dom:VersionCounter" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="StateVersion"/>
				</xsd:appinfo>
				<xsd:documentation>A state's version number increased by one with every state modification. The implied value for the initial state instance SHALL be "0".</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="DescriptorHandle" type="dom:HandleRef" use="required">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="ReferencedDescriptor"/>
				</xsd:appinfo>
				<xsd:documentation>The handle reference of a descriptor to that this state belongs to.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="DescriptorVersion" type="dom:ReferencedVersion" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="DescriptorVersion"/>
				</xsd:appinfo>
				<xsd:documentation>The current version of the descriptor to that this state belongs to.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<!--MDIB (Medical Device Information Base) -->
	<xsd:complexType name="MDDescription">
		<xsd:annotation>
			<xsd:documentation>MDDescription is the root container to represent the descriptive part of the MDIB. The descriptive part describes the capabilities provided by a medical device, e.g., which measurements, alerts and settings it provides. As it does not change as frequent as the state part, the descriptive part is well-known as the (almost) static part of the MDIB. The MDDescription's counterpart is MDState.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="MDS" type="dom:AbstractMDSDescriptor" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>List of Medical Device Descriptions that are contained in the MDIB and need to be described.</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="MDSDescriptors"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="DescriptionVersion" type="dom:VersionCounter" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="DescriptorVersion"/>
				</xsd:appinfo>
				<xsd:documentation>Version number of the description. The version number is incremented by one every time the description changes. The implied value SHALL be "0".</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="MDState">
		<xsd:annotation>
			<xsd:documentation>MDState is the root container to represent the state part of the MDIB. The state part describes the values provided by a medical device, e.g., which measurement or alert values as well as patient demographics it provides. As it most often changes very frequently, the state part is well-known as the dynamic part of the MDIB. The MDState's counterpart is MDDescription.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="State" type="dom:AbstractState" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>List of states that describe the current status of the objects in the MDIB.</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="States"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="StateVersion" type="dom:VersionCounter" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="StateVersion"/>
				</xsd:appinfo>
				<xsd:documentation>Version number of the states. The version number is incremented every time the states part changes. The implied value SHALL be "0".</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<!--MDIB Instances-->
	<xsd:complexType name="MDIB">
		<xsd:annotation>
			<xsd:documentation>The Medical Device information Base (MDIB) is the root object of the Domain Information Model (DIM). It comprises the capability description of the medical device(s) it represents in the MDDescription (descriptive part) as well as the current status in MDState (state part).
			</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="MDIB"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="MDDescription" type="dom:MDDescription">
				<xsd:annotation>
					<xsd:documentation>Contains the descriptive part of the MDIB. The descriptive part represents the structure of the medical device system(s).</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="Description"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="MDState" type="dom:MDState">
				<xsd:annotation>
					<xsd:documentation>Contains the state part of the MDIB. The state part represents the status of the objects in the MDIB.</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="States"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute ref="dom:MDIBVersion" use="required"/>
	</xsd:complexType>
	<!--System-->
	<xsd:complexType name="ProductionSpecification">
		<xsd:annotation>
			<xsd:documentation>TODO, from FHIR spec</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="specType" type="dom:CodedValue"/>
			<xsd:element name="productionSpec" type="xsd:string"/>
			<xsd:element name="componentId" type="dom:InstanceIdentifier" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="SystemMetaData">
		<xsd:annotation>
			<xsd:documentation>SystemMetaData provides device meta information of the underlying medical device system.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="UDI" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>The Unique Device Identification as defined by the FDA.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<!-- UDI only needed if it is an aggregator device otherwise in WS-Discovery or lower levels info -->
			<xsd:element name="Manufacturer" type="dom:LocalizedText" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Multiple optional texts that describe manufacturer name. The names SHALL distinguish in their language code. No default value is implied.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="ModelName" type="dom:LocalizedText" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Multiple optional texts that describe model name. The names SHALL distinguish in their language code. No default value is implied.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="ModelNumber" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Multiple optional model numbers. No default value is implied.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="SerialNumber" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Multiple optional serial numbers. No default value is implied.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="SystemContext">
		<xsd:annotation>
			<xsd:documentation>The context of an MDS that lists the possible relationship of a device into its usage environment by means of context descriptors. Context descriptors do not contain any stateful information. They only assert that the underlying MDS can provide corresponding context state information.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDescriptor">
				<xsd:sequence>
					<xsd:element name="PatientContext" type="dom:PatientContextDescriptor" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The patient context indicates that the device can provide information about the patient that it is associated with.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="LocationContext" type="dom:LocationContextDescriptor" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The location context indicates that the device can provide information about the location(s) that it is associated with.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="EnsembleContext" type="dom:EnsembleContextDescriptor" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The ensemble context indicates that the device can provide information about the ensemble(s) that it is associated with. An ensemble represents an arbitrary grouping of devices. The semantics depend on the ensemble itself.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="OperatorContext" type="dom:OperatorContextDescriptor" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The operator context indicates that the device can provide information about the operator(s) that it is associated with.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="WorkflowContext" type="dom:WorkflowContextDescriptor" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The workflow context indicates that the device can provide information about the workflow step(s) that it is associated with.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AbstractDeviceComponent">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="DeviceComponent"/>
			</xsd:appinfo>
			<xsd:documentation>TODO, copy from FHIR</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDescriptor">
				<xsd:sequence>
					<xsd:element name="ProductionSpecification" type="dom:ProductionSpecification" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>TODO</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--VMS-->
	<xsd:complexType name="AbstractMDSDescriptor">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="MDSDescriptor"/>
			</xsd:appinfo>
			<xsd:documentation>AbstractMDSDescriptor represents a Medical Device System (MDS) that in turn represents a medical device such as an anaesthesia workstation. The MDSDescriptor element contains an abstraction of the hardware specification of a medical device.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDeviceComponent">
				<xsd:sequence>
					<xsd:element name="MetaData" type="dom:SystemMetaData" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Describes a device's meta data defined by SystemMetaData. No default value is implied.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Context" type="dom:SystemContext">
						<xsd:annotation>
							<xsd:documentation>Defines the contexts this device can provide.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Clock" type="dom:ClockDescriptor" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Defines the date/time capabilities of an MDS. No default value is implied.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="HydraMDSDescriptor">
		<xsd:annotation>
			<xsd:documentation>HydraMDS is a specialization of an abstract Medical Device System (MDS) that MAY have multiple VMDs.

The 11073-10201 has four specilizations: Simple MDS, Hydra MDS, Composite Single Bed MDS, and Composite Multiple Bed MDS. In contrast to a Simple MDS a Hydra MDS may have more than one Virtual Medical Device (VMD). Thus, a Simple MDS can be modeled with a Hydra MDS. Both Composite MDS allow to create recursive MDS structures.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractMDSDescriptor">
				<xsd:sequence>
					<xsd:element name="SCO" type="dom:SCODescriptor" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>A service controller to allow for remote control of an MDS. No default value is implied. Hence, a missing SCO descriptor implies that there is no remote control provided.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="AlertSystem" type="dom:AlertSystemDescriptor" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>An alert system on MDS level that may supervise conditions for all levels in the MDS hierarchy including the MDS itself.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="VMD" type="dom:VMDDescriptor" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of VMDs that belongs to this MDS.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="VMDs"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--System - State-->
	<xsd:complexType name="AbstractMDSState">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="MDSState"/>
			</xsd:appinfo>
			<xsd:documentation>The state of an abstract MDS.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:ComponentState">
				<xsd:attribute name="Lang" type="xsd:language">
					<xsd:annotation>
						<xsd:documentation>The current locale information that is configured for an MDS in accordance with RFC 5646 (see http://tools.ietf.org/html/rfc5646). For example, this is the language that is used for display purposes on the UI. Default value SHALL be "en".</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="HydraMDSState">
		<xsd:annotation>
			<xsd:documentation>The state of an Hydra MDS.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractMDSState"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!--Alert-->
	<xsd:simpleType name="AlertConditionKind">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass name="AlertConditionType"/>
			</xsd:appinfo>
			<xsd:documentation>AlertConditionKind categorizes alert conditions by their origin.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Phy">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="PHYSIOLOGICAL"/>
					</xsd:appinfo>
					<xsd:documentation>Phy = Physiological. The condition arises from a patient-related variable. Examples: "Blood pressure high" or "minute volume low".</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Tec">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="TECHNICAL"/>
					</xsd:appinfo>
					<xsd:documentation>Tec = Technical. The condition arises from a monitored equipment-related or Alert System-related variable. Examples: "Battery low" or "sensor unplugged".</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Oth">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="OTHER"/>
					</xsd:appinfo>
					<xsd:documentation>Oth = Other. The condition arises from another origin, e.g., equipment-
user advisory conditions like "room temperature high".</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="AlertConditionPriority">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
			<xsd:documentation>Categorizes alert conditions into priorities.
AlertConditionPriority can be used to distinguish the severity of the potential or actual hazard that exists if this alert condition is present. Note: The priority is assigned through risk analysis.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Lo">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="LOW"/>
					</xsd:appinfo>
					<xsd:documentation>Lo = Low. Awareness for the alert condition is required.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Me">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="MEDIUM"/>
					</xsd:appinfo>
					<xsd:documentation>Me = Medium. Prompt response to remove the alert condition is required.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Hi">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="HIGH"/>
					</xsd:appinfo>
					<xsd:documentation>Hi = High. Immediate response to remove the alert condition is required.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="None">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="NONE"/>
					</xsd:appinfo>
					<xsd:documentation>No awareness for the alert condition is required.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="AlertSignalManifestation">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
			<xsd:documentation>Categorizes alert signals by the way they can be recognized by the alerted human, e.g., the nurse.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Aud">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="AUDIBLE"/>
					</xsd:appinfo>
					<xsd:documentation>Aud = Audible. The alert signal manifests in an audible manner, i.e., the alert can be heard. Example: an alarm sound.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Vis">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="VISIBLE"/>
					</xsd:appinfo>
					<xsd:documentation>Vis = Visible. The alert signal manifests in a visible manner, i.e., the alert can be seen. Example: a red flashing light.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Tan">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="TANGIBLE"/>
					</xsd:appinfo>
					<xsd:documentation>Tan = Tangible. The alert signal manifests in a tangible manner, i.e., the alert can be felt. Example: vibration.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="AbstractAlertDescriptor">
		<xsd:annotation>
			<xsd:documentation>AbstractAlertDescriptor acts as a base class for all further alert desriptors which contain meta information on alerts.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AlertSystemDescriptor">
		<xsd:annotation>
			<xsd:documentation>An alert system groups alert conditions and their related alert signals. It therefore holds a list of AlertConditionDescriptor and AlertSignalDescriptor elements. It detects alert conditions and - as appropriate - generates alert signals.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractAlertDescriptor">
				<xsd:sequence>
					<xsd:element name="AlertCondition" type="dom:AlertConditionDescriptor" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>Contains the descriptions of all alert conditions that can be detected by this alert system.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="AlertConditions"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="AlertSignal" type="dom:AlertSignalDescriptor" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>Contains the descriptions of all alert signals that MAY be generated by this alert system as a consequence of a detected alert condition.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="AlertSignals"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="MaxPhysiologicalAlarmListEntries" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>The maximum number of physisiological alarm conditions that can be present at a point of time. Default value SHALL be "1".</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="MaxTechnicalAlarmListEntries" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>The maximum number of technical alarm conditions that can be present at a point of time. Default value SHALL be "1".</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="SelfCheckPeriod" type="xsd:duration" use="optional">
					<xsd:annotation>
						<xsd:documentation>The time period in milliseconds after which a self test of the alert system is performed. No default value is implied.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AlertConditionDescriptor">
		<xsd:annotation>
			<xsd:documentation>An alert condition contains the information about a potentially or actually hazardous situation. Examples: An alert limit has been exceeded or a sensor has been unplugged.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractAlertDescriptor">
				<xsd:sequence>
					<xsd:element name="Kind" type="dom:AlertConditionKind">
						<xsd:annotation>
							<xsd:documentation>Describes the kind of the alert condition (see AlertConditionKind for further description).</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="ConditionType"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Source" type="dom:HandleRef" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>A list of handle references to sources (e.g., metrics) that cause this alert condition.

Example if a source is present: The heart rate metric is the source for a "heart rate high" alert condition.
Example if no source is present: A "cable disconnection" alert condition has no source.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="Sources"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Priority" type="dom:AlertConditionPriority">
						<xsd:annotation>
							<xsd:documentation>Contains information about the severity of an AlertCondition.
Note: If the attribute CurrentPriority is present in an AlertConditonState element, this priority MAY not reflect the current severity of the potential or actual hazard that exists if this alert condition is present.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="CauseInfo" type="dom:CauseInfo" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>Information about possible causes if this alert condition is present.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AlertSignalDescriptor">
		<xsd:annotation>
			<xsd:documentation>An alert signal contains the information about the way an alert condition is communicated to someone. It is generated by an alert system to indicate the presence or occurence of an alert condition.

Example: A signal could be a lamp (see Manifestation element) on a remote device, such as the nurses handheld (see SignalDelegationSupported element), which starts flashing when the heart rate is exceeding 150bmp (see ConditionSignaled element) for more than 2 seconds (see DefaultSignalGenerationDelay element) and keeps flashing, until the nurse confirms the alarm, even if the alarm condition is not present anymore (see Latching element).
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractAlertDescriptor">
				<xsd:sequence>
					<xsd:element name="ConditionSignaled" type="dom:HandleRef">
						<xsd:annotation>
							<xsd:documentation>Reference to the alert condition communicated by this alert signal. The alert condition signaled has to be in the same alert system or in an alert system that is underneath the alert system of this alert signal in the containment tree.

Example: Assume an MDS possesses two VMDs and an alert system A and each of these VMDs possess itself an alert system (B and C). An alert signal from the alert system A of the MDS is allowed to reference an alert condition from the alert systems A, B and C. In contrast to this an alert signal from the alert system B is allowed to reference only alert conditions from the alert system B and not from the alert system A or C.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Manifestation" type="dom:AlertSignalManifestation">
						<xsd:annotation>
							<xsd:documentation>Dertermines, how an alert signal can be perceived.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="SignalManifestation"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Latching" type="xsd:boolean">
						<xsd:annotation>
							<xsd:documentation>An alert signal is latching if it outlives its triggering alert condition until it is stopped by deliberate action.

Example: If the patient's heart rate exceeds a given limit for a certain time, but then normalizes such that the alert condition no longer exists, it might be desirable to keep the alert signal alive until, e.g., the nurse confirms it. Otherwise the alert condition could pass unnoticed.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="IsLatching"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="DefaultSignalGenerationDelay" type="xsd:duration" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The default period in ms from the onset of an alert condition to the generation of this AlarmSignal.

Example: If the heart rate exceeds a limit periodically as the actual rate oscillates around the limit value, it can be desired to not directly generate the alert signal, whenever the limit is exceeded, but to wait for the given delay first. Default value SHALL be "PT0S".</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="SignalDelegationSupported" type="xsd:boolean" default="false" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Indicates if this signal can be generated on another device as primary alert signal.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="IsSignalDelegationSupported"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="AcknowledgementSupported" type="xsd:boolean" use="optional">
					<xsd:annotation>
						<xsd:documentation>Indicates that the signal supports acknowledgment. The implied value SHALL be "false". </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="AcknowledgeTimeout" type="xsd:duration" use="optional">
					<xsd:annotation>
						<xsd:documentation>Indicates the acknowledgement timeout if the signal supports acknowledgment. If no durationn is defined, an idefinite acknowledgement SHALL be supported.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="LimitAlertConditionDescriptor">
		<xsd:annotation>
			<xsd:documentation>A specialization of an alert condition that is satisfied if at least one limit for a referenced metric has been violated.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AlertConditionDescriptor">
				<xsd:sequence>
					<xsd:element name="MaxLimits" type="dom:Range">
						<xsd:annotation>
							<xsd:documentation>The maximum possible range for the limit bounds.

Example: The ECG values can be measured in a specific range. At some point the measured values are afflicted with noise which makes them not valid for limits. Therefore the maximum allowed range can be restricted.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="MaxLimitRange"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="AutoLimitSupported" type="xsd:boolean" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Indicates whether or not a LimitAlertCondition provides support for automatic limit adaption. The default value SHALL be "false".</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="SupportsAutoLimit"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--Alert - State-->
	<xsd:simpleType name="PausableActivation">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
			<xsd:documentation>The state of an alert system element or the alert system itself.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="On">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ON"/>
					</xsd:appinfo>
					<xsd:documentation>The alert system element or the the alert system itself is operating.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Off">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="OFF"/>
					</xsd:appinfo>
					<xsd:documentation>The alert system element or the the alert system itself is not operating.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Psd">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="PAUSED"/>
					</xsd:appinfo>
					<xsd:documentation>Psd = Paused. The alert system element or the the alert system itself is temporarly not operating.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="SignalPresence">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
			<xsd:documentation>Generation state of an alert signal.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="On">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ON"/>
					</xsd:appinfo>
					<xsd:documentation>Indicates that the alert signal element is currently generated.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Off">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="OFF"/>
					</xsd:appinfo>
					<xsd:documentation>Indicates that the alert signal element is currently not generated.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Latch">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="LATCHED"/>
					</xsd:appinfo>
					<xsd:documentation>Latch = Latched. It indicates that the alert signal is currently generated even if the alert condition is no longer present.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Ack">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ACKNOWLEDGED"/>
					</xsd:appinfo>
					<xsd:documentation>Ack = Acknowledged. It indicates that the alert signal is currently not generated due to an acknowledment even if the alert condition is still present. Acknowledged signals are those, where an auditory alarm signal that is related to a currently active alarm condition is inactivated until the alarm condition is no longer present.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<!--xsd:enumeration value="2">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="PAUSED"/>
					</xsd:appinfo>
					<xsd:documentation>Defines the alert signal element to be set "Paused".</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration-->
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="PrimaryAlertSignalLocation">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass name="AlertSignalLocation"/>
			</xsd:appinfo>
			<xsd:documentation>Gives information about where the primary AlertSignal is generated.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Loc">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="LOCAL"/>
					</xsd:appinfo>
					<xsd:documentation>Loc = Local. The AlertSignal is perceivable on the machine where the AlertCondition has been detected.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Rem">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="REMOTE"/>
					</xsd:appinfo>
					<xsd:documentation>Rem = Remote. The AlertSignal is perceivable on a remote machine.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="MonitoredAlertLimits">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass name="LimitAlertObservationState"/>
			</xsd:appinfo>
			<xsd:documentation>Indicates which limits of a LimitAlertCondition element are monitored to trigger alert signals.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="All">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ALL_ON"/>
					</xsd:appinfo>
					<xsd:documentation>Both AlertLimits are monitored.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="LoOff">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="LOW_OFF"/>
					</xsd:appinfo>
					<xsd:documentation>LoOff = Low-Off. Low-limit violation detection is either currrently turned off if the state possesses a low-limit value or is not supported at all.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="HiOff">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="HIGH_OFF"/>
					</xsd:appinfo>
					<xsd:documentation>HiOff = Hi-Off. High-limit violation detection is either currently turned off if the state possesses a high-limit value or is not supported at all.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="None">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ALL_OFF"/>
					</xsd:appinfo>
					<xsd:documentation>No AlertLimits are monitored. 
Note: This is not equal to the state that AlertConditionState is in an Off state, although the result w.r.t. to alarm signlization will be the same.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="AbstractAlertState">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="AbstractAlertState"/>
			</xsd:appinfo>
			<xsd:documentation>An abstract state of a part of an alert system.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractState"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AlertConditionState">
		<xsd:annotation>
			<xsd:documentation>The AlertConditionState type contains the dynamic/volatile information of an alert condition. See AlertConditionDescriptor for static information.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="CurrentAlertCondition"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractAlertState">
				<xsd:attribute name="ActivationState" type="dom:PausableActivation" use="required">
					<xsd:annotation>
						<xsd:documentation>Activation of an alert state.</xsd:documentation>
						<xsd:appinfo>
							<jaxb:property name="State"/>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="ActualPriority" type="dom:AlertConditionPriority" use="optional">
					<xsd:annotation>
						<xsd:appinfo>
							<jaxb:property name="DegradationPrio"/>
						</xsd:appinfo>
						<xsd:documentation>The current priority of the alert condition that has been modified by an escalation or deescalation process. 
Note: If this attribute is present in an AlertConditonState element, Priority of the related AlertConditionDescritptor element MAY NOT reflect the current severity of the potential or actual hazard that exists if this alert condition is present.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="Rank" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:appinfo>
							<jaxb:property name="Rank"/>
						</xsd:appinfo>
						<xsd:documentation>The rank is an optional attribute allowing finer distinction of alert condition priorities.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="Presence" type="xsd:boolean" use="required">
					<xsd:annotation>
						<xsd:appinfo>
							<jaxb:property name="Presence"/>
						</xsd:appinfo>
						<xsd:documentation>Indicates if the alert condition has been detected and is still present.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="ObservationTime" type="dom:Timestamp" use="optional">
					<xsd:annotation>
						<xsd:appinfo>
							<jaxb:property name="TimeOfObservation"/>
						</xsd:appinfo>
						<xsd:documentation>Time when the alert condition has changed its presence the last time.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AlertSignalState">
		<xsd:annotation>
			<xsd:documentation>The AlertSignalState type contains the dynamic/volatile information of an alert signal. See AlertSignalDescriptor for static information.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="CurrentAlertSignal"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractAlertState">
				<xsd:attribute name="ActivationState" type="dom:PausableActivation" use="required">
					<xsd:annotation>
						<xsd:documentation>Indicates if the alert system will generate a signal if the condition is present.</xsd:documentation>
						<xsd:appinfo>
							<jaxb:property name="State"/>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="Presence" type="dom:SignalPresence" use="optional">
					<xsd:annotation>
						<xsd:documentation>Indicates if the signal is currently generated. The implied value SHALL be "Off".</xsd:documentation>
						<xsd:appinfo>
							<jaxb:property name="Presence"/>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="Location" type="dom:PrimaryAlertSignalLocation" use="optional">
					<xsd:annotation>
						<xsd:appinfo>
							<jaxb:property name="Location"/>
						</xsd:appinfo>
						<xsd:documentation>Gives information about where the primary alert signal is generated. No implied value is given.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="Slot" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:appinfo>
							<jaxb:property name="Slot"/>
						</xsd:appinfo>
						<xsd:documentation>The slot is 0-based index that allows a priorization of the alert signal w.r.t. signal tangibility. The Slot SHOULD be used if the medium for signal generation has only a limited capability of parallel signal generation. The smaller the slot index, the higher is the priority in generation of the signal.

Example: If a signal is audible and there are different audio signals for different alert signals and more than one alert signal has to be generated, the generating system has to decide which of the alert signals it generates as overlaying audio signals may be not desirable. For example, if the first alert signal has a slot number of 0 and the second alert signal of 1 and both signals are active, than the alert system will generate only the alert signal with the slot number 0.
					</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AlertSystemState">
		<xsd:annotation>
			<xsd:documentation>The AlertSystemState type contains the dynamic/volatile information of an alert system. See: AlertSystemDescriptor for static information.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="CurrentAlertSystem"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractAlertState">
				<xsd:attribute name="ActivationState" type="dom:PausableActivation" use="required">
					<xsd:annotation>
						<xsd:appinfo>
							<xsd:documentation>Provides activation state information. See PausableActivation.</xsd:documentation>
							<jaxb:property name="State"/>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="LastSelfCheck" type="dom:Timestamp" use="optional">
					<xsd:annotation>
						<xsd:appinfo>
							<jaxb:property name="TimeOfSelfCheck"/>
						</xsd:appinfo>
						<xsd:documentation>Time when the alert system has performed a self check the last time.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="SelfCheckCount" type="xsd:long" use="optional">
					<xsd:annotation>
						<xsd:appinfo>
							<jaxb:property name="SelfCheckCnt"/>
						</xsd:appinfo>
						<xsd:documentation>Number of self checks performed.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="PresentPhysiologicalAlarmConditions" type="dom:AlertConditionReference" use="optional">
					<xsd:annotation>
						<xsd:documentation>List of handle reference to the present physiological alarm conditions that have been determined by this alert system.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="PresentTechnicalAlarmConditions" type="dom:AlertConditionReference" use="optional">
					<xsd:annotation>
						<xsd:documentation>List of handle reference to the present technical alarm conditions that have been determined by this alert system</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:simpleType name="AlertConditionReference">
		<xsd:annotation>
			<xsd:documentation>A list of handle references that </xsd:documentation>
		</xsd:annotation>
		<xsd:list itemType="dom:HandleRef"/>
	</xsd:simpleType>
	<xsd:complexType name="LimitAlertConditionState">
		<xsd:annotation>
			<xsd:documentation>A state of a limit alert condition.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="CurrentLimitAlertCondition"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AlertConditionState">
				<xsd:sequence>
					<xsd:element name="Limits" type="dom:Range" minOccurs="0">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="Limits"/>
							</xsd:appinfo>
							<xsd:documentation>Limit values for the LimitAlertConditionState type.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="MonitoredAlertLimits" type="dom:MonitoredAlertLimits" use="required">
					<xsd:annotation>
						<xsd:documentation>Monitored alert signals.</xsd:documentation>
						<xsd:appinfo>
							<jaxb:property name="LimitObservationState"/>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="AutoLimitActivationState" type="dom:PausableActivation" use="optional">
					<xsd:annotation>
						<xsd:documentation>Indicates if the limits for this limit alert condition are adjusted automatically.</xsd:documentation>
						<xsd:appinfo>
							<jaxb:property name="AutoLimitState"/>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--Medical-->
	<xsd:simpleType name="MetricCategory">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
			<xsd:documentation>The metric category makes it possible to distinguish between different manifestations of a metric like measurements, settings or recommendations. 

Example: If the Respiratory Rate can be adjusted and the ventilator is smart and provides a recommendation, there will likely be at least three metrics with a type of "Respiratory Rate": 
- 1 Metric with MetricCategory set to Measurement. This metric is the actual measured value.
- 1 Metric with MetricCategory set to Setting. This metric is the adjustable value.
- 1 Metric with MetricCategory set to Recommendation. This metric is the recommended value derived from some smart agorithm.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Unspec">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="UNSPECIFIED"/>
					</xsd:appinfo>
					<xsd:documentation>Unspec = Unspecified. Non of the following categories is valid for the metric.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Msrmt">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="MEASUREMENT"/>
					</xsd:appinfo>
					<xsd:documentation>Msrmt = Measurement. The metric has been derived by measurement.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Clc">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="CALCULATION"/>
					</xsd:appinfo>
					<xsd:documentation>Clc = Calculation. The metric has been derived by calculation only.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Set">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="SETTING"/>
					</xsd:appinfo>
					<xsd:documentation>Set = Setting. The metric has a value that is adjustable by some (local or remote) control means.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Preset">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="PRESETTING"/>
					</xsd:appinfo>
					<xsd:documentation>Preset = Presetting. The metric has a value that is adjustable by some (local or remote) control means. It modifies other values only temporarily for preview purposes until it is commited the related metric from the Setting category. </xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Rcmm">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="RECOMMENDATION"/>
					</xsd:appinfo>
					<xsd:documentation>Rcmm = Recommendation. The metric is a proposol for a Setting or Presetting.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="MetricAvailability">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
			<xsd:documentation>Availability of the means that derives the metric state.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Intr">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="INTERMITTENT"/>
					</xsd:appinfo>
					<xsd:documentation>Intr = Intermittent. Stopping or ceasing for a time; alternately ceasing and beginning again. 

Example: non-invasive blood pressure measurement</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Cont">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="CONTINUOUS"/>
					</xsd:appinfo>
					<xsd:documentation>Cont = Continuous. Without break, cessation, or interruption; without intervening time.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:element name="Type" type="dom:CodedValue">
		<xsd:annotation>
			<xsd:documentation>Medical Type of an object.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!--xsd:complexType name="AbstractVMODescriptor" >
		<xsd:annotation>
			<xsd:documentation>The VMO is the base class for all medical-related objects in the model.
				It provides consistent naming and identification across the Medical Package model.
				</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="VMO"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDescriptor">
				<xsd:sequence>
					<xsd:element ref="dom:Type">
						<xsd:annotation>
							<xsd:documentation>The type of the virtual medical object, e.g. anaesthesia workstation.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
				<xsd:anyAttribute namespace="##other" processContents="skip"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType-->
	<xsd:complexType name="VMDDescriptor">
		<xsd:annotation>
			<xsd:documentation>A Virtual Medical Device (VMD) is an abstraction for a module (medical-related subsystem) of a MDS. According to 11073 a MDS with one VMD is a single purpose device in contrast to a MDS with multiple VMDs that has multipurposes.

Example: An anesthesia workstation (one MDS) with a ventilation unit (one VMD), a patient monitoring unit (another VMD), and gas delivery/monitor system (another VMD). In the 11073 a VMD MUST not be a hardware module, it also can be pure software.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDeviceComponent">
				<xsd:sequence>
					<!--xsd:element ref="dom:Type">
						<xsd:annotation>
							<xsd:documentation>The type of the VMD.</xsd:documentation>
						</xsd:annotation>
					</xsd:element-->
					<xsd:element name="Channel" type="dom:ChannelDescriptor" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of channels that allow hierarchical information organization of VMOs like metrics or alert systems</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="Channels"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="AlertSystem" type="dom:AlertSystemDescriptor" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>An optional alert system on VMD level that may supervise conditions for all levels in the VMD hierarchy including the VMD itself.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="ChannelDescriptor">
		<xsd:annotation>
			<xsd:documentation>A Channel is a group of metrics and alerts and is used for organizational purposes only. All metrics MUST be part of a channel.

Example: An example would be a blood pressure VMD with one Channel to group together all metrics that deal with the blood pressure (e.g., pressure value, pressure waveform). A second Channel object could be used to group together metrics that deal with heart rate. TODO: 11073 Copyright Example</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDeviceComponent">
				<xsd:sequence>
					<!--xsd:element ref="dom:Type">
						<xsd:annotation>
							<xsd:documentation>The type of the channel.</xsd:documentation>
						</xsd:annotation>
					</xsd:element-->
					<xsd:element name="Metric" type="dom:AbstractMetricDescriptor" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of Metrics that are grouped in this channel.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="Metrics"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="AlertSystem" type="dom:AlertSystemDescriptor" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>An optional alert system on channel level that may supervise conditions for all levels in the channel hierarchy including the channel itself.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="Unit" type="dom:CodedValue">
		<xsd:annotation>
			<xsd:documentation>Code for the Unit of a metric.
Note: If the metric is dimensionless and has no unit, use the corresponding code from the code system (e.g., 11073 MDC_DIM_DIMLESS).</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="BodySite" type="dom:CodedValue">
		<xsd:annotation>
			<xsd:documentation>Optional list of codes that describe the body sites.</xsd:documentation>
		</xsd:annotation>
		<!-- TODO: multiple -->
	</xsd:element>
	<xsd:complexType name="AbstractMetricDescriptor">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="MetricDescriptor"/>
			</xsd:appinfo>
			<xsd:documentation>An abstract descriptor for a metric.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDescriptor">
				<xsd:sequence>
					<!--xsd:element ref="dom:Type">
						<xsd:annotation>
							<xsd:documentation>The type of the metric.</xsd:documentation>
						</xsd:annotation>
					</xsd:elemen-->
					<xsd:element ref="dom:Unit"/>
					<xsd:element ref="dom:BodySite" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>Optional list of codes that describe the body sites.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="BodySites"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<xsd:element ref="dom:MetricCategory"/>
					<xsd:element ref="dom:Availability"/>
					<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="anyExtensionMetricDescriptors"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:any-->
				</xsd:sequence>
				<xsd:attribute name="MaxDelayTime" type="xsd:duration" use="optional">
					<xsd:annotation>
						<xsd:documentation>Maximum delay to real time.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- TODO Complex Metric for grouping of related metrics,e.g., PS setting, PS measurement, PS presetting, PS calculation -->
	<xsd:element name="Resolution" type="xsd:decimal">
		<xsd:annotation>
			<xsd:documentation>The resolution of the means to determine the metric's value. The Resolution is the minimum determinable difference between two observed values. A negative value indicates that the resolution could not be determined.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="NumericMetricDescriptor">
		<xsd:annotation>
			<xsd:documentation>Specification of a MetricDescriptor type that represents a single numerical measurement and status information. An example for a numeric metric would be the heart rate measurement.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractMetricDescriptor">
				<xsd:sequence>
					<!--TODO http://www.tutelman.com/golf/measure/precision.php , Precision & Accuracy sind eher dynamisch und sollten im SQI abgebildet werden, oder? DisplayResolution ->Dynamisch-->
					<xsd:element ref="dom:Resolution">
						<xsd:annotation>
							<xsd:documentation>The resolution of the means to determine the metric's value. The resolution is the minimum determinable difference between two observed values. A negative value indicates that the resolution could not be determined.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="MeasurePeriod" type="xsd:duration" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The maximum time intervall between two determination steps of an observed value under normal conditions.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="AveragingPeriod" type="xsd:duration" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The time intervall that is used for capturing  averaging the observed value</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="TechnicalRange" type="dom:Range" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>The technical possible range of observed values.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="TechnicalRanges"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="anyExtensionNumericMetricDescriptors"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:any-->
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!---->
	<xsd:complexType name="StringMetricDescriptor">
		<xsd:annotation>
			<xsd:documentation>A StringMetric represents a textual status or annotation information.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractMetricDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="EnumNomenRef">
		<xsd:annotation>
			<xsd:documentation>References an enum in a nomenclature.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="Code" type="dom:CodedValue">
				<xsd:annotation>
					<xsd:documentation>The referenced enumeration code.</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="Code"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="EnumIndex" type="dom:SampleIndex" use="optional">
			<xsd:annotation>
				<xsd:documentation>Index number of the enumeration this reference points to.</xsd:documentation>
				<xsd:appinfo>
					<jaxb:property name="EnumIndex"/>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="EnumStringMetricDescriptor">
		<xsd:annotation>
			<xsd:documentation>An EnumStringMetric represents a textual status or annotation information with a constrained set of possible values.

Example: The current ventilation mode may be provided as an EnumStringMetric.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:StringMetricDescriptor">
				<xsd:sequence>
					<xsd:element name="AllowedValue" type="xsd:string" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of allowed values for this EnumStringMetric.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="AllowedValues"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<!-- TODO: Coded String from Hl7 ??? -->
					<xsd:element name="EnumCodes" type="dom:EnumNomenRef" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>References a code in a coding system for an enum.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="EnumCodes"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="anyExtensionEnumStringMetricDescriptors"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:any-->
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="RealTimeSampleArrayMetricDescriptor">
		<xsd:annotation>
			<xsd:documentation>Declares a sample array that represents a real-time continuous waveform. An example would be an electrocardiogram (ECG) real-time wave.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractMetricDescriptor">
				<xsd:sequence>
					<xsd:element name="SamplePeriod" type="xsd:duration">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="SampleRate"/>
							</xsd:appinfo>
							<xsd:documentation>The sample period of this real-time sample array. Gives information on how often waveform samples are generated. It is always given as a period between samples, e.g., 5 ms.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Resolution" type="xsd:decimal">
						<xsd:annotation>
							<xsd:documentation>The resolution of the means to determine the metric's value. The Resolution is the minimum determinable difference between two observed values. A negative value indicates that the resolution could not be determined.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="TechnicalRange" type="dom:Range" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="MaxRanges"/>
							</xsd:appinfo>
							<xsd:documentation>The maximum range of the values of the real-time sample array.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="anyExtensionRealTimeSampleArrayMetricDescriptors"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:any-->
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--Medical - State-->
	<xsd:simpleType name="CalibrationState">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
			<xsd:documentation>Calibration state of a component.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="No">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="NOT_CALIBRATED"/>
					</xsd:appinfo>
					<xsd:documentation>No = Not Calibrated. States that the component is not calibrated.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Req">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="CALIBRATION_REQUIRED"/>
					</xsd:appinfo>
					<xsd:documentation>Req = Calibration Required. States that the component requires a calibration.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Cal">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="CALIBRATED"/>
					</xsd:appinfo>
					<xsd:documentation>Cal = Calibrated. States that the component is calibrated.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="ComponentActivation">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
			<xsd:documentation>Activation state of a component.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="On">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ON"/>
					</xsd:appinfo>
					<xsd:documentation>The component is operating.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="NotRdy">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="NOT_READY"/>
					</xsd:appinfo>
					<xsd:documentation>NotRdy = Not Ready. The component is not ready to be operated and not operating, but initialization is ongoing.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="StndBy">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="STANDBY"/>
					</xsd:appinfo>
					<xsd:documentation>StndBy = Stand By. The component is ready to be operated, but not operating yet.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Off">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="OFF"/>
					</xsd:appinfo>
					<xsd:documentation>The component is inactive.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Shtdn">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="SHUTDOWN"/>
					</xsd:appinfo>
					<xsd:documentation>Shtdn = Shutdown. The component is ceasing from being ready to be operated or operating, but not yet inactive.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="MetricMeasurementValidity">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass name="MetricMeasurementState"/>
			</xsd:appinfo>
			<xsd:documentation>Validity of a metric value.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Vld">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="VALID"/>
					</xsd:appinfo>
					<xsd:documentation>Vld = Valid. A correct measured value that is correct from the perspective of the measuring device.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Vldated">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="VALIDATED_DATA"/>
					</xsd:appinfo>
					<xsd:documentation>Vldated = Validated Data. A measured value where the validity has been confirmed by an external actor, e.g., an operator, other than the device.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Qst">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="QUESTIONABLE"/>
					</xsd:appinfo>
					<xsd:documentation>Qst = Questionable. A measured value where correctness can not be guaranteed.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Calib">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="CALIBRATION_ONGOING"/>
					</xsd:appinfo>
					<xsd:documentation>Calib = Calibration Ongoing. A measured value where correctness can not be guaranteed, because a calibration is currently going on.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Inv">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="INVALID"/>
					</xsd:appinfo>
					<xsd:documentation>Inv = Invalid. A measured value that is incorrect from the perspective of the measuring device.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Oflw">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="OVERFLOW"/>
					</xsd:appinfo>
					<xsd:documentation>Oflw = Overflow. TODO: add documentation</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Uflw">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="UNDERFLOW"/>
					</xsd:appinfo>
					<xsd:documentation>Uflw = Underflow. TODO: add documentation</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="GenerationMode">
		<xsd:annotation>
			<xsd:documentation>Describes whether metric data is generated by real measurements or under unreal settings (demo or test data).</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Real">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="REAL_DATA"/>
					</xsd:appinfo>
					<xsd:documentation>Real = Real Data. A value that is generated under real conditions.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Test">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="TEST_DATA"/>
					</xsd:appinfo>
					<xsd:documentation>Test = Test Data. A value that is arbitrary and is for testing purposes only.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Demo">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="DEMO_DATA"/>
					</xsd:appinfo>
					<xsd:documentation>Demo = Demo Data. A value that is arbitrary and is for demonstration purposes only.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="ComponentState">
		<xsd:annotation>
			<xsd:documentation>State of component that are part of an MDS.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractState">
				<xsd:sequence>
					<xsd:element name="CalibrationInfo" type="dom:CalibrationInfo" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Provides calibration information of the whole component.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute ref="dom:ComponentActivationState"/>
				<xsd:attribute name="OperatingHours" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>TODO: add documentation</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="OperatingCycles" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>e.g. number of measurements taken TODO: add documentation</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
			<!--xsd:sequence>
					<xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="anyExtensionVMDStates"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:any>
				</xsd:sequence-->
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="CalibrationInfo">
		<xsd:annotation>
			<xsd:documentation>Provides information in terms of component calibration. By default, it only maintains a calibration flag.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attribute ref="dom:ComponentCalibrationState">
			<xsd:annotation>
				<xsd:documentation>Attribute definition of ComponentCalibration.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<!-- TODO  Add estimated component calibration time ??? -->
	</xsd:complexType>
	<xsd:complexType name="AbstractMetricState">
		<xsd:annotation>
			<xsd:documentation>Abstract state of a Metric.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:ComponentState">
				<xsd:sequence>
					<xsd:element name="MeasurementPeriod" type="xsd:duration" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Optional information of the measurement repetition time; not necessarily the same as update period.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="MeasurementPeriod"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="AveragingPeriod" type="xsd:duration" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Optional description of the Time period used to average values, e.g., a metric for the average flow of last hour.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="AveragingPeriod"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<xsd:element ref="dom:BodySite" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>Optional list of codes that describe the body sites where this measurement is performed.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="BodySites"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="NumericMetricState">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="NumericMetricState"/>
			</xsd:appinfo>
			<xsd:documentation>A state of a numeric metric.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractMetricState">
				<xsd:sequence>
					<xsd:element name="ObservedValue" type="dom:NumericMetricValue" minOccurs="0">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="ObservedValue"/>
							</xsd:appinfo>
							<xsd:documentation>Optional current value of the metric.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="PhysiologicalRange" type="dom:Range" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="PhysiologicalRanges"/>
							</xsd:appinfo>
							<xsd:documentation>The physiological reasonable range of observed values (note that this is not an alarming range).</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- TODO Der hier entfernte (Dynamic)Range Kann auf zwei arten interpretiert werden:
			a) der aktuell setzbare Range. Steht sinnvoller weise jetzt im State der Set operation
			b) der Range diente dazu, den Wertebereich für die Darstellung auf einem Display zu beinhalten.
			   => DisplayMetric einführen?
				  Value : xsd:string (Beispiel: 17.30) Wieviele folgende Nullen sollen dargestellt werden? Sagt int nicht aus. Es gibt so auch keine Rundungsfehler.
				  Unit : xsd:string
				  -->
	<xsd:complexType name="RealTimeSampleArrayMetricState">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="RealTimeSampleArrayMetricState"/>
			</xsd:appinfo>
			<xsd:documentation>State of a streaming metric descriptor. Contains a list of sample values. This sample array is used to transport waveform streaming information. It is not intended to be requested by GET or EVENT REPORT.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractMetricState">
				<xsd:sequence>
					<xsd:element name="ObservedValue" type="dom:RealTimeSampleArrayValue" minOccurs="0">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="ObservedValue"/>
							</xsd:appinfo>
							<xsd:documentation>Optional current value of the metric.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="StringMetricState">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="StringMetricState"/>
			</xsd:appinfo>
			<xsd:documentation>State of a string metric.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractMetricState">
				<xsd:sequence>
					<xsd:element name="ObservedValue" type="dom:StringMetricValue" minOccurs="0">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="ObservedValue"/>
							</xsd:appinfo>
							<xsd:documentation>Optional current value of the metric.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="EnumStringMetricState">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="EnumStringMetricState"/>
			</xsd:appinfo>
			<xsd:documentation>State of an enumerated string metric.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:StringMetricState"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:simpleType name="QualityIndicator">
		<xsd:annotation>
			<xsd:documentation>Indicates the quality of the observed value, where 0 means lowest quality and 1 means high quality w.r.t. to the validity level.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:decimal">
			<xsd:minInclusive value="0">
				<xsd:annotation>
					<xsd:documentation>The minimal value that indicates that the signal has the worst quality.</xsd:documentation>
				</xsd:annotation>
			</xsd:minInclusive>
			<xsd:maxInclusive value="1">
				<xsd:annotation>
					<xsd:documentation>The maximal value that indicates that the signal has the best quality.</xsd:documentation>
				</xsd:annotation>
			</xsd:maxInclusive>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="MeasurementState">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="MeasurementState"/>
			</xsd:appinfo>
			<xsd:documentation>The quality category of the measurement of the observed value of a metric.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attribute name="Validity" type="dom:MetricMeasurementValidity" use="required">
			<xsd:annotation>
				<xsd:documentation>Level of validity of the observed value of a metric.</xsd:documentation>
				<xsd:appinfo>
					<jaxb:property name="State"/>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="Mode" type="dom:GenerationMode" use="optional">
			<xsd:annotation>
				<xsd:documentation>Describes whether data is generated by a real metric source or is part of any test or demo data. If not defined, Mode is set to real data. Default value SHALL be "Real".</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="QI" type="dom:QualityIndicator" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="QualityIndicator"/>
				</xsd:appinfo>
				<xsd:documentation>Indicates the quality of the observed value, where 0 means lowest quality and 1 means high quality w.r.t. to the validity level. The assumed default value SHALL be "1".</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:simpleType name="SampleIndex">
		<xsd:annotation>
			<xsd:documentation>The 0-based index of the annotated value in a list of values.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:unsignedInt"/>
	</xsd:simpleType>
	<xsd:complexType name="Annotation">
		<xsd:annotation>
			<xsd:documentation>Annotation of a sample in a realtime sample array.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="Code" type="dom:CodedValue">
				<xsd:annotation>
					<xsd:documentation>The code that describes the annotation of the element.

Example: Attach triggers in waveform curves.</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="Code"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="SampleIndex" type="dom:SampleIndex" use="optional">
			<xsd:annotation>
				<xsd:documentation>Index number of the sample an annotation refers to. If no SampleIndex is provided the annotation is valid for all values in the context.</xsd:documentation>
				<xsd:appinfo>
					<jaxb:property name="ValueIndex"/>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="AbstractMetricValue">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="AbstractMetricValue"/>
			</xsd:appinfo>
			<xsd:documentation>Abstract state of a metric.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="MeasurementState" type="dom:MeasurementState">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:property name="MeasurementState"/>
					</xsd:appinfo>
					<xsd:documentation>The quality state of the observed value of a metric.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="Start-Time" type="dom:Timestamp" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="Start-Time"/>
				</xsd:appinfo>
				<xsd:documentation>Time when measurement activity was started.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="Stop-Time" type="dom:Timestamp" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="Stop-Time"/>
				</xsd:appinfo>
				<xsd:documentation>Time when measurement activity was stopped.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ObservationTime" type="dom:Timestamp" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="TimeOfObservation"/>
				</xsd:appinfo>
				<xsd:documentation>Time when observed value has been derived from measurement.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="NumericMetricValue">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="NumericValue"/>
			</xsd:appinfo>
			<xsd:documentation>Numeric value of a metric state.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractMetricValue">
				<xsd:attribute name="Value" type="xsd:decimal" use="optional">
					<xsd:annotation>
						<xsd:appinfo>
							<jaxb:property name="Value"/>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="RealTimeSampleArrayValue">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="RealTimeSampleArrayValue"/>
			</xsd:appinfo>
			<xsd:documentation>This array contains the values for a waveform stream.
Note: Timestamp (see base: AbstractMetricValue) refers to the first value of the array. The individual timestamps of the values can thus be computed from the sample rate (see RealTimeSampleArrayMetricDescriptor).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractMetricValue">
				<xsd:sequence>
					<xsd:element name="Annotation" type="dom:Annotation" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="Annotations"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="Samples" type="dom:RTValueType" use="optional">
					<xsd:annotation>
						<xsd:appinfo>
							<jaxb:property name="Values"/>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:simpleType name="RTValueType">
		<xsd:annotation>
			<xsd:documentation>Defines the real-time sample array value type comprising a whitespace separated list of decimal numbers.</xsd:documentation>
		</xsd:annotation>
		<xsd:list itemType="xsd:decimal"/>
	</xsd:simpleType>
	<xsd:complexType name="StringMetricValue">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="StringMetricValue"/>
			</xsd:appinfo>
			<xsd:documentation>String value of a metric state.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractMetricValue">
				<xsd:attribute name="Value" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:appinfo>
							<jaxb:property name="Value"/>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--Interaktion-->
	<xsd:complexType name="ArgumentDescriptorType">
		<xsd:annotation>
			<xsd:documentation>Argument description for an activate operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDescriptor">
				<xsd:sequence>
					<xsd:element name="ArgName" type="dom:CodedValue">
						<xsd:annotation>
							<xsd:documentation>Code that describes this argument.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="ArgType" type="xsd:QName"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="SCODescriptor">
		<xsd:annotation>
			<xsd:documentation>SCODescriptor describes the capabilities of the service controller.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDeviceComponent">
				<xsd:sequence>
					<xsd:element name="Operation" type="dom:AbstractOperationDescriptor" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="Operations"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AbstractOperationDescriptor">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="OperationDescriptor"/>
			</xsd:appinfo>
			<xsd:documentation>Abstract description of an operation that is exposed on the service interface.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDescriptor">
				<xsd:sequence>
					<xsd:element name="ModifiableElement" type="dom:CodedValue" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="ModifiableAttribute"/>
							</xsd:appinfo>
							<xsd:documentation>ModifiableElement describes a list of attributes the underlying operation is able affect.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="OperationTarget" type="dom:HandleRef" use="required">
					<xsd:annotation>
						<xsd:documentation>A handle reference this operation is targeted to.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="SetValueOperationDescriptor">
		<xsd:annotation>
			<xsd:documentation>Describes a SetValue operation for a specific object state in the MDIB that is exposed on the service interface.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractOperationDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="SetStringOperationDescriptor">
		<xsd:annotation>
			<xsd:documentation>Describes a SetString operation for a specific object state in the MDIB that is exposed on the service interface.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractOperationDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="ActivateOperationDescriptor">
		<xsd:annotation>
			<xsd:documentation>Describes an activate operation that is exposed on the service interface.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractOperationDescriptor">
				<xsd:sequence>
					<xsd:element name="Argument" type="dom:ArgumentDescriptorType" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="Arguments"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="ActivationDuration" type="xsd:duration" use="optional">
					<xsd:annotation>
						<xsd:documentation>TODO zeit, die eine activation ausgeführt wird, bevor default zustand erreicht wird (bsp: trigger eines koagulator)</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="NonGenericOperationDescriptor">
		<xsd:annotation>
			<xsd:documentation>The non-generic operation descriptor is present in the SCO to indicate that operations with a coded type that are not defined within this standard may be invoked on the MDS using the provided information.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractOperationDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="SetAlertStateOperationDescriptor">
		<xsd:annotation>
			<xsd:documentation>Describes a SetAlertState operation for a specific alert state in the MDIB that is exposed on the service interface.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractOperationDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="SetRangeOperationDescriptor">
		<xsd:annotation>
			<xsd:documentation>Describes a SetRange operation to alter a range property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractOperationDescriptor">
				<xsd:sequence>
					<xsd:element name="AllowedMaxRange" type="dom:Range">
						<xsd:annotation>
							<xsd:documentation>The range to set.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="SetContextOperationDescriptor">
		<xsd:annotation>
			<xsd:documentation>Describes a SetContext operation to insert or modify a context state.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractOperationDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:simpleType name="OperatingMode">
		<xsd:annotation>
			<xsd:documentation>Mode of an operation state.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass name="OperationalState"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Dis">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="DISABLED"/>
					</xsd:appinfo>
					<xsd:documentation>Dis = Disabled. Object is disabled.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="En">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ENABLED"/>
					</xsd:appinfo>
					<xsd:documentation>En = Enabled. Object is enabled</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="NA">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="NOT_AVAILABLE"/>
					</xsd:appinfo>
					<xsd:documentation>NA = Not Available. Object is not available for interaction. This means that it is defined but currently not in a mode so that it can be interacted with.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="OperationState">
		<xsd:annotation>
			<xsd:documentation>State of an operation that is exposed on the service interface.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractState">
				<xsd:attribute name="OperatingMode" type="dom:OperatingMode" use="required">
					<xsd:annotation>
						<xsd:documentation>Operating mode of the operation that defines if the operation is accessible.</xsd:documentation>
						<xsd:appinfo>
							<jaxb:property name="State"/>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="SetValueOperationState">
		<xsd:annotation>
			<xsd:documentation>State of a SetValue operation that is exposed on the service interface.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:OperationState">
				<xsd:sequence>
					<xsd:element name="allowedRange" type="dom:Range" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>The currently allowed ranges that can be requested.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="allowedRanges"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
			<!--xsd:attributeGroup ref="dom:RangeBounds"/-->
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="SetRangeOperationState">
		<xsd:annotation>
			<xsd:documentation>State of a SetRange operation that is exposed on the service interface.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:OperationState">
				<xsd:sequence>
					<xsd:element name="allowedRange" type="dom:Range" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>The currently allowed ranges that can be requested.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="allowedRanges"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--Clock-->
	<xsd:simpleType name="TimeZone">
		<xsd:annotation>
			<xsd:documentation>String that describes the time zone and daylight saving time (DST) setting of a clock in POSIX format specification.

Examples: CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00

This would effect a change to daylight saving time at 2:00 AM on the second Sunday in March and change back at 2:00 AM on the first Sunday in November, and keep 6 hours time offset from Greenwich mean time (GMT) every year.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:complexType name="ClockDescriptor">
		<xsd:annotation>
			<xsd:documentation>Describes the capabilities of the mds regarding date/time handle and synchronization. This does not imply any specific hardware or software support.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDescriptor">
				<xsd:sequence>
					<xsd:element name="TimeProtocol" type="dom:CodedValue" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="TimeProtocols"/>
							</xsd:appinfo>
							<xsd:documentation/>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="Resolution" type="xsd:duration" use="optional">
					<xsd:annotation>
						<xsd:documentation>Time between actual ticks of the clock in micro seconds.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="ClockState">
		<xsd:annotation>
			<xsd:documentation>State of a clock of an MDS.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractState">
				<xsd:sequence>
					<xsd:element name="ActiveSyncProtocol" type="dom:CodedValue" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Protocol that is actively being used for time sync.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="DateAndTime" type="dom:Timestamp" use="optional">
					<xsd:annotation>
						<xsd:documentation>Current date/time setting. As the current date/time changes at a high frequency, a change of this value should not cause an update of the state version unless it has been synchronized either remotely or manually. This element may be filled if the clcok is explicitly requested. </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="RemoteSync" type="xsd:boolean" use="required">
					<xsd:annotation>
						<xsd:documentation>Indicates if the time is synchronied to an external source or set by an operator.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="ReferenceSource" type="xsd:anyURI" use="optional">
					<xsd:annotation>
						<xsd:documentation>Identifies the clock external reference source, e.g. an NTP server address.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="Accuracy" type="xsd:decimal" use="optional">
					<xsd:annotation>
						<xsd:documentation>Decimal number indicating the "accuracy" or max. error of the absolute time relative to a primary reference clock source (in seconds).
In systems where time synchronization is not used (EBWW is source) this should be initialized to two or three minutes when the clock time is set and should be incremented periodically to reflect drift from an "absolute" external reference source. If NTP used, this is equivalent to Root Dispersion + ½ Root Delay.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="LastSet" type="dom:Timestamp" use="optional">
					<xsd:annotation>
						<xsd:documentation>Time point when the absolute time was last set.
NOTE 1: If a time synchronization protocol is used that "changes" the time and date at a high frequency, this value should be updated at a lower periodicity (e.g., once every 10 minutes or once an hour), so as not to consume communications bandwidth unnecessarily.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="TimeZone" type="dom:TimeZone" use="optional">
					<xsd:annotation>
						<xsd:documentation>Identifies the time zone and daylight saving time (DST) of the clock. </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="CriticalUse" type="xsd:boolean" use="optional">
					<xsd:annotation>
						<xsd:documentation>Clock information is actively being used in care delivery algorithms/protocols</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--Context of the medical device state that is present at the communication interface.-->
	<xsd:complexType name="AbstractContextDescriptor">
		<xsd:annotation>
			<xsd:documentation>Abstract base class for objects that specifiy that the MDS is able to provide context information that may be of relevance for the state data that is present at the communication interface at a certain point of time or time period.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="LocationContextDescriptor">
		<xsd:annotation>
			<xsd:documentation>Context descriptor that specify that the MDS is able to provide spatial information.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractContextDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="EnsembleContextDescriptor">
		<xsd:annotation>
			<xsd:documentation>Context descriptor that specify that the MDS is able to provide ensemble information.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractContextDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="OperatorContextDescriptor">
		<xsd:annotation>
			<xsd:documentation>Context descriptor that specify that the MDS is able to provide operator information.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractContextDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="WorkflowContextDescriptor">
		<xsd:annotation>
			<xsd:documentation>Context descriptor that specify that the MDS is able to provide workflow information.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractContextDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AbstractContextState">
		<xsd:annotation>
			<xsd:documentation>Base type of a context state. Every context state can be stated valid by a validator instance. Moreover, a context state's lifecycle is determinated by a start and end. AbstractContextState bundles these information.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractState">
				<xsd:sequence>
					<xsd:element name="Validator" type="dom:InstanceIdentifier" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>Zero or more actors (e.g., persons, devices or any identifiable systems) which have confirmed that a binding of a context state to an MDS is correct.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="ContextAssociation" type="dom:ContextAssociation" use="optional">
					<xsd:annotation>
						<xsd:documentation>Association of a context. If no value is provided, the implied value SHALL indicate no association.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="BindingMDIBVersion" type="dom:ReferencedVersion" use="required">
					<xsd:annotation>
						<xsd:documentation>BindingMDIBVersion points to the version of an MDIB when a binding of the context state to an MDS starts.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="UnbindingMDIBVersion" type="dom:ReferencedVersion" use="optional">
					<xsd:annotation>
						<xsd:documentation>UnbindingMDIBVersion points to the version of an MDIB when a binding of a context state to an MDS ends.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="BindingStartTime" type="dom:Timestamp" use="optional">
					<xsd:annotation>
						<xsd:documentation>Point in time when a binding of a context state to an MDS starts.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="BindingEndTime" type="dom:Timestamp" use="optional">
					<xsd:annotation>
						<xsd:documentation>Point in time when a binding of a context state to an MDS ends.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AbstractIdentifiableContextState">
		<xsd:annotation>
			<xsd:documentation>Defines a context that is identifiable by means of an instance identifier.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractContextState">
				<xsd:sequence>
					<xsd:element name="Identification" type="dom:InstanceIdentifier" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="LocationContextState">
		<xsd:annotation>
			<xsd:documentation>A context state that identifies a location in a hospital.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractIdentifiableContextState"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="EnsembleContextState">
		<xsd:annotation>
			<xsd:documentation>A context state that identifies an ensemble of devices.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractIdentifiableContextState"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="WorkflowContextState">
		<xsd:annotation>
			<xsd:documentation>A context state that identifies a step in a clinical workflow.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractIdentifiableContextState">
				<xsd:sequence>
					<xsd:element name="OrderDetail" type="dom:Order" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="OperatorContextState">
		<xsd:annotation>
			<xsd:documentation>A context state that identifies an operator of an MDS or a part of it.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractIdentifiableContextState"/>
		</xsd:complexContent>
	</xsd:complexType>
	<!--Context - Patient-->
	<xsd:simpleType name="ContextAssociation">
		<xsd:annotation>
			<xsd:documentation>Defines an association between an arbitrary context and the system.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass name="ContextAssociationStateValue"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="No">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="NO_ASSOCIATION"/>
					</xsd:appinfo>
					<xsd:documentation>No = No Association. There is currently no context information associated.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Pre">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="PRE_ASSOCIATION"/>
					</xsd:appinfo>
					<xsd:documentation>Pre = Pre-Association. Context information is in a pre-association state.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Assoc">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ASSOCIATED"/>
					</xsd:appinfo>
					<xsd:documentation>Assoc = Associated. Context information is associated.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Dis">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="DISASSOCIATED"/>
					</xsd:appinfo>
					<xsd:documentation>Dis = Disassociated. Context information is no longer associated.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="PatientContextDescriptor">
		<xsd:annotation>
			<xsd:documentation>Context descriptor that specify that the MDS possesses a patient-device association.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="PatientAssociationDescriptor"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractContextDescriptor"/>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="BaseDemographics">
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="Givenname" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Given name of a person.</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="Firstname"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Middlename" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Middle name of a person.</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="Middlenames"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Familyname" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Family name of a person</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="Lastname"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Birthname" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Birth name of a person</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Title" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Title of a person</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="PatientDemographicsCoreData">
		<xsd:annotation>
			<xsd:documentation>The patient demographics data as they are defined in ISO/IEEE 11073-10201:2004 (6.10.1 Patient Demographics object). If the device itself has patient-related observations (e.g., weight, height, ...) as in or output, this SHOULD be modelled as metrics. The PatientDemographicsCoreData type is for information purposes, only.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:BaseDemographics">
				<xsd:sequence>
					<xsd:element name="Sex" type="dom:Sex" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Sex of the patient.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="PatientType" type="dom:PatientType" minOccurs="0">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="Type"/>
							</xsd:appinfo>
							<xsd:documentation>Category of the patient. It refers to the ISO/IEEE 11073-10201:2004 PatientType.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="DateOfBirth" type="xsd:dateTime" minOccurs="0">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="Birthday"/>
							</xsd:appinfo>
							<xsd:documentation>Date and - if matters - time of birth of the patient.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Height" type="dom:Measure" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Height of the patient.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Weight" type="dom:Measure" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Weight of the patient.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Race" type="dom:CodedValue" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Race of the patient.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="PersonReference">
		<xsd:annotation>
			<xsd:documentation>A reference to an identifiable person with a name.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="Identification" type="dom:InstanceIdentifier" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>The list of identifiers for the person.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Name" type="dom:BaseDemographics" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>The name of the person.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="PersonParticipation">
		<xsd:annotation>
			<xsd:documentation>A reference to an identifiable person with a name that participates in a role in an act.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:PersonReference">
				<xsd:sequence>
					<xsd:element name="Role" type="dom:CodedValue" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>Roles the referenced person acts in the relationship.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="NeonatalPatientDemographicsCoreData">
		<xsd:annotation>
			<xsd:documentation>PatientDemographics for neonates</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:PatientDemographicsCoreData">
				<xsd:sequence>
					<xsd:element name="Gestational-Age" type="dom:Measure" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Gestational age.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="BirthLength" type="dom:Measure" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Patient length at birth time.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="BirthWeight" type="dom:Measure" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Patient weight at birth time.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="HeadCircumference" type="dom:Measure" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Patient weight at birth time.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Mother" type="dom:PersonReference" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Information about the mother of the neonate.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="PatientContextState">
		<xsd:annotation>
			<xsd:documentation>Observed information about a patient, e.g., demographics. Note: Contains information that is typical for a header in an anamnesis questionnaire.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="PatientContextState"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="dom:AbstractIdentifiableContextState">
				<xsd:sequence>
					<xsd:element name="CoreData" type="dom:PatientDemographicsCoreData" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:simpleType name="Sex">
		<xsd:annotation>
			<xsd:documentation>Sex of a human 
			"Sex" refers to the biological and physiological characteristics that define men and women, while "Gender" refers to the socially constructed roles, behaviours, activities, and attributes that a given society considers appropriate for men and women. See http://www.who.int/gender/whatisgender/en/index.html.

Note that ISO/IEC 5218:2004 defines four codes that represent human sexes.
			</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass name="Sex"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Unspec">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="UNSPECIFIED"/>
					</xsd:appinfo>
					<xsd:documentation>Unspec = Unspecified. Sex is not designated.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="M">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="MALE"/>
					</xsd:appinfo>
					<xsd:documentation>M = Male. Indicates a male patient.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="F">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="FEMALE"/>
					</xsd:appinfo>
					<xsd:documentation>F = Female. Indicates a female patient.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Unkn">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="UNKNOWN"/>
					</xsd:appinfo>
					<xsd:documentation>Unkn = Unknown. Indicates that the sex is unknown for different reasons.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="PatientType">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass name="PatientType"/>
			</xsd:appinfo>
			<xsd:documentation>Type of a patient.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Unspec">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="UNSPECIFIED"/>
					</xsd:appinfo>
					<xsd:documentation>Unspec = Unspecified. Unspecified type.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Ad">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ADULT"/>
					</xsd:appinfo>
					<xsd:documentation>Ad = Adult. Indicates an adult patient.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Ped">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="PEDIATRIC"/>
					</xsd:appinfo>
					<xsd:documentation>Ped = Pediatric. Indicates a pediatric patient.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Neo">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="NEONATAL"/>
					</xsd:appinfo>
					<xsd:documentation>Neo = Neonatal. Indicates a neonatal patient.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<!--Message Model-->
	<!--Message Model - Get Service-->
	<!-- xsd:simpleType name="HandleConstraint">
		<xsd:restriction base="dom:HandleRef"/>
	</xsd:simpleType-->
	<!---->
	<xsd:attribute name="ComponentActivationState" type="dom:ComponentActivation">
		<xsd:annotation>
			<xsd:documentation>Attribute definition of ComponentActivation.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:property name="State"/>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:attribute>
	<xsd:attribute name="ComponentCalibrationState" type="dom:CalibrationState">
		<xsd:annotation>
			<xsd:documentation>Attribute definition of ComponentCalibration.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:property name="CalibrationState"/>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:attribute>
	<xsd:element name="MetricCategory" type="dom:MetricCategory">
		<xsd:annotation>
			<xsd:documentation>The metric category makes it possible to distinguish between different manifestations of a metric like measurements, settings or recommendations.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:property name="Category"/>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Availability" type="dom:MetricAvailability">
		<xsd:annotation>
			<xsd:documentation>Availability of the means that derives the metric state.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!--Containment tree-->
	<xsd:attributeGroup name="ContainmentTreeInfo">
		<xsd:attribute name="HandleRef" type="dom:HandleRef" use="optional">
			<xsd:annotation>
				<xsd:documentation>Handle reference to the descriptor that this containment tree entry represents.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ParentHandleRef" type="dom:HandleRef" use="optional">
			<xsd:annotation>
				<xsd:documentation>Handle reference to the parent descriptor of the descriptor that this containment tree entry represents.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="EntryType" type="xsd:QName" use="optional">
			<xsd:annotation>
				<xsd:documentation>Qualified name of the descriptor that this containment tree entry represents .</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ChildrenCount" type="xsd:int" use="optional">
			<xsd:annotation>
				<xsd:documentation>Number of child element that the descriptor possesses that this containment tree entry represents.</xsd:documentation>
				<xsd:appinfo>
					<jaxb:property name="Children"/>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>
	<xsd:complexType name="ContainmentTree">
		<xsd:annotation>
			<xsd:documentation>Containment Tree part of an element of an MDS containment tree.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="Entry" type="dom:ContainmentTreeEntry" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>An entry of a containment tree element.</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="Entries"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attributeGroup ref="dom:ContainmentTreeInfo"/>
	</xsd:complexType>
	<xsd:element name="MDIBContainmentTree">
		<xsd:annotation>
			<xsd:documentation>TODO: add documentation</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="MDIBContainmentTree"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="dom:ContainmentTree"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="ContainmentTreeEntry">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="ContainmentTreeEntry"/>
			</xsd:appinfo>
			<xsd:documentation>An entry in a containment tree.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="Type" type="dom:CodedValue" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>The type of a descriptor that provides specific information about descriptor instance, e.g., the MDS represents an anaesthesia workstation.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attributeGroup ref="dom:ContainmentTreeInfo"/>
	</xsd:complexType>
	<!--Order-->
	<xsd:complexType name="ClinicalInfo">
		<xsd:annotation>
			<xsd:documentation>This type describes a minimal clinical observation.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="Type" type="dom:CodedValue">
				<xsd:annotation>
					<xsd:documentation>Type of observation.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="RelatedMeasurement" type="dom:Measure" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:property name="RelatedMeasurements"/>
					</xsd:appinfo>
					<xsd:documentation>Related measurements for this clinical observation if applicable.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="MeasuredValue" type="xsd:decimal">
			<xsd:annotation>
				<xsd:appinfo>
					<jaxb:property name="MeasuredValue"/>
				</xsd:appinfo>
				<xsd:documentation>The measured value of a clinical observation if applicable</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="Order">
		<xsd:annotation>
			<xsd:documentation>An order for a clinical treatment or diagnostic procedure or monitoring procedure.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="VisitNumber" type="dom:InstanceIdentifier" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Reference key of inpatient stay or outpatient visit of the patient administration system.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="PlacerOrderNumber" type="dom:InstanceIdentifier">
				<xsd:annotation>
					<xsd:documentation>Reference key of the order generating system.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="FillerOrderNumber" type="dom:InstanceIdentifier" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Reference key of the order filler system/ departmental system completing or changing order details.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Patient" type="dom:PersonReference">
				<xsd:annotation>
					<xsd:documentation>Subject of the order.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="ReferringPhysician" type="dom:PersonReference" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Physician as the initiator of the clinical process, e.g. the general practitioner.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="RequestingPhysician" type="dom:PersonReference" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Source that initiated the order.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Reason" type="dom:ClinicalInfo" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Clinical problem of patient as a cause for the requested service.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="DangerCode" type="dom:CodedValue" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Identifier and textual descritions of patient immanent risks, e.g., infectious deseases.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="RelevantClinicalInfo" type="dom:ClinicalInfo" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Clinical information that is relevant for the order.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="ImagingProcedure" type="dom:ImagingProcedure" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>ImagingProcedure provide identifiers used by the DICOM and HL7 standard to identify the requested imaging procedures resulting from an order in a the hospital.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="RequestedOrderDetail" type="dom:OrderDetail" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Initial order details at the time of order release.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="PerformedOrderDetail" type="dom:OrderDetail" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Recent state of order details after order has been performed.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="OrderDetail">
		<xsd:annotation>
			<xsd:documentation>Details of an order that will be performed or that has been performed.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="Start" type="xsd:dateTime" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Data for start of requested/performed procedure.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="End" type="xsd:dateTime" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Data for end of requested/performed procedure.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Performer" type="dom:PersonParticipation" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Names with roles of attending staff.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Service" type="dom:CodedValue" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Identifier and textual descritions of requested/performed procedures </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="ImagingProcedure">
		<xsd:annotation>
			<xsd:documentation>ImagingProcedure provide identifiers used by the DICOM and HL7 standard
 to identify the requested imaging procedures resulting from an order in a the hospital. Often these identifiers
 are created/assigned by the main hospital information system or departmental information systems and are taken over into any medical images by DICOM equipment in the context of this procedure. The listed elements have been taken over from the IHE Radiology Technical Framework's RAD-4 transaction ("Procedure Scheduled") and re-uses the identifiers listed vor the HL7 Version 2.5.1 IPC segment group of the OBR segment. Therefore it is recommended to comply to the underlying HL7 and DICOM data types in order to have seamless integration with other clinical IT such as DICOM modalities or image archives (PACS).

In order to comply to the hierarchy behind the given identifiers, the following rules (taken from IHE) SHOULD apply: If a Requested Procedure is comprised of multiple Scheduled Procedure Steps and/or if a Scheduled Procedure Step is comprised of multiple Protocol Codes, each applicable Scheduled Procedure Step / Protocol Code combination shall be included as a separate ProcedureDetails structure, i.e. the complext type "ProcedureDetails" must occur the same amount of times as there are different Scheduled Procedure Step IDs plus the amount of different Scheduled Procedure Step / Protocol Code combinations.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="AccessionIdentifier" type="dom:InstanceIdentifier">
				<xsd:annotation>
					<xsd:documentation>The Accession Identifier (in DICOM "Accession ID") is an identifier of an "Imaging Service Request", and is (in this ProcedureDetails context) at the top of the hierarchy. A limit of sixteen (16) characters is required to allow compatibility with DICOM.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="RequestedProcedureID" type="dom:InstanceIdentifier">
				<xsd:annotation>
					<xsd:documentation>An AccessionIdentifier can result in various Requested Procedures, each identified uniquely (within the context of the AccessionIdentifier) through a RequestedProcedureID. A limit of sixteen (16) characters is required to allow compatibility with DICOM.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="StudyInstanceUID" type="dom:InstanceIdentifier">
				<xsd:annotation>
					<xsd:documentation>The Study Instance UID is a world-wide unique identifier used by DICOM modalities to group together images in a so-called Study. This grouping is required. Under the Study, the modality creates one or more so-called Series which again will contain the images. The Series identification ("Series Instance UID") is part of the Procedure Details which refer to a planning process, since a modality is responsible to decide how many Series are created and how their identifiers should look like.
A limit of sixty-four (64) characters is required to allow compatibility with DICOM, with only numbers and dot characters permitted (e.g. 1.2.134124.4.12.34).</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="ScheduledProcedureStepID" type="dom:InstanceIdentifier">
				<xsd:annotation>
					<xsd:documentation>Under a Study (i.e. a Study Instance UID), a Procedure reflected by these ProcedureDetails can be planned in a finer granularity by scheduling different steps that should be performed (usually at a DICOM modality), the so-called "Scheduled Procedure Step"s. Each of these steps is identified by a Scheduled Procedure Step ID. A limit of sixteen (16) characters is required to allow compatibility with DICOM.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Modality" type="dom:CodedValue" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>The field modality describes the type of equipment (usually DICOM equipment) used. DICOM offers a list of short identifiers for different device categories, e.g. CT for "Computer Thomography" or US for "Ultrasound". It is advised to follow the list of terms defined in the DICOM standard part 3. A limit of sixteen (16) characters for the first component is required to allow compatibility with DICOM.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="ProtocolCode" type="dom:CodedValue" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Below each Scheduled Procedure Step the work can be defined in more detail by defining one or more Protocol Codes under it. A limit of sixteen (16) characters for the first component and sixty-four (64) characters for the second component is required to allow compatibility with DICOM.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="MDIBContainer" type="dom:MDIB"></xsd:element>
</xsd:schema>
