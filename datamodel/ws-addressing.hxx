// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef WS_ADDRESSING_HXX
#define WS_ADDRESSING_HXX

#include "ws-addressing-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "eventing.hxx"

namespace WS
{
  namespace ADDRESSING
  {
    class EndpointReferenceType: public ::xml_schema::Type
    {
      public:
      // Address
      //
      typedef ::WS::ADDRESSING::AttributedURIType AddressType;
      typedef ::xsd::cxx::tree::traits< AddressType, char > AddressTraits;

      const AddressType&
      Address () const;

      AddressType&
      Address ();

      void
      Address (const AddressType& x);

      void
      Address (::std::unique_ptr< AddressType > p);

      // ReferenceParameters
      //
      typedef ::WS::ADDRESSING::ReferenceParametersType ReferenceParametersType;
      typedef ::xsd::cxx::tree::optional< ReferenceParametersType > ReferenceParametersOptional;
      typedef ::xsd::cxx::tree::traits< ReferenceParametersType, char > ReferenceParametersTraits;

      const ReferenceParametersOptional&
      ReferenceParameters () const;

      ReferenceParametersOptional&
      ReferenceParameters ();

      void
      ReferenceParameters (const ReferenceParametersType& x);

      void
      ReferenceParameters (const ReferenceParametersOptional& x);

      void
      ReferenceParameters (::std::unique_ptr< ReferenceParametersType > p);

      // Metadata
      //
      typedef ::WS::ADDRESSING::MetadataType MetadataType;
      typedef ::xsd::cxx::tree::optional< MetadataType > MetadataOptional;
      typedef ::xsd::cxx::tree::traits< MetadataType, char > MetadataTraits;

      const MetadataOptional&
      Metadata () const;

      MetadataOptional&
      Metadata ();

      void
      Metadata (const MetadataType& x);

      void
      Metadata (const MetadataOptional& x);

      void
      Metadata (::std::unique_ptr< MetadataType > p);

      // Constructors.
      //
      EndpointReferenceType (const AddressType&);

      EndpointReferenceType (::std::unique_ptr< AddressType >);

      EndpointReferenceType (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

      EndpointReferenceType (const EndpointReferenceType& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

      virtual EndpointReferenceType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      EndpointReferenceType&
      operator= (const EndpointReferenceType& x);

      virtual 
      ~EndpointReferenceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< AddressType > Address_;
      ReferenceParametersOptional ReferenceParameters_;
      MetadataOptional Metadata_;
    };

    class ReferenceParametersType: public ::xml_schema::Type
    {
      public:
      // Identifier
      //
      typedef ::WS::EVENTING::Identifier IdentifierType;
      typedef ::xsd::cxx::tree::optional< IdentifierType > IdentifierOptional;
      typedef ::xsd::cxx::tree::traits< IdentifierType, char > IdentifierTraits;

      const IdentifierOptional&
      Identifier () const;

      IdentifierOptional&
      Identifier ();

      void
      Identifier (const IdentifierType& x);

      void
      Identifier (const IdentifierOptional& x);

      void
      Identifier (::std::unique_ptr< IdentifierType > p);

      // Constructors.
      //
      ReferenceParametersType ();

      ReferenceParametersType (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      ReferenceParametersType (const ReferenceParametersType& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

      virtual ReferenceParametersType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      ReferenceParametersType&
      operator= (const ReferenceParametersType& x);

      virtual 
      ~ReferenceParametersType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      IdentifierOptional Identifier_;
    };

    class MetadataType: public ::xml_schema::Type
    {
      public:
      // Constructors.
      //
      MetadataType ();

      MetadataType (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      MetadataType (const MetadataType& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      virtual MetadataType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~MetadataType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
    };

    class RelatesToType: public ::xml_schema::Uri
    {
      public:
      // RelationshipType
      //
      typedef ::WS::ADDRESSING::RelationshipTypeOpenEnum RelationshipTypeType;
      typedef ::xsd::cxx::tree::optional< RelationshipTypeType > RelationshipTypeOptional;
      typedef ::xsd::cxx::tree::traits< RelationshipTypeType, char > RelationshipTypeTraits;

      const RelationshipTypeOptional&
      RelationshipType () const;

      RelationshipTypeOptional&
      RelationshipType ();

      void
      RelationshipType (const RelationshipTypeType& x);

      void
      RelationshipType (const RelationshipTypeOptional& x);

      void
      RelationshipType (::std::unique_ptr< RelationshipTypeType > p);

      // Constructors.
      //
      RelatesToType (const ::xml_schema::Uri&);

      RelatesToType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      RelatesToType (const RelatesToType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      virtual RelatesToType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      RelatesToType&
      operator= (const RelatesToType& x);

      virtual 
      ~RelatesToType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      RelationshipTypeOptional RelationshipType_;
    };

    class RelationshipTypeOpenEnum: public ::xml_schema::String
    {
      public:

      RelationshipTypeOpenEnum (const char* v);

      RelationshipTypeOpenEnum (const ::std::string& v);

      RelationshipTypeOpenEnum (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

      RelationshipTypeOpenEnum (const ::xercesc::DOMAttr& a,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

      RelationshipTypeOpenEnum (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

      RelationshipTypeOpenEnum (const RelationshipTypeOpenEnum& x,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

      virtual RelationshipTypeOpenEnum*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class RelationshipType: public ::xml_schema::Uri
    {
      public:
      RelationshipType (const ::xml_schema::Uri& v);

      RelationshipType (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      RelationshipType (const ::xercesc::DOMAttr& a,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      RelationshipType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      RelationshipType (const RelationshipType& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      virtual RelationshipType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class AttributedURIType: public ::xml_schema::Uri
    {
      public:
      // Constructors.
      //
      AttributedURIType (const ::xml_schema::Uri&);

      AttributedURIType (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      AttributedURIType (const AttributedURIType& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      virtual AttributedURIType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~AttributedURIType ();
    };

    class FaultCodesOpenEnumType: public ::xml_schema::String
    {
      public:

      FaultCodesOpenEnumType (const char* v);

      FaultCodesOpenEnumType (const ::std::string& v);

      FaultCodesOpenEnumType (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

      FaultCodesOpenEnumType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

      FaultCodesOpenEnumType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

      FaultCodesOpenEnumType (const FaultCodesOpenEnumType& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

      virtual FaultCodesOpenEnumType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class FaultCodesType: public ::xml_schema::Qname
    {
      public:
      FaultCodesType (const ::xml_schema::Qname& v);

      FaultCodesType (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      FaultCodesType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      FaultCodesType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      FaultCodesType (const FaultCodesType& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      virtual FaultCodesType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;
    };

    class AttributedUnsignedLongType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::UnsignedLong, char, ::xml_schema::SimpleType >
    {
      public:
      // Constructors.
      //
      AttributedUnsignedLongType (const ::xml_schema::UnsignedLong&);

      AttributedUnsignedLongType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

      AttributedUnsignedLongType (const AttributedUnsignedLongType& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

      virtual AttributedUnsignedLongType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~AttributedUnsignedLongType ();
    };

    class AttributedQNameType: public ::xml_schema::Qname
    {
      public:
      // Constructors.
      //
      AttributedQNameType (const ::xml_schema::Qname&);

      AttributedQNameType (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      AttributedQNameType (const AttributedQNameType& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      virtual AttributedQNameType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      virtual 
      ~AttributedQNameType ();
    };

    class ProblemActionType: public ::xml_schema::Type
    {
      public:
      // Action
      //
      typedef ::WS::ADDRESSING::AttributedURIType ActionType;
      typedef ::xsd::cxx::tree::optional< ActionType > ActionOptional;
      typedef ::xsd::cxx::tree::traits< ActionType, char > ActionTraits;

      const ActionOptional&
      Action () const;

      ActionOptional&
      Action ();

      void
      Action (const ActionType& x);

      void
      Action (const ActionOptional& x);

      void
      Action (::std::unique_ptr< ActionType > p);

      // SoapAction
      //
      typedef ::xml_schema::Uri SoapActionType;
      typedef ::xsd::cxx::tree::optional< SoapActionType > SoapActionOptional;
      typedef ::xsd::cxx::tree::traits< SoapActionType, char > SoapActionTraits;

      const SoapActionOptional&
      SoapAction () const;

      SoapActionOptional&
      SoapAction ();

      void
      SoapAction (const SoapActionType& x);

      void
      SoapAction (const SoapActionOptional& x);

      void
      SoapAction (::std::unique_ptr< SoapActionType > p);

      // Constructors.
      //
      ProblemActionType ();

      ProblemActionType (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      ProblemActionType (const ProblemActionType& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      virtual ProblemActionType*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      ProblemActionType&
      operator= (const ProblemActionType& x);

      virtual 
      ~ProblemActionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ActionOptional Action_;
      SoapActionOptional SoapAction_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace WS
{
  namespace ADDRESSING
  {
    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (const ::std::string& uri,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (const ::std::string& uri,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::std::istream& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::std::istream& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::xercesc::InputSource& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::xercesc::InputSource& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (const ::xercesc::DOMDocument& d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    EndpointReference (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (const ::std::string& uri,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (const ::std::string& uri,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::std::istream& is,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::std::istream& is,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::xercesc::InputSource& is,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::xercesc::InputSource& is,
                         ::xml_schema::ErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (const ::xercesc::DOMDocument& d,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ReferenceParametersType >
    ReferenceParameters (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::Flags f = 0,
                         const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (const ::std::string& uri,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (const ::std::string& uri,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::std::istream& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::std::istream& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::xercesc::InputSource& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::xercesc::InputSource& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (const ::xercesc::DOMDocument& d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::MetadataType >
    Metadata (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (const ::std::string& uri,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (const ::std::string& uri,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::std::istream& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::std::istream& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::xercesc::InputSource& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::xercesc::InputSource& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    MessageID (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (const ::std::string& uri,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (const ::std::string& uri,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::std::istream& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::std::istream& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::xercesc::InputSource& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::xercesc::InputSource& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::RelatesToType >
    RelatesTo (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    ReplyTo (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (const ::std::string& uri,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (const ::std::string& uri,
          ::xml_schema::ErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::std::istream& is,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::std::istream& is,
          ::xml_schema::ErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::ErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::xercesc::InputSource& is,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::xercesc::InputSource& is,
          ::xml_schema::ErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (const ::xercesc::DOMDocument& d,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    From (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::Flags f = 0,
          const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::EndpointReferenceType >
    FaultTo (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (const ::std::string& uri,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (const ::std::string& uri,
        ::xml_schema::ErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::std::istream& is,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::std::istream& is,
        ::xml_schema::ErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::ErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::xercesc::InputSource& is,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::xercesc::InputSource& is,
        ::xml_schema::ErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (const ::xercesc::DOMDocument& d,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    To (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (const ::std::string& uri,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (const ::std::string& uri,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::std::istream& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::std::istream& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::xercesc::InputSource& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::xercesc::InputSource& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    Action (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (const ::std::string& uri,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (const ::std::string& uri,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::std::istream& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::std::istream& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::xercesc::InputSource& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::xercesc::InputSource& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (const ::xercesc::DOMDocument& d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedUnsignedLongType >
    RetryAfter (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (const ::std::string& uri,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (const ::std::string& uri,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (::std::istream& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (::std::istream& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (::xercesc::InputSource& is,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (::xercesc::InputSource& is,
                        ::xml_schema::ErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedQNameType >
    ProblemHeaderQName (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::Flags f = 0,
                        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (const ::std::string& uri,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (const ::std::string& uri,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (::std::istream& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (::std::istream& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (::xercesc::InputSource& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (::xercesc::InputSource& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (const ::xercesc::DOMDocument& d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::AttributedURIType >
    ProblemIRI (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (const ::std::string& uri,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (const ::std::string& uri,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (::std::istream& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (::std::istream& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (::xercesc::InputSource& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (::xercesc::InputSource& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (const ::xercesc::DOMDocument& d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    ::std::unique_ptr< ::WS::ADDRESSING::ProblemActionType >
    ProblemAction (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace WS
{
  namespace ADDRESSING
  {
    // Serialize to std::ostream.
    //

    void
    EndpointReference (::std::ostream& os,
                       const ::WS::ADDRESSING::EndpointReferenceType& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

    void
    EndpointReference (::std::ostream& os,
                       const ::WS::ADDRESSING::EndpointReferenceType& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

    void
    EndpointReference (::std::ostream& os,
                       const ::WS::ADDRESSING::EndpointReferenceType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EndpointReference (::xercesc::XMLFormatTarget& ft,
                       const ::WS::ADDRESSING::EndpointReferenceType& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

    void
    EndpointReference (::xercesc::XMLFormatTarget& ft,
                       const ::WS::ADDRESSING::EndpointReferenceType& x, 
                       ::xml_schema::ErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

    void
    EndpointReference (::xercesc::XMLFormatTarget& ft,
                       const ::WS::ADDRESSING::EndpointReferenceType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EndpointReference (::xercesc::DOMDocument& d,
                       const ::WS::ADDRESSING::EndpointReferenceType& x,
                       ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    EndpointReference (const ::WS::ADDRESSING::EndpointReferenceType& x, 
                       const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                       ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const EndpointReferenceType&);

    // Serialize to std::ostream.
    //

    void
    ReferenceParameters (::std::ostream& os,
                         const ::WS::ADDRESSING::ReferenceParametersType& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

    void
    ReferenceParameters (::std::ostream& os,
                         const ::WS::ADDRESSING::ReferenceParametersType& x, 
                         ::xml_schema::ErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

    void
    ReferenceParameters (::std::ostream& os,
                         const ::WS::ADDRESSING::ReferenceParametersType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ReferenceParameters (::xercesc::XMLFormatTarget& ft,
                         const ::WS::ADDRESSING::ReferenceParametersType& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

    void
    ReferenceParameters (::xercesc::XMLFormatTarget& ft,
                         const ::WS::ADDRESSING::ReferenceParametersType& x, 
                         ::xml_schema::ErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

    void
    ReferenceParameters (::xercesc::XMLFormatTarget& ft,
                         const ::WS::ADDRESSING::ReferenceParametersType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ReferenceParameters (::xercesc::DOMDocument& d,
                         const ::WS::ADDRESSING::ReferenceParametersType& x,
                         ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    ReferenceParameters (const ::WS::ADDRESSING::ReferenceParametersType& x, 
                         const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                         ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ReferenceParametersType&);

    // Serialize to std::ostream.
    //

    void
    Metadata (::std::ostream& os,
              const ::WS::ADDRESSING::MetadataType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    void
    Metadata (::std::ostream& os,
              const ::WS::ADDRESSING::MetadataType& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    void
    Metadata (::std::ostream& os,
              const ::WS::ADDRESSING::MetadataType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Metadata (::xercesc::XMLFormatTarget& ft,
              const ::WS::ADDRESSING::MetadataType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    void
    Metadata (::xercesc::XMLFormatTarget& ft,
              const ::WS::ADDRESSING::MetadataType& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    void
    Metadata (::xercesc::XMLFormatTarget& ft,
              const ::WS::ADDRESSING::MetadataType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Metadata (::xercesc::DOMDocument& d,
              const ::WS::ADDRESSING::MetadataType& x,
              ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Metadata (const ::WS::ADDRESSING::MetadataType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const MetadataType&);

    // Serialize to std::ostream.
    //

    void
    MessageID (::std::ostream& os,
               const ::WS::ADDRESSING::AttributedURIType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    MessageID (::std::ostream& os,
               const ::WS::ADDRESSING::AttributedURIType& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    MessageID (::std::ostream& os,
               const ::WS::ADDRESSING::AttributedURIType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    MessageID (::xercesc::XMLFormatTarget& ft,
               const ::WS::ADDRESSING::AttributedURIType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    MessageID (::xercesc::XMLFormatTarget& ft,
               const ::WS::ADDRESSING::AttributedURIType& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    MessageID (::xercesc::XMLFormatTarget& ft,
               const ::WS::ADDRESSING::AttributedURIType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    MessageID (::xercesc::DOMDocument& d,
               const ::WS::ADDRESSING::AttributedURIType& x,
               ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    MessageID (const ::WS::ADDRESSING::AttributedURIType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    RelatesTo (::std::ostream& os,
               const ::WS::ADDRESSING::RelatesToType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    RelatesTo (::std::ostream& os,
               const ::WS::ADDRESSING::RelatesToType& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    RelatesTo (::std::ostream& os,
               const ::WS::ADDRESSING::RelatesToType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RelatesTo (::xercesc::XMLFormatTarget& ft,
               const ::WS::ADDRESSING::RelatesToType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    RelatesTo (::xercesc::XMLFormatTarget& ft,
               const ::WS::ADDRESSING::RelatesToType& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    void
    RelatesTo (::xercesc::XMLFormatTarget& ft,
               const ::WS::ADDRESSING::RelatesToType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RelatesTo (::xercesc::DOMDocument& d,
               const ::WS::ADDRESSING::RelatesToType& x,
               ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    RelatesTo (const ::WS::ADDRESSING::RelatesToType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const RelatesToType&);

    void
    operator<< (::xercesc::DOMElement&, const RelationshipTypeOpenEnum&);

    void
    operator<< (::xercesc::DOMAttr&, const RelationshipTypeOpenEnum&);

    void
    operator<< (::xml_schema::ListStream&,
                const RelationshipTypeOpenEnum&);

    void
    operator<< (::xercesc::DOMElement&, const RelationshipType&);

    void
    operator<< (::xercesc::DOMAttr&, const RelationshipType&);

    void
    operator<< (::xml_schema::ListStream&,
                const RelationshipType&);

    // Serialize to std::ostream.
    //

    void
    ReplyTo (::std::ostream& os,
             const ::WS::ADDRESSING::EndpointReferenceType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    ReplyTo (::std::ostream& os,
             const ::WS::ADDRESSING::EndpointReferenceType& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    ReplyTo (::std::ostream& os,
             const ::WS::ADDRESSING::EndpointReferenceType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ReplyTo (::xercesc::XMLFormatTarget& ft,
             const ::WS::ADDRESSING::EndpointReferenceType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    ReplyTo (::xercesc::XMLFormatTarget& ft,
             const ::WS::ADDRESSING::EndpointReferenceType& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    ReplyTo (::xercesc::XMLFormatTarget& ft,
             const ::WS::ADDRESSING::EndpointReferenceType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ReplyTo (::xercesc::DOMDocument& d,
             const ::WS::ADDRESSING::EndpointReferenceType& x,
             ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    ReplyTo (const ::WS::ADDRESSING::EndpointReferenceType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    From (::std::ostream& os,
          const ::WS::ADDRESSING::EndpointReferenceType& x, 
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::Flags f = 0);

    void
    From (::std::ostream& os,
          const ::WS::ADDRESSING::EndpointReferenceType& x, 
          ::xml_schema::ErrorHandler& eh,
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::Flags f = 0);

    void
    From (::std::ostream& os,
          const ::WS::ADDRESSING::EndpointReferenceType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    From (::xercesc::XMLFormatTarget& ft,
          const ::WS::ADDRESSING::EndpointReferenceType& x, 
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::Flags f = 0);

    void
    From (::xercesc::XMLFormatTarget& ft,
          const ::WS::ADDRESSING::EndpointReferenceType& x, 
          ::xml_schema::ErrorHandler& eh,
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::Flags f = 0);

    void
    From (::xercesc::XMLFormatTarget& ft,
          const ::WS::ADDRESSING::EndpointReferenceType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    From (::xercesc::DOMDocument& d,
          const ::WS::ADDRESSING::EndpointReferenceType& x,
          ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    From (const ::WS::ADDRESSING::EndpointReferenceType& x, 
          const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
          ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    FaultTo (::std::ostream& os,
             const ::WS::ADDRESSING::EndpointReferenceType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    FaultTo (::std::ostream& os,
             const ::WS::ADDRESSING::EndpointReferenceType& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    FaultTo (::std::ostream& os,
             const ::WS::ADDRESSING::EndpointReferenceType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    FaultTo (::xercesc::XMLFormatTarget& ft,
             const ::WS::ADDRESSING::EndpointReferenceType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    FaultTo (::xercesc::XMLFormatTarget& ft,
             const ::WS::ADDRESSING::EndpointReferenceType& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    void
    FaultTo (::xercesc::XMLFormatTarget& ft,
             const ::WS::ADDRESSING::EndpointReferenceType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    FaultTo (::xercesc::DOMDocument& d,
             const ::WS::ADDRESSING::EndpointReferenceType& x,
             ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    FaultTo (const ::WS::ADDRESSING::EndpointReferenceType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    To (::std::ostream& os,
        const ::WS::ADDRESSING::AttributedURIType& x, 
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

    void
    To (::std::ostream& os,
        const ::WS::ADDRESSING::AttributedURIType& x, 
        ::xml_schema::ErrorHandler& eh,
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

    void
    To (::std::ostream& os,
        const ::WS::ADDRESSING::AttributedURIType& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    To (::xercesc::XMLFormatTarget& ft,
        const ::WS::ADDRESSING::AttributedURIType& x, 
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

    void
    To (::xercesc::XMLFormatTarget& ft,
        const ::WS::ADDRESSING::AttributedURIType& x, 
        ::xml_schema::ErrorHandler& eh,
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

    void
    To (::xercesc::XMLFormatTarget& ft,
        const ::WS::ADDRESSING::AttributedURIType& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    To (::xercesc::DOMDocument& d,
        const ::WS::ADDRESSING::AttributedURIType& x,
        ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    To (const ::WS::ADDRESSING::AttributedURIType& x, 
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Action (::std::ostream& os,
            const ::WS::ADDRESSING::AttributedURIType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Action (::std::ostream& os,
            const ::WS::ADDRESSING::AttributedURIType& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Action (::std::ostream& os,
            const ::WS::ADDRESSING::AttributedURIType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Action (::xercesc::XMLFormatTarget& ft,
            const ::WS::ADDRESSING::AttributedURIType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Action (::xercesc::XMLFormatTarget& ft,
            const ::WS::ADDRESSING::AttributedURIType& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    void
    Action (::xercesc::XMLFormatTarget& ft,
            const ::WS::ADDRESSING::AttributedURIType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Action (::xercesc::DOMDocument& d,
            const ::WS::ADDRESSING::AttributedURIType& x,
            ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    Action (const ::WS::ADDRESSING::AttributedURIType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AttributedURIType&);

    void
    operator<< (::xercesc::DOMElement&, const FaultCodesOpenEnumType&);

    void
    operator<< (::xercesc::DOMAttr&, const FaultCodesOpenEnumType&);

    void
    operator<< (::xml_schema::ListStream&,
                const FaultCodesOpenEnumType&);

    void
    operator<< (::xercesc::DOMElement&, const FaultCodesType&);

    void
    operator<< (::xercesc::DOMAttr&, const FaultCodesType&);

    void
    operator<< (::xml_schema::ListStream&,
                const FaultCodesType&);

    // Serialize to std::ostream.
    //

    void
    RetryAfter (::std::ostream& os,
                const ::WS::ADDRESSING::AttributedUnsignedLongType& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    RetryAfter (::std::ostream& os,
                const ::WS::ADDRESSING::AttributedUnsignedLongType& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    RetryAfter (::std::ostream& os,
                const ::WS::ADDRESSING::AttributedUnsignedLongType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RetryAfter (::xercesc::XMLFormatTarget& ft,
                const ::WS::ADDRESSING::AttributedUnsignedLongType& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    RetryAfter (::xercesc::XMLFormatTarget& ft,
                const ::WS::ADDRESSING::AttributedUnsignedLongType& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    RetryAfter (::xercesc::XMLFormatTarget& ft,
                const ::WS::ADDRESSING::AttributedUnsignedLongType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RetryAfter (::xercesc::DOMDocument& d,
                const ::WS::ADDRESSING::AttributedUnsignedLongType& x,
                ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    RetryAfter (const ::WS::ADDRESSING::AttributedUnsignedLongType& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AttributedUnsignedLongType&);

    // Serialize to std::ostream.
    //

    void
    ProblemHeaderQName (::std::ostream& os,
                        const ::WS::ADDRESSING::AttributedQNameType& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    void
    ProblemHeaderQName (::std::ostream& os,
                        const ::WS::ADDRESSING::AttributedQNameType& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    void
    ProblemHeaderQName (::std::ostream& os,
                        const ::WS::ADDRESSING::AttributedQNameType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProblemHeaderQName (::xercesc::XMLFormatTarget& ft,
                        const ::WS::ADDRESSING::AttributedQNameType& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    void
    ProblemHeaderQName (::xercesc::XMLFormatTarget& ft,
                        const ::WS::ADDRESSING::AttributedQNameType& x, 
                        ::xml_schema::ErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    void
    ProblemHeaderQName (::xercesc::XMLFormatTarget& ft,
                        const ::WS::ADDRESSING::AttributedQNameType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProblemHeaderQName (::xercesc::DOMDocument& d,
                        const ::WS::ADDRESSING::AttributedQNameType& x,
                        ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    ProblemHeaderQName (const ::WS::ADDRESSING::AttributedQNameType& x, 
                        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                        ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AttributedQNameType&);

    // Serialize to std::ostream.
    //

    void
    ProblemIRI (::std::ostream& os,
                const ::WS::ADDRESSING::AttributedURIType& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    ProblemIRI (::std::ostream& os,
                const ::WS::ADDRESSING::AttributedURIType& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    ProblemIRI (::std::ostream& os,
                const ::WS::ADDRESSING::AttributedURIType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProblemIRI (::xercesc::XMLFormatTarget& ft,
                const ::WS::ADDRESSING::AttributedURIType& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    ProblemIRI (::xercesc::XMLFormatTarget& ft,
                const ::WS::ADDRESSING::AttributedURIType& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    void
    ProblemIRI (::xercesc::XMLFormatTarget& ft,
                const ::WS::ADDRESSING::AttributedURIType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProblemIRI (::xercesc::DOMDocument& d,
                const ::WS::ADDRESSING::AttributedURIType& x,
                ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    ProblemIRI (const ::WS::ADDRESSING::AttributedURIType& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                ::xml_schema::Flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ProblemAction (::std::ostream& os,
                   const ::WS::ADDRESSING::ProblemActionType& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

    void
    ProblemAction (::std::ostream& os,
                   const ::WS::ADDRESSING::ProblemActionType& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

    void
    ProblemAction (::std::ostream& os,
                   const ::WS::ADDRESSING::ProblemActionType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProblemAction (::xercesc::XMLFormatTarget& ft,
                   const ::WS::ADDRESSING::ProblemActionType& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

    void
    ProblemAction (::xercesc::XMLFormatTarget& ft,
                   const ::WS::ADDRESSING::ProblemActionType& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

    void
    ProblemAction (::xercesc::XMLFormatTarget& ft,
                   const ::WS::ADDRESSING::ProblemActionType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProblemAction (::xercesc::DOMDocument& d,
                   const ::WS::ADDRESSING::ProblemActionType& x,
                   ::xml_schema::Flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    ProblemAction (const ::WS::ADDRESSING::ProblemActionType& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   ::xml_schema::Flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ProblemActionType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // WS_ADDRESSING_HXX
