// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef WSDL_SOAP_BINDING_HXX
#define WSDL_SOAP_BINDING_HXX

#include "wsdl-soap-binding-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace WS
{
  namespace WSDL
  {
    namespace SOAP_BINDING
    {
      class BindingType: public ::xml_schema::Type
      {
        public:
        // transport
        //
        typedef ::xml_schema::Uri TransportType;
        typedef ::xsd::cxx::tree::optional< TransportType > TransportOptional;
        typedef ::xsd::cxx::tree::traits< TransportType, char > TransportTraits;

        const TransportOptional&
        transport () const;

        TransportOptional&
        transport ();

        void
        transport (const TransportType& x);

        void
        transport (const TransportOptional& x);

        void
        transport (::std::unique_ptr< TransportType > p);

        // style
        //
        typedef ::WS::WSDL::SOAP_BINDING::StyleChoice StyleType;
        typedef ::xsd::cxx::tree::optional< StyleType > StyleOptional;
        typedef ::xsd::cxx::tree::traits< StyleType, char > StyleTraits;

        const StyleOptional&
        style () const;

        StyleOptional&
        style ();

        void
        style (const StyleType& x);

        void
        style (const StyleOptional& x);

        void
        style (::std::unique_ptr< StyleType > p);

        // Constructors.
        //
        BindingType ();

        BindingType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        BindingType (const BindingType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        virtual BindingType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        BindingType&
        operator= (const BindingType& x);

        virtual 
        ~BindingType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        TransportOptional transport_;
        StyleOptional style_;
      };

      class StyleChoice: public ::xml_schema::String
      {
        public:
        enum Value
        {
          rpc,
          document
        };

        StyleChoice (Value v);

        StyleChoice (const char* v);

        StyleChoice (const ::std::string& v);

        StyleChoice (const ::xml_schema::String& v);

        StyleChoice (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        StyleChoice (const ::xercesc::DOMAttr& a,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        StyleChoice (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        StyleChoice (const StyleChoice& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        virtual StyleChoice*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        StyleChoice&
        operator= (Value v);

        virtual
        operator Value () const
        {
          return _xsd_StyleChoice_convert ();
        }

        protected:
        Value
        _xsd_StyleChoice_convert () const;

        public:
        static const char* const _xsd_StyleChoice_literals_[2];
        static const Value _xsd_StyleChoice_indexes_[2];
      };

      class OperationType: public ::xml_schema::Type
      {
        public:
        // soapAction
        //
        typedef ::xml_schema::Uri SoapActionType;
        typedef ::xsd::cxx::tree::optional< SoapActionType > SoapActionOptional;
        typedef ::xsd::cxx::tree::traits< SoapActionType, char > SoapActionTraits;

        const SoapActionOptional&
        soapAction () const;

        SoapActionOptional&
        soapAction ();

        void
        soapAction (const SoapActionType& x);

        void
        soapAction (const SoapActionOptional& x);

        void
        soapAction (::std::unique_ptr< SoapActionType > p);

        // style
        //
        typedef ::WS::WSDL::SOAP_BINDING::StyleChoice StyleType;
        typedef ::xsd::cxx::tree::optional< StyleType > StyleOptional;
        typedef ::xsd::cxx::tree::traits< StyleType, char > StyleTraits;

        const StyleOptional&
        style () const;

        StyleOptional&
        style ();

        void
        style (const StyleType& x);

        void
        style (const StyleOptional& x);

        void
        style (::std::unique_ptr< StyleType > p);

        // Constructors.
        //
        OperationType ();

        OperationType (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

        OperationType (const OperationType& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

        virtual OperationType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        OperationType&
        operator= (const OperationType& x);

        virtual 
        ~OperationType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        SoapActionOptional soapAction_;
        StyleOptional style_;
      };

      class BodyType: public ::xml_schema::Type
      {
        public:
        // encodingStyle
        //
        typedef ::xml_schema::Uri EncodingStyleType;
        typedef ::xsd::cxx::tree::optional< EncodingStyleType > EncodingStyleOptional;
        typedef ::xsd::cxx::tree::traits< EncodingStyleType, char > EncodingStyleTraits;

        const EncodingStyleOptional&
        encodingStyle () const;

        EncodingStyleOptional&
        encodingStyle ();

        void
        encodingStyle (const EncodingStyleType& x);

        void
        encodingStyle (const EncodingStyleOptional& x);

        void
        encodingStyle (::std::unique_ptr< EncodingStyleType > p);

        // parts
        //
        typedef ::xml_schema::Nmtokens PartsType;
        typedef ::xsd::cxx::tree::optional< PartsType > PartsOptional;
        typedef ::xsd::cxx::tree::traits< PartsType, char > PartsTraits;

        const PartsOptional&
        parts () const;

        PartsOptional&
        parts ();

        void
        parts (const PartsType& x);

        void
        parts (const PartsOptional& x);

        void
        parts (::std::unique_ptr< PartsType > p);

        // use
        //
        typedef ::WS::WSDL::SOAP_BINDING::UseChoice UseType;
        typedef ::xsd::cxx::tree::optional< UseType > UseOptional;
        typedef ::xsd::cxx::tree::traits< UseType, char > UseTraits;

        const UseOptional&
        use () const;

        UseOptional&
        use ();

        void
        use (const UseType& x);

        void
        use (const UseOptional& x);

        void
        use (::std::unique_ptr< UseType > p);

        // namespace
        //
        typedef ::xml_schema::Uri NamespaceType;
        typedef ::xsd::cxx::tree::optional< NamespaceType > NamespaceOptional;
        typedef ::xsd::cxx::tree::traits< NamespaceType, char > NamespaceTraits;

        const NamespaceOptional&
        namespace_ () const;

        NamespaceOptional&
        namespace_ ();

        void
        namespace_ (const NamespaceType& x);

        void
        namespace_ (const NamespaceOptional& x);

        void
        namespace_ (::std::unique_ptr< NamespaceType > p);

        // Constructors.
        //
        BodyType ();

        BodyType (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        BodyType (const BodyType& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        virtual BodyType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        BodyType&
        operator= (const BodyType& x);

        virtual 
        ~BodyType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        EncodingStyleOptional encodingStyle_;
        PartsOptional parts_;
        UseOptional use_;
        NamespaceOptional namespace__;
      };

      class UseChoice: public ::xml_schema::String
      {
        public:
        enum Value
        {
          literal,
          encoded
        };

        UseChoice (Value v);

        UseChoice (const char* v);

        UseChoice (const ::std::string& v);

        UseChoice (const ::xml_schema::String& v);

        UseChoice (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        UseChoice (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        UseChoice (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        UseChoice (const UseChoice& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        virtual UseChoice*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        UseChoice&
        operator= (Value v);

        virtual
        operator Value () const
        {
          return _xsd_UseChoice_convert ();
        }

        protected:
        Value
        _xsd_UseChoice_convert () const;

        public:
        static const char* const _xsd_UseChoice_literals_[2];
        static const Value _xsd_UseChoice_indexes_[2];
      };

      class FaultType: public ::WS::WSDL::SOAP_BINDING::BodyType
      {
        public:
        // Constructors.
        //
        FaultType ();

        FaultType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        FaultType (const FaultType& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

        virtual FaultType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        virtual 
        ~FaultType ();
      };

      class HeaderType: public ::xml_schema::Type
      {
        public:
        // headerfault
        //
        typedef ::WS::WSDL::SOAP_BINDING::HeaderfaultType HeaderfaultType;
        typedef ::xsd::cxx::tree::traits< HeaderfaultType, char > HeaderfaultTraits;

        const HeaderfaultType&
        headerfault () const;

        HeaderfaultType&
        headerfault ();

        void
        headerfault (const HeaderfaultType& x);

        void
        headerfault (::std::unique_ptr< HeaderfaultType > p);

        // message
        //
        typedef ::xml_schema::Qname MessageType;
        typedef ::xsd::cxx::tree::traits< MessageType, char > MessageTraits;

        const MessageType&
        message () const;

        MessageType&
        message ();

        void
        message (const MessageType& x);

        void
        message (::std::unique_ptr< MessageType > p);

        // parts
        //
        typedef ::xml_schema::Nmtokens PartsType;
        typedef ::xsd::cxx::tree::traits< PartsType, char > PartsTraits;

        const PartsType&
        parts () const;

        PartsType&
        parts ();

        void
        parts (const PartsType& x);

        void
        parts (::std::unique_ptr< PartsType > p);

        // use
        //
        typedef ::WS::WSDL::SOAP_BINDING::UseChoice UseType;
        typedef ::xsd::cxx::tree::traits< UseType, char > UseTraits;

        const UseType&
        use () const;

        UseType&
        use ();

        void
        use (const UseType& x);

        void
        use (::std::unique_ptr< UseType > p);

        // encodingStyle
        //
        typedef ::xml_schema::Uri EncodingStyleType;
        typedef ::xsd::cxx::tree::optional< EncodingStyleType > EncodingStyleOptional;
        typedef ::xsd::cxx::tree::traits< EncodingStyleType, char > EncodingStyleTraits;

        const EncodingStyleOptional&
        encodingStyle () const;

        EncodingStyleOptional&
        encodingStyle ();

        void
        encodingStyle (const EncodingStyleType& x);

        void
        encodingStyle (const EncodingStyleOptional& x);

        void
        encodingStyle (::std::unique_ptr< EncodingStyleType > p);

        // namespace
        //
        typedef ::xml_schema::Uri NamespaceType;
        typedef ::xsd::cxx::tree::optional< NamespaceType > NamespaceOptional;
        typedef ::xsd::cxx::tree::traits< NamespaceType, char > NamespaceTraits;

        const NamespaceOptional&
        namespace_ () const;

        NamespaceOptional&
        namespace_ ();

        void
        namespace_ (const NamespaceType& x);

        void
        namespace_ (const NamespaceOptional& x);

        void
        namespace_ (::std::unique_ptr< NamespaceType > p);

        // Constructors.
        //
        HeaderType (const HeaderfaultType&,
                    const MessageType&,
                    const PartsType&,
                    const UseType&);

        HeaderType (::std::unique_ptr< HeaderfaultType >,
                    const MessageType&,
                    const PartsType&,
                    const UseType&);

        HeaderType (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

        HeaderType (const HeaderType& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

        virtual HeaderType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        HeaderType&
        operator= (const HeaderType& x);

        virtual 
        ~HeaderType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< HeaderfaultType > headerfault_;
        ::xsd::cxx::tree::one< MessageType > message_;
        ::xsd::cxx::tree::one< PartsType > parts_;
        ::xsd::cxx::tree::one< UseType > use_;
        EncodingStyleOptional encodingStyle_;
        NamespaceOptional namespace__;
      };

      class HeaderfaultType: public ::xml_schema::Type
      {
        public:
        // message
        //
        typedef ::xml_schema::Qname MessageType;
        typedef ::xsd::cxx::tree::traits< MessageType, char > MessageTraits;

        const MessageType&
        message () const;

        MessageType&
        message ();

        void
        message (const MessageType& x);

        void
        message (::std::unique_ptr< MessageType > p);

        // parts
        //
        typedef ::xml_schema::Nmtokens PartsType;
        typedef ::xsd::cxx::tree::traits< PartsType, char > PartsTraits;

        const PartsType&
        parts () const;

        PartsType&
        parts ();

        void
        parts (const PartsType& x);

        void
        parts (::std::unique_ptr< PartsType > p);

        // use
        //
        typedef ::WS::WSDL::SOAP_BINDING::UseChoice UseType;
        typedef ::xsd::cxx::tree::traits< UseType, char > UseTraits;

        const UseType&
        use () const;

        UseType&
        use ();

        void
        use (const UseType& x);

        void
        use (::std::unique_ptr< UseType > p);

        // encodingStyle
        //
        typedef ::xml_schema::Uri EncodingStyleType;
        typedef ::xsd::cxx::tree::optional< EncodingStyleType > EncodingStyleOptional;
        typedef ::xsd::cxx::tree::traits< EncodingStyleType, char > EncodingStyleTraits;

        const EncodingStyleOptional&
        encodingStyle () const;

        EncodingStyleOptional&
        encodingStyle ();

        void
        encodingStyle (const EncodingStyleType& x);

        void
        encodingStyle (const EncodingStyleOptional& x);

        void
        encodingStyle (::std::unique_ptr< EncodingStyleType > p);

        // namespace
        //
        typedef ::xml_schema::Uri NamespaceType;
        typedef ::xsd::cxx::tree::optional< NamespaceType > NamespaceOptional;
        typedef ::xsd::cxx::tree::traits< NamespaceType, char > NamespaceTraits;

        const NamespaceOptional&
        namespace_ () const;

        NamespaceOptional&
        namespace_ ();

        void
        namespace_ (const NamespaceType& x);

        void
        namespace_ (const NamespaceOptional& x);

        void
        namespace_ (::std::unique_ptr< NamespaceType > p);

        // Constructors.
        //
        HeaderfaultType (const MessageType&,
                         const PartsType&,
                         const UseType&);

        HeaderfaultType (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

        HeaderfaultType (const HeaderfaultType& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

        virtual HeaderfaultType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        HeaderfaultType&
        operator= (const HeaderfaultType& x);

        virtual 
        ~HeaderfaultType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< MessageType > message_;
        ::xsd::cxx::tree::one< PartsType > parts_;
        ::xsd::cxx::tree::one< UseType > use_;
        EncodingStyleOptional encodingStyle_;
        NamespaceOptional namespace__;
      };

      class AddressType: public ::xml_schema::Type
      {
        public:
        // location
        //
        typedef ::xml_schema::Uri LocationType;
        typedef ::xsd::cxx::tree::traits< LocationType, char > LocationTraits;

        const LocationType&
        location () const;

        LocationType&
        location ();

        void
        location (const LocationType& x);

        void
        location (::std::unique_ptr< LocationType > p);

        // Constructors.
        //
        AddressType (const LocationType&);

        AddressType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        AddressType (const AddressType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

        virtual AddressType*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        AddressType&
        operator= (const AddressType& x);

        virtual 
        ~AddressType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< LocationType > location_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace WS
{
  namespace WSDL
  {
    namespace SOAP_BINDING
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (const ::std::string& uri,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (const ::std::string& uri,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::std::istream& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::std::istream& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::xercesc::InputSource& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::xercesc::InputSource& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (const ::std::string& uri,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (const ::std::string& uri,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::std::istream& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::std::istream& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::xercesc::InputSource& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::xercesc::InputSource& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (const ::xercesc::DOMDocument& d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (const ::std::string& uri,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (const ::std::string& uri,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::std::istream& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::std::istream& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::xercesc::InputSource& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::xercesc::InputSource& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (const ::std::string& uri,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (const ::std::string& uri,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::std::istream& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::std::istream& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::xercesc::InputSource& is,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::xercesc::InputSource& is,
              ::xml_schema::ErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (const ::xercesc::DOMDocument& d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f = 0,
              const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (const ::std::string& uri,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (const ::std::string& uri,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::std::istream& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::std::istream& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::xercesc::InputSource& is,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::xercesc::InputSource& is,
                   ::xml_schema::ErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (const ::xercesc::DOMDocument& d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f = 0,
                   const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (const ::std::string& uri,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (const ::std::string& uri,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::std::istream& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::std::istream& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::xercesc::InputSource& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::xercesc::InputSource& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace WS
{
  namespace WSDL
  {
    namespace SOAP_BINDING
    {
      // Serialize to std::ostream.
      //

      void
      binding (::std::ostream& os,
               const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      binding (::std::ostream& os,
               const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      binding (::std::ostream& os,
               const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      binding (::xercesc::XMLFormatTarget& ft,
               const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      binding (::xercesc::XMLFormatTarget& ft,
               const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      binding (::xercesc::XMLFormatTarget& ft,
               const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      binding (::xercesc::DOMDocument& d,
               const ::WS::WSDL::SOAP_BINDING::BindingType& x,
               ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      binding (const ::WS::WSDL::SOAP_BINDING::BindingType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               ::xml_schema::Flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const BindingType&);

      void
      operator<< (::xercesc::DOMElement&, const StyleChoice&);

      void
      operator<< (::xercesc::DOMAttr&, const StyleChoice&);

      void
      operator<< (::xml_schema::ListStream&,
                  const StyleChoice&);

      // Serialize to std::ostream.
      //

      void
      operation (::std::ostream& os,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      void
      operation (::std::ostream& os,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                 ::xml_schema::ErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      void
      operation (::std::ostream& os,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      operation (::xercesc::XMLFormatTarget& ft,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      void
      operation (::xercesc::XMLFormatTarget& ft,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                 ::xml_schema::ErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      void
      operation (::xercesc::XMLFormatTarget& ft,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      operation (::xercesc::DOMDocument& d,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& x,
                 ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      operation (const ::WS::WSDL::SOAP_BINDING::OperationType& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 ::xml_schema::Flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const OperationType&);

      // Serialize to std::ostream.
      //

      void
      body (::std::ostream& os,
            const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

      void
      body (::std::ostream& os,
            const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

      void
      body (::std::ostream& os,
            const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      body (::xercesc::XMLFormatTarget& ft,
            const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

      void
      body (::xercesc::XMLFormatTarget& ft,
            const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

      void
      body (::xercesc::XMLFormatTarget& ft,
            const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      body (::xercesc::DOMDocument& d,
            const ::WS::WSDL::SOAP_BINDING::BodyType& x,
            ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      body (const ::WS::WSDL::SOAP_BINDING::BodyType& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            ::xml_schema::Flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const BodyType&);

      void
      operator<< (::xercesc::DOMElement&, const UseChoice&);

      void
      operator<< (::xercesc::DOMAttr&, const UseChoice&);

      void
      operator<< (::xml_schema::ListStream&,
                  const UseChoice&);

      // Serialize to std::ostream.
      //

      void
      fault (::std::ostream& os,
             const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

      void
      fault (::std::ostream& os,
             const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

      void
      fault (::std::ostream& os,
             const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      fault (::xercesc::XMLFormatTarget& ft,
             const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

      void
      fault (::xercesc::XMLFormatTarget& ft,
             const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

      void
      fault (::xercesc::XMLFormatTarget& ft,
             const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      fault (::xercesc::DOMDocument& d,
             const ::WS::WSDL::SOAP_BINDING::FaultType& x,
             ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      fault (const ::WS::WSDL::SOAP_BINDING::FaultType& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const FaultType&);

      // Serialize to std::ostream.
      //

      void
      header (::std::ostream& os,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      header (::std::ostream& os,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      header (::std::ostream& os,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      header (::xercesc::XMLFormatTarget& ft,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      header (::xercesc::XMLFormatTarget& ft,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
              ::xml_schema::ErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      void
      header (::xercesc::XMLFormatTarget& ft,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      header (::xercesc::DOMDocument& d,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& x,
              ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      header (const ::WS::WSDL::SOAP_BINDING::HeaderType& x, 
              const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
              ::xml_schema::Flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const HeaderType&);

      // Serialize to std::ostream.
      //

      void
      headerfault (::std::ostream& os,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

      void
      headerfault (::std::ostream& os,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

      void
      headerfault (::std::ostream& os,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      headerfault (::xercesc::XMLFormatTarget& ft,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

      void
      headerfault (::xercesc::XMLFormatTarget& ft,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                   ::xml_schema::ErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

      void
      headerfault (::xercesc::XMLFormatTarget& ft,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      headerfault (::xercesc::DOMDocument& d,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x,
                   ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      headerfault (const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& x, 
                   const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                   ::xml_schema::Flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const HeaderfaultType&);

      // Serialize to std::ostream.
      //

      void
      address (::std::ostream& os,
               const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      address (::std::ostream& os,
               const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      address (::std::ostream& os,
               const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      address (::xercesc::XMLFormatTarget& ft,
               const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      address (::xercesc::XMLFormatTarget& ft,
               const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      void
      address (::xercesc::XMLFormatTarget& ft,
               const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      address (::xercesc::DOMDocument& d,
               const ::WS::WSDL::SOAP_BINDING::AddressType& x,
               ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      address (const ::WS::WSDL::SOAP_BINDING::AddressType& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               ::xml_schema::Flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const AddressType&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // WSDL_SOAP_BINDING_HXX
