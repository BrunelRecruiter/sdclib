// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "NormalizedMessageModel.hxx"

namespace MESSAGEMODEL
{
  // Header
  // 

  const Header::ActionOptional& Header::
  Action () const
  {
    return this->Action_;
  }

  Header::ActionOptional& Header::
  Action ()
  {
    return this->Action_;
  }

  void Header::
  Action (const ActionType& x)
  {
    this->Action_.set (x);
  }

  void Header::
  Action (const ActionOptional& x)
  {
    this->Action_ = x;
  }

  void Header::
  Action (::std::unique_ptr< ActionType > x)
  {
    this->Action_.set (std::move (x));
  }

  const Header::AppSequenceOptional& Header::
  AppSequence () const
  {
    return this->AppSequence_;
  }

  Header::AppSequenceOptional& Header::
  AppSequence ()
  {
    return this->AppSequence_;
  }

  void Header::
  AppSequence (const AppSequenceType& x)
  {
    this->AppSequence_.set (x);
  }

  void Header::
  AppSequence (const AppSequenceOptional& x)
  {
    this->AppSequence_ = x;
  }

  void Header::
  AppSequence (::std::unique_ptr< AppSequenceType > x)
  {
    this->AppSequence_.set (std::move (x));
  }

  const Header::FaultToOptional& Header::
  FaultTo () const
  {
    return this->FaultTo_;
  }

  Header::FaultToOptional& Header::
  FaultTo ()
  {
    return this->FaultTo_;
  }

  void Header::
  FaultTo (const FaultToType& x)
  {
    this->FaultTo_.set (x);
  }

  void Header::
  FaultTo (const FaultToOptional& x)
  {
    this->FaultTo_ = x;
  }

  void Header::
  FaultTo (::std::unique_ptr< FaultToType > x)
  {
    this->FaultTo_.set (std::move (x));
  }

  const Header::FromOptional& Header::
  From () const
  {
    return this->From_;
  }

  Header::FromOptional& Header::
  From ()
  {
    return this->From_;
  }

  void Header::
  From (const FromType& x)
  {
    this->From_.set (x);
  }

  void Header::
  From (const FromOptional& x)
  {
    this->From_ = x;
  }

  void Header::
  From (::std::unique_ptr< FromType > x)
  {
    this->From_.set (std::move (x));
  }

  const Header::MessageIDOptional& Header::
  MessageID () const
  {
    return this->MessageID_;
  }

  Header::MessageIDOptional& Header::
  MessageID ()
  {
    return this->MessageID_;
  }

  void Header::
  MessageID (const MessageIDType& x)
  {
    this->MessageID_.set (x);
  }

  void Header::
  MessageID (const MessageIDOptional& x)
  {
    this->MessageID_ = x;
  }

  void Header::
  MessageID (::std::unique_ptr< MessageIDType > x)
  {
    this->MessageID_.set (std::move (x));
  }

  const Header::ReferenceParametersOptional& Header::
  ReferenceParameters () const
  {
    return this->ReferenceParameters_;
  }

  Header::ReferenceParametersOptional& Header::
  ReferenceParameters ()
  {
    return this->ReferenceParameters_;
  }

  void Header::
  ReferenceParameters (const ReferenceParametersType& x)
  {
    this->ReferenceParameters_.set (x);
  }

  void Header::
  ReferenceParameters (const ReferenceParametersOptional& x)
  {
    this->ReferenceParameters_ = x;
  }

  void Header::
  ReferenceParameters (::std::unique_ptr< ReferenceParametersType > x)
  {
    this->ReferenceParameters_.set (std::move (x));
  }

  const Header::RelatesToOptional& Header::
  RelatesTo () const
  {
    return this->RelatesTo_;
  }

  Header::RelatesToOptional& Header::
  RelatesTo ()
  {
    return this->RelatesTo_;
  }

  void Header::
  RelatesTo (const RelatesToType& x)
  {
    this->RelatesTo_.set (x);
  }

  void Header::
  RelatesTo (const RelatesToOptional& x)
  {
    this->RelatesTo_ = x;
  }

  void Header::
  RelatesTo (::std::unique_ptr< RelatesToType > x)
  {
    this->RelatesTo_.set (std::move (x));
  }

  const Header::ReplyToOptional& Header::
  ReplyTo () const
  {
    return this->ReplyTo_;
  }

  Header::ReplyToOptional& Header::
  ReplyTo ()
  {
    return this->ReplyTo_;
  }

  void Header::
  ReplyTo (const ReplyToType& x)
  {
    this->ReplyTo_.set (x);
  }

  void Header::
  ReplyTo (const ReplyToOptional& x)
  {
    this->ReplyTo_ = x;
  }

  void Header::
  ReplyTo (::std::unique_ptr< ReplyToType > x)
  {
    this->ReplyTo_.set (std::move (x));
  }

  const Header::ToOptional& Header::
  To () const
  {
    return this->To_;
  }

  Header::ToOptional& Header::
  To ()
  {
    return this->To_;
  }

  void Header::
  To (const ToType& x)
  {
    this->To_.set (x);
  }

  void Header::
  To (const ToOptional& x)
  {
    this->To_ = x;
  }

  void Header::
  To (::std::unique_ptr< ToType > x)
  {
    this->To_.set (std::move (x));
  }

  const Header::IdentifierOptional& Header::
  Identifier () const
  {
    return this->Identifier_;
  }

  Header::IdentifierOptional& Header::
  Identifier ()
  {
    return this->Identifier_;
  }

  void Header::
  Identifier (const IdentifierType& x)
  {
    this->Identifier_.set (x);
  }

  void Header::
  Identifier (const IdentifierOptional& x)
  {
    this->Identifier_ = x;
  }

  void Header::
  Identifier (::std::unique_ptr< IdentifierType > x)
  {
    this->Identifier_.set (std::move (x));
  }


  // Body
  // 

  const Body::ByeOptional& Body::
  Bye () const
  {
    return this->Bye_;
  }

  Body::ByeOptional& Body::
  Bye ()
  {
    return this->Bye_;
  }

  void Body::
  Bye (const ByeType& x)
  {
    this->Bye_.set (x);
  }

  void Body::
  Bye (const ByeOptional& x)
  {
    this->Bye_ = x;
  }

  void Body::
  Bye (::std::unique_ptr< ByeType > x)
  {
    this->Bye_.set (std::move (x));
  }

  const Body::HelloOptional& Body::
  Hello () const
  {
    return this->Hello_;
  }

  Body::HelloOptional& Body::
  Hello ()
  {
    return this->Hello_;
  }

  void Body::
  Hello (const HelloType& x)
  {
    this->Hello_.set (x);
  }

  void Body::
  Hello (const HelloOptional& x)
  {
    this->Hello_ = x;
  }

  void Body::
  Hello (::std::unique_ptr< HelloType > x)
  {
    this->Hello_.set (std::move (x));
  }

  const Body::ProbeOptional& Body::
  Probe () const
  {
    return this->Probe_;
  }

  Body::ProbeOptional& Body::
  Probe ()
  {
    return this->Probe_;
  }

  void Body::
  Probe (const ProbeType& x)
  {
    this->Probe_.set (x);
  }

  void Body::
  Probe (const ProbeOptional& x)
  {
    this->Probe_ = x;
  }

  void Body::
  Probe (::std::unique_ptr< ProbeType > x)
  {
    this->Probe_.set (std::move (x));
  }

  const Body::ProbeMatchesOptional& Body::
  ProbeMatches () const
  {
    return this->ProbeMatches_;
  }

  Body::ProbeMatchesOptional& Body::
  ProbeMatches ()
  {
    return this->ProbeMatches_;
  }

  void Body::
  ProbeMatches (const ProbeMatchesType& x)
  {
    this->ProbeMatches_.set (x);
  }

  void Body::
  ProbeMatches (const ProbeMatchesOptional& x)
  {
    this->ProbeMatches_ = x;
  }

  void Body::
  ProbeMatches (::std::unique_ptr< ProbeMatchesType > x)
  {
    this->ProbeMatches_.set (std::move (x));
  }

  const Body::ResolveOptional& Body::
  Resolve () const
  {
    return this->Resolve_;
  }

  Body::ResolveOptional& Body::
  Resolve ()
  {
    return this->Resolve_;
  }

  void Body::
  Resolve (const ResolveType& x)
  {
    this->Resolve_.set (x);
  }

  void Body::
  Resolve (const ResolveOptional& x)
  {
    this->Resolve_ = x;
  }

  void Body::
  Resolve (::std::unique_ptr< ResolveType > x)
  {
    this->Resolve_.set (std::move (x));
  }

  const Body::ResolveMatchesOptional& Body::
  ResolveMatches () const
  {
    return this->ResolveMatches_;
  }

  Body::ResolveMatchesOptional& Body::
  ResolveMatches ()
  {
    return this->ResolveMatches_;
  }

  void Body::
  ResolveMatches (const ResolveMatchesType& x)
  {
    this->ResolveMatches_.set (x);
  }

  void Body::
  ResolveMatches (const ResolveMatchesOptional& x)
  {
    this->ResolveMatches_ = x;
  }

  void Body::
  ResolveMatches (::std::unique_ptr< ResolveMatchesType > x)
  {
    this->ResolveMatches_.set (std::move (x));
  }

  const Body::GetMetadataOptional& Body::
  GetMetadata () const
  {
    return this->GetMetadata_;
  }

  Body::GetMetadataOptional& Body::
  GetMetadata ()
  {
    return this->GetMetadata_;
  }

  void Body::
  GetMetadata (const GetMetadataType& x)
  {
    this->GetMetadata_.set (x);
  }

  void Body::
  GetMetadata (const GetMetadataOptional& x)
  {
    this->GetMetadata_ = x;
  }

  void Body::
  GetMetadata (::std::unique_ptr< GetMetadataType > x)
  {
    this->GetMetadata_.set (std::move (x));
  }

  const Body::MetadataOptional& Body::
  Metadata () const
  {
    return this->Metadata_;
  }

  Body::MetadataOptional& Body::
  Metadata ()
  {
    return this->Metadata_;
  }

  void Body::
  Metadata (const MetadataType& x)
  {
    this->Metadata_.set (x);
  }

  void Body::
  Metadata (const MetadataOptional& x)
  {
    this->Metadata_ = x;
  }

  void Body::
  Metadata (::std::unique_ptr< MetadataType > x)
  {
    this->Metadata_.set (std::move (x));
  }

  const Body::SubscribeOptional& Body::
  Subscribe () const
  {
    return this->Subscribe_;
  }

  Body::SubscribeOptional& Body::
  Subscribe ()
  {
    return this->Subscribe_;
  }

  void Body::
  Subscribe (const SubscribeType& x)
  {
    this->Subscribe_.set (x);
  }

  void Body::
  Subscribe (const SubscribeOptional& x)
  {
    this->Subscribe_ = x;
  }

  void Body::
  Subscribe (::std::unique_ptr< SubscribeType > x)
  {
    this->Subscribe_.set (std::move (x));
  }

  const Body::SubscribeResponseOptional& Body::
  SubscribeResponse () const
  {
    return this->SubscribeResponse_;
  }

  Body::SubscribeResponseOptional& Body::
  SubscribeResponse ()
  {
    return this->SubscribeResponse_;
  }

  void Body::
  SubscribeResponse (const SubscribeResponseType& x)
  {
    this->SubscribeResponse_.set (x);
  }

  void Body::
  SubscribeResponse (const SubscribeResponseOptional& x)
  {
    this->SubscribeResponse_ = x;
  }

  void Body::
  SubscribeResponse (::std::unique_ptr< SubscribeResponseType > x)
  {
    this->SubscribeResponse_.set (std::move (x));
  }

  const Body::UnsubscribeOptional& Body::
  Unsubscribe () const
  {
    return this->Unsubscribe_;
  }

  Body::UnsubscribeOptional& Body::
  Unsubscribe ()
  {
    return this->Unsubscribe_;
  }

  void Body::
  Unsubscribe (const UnsubscribeType& x)
  {
    this->Unsubscribe_.set (x);
  }

  void Body::
  Unsubscribe (const UnsubscribeOptional& x)
  {
    this->Unsubscribe_ = x;
  }

  void Body::
  Unsubscribe (::std::unique_ptr< UnsubscribeType > x)
  {
    this->Unsubscribe_.set (std::move (x));
  }

  const Body::RenewOptional& Body::
  Renew () const
  {
    return this->Renew_;
  }

  Body::RenewOptional& Body::
  Renew ()
  {
    return this->Renew_;
  }

  void Body::
  Renew (const RenewType& x)
  {
    this->Renew_.set (x);
  }

  void Body::
  Renew (const RenewOptional& x)
  {
    this->Renew_ = x;
  }

  void Body::
  Renew (::std::unique_ptr< RenewType > x)
  {
    this->Renew_.set (std::move (x));
  }

  const Body::RenewResponseOptional& Body::
  RenewResponse () const
  {
    return this->RenewResponse_;
  }

  Body::RenewResponseOptional& Body::
  RenewResponse ()
  {
    return this->RenewResponse_;
  }

  void Body::
  RenewResponse (const RenewResponseType& x)
  {
    this->RenewResponse_.set (x);
  }

  void Body::
  RenewResponse (const RenewResponseOptional& x)
  {
    this->RenewResponse_ = x;
  }

  void Body::
  RenewResponse (::std::unique_ptr< RenewResponseType > x)
  {
    this->RenewResponse_.set (std::move (x));
  }

  const Body::GetContextStatesOptional& Body::
  GetContextStates () const
  {
    return this->GetContextStates_;
  }

  Body::GetContextStatesOptional& Body::
  GetContextStates ()
  {
    return this->GetContextStates_;
  }

  void Body::
  GetContextStates (const GetContextStatesType& x)
  {
    this->GetContextStates_.set (x);
  }

  void Body::
  GetContextStates (const GetContextStatesOptional& x)
  {
    this->GetContextStates_ = x;
  }

  void Body::
  GetContextStates (::std::unique_ptr< GetContextStatesType > x)
  {
    this->GetContextStates_.set (std::move (x));
  }

  const Body::GetContextStatesResponseOptional& Body::
  GetContextStatesResponse () const
  {
    return this->GetContextStatesResponse_;
  }

  Body::GetContextStatesResponseOptional& Body::
  GetContextStatesResponse ()
  {
    return this->GetContextStatesResponse_;
  }

  void Body::
  GetContextStatesResponse (const GetContextStatesResponseType& x)
  {
    this->GetContextStatesResponse_.set (x);
  }

  void Body::
  GetContextStatesResponse (const GetContextStatesResponseOptional& x)
  {
    this->GetContextStatesResponse_ = x;
  }

  void Body::
  GetContextStatesResponse (::std::unique_ptr< GetContextStatesResponseType > x)
  {
    this->GetContextStatesResponse_.set (std::move (x));
  }

  const Body::SetContextStateOptional& Body::
  SetContextState () const
  {
    return this->SetContextState_;
  }

  Body::SetContextStateOptional& Body::
  SetContextState ()
  {
    return this->SetContextState_;
  }

  void Body::
  SetContextState (const SetContextStateType& x)
  {
    this->SetContextState_.set (x);
  }

  void Body::
  SetContextState (const SetContextStateOptional& x)
  {
    this->SetContextState_ = x;
  }

  void Body::
  SetContextState (::std::unique_ptr< SetContextStateType > x)
  {
    this->SetContextState_.set (std::move (x));
  }

  const Body::SetContextStateResponseOptional& Body::
  SetContextStateResponse () const
  {
    return this->SetContextStateResponse_;
  }

  Body::SetContextStateResponseOptional& Body::
  SetContextStateResponse ()
  {
    return this->SetContextStateResponse_;
  }

  void Body::
  SetContextStateResponse (const SetContextStateResponseType& x)
  {
    this->SetContextStateResponse_.set (x);
  }

  void Body::
  SetContextStateResponse (const SetContextStateResponseOptional& x)
  {
    this->SetContextStateResponse_ = x;
  }

  void Body::
  SetContextStateResponse (::std::unique_ptr< SetContextStateResponseType > x)
  {
    this->SetContextStateResponse_.set (std::move (x));
  }

  const Body::EpisodicContextChangedReportOptional& Body::
  EpisodicContextChangedReport () const
  {
    return this->EpisodicContextChangedReport_;
  }

  Body::EpisodicContextChangedReportOptional& Body::
  EpisodicContextChangedReport ()
  {
    return this->EpisodicContextChangedReport_;
  }

  void Body::
  EpisodicContextChangedReport (const EpisodicContextChangedReportType& x)
  {
    this->EpisodicContextChangedReport_.set (x);
  }

  void Body::
  EpisodicContextChangedReport (const EpisodicContextChangedReportOptional& x)
  {
    this->EpisodicContextChangedReport_ = x;
  }

  void Body::
  EpisodicContextChangedReport (::std::unique_ptr< EpisodicContextChangedReportType > x)
  {
    this->EpisodicContextChangedReport_.set (std::move (x));
  }

  const Body::PeriodicContextChangedReportOptional& Body::
  PeriodicContextChangedReport () const
  {
    return this->PeriodicContextChangedReport_;
  }

  Body::PeriodicContextChangedReportOptional& Body::
  PeriodicContextChangedReport ()
  {
    return this->PeriodicContextChangedReport_;
  }

  void Body::
  PeriodicContextChangedReport (const PeriodicContextChangedReportType& x)
  {
    this->PeriodicContextChangedReport_.set (x);
  }

  void Body::
  PeriodicContextChangedReport (const PeriodicContextChangedReportOptional& x)
  {
    this->PeriodicContextChangedReport_ = x;
  }

  void Body::
  PeriodicContextChangedReport (::std::unique_ptr< PeriodicContextChangedReportType > x)
  {
    this->PeriodicContextChangedReport_.set (std::move (x));
  }

  const Body::EpisodicAlertReportOptional& Body::
  EpisodicAlertReport () const
  {
    return this->EpisodicAlertReport_;
  }

  Body::EpisodicAlertReportOptional& Body::
  EpisodicAlertReport ()
  {
    return this->EpisodicAlertReport_;
  }

  void Body::
  EpisodicAlertReport (const EpisodicAlertReportType& x)
  {
    this->EpisodicAlertReport_.set (x);
  }

  void Body::
  EpisodicAlertReport (const EpisodicAlertReportOptional& x)
  {
    this->EpisodicAlertReport_ = x;
  }

  void Body::
  EpisodicAlertReport (::std::unique_ptr< EpisodicAlertReportType > x)
  {
    this->EpisodicAlertReport_.set (std::move (x));
  }

  const Body::EpisodicMetricReportOptional& Body::
  EpisodicMetricReport () const
  {
    return this->EpisodicMetricReport_;
  }

  Body::EpisodicMetricReportOptional& Body::
  EpisodicMetricReport ()
  {
    return this->EpisodicMetricReport_;
  }

  void Body::
  EpisodicMetricReport (const EpisodicMetricReportType& x)
  {
    this->EpisodicMetricReport_.set (x);
  }

  void Body::
  EpisodicMetricReport (const EpisodicMetricReportOptional& x)
  {
    this->EpisodicMetricReport_ = x;
  }

  void Body::
  EpisodicMetricReport (::std::unique_ptr< EpisodicMetricReportType > x)
  {
    this->EpisodicMetricReport_.set (std::move (x));
  }

  const Body::PeriodicAlertReportOptional& Body::
  PeriodicAlertReport () const
  {
    return this->PeriodicAlertReport_;
  }

  Body::PeriodicAlertReportOptional& Body::
  PeriodicAlertReport ()
  {
    return this->PeriodicAlertReport_;
  }

  void Body::
  PeriodicAlertReport (const PeriodicAlertReportType& x)
  {
    this->PeriodicAlertReport_.set (x);
  }

  void Body::
  PeriodicAlertReport (const PeriodicAlertReportOptional& x)
  {
    this->PeriodicAlertReport_ = x;
  }

  void Body::
  PeriodicAlertReport (::std::unique_ptr< PeriodicAlertReportType > x)
  {
    this->PeriodicAlertReport_.set (std::move (x));
  }

  const Body::PeriodicMetricReportOptional& Body::
  PeriodicMetricReport () const
  {
    return this->PeriodicMetricReport_;
  }

  Body::PeriodicMetricReportOptional& Body::
  PeriodicMetricReport ()
  {
    return this->PeriodicMetricReport_;
  }

  void Body::
  PeriodicMetricReport (const PeriodicMetricReportType& x)
  {
    this->PeriodicMetricReport_.set (x);
  }

  void Body::
  PeriodicMetricReport (const PeriodicMetricReportOptional& x)
  {
    this->PeriodicMetricReport_ = x;
  }

  void Body::
  PeriodicMetricReport (::std::unique_ptr< PeriodicMetricReportType > x)
  {
    this->PeriodicMetricReport_.set (std::move (x));
  }

  const Body::OperationInvokedReportOptional& Body::
  OperationInvokedReport () const
  {
    return this->OperationInvokedReport_;
  }

  Body::OperationInvokedReportOptional& Body::
  OperationInvokedReport ()
  {
    return this->OperationInvokedReport_;
  }

  void Body::
  OperationInvokedReport (const OperationInvokedReportType& x)
  {
    this->OperationInvokedReport_.set (x);
  }

  void Body::
  OperationInvokedReport (const OperationInvokedReportOptional& x)
  {
    this->OperationInvokedReport_ = x;
  }

  void Body::
  OperationInvokedReport (::std::unique_ptr< OperationInvokedReportType > x)
  {
    this->OperationInvokedReport_.set (std::move (x));
  }

  const Body::GetMDDescriptionOptional& Body::
  GetMDDescription () const
  {
    return this->GetMDDescription_;
  }

  Body::GetMDDescriptionOptional& Body::
  GetMDDescription ()
  {
    return this->GetMDDescription_;
  }

  void Body::
  GetMDDescription (const GetMDDescriptionType& x)
  {
    this->GetMDDescription_.set (x);
  }

  void Body::
  GetMDDescription (const GetMDDescriptionOptional& x)
  {
    this->GetMDDescription_ = x;
  }

  void Body::
  GetMDDescription (::std::unique_ptr< GetMDDescriptionType > x)
  {
    this->GetMDDescription_.set (std::move (x));
  }

  const Body::GetMDDescriptionResponseOptional& Body::
  GetMDDescriptionResponse () const
  {
    return this->GetMDDescriptionResponse_;
  }

  Body::GetMDDescriptionResponseOptional& Body::
  GetMDDescriptionResponse ()
  {
    return this->GetMDDescriptionResponse_;
  }

  void Body::
  GetMDDescriptionResponse (const GetMDDescriptionResponseType& x)
  {
    this->GetMDDescriptionResponse_.set (x);
  }

  void Body::
  GetMDDescriptionResponse (const GetMDDescriptionResponseOptional& x)
  {
    this->GetMDDescriptionResponse_ = x;
  }

  void Body::
  GetMDDescriptionResponse (::std::unique_ptr< GetMDDescriptionResponseType > x)
  {
    this->GetMDDescriptionResponse_.set (std::move (x));
  }

  const Body::GetMDIBOptional& Body::
  GetMDIB () const
  {
    return this->GetMDIB_;
  }

  Body::GetMDIBOptional& Body::
  GetMDIB ()
  {
    return this->GetMDIB_;
  }

  void Body::
  GetMDIB (const GetMDIBType& x)
  {
    this->GetMDIB_.set (x);
  }

  void Body::
  GetMDIB (const GetMDIBOptional& x)
  {
    this->GetMDIB_ = x;
  }

  void Body::
  GetMDIB (::std::unique_ptr< GetMDIBType > x)
  {
    this->GetMDIB_.set (std::move (x));
  }

  const Body::GetMDIBResponseOptional& Body::
  GetMDIBResponse () const
  {
    return this->GetMDIBResponse_;
  }

  Body::GetMDIBResponseOptional& Body::
  GetMDIBResponse ()
  {
    return this->GetMDIBResponse_;
  }

  void Body::
  GetMDIBResponse (const GetMDIBResponseType& x)
  {
    this->GetMDIBResponse_.set (x);
  }

  void Body::
  GetMDIBResponse (const GetMDIBResponseOptional& x)
  {
    this->GetMDIBResponse_ = x;
  }

  void Body::
  GetMDIBResponse (::std::unique_ptr< GetMDIBResponseType > x)
  {
    this->GetMDIBResponse_.set (std::move (x));
  }

  const Body::GetMDStateOptional& Body::
  GetMDState () const
  {
    return this->GetMDState_;
  }

  Body::GetMDStateOptional& Body::
  GetMDState ()
  {
    return this->GetMDState_;
  }

  void Body::
  GetMDState (const GetMDStateType& x)
  {
    this->GetMDState_.set (x);
  }

  void Body::
  GetMDState (const GetMDStateOptional& x)
  {
    this->GetMDState_ = x;
  }

  void Body::
  GetMDState (::std::unique_ptr< GetMDStateType > x)
  {
    this->GetMDState_.set (std::move (x));
  }

  const Body::GetMDStateResponseOptional& Body::
  GetMDStateResponse () const
  {
    return this->GetMDStateResponse_;
  }

  Body::GetMDStateResponseOptional& Body::
  GetMDStateResponse ()
  {
    return this->GetMDStateResponse_;
  }

  void Body::
  GetMDStateResponse (const GetMDStateResponseType& x)
  {
    this->GetMDStateResponse_.set (x);
  }

  void Body::
  GetMDStateResponse (const GetMDStateResponseOptional& x)
  {
    this->GetMDStateResponse_ = x;
  }

  void Body::
  GetMDStateResponse (::std::unique_ptr< GetMDStateResponseType > x)
  {
    this->GetMDStateResponse_.set (std::move (x));
  }

  const Body::ActivateOptional& Body::
  Activate () const
  {
    return this->Activate_;
  }

  Body::ActivateOptional& Body::
  Activate ()
  {
    return this->Activate_;
  }

  void Body::
  Activate (const ActivateType& x)
  {
    this->Activate_.set (x);
  }

  void Body::
  Activate (const ActivateOptional& x)
  {
    this->Activate_ = x;
  }

  void Body::
  Activate (::std::unique_ptr< ActivateType > x)
  {
    this->Activate_.set (std::move (x));
  }

  const Body::ActivateResponseOptional& Body::
  ActivateResponse () const
  {
    return this->ActivateResponse_;
  }

  Body::ActivateResponseOptional& Body::
  ActivateResponse ()
  {
    return this->ActivateResponse_;
  }

  void Body::
  ActivateResponse (const ActivateResponseType& x)
  {
    this->ActivateResponse_.set (x);
  }

  void Body::
  ActivateResponse (const ActivateResponseOptional& x)
  {
    this->ActivateResponse_ = x;
  }

  void Body::
  ActivateResponse (::std::unique_ptr< ActivateResponseType > x)
  {
    this->ActivateResponse_.set (std::move (x));
  }

  const Body::SetAlertStateOptional& Body::
  SetAlertState () const
  {
    return this->SetAlertState_;
  }

  Body::SetAlertStateOptional& Body::
  SetAlertState ()
  {
    return this->SetAlertState_;
  }

  void Body::
  SetAlertState (const SetAlertStateType& x)
  {
    this->SetAlertState_.set (x);
  }

  void Body::
  SetAlertState (const SetAlertStateOptional& x)
  {
    this->SetAlertState_ = x;
  }

  void Body::
  SetAlertState (::std::unique_ptr< SetAlertStateType > x)
  {
    this->SetAlertState_.set (std::move (x));
  }

  const Body::SetAlertStateResponseOptional& Body::
  SetAlertStateResponse () const
  {
    return this->SetAlertStateResponse_;
  }

  Body::SetAlertStateResponseOptional& Body::
  SetAlertStateResponse ()
  {
    return this->SetAlertStateResponse_;
  }

  void Body::
  SetAlertStateResponse (const SetAlertStateResponseType& x)
  {
    this->SetAlertStateResponse_.set (x);
  }

  void Body::
  SetAlertStateResponse (const SetAlertStateResponseOptional& x)
  {
    this->SetAlertStateResponse_ = x;
  }

  void Body::
  SetAlertStateResponse (::std::unique_ptr< SetAlertStateResponseType > x)
  {
    this->SetAlertStateResponse_.set (std::move (x));
  }

  const Body::SetStringOptional& Body::
  SetString () const
  {
    return this->SetString_;
  }

  Body::SetStringOptional& Body::
  SetString ()
  {
    return this->SetString_;
  }

  void Body::
  SetString (const SetStringType& x)
  {
    this->SetString_.set (x);
  }

  void Body::
  SetString (const SetStringOptional& x)
  {
    this->SetString_ = x;
  }

  void Body::
  SetString (::std::unique_ptr< SetStringType > x)
  {
    this->SetString_.set (std::move (x));
  }

  const Body::SetStringResponseOptional& Body::
  SetStringResponse () const
  {
    return this->SetStringResponse_;
  }

  Body::SetStringResponseOptional& Body::
  SetStringResponse ()
  {
    return this->SetStringResponse_;
  }

  void Body::
  SetStringResponse (const SetStringResponseType& x)
  {
    this->SetStringResponse_.set (x);
  }

  void Body::
  SetStringResponse (const SetStringResponseOptional& x)
  {
    this->SetStringResponse_ = x;
  }

  void Body::
  SetStringResponse (::std::unique_ptr< SetStringResponseType > x)
  {
    this->SetStringResponse_.set (std::move (x));
  }

  const Body::SetValueOptional& Body::
  SetValue () const
  {
    return this->SetValue_;
  }

  Body::SetValueOptional& Body::
  SetValue ()
  {
    return this->SetValue_;
  }

  void Body::
  SetValue (const SetValueType& x)
  {
    this->SetValue_.set (x);
  }

  void Body::
  SetValue (const SetValueOptional& x)
  {
    this->SetValue_ = x;
  }

  void Body::
  SetValue (::std::unique_ptr< SetValueType > x)
  {
    this->SetValue_.set (std::move (x));
  }

  const Body::SetValueResponseOptional& Body::
  SetValueResponse () const
  {
    return this->SetValueResponse_;
  }

  Body::SetValueResponseOptional& Body::
  SetValueResponse ()
  {
    return this->SetValueResponse_;
  }

  void Body::
  SetValueResponse (const SetValueResponseType& x)
  {
    this->SetValueResponse_.set (x);
  }

  void Body::
  SetValueResponse (const SetValueResponseOptional& x)
  {
    this->SetValueResponse_ = x;
  }

  void Body::
  SetValueResponse (::std::unique_ptr< SetValueResponseType > x)
  {
    this->SetValueResponse_.set (std::move (x));
  }


  // Envelope
  // 

  const Envelope::HeaderType& Envelope::
  Header () const
  {
    return this->Header_.get ();
  }

  Envelope::HeaderType& Envelope::
  Header ()
  {
    return this->Header_.get ();
  }

  void Envelope::
  Header (const HeaderType& x)
  {
    this->Header_.set (x);
  }

  void Envelope::
  Header (::std::unique_ptr< HeaderType > x)
  {
    this->Header_.set (std::move (x));
  }

  const Envelope::BodyType& Envelope::
  Body () const
  {
    return this->Body_.get ();
  }

  Envelope::BodyType& Envelope::
  Body ()
  {
    return this->Body_.get ();
  }

  void Envelope::
  Body (const BodyType& x)
  {
    this->Body_.set (x);
  }

  void Envelope::
  Body (::std::unique_ptr< BodyType > x)
  {
    this->Body_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace MESSAGEMODEL
{
  // Header
  //

  Header::
  Header ()
  : ::xml_schema::Type (),
    Action_ (this),
    AppSequence_ (this),
    FaultTo_ (this),
    From_ (this),
    MessageID_ (this),
    ReferenceParameters_ (this),
    RelatesTo_ (this),
    ReplyTo_ (this),
    To_ (this),
    Identifier_ (this)
  {
  }

  Header::
  Header (const Header& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Action_ (x.Action_, f, this),
    AppSequence_ (x.AppSequence_, f, this),
    FaultTo_ (x.FaultTo_, f, this),
    From_ (x.From_, f, this),
    MessageID_ (x.MessageID_, f, this),
    ReferenceParameters_ (x.ReferenceParameters_, f, this),
    RelatesTo_ (x.RelatesTo_, f, this),
    ReplyTo_ (x.ReplyTo_, f, this),
    To_ (x.To_, f, this),
    Identifier_ (x.Identifier_, f, this)
  {
  }

  Header::
  Header (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Action_ (this),
    AppSequence_ (this),
    FaultTo_ (this),
    From_ (this),
    MessageID_ (this),
    ReferenceParameters_ (this),
    RelatesTo_ (this),
    ReplyTo_ (this),
    To_ (this),
    Identifier_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Header::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Action
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Action",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< ActionType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->Action_)
          {
            ::std::unique_ptr< ActionType > r (
              dynamic_cast< ActionType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Action_.set (::std::move (r));
            continue;
          }
        }
      }

      // AppSequence
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "AppSequence",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< AppSequenceType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->AppSequence_)
          {
            ::std::unique_ptr< AppSequenceType > r (
              dynamic_cast< AppSequenceType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->AppSequence_.set (::std::move (r));
            continue;
          }
        }
      }

      // FaultTo
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "FaultTo",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< FaultToType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->FaultTo_)
          {
            ::std::unique_ptr< FaultToType > r (
              dynamic_cast< FaultToType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->FaultTo_.set (::std::move (r));
            continue;
          }
        }
      }

      // From
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "From",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< FromType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->From_)
          {
            ::std::unique_ptr< FromType > r (
              dynamic_cast< FromType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->From_.set (::std::move (r));
            continue;
          }
        }
      }

      // MessageID
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "MessageID",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< MessageIDType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->MessageID_)
          {
            ::std::unique_ptr< MessageIDType > r (
              dynamic_cast< MessageIDType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->MessageID_.set (::std::move (r));
            continue;
          }
        }
      }

      // ReferenceParameters
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ReferenceParameters",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< ReferenceParametersType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->ReferenceParameters_)
          {
            ::std::unique_ptr< ReferenceParametersType > r (
              dynamic_cast< ReferenceParametersType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ReferenceParameters_.set (::std::move (r));
            continue;
          }
        }
      }

      // RelatesTo
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "RelatesTo",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< RelatesToType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->RelatesTo_)
          {
            ::std::unique_ptr< RelatesToType > r (
              dynamic_cast< RelatesToType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->RelatesTo_.set (::std::move (r));
            continue;
          }
        }
      }

      // ReplyTo
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ReplyTo",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< ReplyToType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->ReplyTo_)
          {
            ::std::unique_ptr< ReplyToType > r (
              dynamic_cast< ReplyToType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ReplyTo_.set (::std::move (r));
            continue;
          }
        }
      }

      // To
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "To",
            "http://www.w3.org/2005/08/addressing",
            &::xsd::cxx::tree::factory_impl< ToType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->To_)
          {
            ::std::unique_ptr< ToType > r (
              dynamic_cast< ToType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->To_.set (::std::move (r));
            continue;
          }
        }
      }

      // Identifier
      //
      if (n.name () == "Identifier" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< IdentifierType > r (
          IdentifierTraits::create (i, f, this));

        if (!this->Identifier_)
        {
          this->Identifier_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  Header* Header::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Header (*this, f, c);
  }

  Header& Header::
  operator= (const Header& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Action_ = x.Action_;
      this->AppSequence_ = x.AppSequence_;
      this->FaultTo_ = x.FaultTo_;
      this->From_ = x.From_;
      this->MessageID_ = x.MessageID_;
      this->ReferenceParameters_ = x.ReferenceParameters_;
      this->RelatesTo_ = x.RelatesTo_;
      this->ReplyTo_ = x.ReplyTo_;
      this->To_ = x.To_;
      this->Identifier_ = x.Identifier_;
    }

    return *this;
  }

  Header::
  ~Header ()
  {
  }

  // Body
  //

  Body::
  Body ()
  : ::xml_schema::Type (),
    Bye_ (this),
    Hello_ (this),
    Probe_ (this),
    ProbeMatches_ (this),
    Resolve_ (this),
    ResolveMatches_ (this),
    GetMetadata_ (this),
    Metadata_ (this),
    Subscribe_ (this),
    SubscribeResponse_ (this),
    Unsubscribe_ (this),
    Renew_ (this),
    RenewResponse_ (this),
    GetContextStates_ (this),
    GetContextStatesResponse_ (this),
    SetContextState_ (this),
    SetContextStateResponse_ (this),
    EpisodicContextChangedReport_ (this),
    PeriodicContextChangedReport_ (this),
    EpisodicAlertReport_ (this),
    EpisodicMetricReport_ (this),
    PeriodicAlertReport_ (this),
    PeriodicMetricReport_ (this),
    OperationInvokedReport_ (this),
    GetMDDescription_ (this),
    GetMDDescriptionResponse_ (this),
    GetMDIB_ (this),
    GetMDIBResponse_ (this),
    GetMDState_ (this),
    GetMDStateResponse_ (this),
    Activate_ (this),
    ActivateResponse_ (this),
    SetAlertState_ (this),
    SetAlertStateResponse_ (this),
    SetString_ (this),
    SetStringResponse_ (this),
    SetValue_ (this),
    SetValueResponse_ (this)
  {
  }

  Body::
  Body (const Body& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Bye_ (x.Bye_, f, this),
    Hello_ (x.Hello_, f, this),
    Probe_ (x.Probe_, f, this),
    ProbeMatches_ (x.ProbeMatches_, f, this),
    Resolve_ (x.Resolve_, f, this),
    ResolveMatches_ (x.ResolveMatches_, f, this),
    GetMetadata_ (x.GetMetadata_, f, this),
    Metadata_ (x.Metadata_, f, this),
    Subscribe_ (x.Subscribe_, f, this),
    SubscribeResponse_ (x.SubscribeResponse_, f, this),
    Unsubscribe_ (x.Unsubscribe_, f, this),
    Renew_ (x.Renew_, f, this),
    RenewResponse_ (x.RenewResponse_, f, this),
    GetContextStates_ (x.GetContextStates_, f, this),
    GetContextStatesResponse_ (x.GetContextStatesResponse_, f, this),
    SetContextState_ (x.SetContextState_, f, this),
    SetContextStateResponse_ (x.SetContextStateResponse_, f, this),
    EpisodicContextChangedReport_ (x.EpisodicContextChangedReport_, f, this),
    PeriodicContextChangedReport_ (x.PeriodicContextChangedReport_, f, this),
    EpisodicAlertReport_ (x.EpisodicAlertReport_, f, this),
    EpisodicMetricReport_ (x.EpisodicMetricReport_, f, this),
    PeriodicAlertReport_ (x.PeriodicAlertReport_, f, this),
    PeriodicMetricReport_ (x.PeriodicMetricReport_, f, this),
    OperationInvokedReport_ (x.OperationInvokedReport_, f, this),
    GetMDDescription_ (x.GetMDDescription_, f, this),
    GetMDDescriptionResponse_ (x.GetMDDescriptionResponse_, f, this),
    GetMDIB_ (x.GetMDIB_, f, this),
    GetMDIBResponse_ (x.GetMDIBResponse_, f, this),
    GetMDState_ (x.GetMDState_, f, this),
    GetMDStateResponse_ (x.GetMDStateResponse_, f, this),
    Activate_ (x.Activate_, f, this),
    ActivateResponse_ (x.ActivateResponse_, f, this),
    SetAlertState_ (x.SetAlertState_, f, this),
    SetAlertStateResponse_ (x.SetAlertStateResponse_, f, this),
    SetString_ (x.SetString_, f, this),
    SetStringResponse_ (x.SetStringResponse_, f, this),
    SetValue_ (x.SetValue_, f, this),
    SetValueResponse_ (x.SetValueResponse_, f, this)
  {
  }

  Body::
  Body (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Bye_ (this),
    Hello_ (this),
    Probe_ (this),
    ProbeMatches_ (this),
    Resolve_ (this),
    ResolveMatches_ (this),
    GetMetadata_ (this),
    Metadata_ (this),
    Subscribe_ (this),
    SubscribeResponse_ (this),
    Unsubscribe_ (this),
    Renew_ (this),
    RenewResponse_ (this),
    GetContextStates_ (this),
    GetContextStatesResponse_ (this),
    SetContextState_ (this),
    SetContextStateResponse_ (this),
    EpisodicContextChangedReport_ (this),
    PeriodicContextChangedReport_ (this),
    EpisodicAlertReport_ (this),
    EpisodicMetricReport_ (this),
    PeriodicAlertReport_ (this),
    PeriodicMetricReport_ (this),
    OperationInvokedReport_ (this),
    GetMDDescription_ (this),
    GetMDDescriptionResponse_ (this),
    GetMDIB_ (this),
    GetMDIBResponse_ (this),
    GetMDState_ (this),
    GetMDStateResponse_ (this),
    Activate_ (this),
    ActivateResponse_ (this),
    SetAlertState_ (this),
    SetAlertStateResponse_ (this),
    SetString_ (this),
    SetStringResponse_ (this),
    SetValue_ (this),
    SetValueResponse_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Body::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Bye
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Bye",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< ByeType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->Bye_)
          {
            ::std::unique_ptr< ByeType > r (
              dynamic_cast< ByeType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Bye_.set (::std::move (r));
            continue;
          }
        }
      }

      // Hello
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Hello",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< HelloType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->Hello_)
          {
            ::std::unique_ptr< HelloType > r (
              dynamic_cast< HelloType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Hello_.set (::std::move (r));
            continue;
          }
        }
      }

      // Probe
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Probe",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< ProbeType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->Probe_)
          {
            ::std::unique_ptr< ProbeType > r (
              dynamic_cast< ProbeType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Probe_.set (::std::move (r));
            continue;
          }
        }
      }

      // ProbeMatches
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ProbeMatches",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< ProbeMatchesType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->ProbeMatches_)
          {
            ::std::unique_ptr< ProbeMatchesType > r (
              dynamic_cast< ProbeMatchesType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ProbeMatches_.set (::std::move (r));
            continue;
          }
        }
      }

      // Resolve
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "Resolve",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< ResolveType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->Resolve_)
          {
            ::std::unique_ptr< ResolveType > r (
              dynamic_cast< ResolveType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Resolve_.set (::std::move (r));
            continue;
          }
        }
      }

      // ResolveMatches
      //
      {
        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ResolveMatches",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            &::xsd::cxx::tree::factory_impl< ResolveMatchesType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->ResolveMatches_)
          {
            ::std::unique_ptr< ResolveMatchesType > r (
              dynamic_cast< ResolveMatchesType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ResolveMatches_.set (::std::move (r));
            continue;
          }
        }
      }

      // GetMetadata
      //
      if (n.name () == "GetMetadata" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        ::std::unique_ptr< GetMetadataType > r (
          GetMetadataTraits::create (i, f, this));

        if (!this->GetMetadata_)
        {
          this->GetMetadata_.set (::std::move (r));
          continue;
        }
      }

      // Metadata
      //
      if (n.name () == "Metadata" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/09/mex")
      {
        ::std::unique_ptr< MetadataType > r (
          MetadataTraits::create (i, f, this));

        if (!this->Metadata_)
        {
          this->Metadata_.set (::std::move (r));
          continue;
        }
      }

      // Subscribe
      //
      if (n.name () == "Subscribe" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< SubscribeType > r (
          SubscribeTraits::create (i, f, this));

        if (!this->Subscribe_)
        {
          this->Subscribe_.set (::std::move (r));
          continue;
        }
      }

      // SubscribeResponse
      //
      if (n.name () == "SubscribeResponse" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< SubscribeResponseType > r (
          SubscribeResponseTraits::create (i, f, this));

        if (!this->SubscribeResponse_)
        {
          this->SubscribeResponse_.set (::std::move (r));
          continue;
        }
      }

      // Unsubscribe
      //
      if (n.name () == "Unsubscribe" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< UnsubscribeType > r (
          UnsubscribeTraits::create (i, f, this));

        if (!this->Unsubscribe_)
        {
          this->Unsubscribe_.set (::std::move (r));
          continue;
        }
      }

      // Renew
      //
      if (n.name () == "Renew" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< RenewType > r (
          RenewTraits::create (i, f, this));

        if (!this->Renew_)
        {
          this->Renew_.set (::std::move (r));
          continue;
        }
      }

      // RenewResponse
      //
      if (n.name () == "RenewResponse" && n.namespace_ () == "http://schemas.xmlsoap.org/ws/2004/08/eventing")
      {
        ::std::unique_ptr< RenewResponseType > r (
          RenewResponseTraits::create (i, f, this));

        if (!this->RenewResponse_)
        {
          this->RenewResponse_.set (::std::move (r));
          continue;
        }
      }

      // GetContextStates
      //
      if (n.name () == "GetContextStates" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< GetContextStatesType > r (
          GetContextStatesTraits::create (i, f, this));

        if (!this->GetContextStates_)
        {
          this->GetContextStates_.set (::std::move (r));
          continue;
        }
      }

      // GetContextStatesResponse
      //
      if (n.name () == "GetContextStatesResponse" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< GetContextStatesResponseType > r (
          GetContextStatesResponseTraits::create (i, f, this));

        if (!this->GetContextStatesResponse_)
        {
          this->GetContextStatesResponse_.set (::std::move (r));
          continue;
        }
      }

      // SetContextState
      //
      if (n.name () == "SetContextState" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< SetContextStateType > r (
          SetContextStateTraits::create (i, f, this));

        if (!this->SetContextState_)
        {
          this->SetContextState_.set (::std::move (r));
          continue;
        }
      }

      // SetContextStateResponse
      //
      if (n.name () == "SetContextStateResponse" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< SetContextStateResponseType > r (
          SetContextStateResponseTraits::create (i, f, this));

        if (!this->SetContextStateResponse_)
        {
          this->SetContextStateResponse_.set (::std::move (r));
          continue;
        }
      }

      // EpisodicContextChangedReport
      //
      if (n.name () == "EpisodicContextChangedReport" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< EpisodicContextChangedReportType > r (
          EpisodicContextChangedReportTraits::create (i, f, this));

        if (!this->EpisodicContextChangedReport_)
        {
          this->EpisodicContextChangedReport_.set (::std::move (r));
          continue;
        }
      }

      // PeriodicContextChangedReport
      //
      if (n.name () == "PeriodicContextChangedReport" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< PeriodicContextChangedReportType > r (
          PeriodicContextChangedReportTraits::create (i, f, this));

        if (!this->PeriodicContextChangedReport_)
        {
          this->PeriodicContextChangedReport_.set (::std::move (r));
          continue;
        }
      }

      // EpisodicAlertReport
      //
      if (n.name () == "EpisodicAlertReport" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< EpisodicAlertReportType > r (
          EpisodicAlertReportTraits::create (i, f, this));

        if (!this->EpisodicAlertReport_)
        {
          this->EpisodicAlertReport_.set (::std::move (r));
          continue;
        }
      }

      // EpisodicMetricReport
      //
      if (n.name () == "EpisodicMetricReport" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< EpisodicMetricReportType > r (
          EpisodicMetricReportTraits::create (i, f, this));

        if (!this->EpisodicMetricReport_)
        {
          this->EpisodicMetricReport_.set (::std::move (r));
          continue;
        }
      }

      // PeriodicAlertReport
      //
      if (n.name () == "PeriodicAlertReport" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< PeriodicAlertReportType > r (
          PeriodicAlertReportTraits::create (i, f, this));

        if (!this->PeriodicAlertReport_)
        {
          this->PeriodicAlertReport_.set (::std::move (r));
          continue;
        }
      }

      // PeriodicMetricReport
      //
      if (n.name () == "PeriodicMetricReport" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< PeriodicMetricReportType > r (
          PeriodicMetricReportTraits::create (i, f, this));

        if (!this->PeriodicMetricReport_)
        {
          this->PeriodicMetricReport_.set (::std::move (r));
          continue;
        }
      }

      // OperationInvokedReport
      //
      if (n.name () == "OperationInvokedReport" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< OperationInvokedReportType > r (
          OperationInvokedReportTraits::create (i, f, this));

        if (!this->OperationInvokedReport_)
        {
          this->OperationInvokedReport_.set (::std::move (r));
          continue;
        }
      }

      // GetMDDescription
      //
      if (n.name () == "GetMDDescription" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< GetMDDescriptionType > r (
          GetMDDescriptionTraits::create (i, f, this));

        if (!this->GetMDDescription_)
        {
          this->GetMDDescription_.set (::std::move (r));
          continue;
        }
      }

      // GetMDDescriptionResponse
      //
      if (n.name () == "GetMDDescriptionResponse" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< GetMDDescriptionResponseType > r (
          GetMDDescriptionResponseTraits::create (i, f, this));

        if (!this->GetMDDescriptionResponse_)
        {
          this->GetMDDescriptionResponse_.set (::std::move (r));
          continue;
        }
      }

      // GetMDIB
      //
      if (n.name () == "GetMDIB" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< GetMDIBType > r (
          GetMDIBTraits::create (i, f, this));

        if (!this->GetMDIB_)
        {
          this->GetMDIB_.set (::std::move (r));
          continue;
        }
      }

      // GetMDIBResponse
      //
      if (n.name () == "GetMDIBResponse" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< GetMDIBResponseType > r (
          GetMDIBResponseTraits::create (i, f, this));

        if (!this->GetMDIBResponse_)
        {
          this->GetMDIBResponse_.set (::std::move (r));
          continue;
        }
      }

      // GetMDState
      //
      if (n.name () == "GetMDState" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< GetMDStateType > r (
          GetMDStateTraits::create (i, f, this));

        if (!this->GetMDState_)
        {
          this->GetMDState_.set (::std::move (r));
          continue;
        }
      }

      // GetMDStateResponse
      //
      if (n.name () == "GetMDStateResponse" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< GetMDStateResponseType > r (
          GetMDStateResponseTraits::create (i, f, this));

        if (!this->GetMDStateResponse_)
        {
          this->GetMDStateResponse_.set (::std::move (r));
          continue;
        }
      }

      // Activate
      //
      if (n.name () == "Activate" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< ActivateType > r (
          ActivateTraits::create (i, f, this));

        if (!this->Activate_)
        {
          this->Activate_.set (::std::move (r));
          continue;
        }
      }

      // ActivateResponse
      //
      if (n.name () == "ActivateResponse" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< ActivateResponseType > r (
          ActivateResponseTraits::create (i, f, this));

        if (!this->ActivateResponse_)
        {
          this->ActivateResponse_.set (::std::move (r));
          continue;
        }
      }

      // SetAlertState
      //
      if (n.name () == "SetAlertState" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< SetAlertStateType > r (
          SetAlertStateTraits::create (i, f, this));

        if (!this->SetAlertState_)
        {
          this->SetAlertState_.set (::std::move (r));
          continue;
        }
      }

      // SetAlertStateResponse
      //
      if (n.name () == "SetAlertStateResponse" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< SetAlertStateResponseType > r (
          SetAlertStateResponseTraits::create (i, f, this));

        if (!this->SetAlertStateResponse_)
        {
          this->SetAlertStateResponse_.set (::std::move (r));
          continue;
        }
      }

      // SetString
      //
      if (n.name () == "SetString" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< SetStringType > r (
          SetStringTraits::create (i, f, this));

        if (!this->SetString_)
        {
          this->SetString_.set (::std::move (r));
          continue;
        }
      }

      // SetStringResponse
      //
      if (n.name () == "SetStringResponse" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< SetStringResponseType > r (
          SetStringResponseTraits::create (i, f, this));

        if (!this->SetStringResponse_)
        {
          this->SetStringResponse_.set (::std::move (r));
          continue;
        }
      }

      // SetValue
      //
      if (n.name () == "SetValue" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< SetValueType > r (
          SetValueTraits::create (i, f, this));

        if (!this->SetValue_)
        {
          this->SetValue_.set (::std::move (r));
          continue;
        }
      }

      // SetValueResponse
      //
      if (n.name () == "SetValueResponse" && n.namespace_ () == "http://message-model-uri/15/04")
      {
        ::std::unique_ptr< SetValueResponseType > r (
          SetValueResponseTraits::create (i, f, this));

        if (!this->SetValueResponse_)
        {
          this->SetValueResponse_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  Body* Body::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Body (*this, f, c);
  }

  Body& Body::
  operator= (const Body& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Bye_ = x.Bye_;
      this->Hello_ = x.Hello_;
      this->Probe_ = x.Probe_;
      this->ProbeMatches_ = x.ProbeMatches_;
      this->Resolve_ = x.Resolve_;
      this->ResolveMatches_ = x.ResolveMatches_;
      this->GetMetadata_ = x.GetMetadata_;
      this->Metadata_ = x.Metadata_;
      this->Subscribe_ = x.Subscribe_;
      this->SubscribeResponse_ = x.SubscribeResponse_;
      this->Unsubscribe_ = x.Unsubscribe_;
      this->Renew_ = x.Renew_;
      this->RenewResponse_ = x.RenewResponse_;
      this->GetContextStates_ = x.GetContextStates_;
      this->GetContextStatesResponse_ = x.GetContextStatesResponse_;
      this->SetContextState_ = x.SetContextState_;
      this->SetContextStateResponse_ = x.SetContextStateResponse_;
      this->EpisodicContextChangedReport_ = x.EpisodicContextChangedReport_;
      this->PeriodicContextChangedReport_ = x.PeriodicContextChangedReport_;
      this->EpisodicAlertReport_ = x.EpisodicAlertReport_;
      this->EpisodicMetricReport_ = x.EpisodicMetricReport_;
      this->PeriodicAlertReport_ = x.PeriodicAlertReport_;
      this->PeriodicMetricReport_ = x.PeriodicMetricReport_;
      this->OperationInvokedReport_ = x.OperationInvokedReport_;
      this->GetMDDescription_ = x.GetMDDescription_;
      this->GetMDDescriptionResponse_ = x.GetMDDescriptionResponse_;
      this->GetMDIB_ = x.GetMDIB_;
      this->GetMDIBResponse_ = x.GetMDIBResponse_;
      this->GetMDState_ = x.GetMDState_;
      this->GetMDStateResponse_ = x.GetMDStateResponse_;
      this->Activate_ = x.Activate_;
      this->ActivateResponse_ = x.ActivateResponse_;
      this->SetAlertState_ = x.SetAlertState_;
      this->SetAlertStateResponse_ = x.SetAlertStateResponse_;
      this->SetString_ = x.SetString_;
      this->SetStringResponse_ = x.SetStringResponse_;
      this->SetValue_ = x.SetValue_;
      this->SetValueResponse_ = x.SetValueResponse_;
    }

    return *this;
  }

  Body::
  ~Body ()
  {
  }

  // Envelope
  //

  Envelope::
  Envelope (const HeaderType& Header,
            const BodyType& Body)
  : ::xml_schema::Type (),
    Header_ (Header, this),
    Body_ (Body, this)
  {
  }

  Envelope::
  Envelope (::std::unique_ptr< HeaderType > Header,
            ::std::unique_ptr< BodyType > Body)
  : ::xml_schema::Type (),
    Header_ (std::move (Header), this),
    Body_ (std::move (Body), this)
  {
  }

  Envelope::
  Envelope (const Envelope& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    Header_ (x.Header_, f, this),
    Body_ (x.Body_, f, this)
  {
  }

  Envelope::
  Envelope (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    Header_ (this),
    Body_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Envelope::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Header
      //
      if (n.name () == "Header" && n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
      {
        ::std::unique_ptr< HeaderType > r (
          HeaderTraits::create (i, f, this));

        if (!Header_.present ())
        {
          this->Header_.set (::std::move (r));
          continue;
        }
      }

      // Body
      //
      if (n.name () == "Body" && n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
      {
        ::std::unique_ptr< BodyType > r (
          BodyTraits::create (i, f, this));

        if (!Body_.present ())
        {
          this->Body_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Header_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Header",
        "http://www.w3.org/2003/05/soap-envelope");
    }

    if (!Body_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Body",
        "http://www.w3.org/2003/05/soap-envelope");
    }
  }

  Envelope* Envelope::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Envelope (*this, f, c);
  }

  Envelope& Envelope::
  operator= (const Envelope& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->Header_ = x.Header_;
      this->Body_ = x.Body_;
    }

    return *this;
  }

  Envelope::
  ~Envelope ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace MESSAGEMODEL
{
  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (const ::std::string& u,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Header > (
      ::MESSAGEMODEL::Header_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (const ::std::string& u,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Header > (
      ::MESSAGEMODEL::Header_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Header > (
      ::MESSAGEMODEL::Header_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::std::istream& is,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::MESSAGEMODEL::Header_ (isrc, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::std::istream& is,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::MESSAGEMODEL::Header_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::MESSAGEMODEL::Header_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::MESSAGEMODEL::Header_ (isrc, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::MESSAGEMODEL::Header_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::MESSAGEMODEL::Header_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::xercesc::InputSource& i,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Header > (
      ::MESSAGEMODEL::Header_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::xercesc::InputSource& i,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Header > (
      ::MESSAGEMODEL::Header_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Header > (
      ::MESSAGEMODEL::Header_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (const ::xercesc::DOMDocument& doc,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::MESSAGEMODEL::Header > (
        ::MESSAGEMODEL::Header_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Header" &&
        n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
    {
      ::std::unique_ptr< ::MESSAGEMODEL::Header > r (
        ::xsd::cxx::tree::traits< ::MESSAGEMODEL::Header, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Header",
      "http://www.w3.org/2003/05/soap-envelope");
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Header >
  Header_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Header" &&
        n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
    {
      ::std::unique_ptr< ::MESSAGEMODEL::Header > r (
        ::xsd::cxx::tree::traits< ::MESSAGEMODEL::Header, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Header",
      "http://www.w3.org/2003/05/soap-envelope");
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (const ::std::string& u,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Body > (
      ::MESSAGEMODEL::Body_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (const ::std::string& u,
         ::xml_schema::ErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Body > (
      ::MESSAGEMODEL::Body_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Body > (
      ::MESSAGEMODEL::Body_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::std::istream& is,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::MESSAGEMODEL::Body_ (isrc, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::std::istream& is,
         ::xml_schema::ErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::MESSAGEMODEL::Body_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::MESSAGEMODEL::Body_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::MESSAGEMODEL::Body_ (isrc, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::ErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::MESSAGEMODEL::Body_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::MESSAGEMODEL::Body_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::xercesc::InputSource& i,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Body > (
      ::MESSAGEMODEL::Body_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::xercesc::InputSource& i,
         ::xml_schema::ErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Body > (
      ::MESSAGEMODEL::Body_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Body > (
      ::MESSAGEMODEL::Body_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (const ::xercesc::DOMDocument& doc,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::MESSAGEMODEL::Body > (
        ::MESSAGEMODEL::Body_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Body" &&
        n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
    {
      ::std::unique_ptr< ::MESSAGEMODEL::Body > r (
        ::xsd::cxx::tree::traits< ::MESSAGEMODEL::Body, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Body",
      "http://www.w3.org/2003/05/soap-envelope");
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Body >
  Body_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Body" &&
        n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
    {
      ::std::unique_ptr< ::MESSAGEMODEL::Body > r (
        ::xsd::cxx::tree::traits< ::MESSAGEMODEL::Body, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Body",
      "http://www.w3.org/2003/05/soap-envelope");
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
      ::MESSAGEMODEL::Envelope_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
      ::MESSAGEMODEL::Envelope_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
      ::MESSAGEMODEL::Envelope_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::MESSAGEMODEL::Envelope_ (isrc, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::MESSAGEMODEL::Envelope_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::MESSAGEMODEL::Envelope_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::MESSAGEMODEL::Envelope_ (isrc, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::MESSAGEMODEL::Envelope_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::MESSAGEMODEL::Envelope_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
      ::MESSAGEMODEL::Envelope_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
      ::MESSAGEMODEL::Envelope_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
      ::MESSAGEMODEL::Envelope_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::MESSAGEMODEL::Envelope > (
        ::MESSAGEMODEL::Envelope_ (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Envelope" &&
        n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
    {
      ::std::unique_ptr< ::MESSAGEMODEL::Envelope > r (
        ::xsd::cxx::tree::traits< ::MESSAGEMODEL::Envelope, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Envelope",
      "http://www.w3.org/2003/05/soap-envelope");
  }

  ::std::unique_ptr< ::MESSAGEMODEL::Envelope >
  Envelope_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Envelope" &&
        n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
    {
      ::std::unique_ptr< ::MESSAGEMODEL::Envelope > r (
        ::xsd::cxx::tree::traits< ::MESSAGEMODEL::Envelope, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Envelope",
      "http://www.w3.org/2003/05/soap-envelope");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace MESSAGEMODEL
{
  void
  Header_ (::std::ostream& o,
           const ::MESSAGEMODEL::Header& s,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Header_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Header_ (::std::ostream& o,
           const ::MESSAGEMODEL::Header& s,
           ::xml_schema::ErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Header_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Header_ (::std::ostream& o,
           const ::MESSAGEMODEL::Header& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Header_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Header_ (::xercesc::XMLFormatTarget& t,
           const ::MESSAGEMODEL::Header& s,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Header_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Header_ (::xercesc::XMLFormatTarget& t,
           const ::MESSAGEMODEL::Header& s,
           ::xml_schema::ErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Header_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Header_ (::xercesc::XMLFormatTarget& t,
           const ::MESSAGEMODEL::Header& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Header_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Header_ (::xercesc::DOMDocument& d,
           const ::MESSAGEMODEL::Header& s,
           ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Header" &&
        n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Header",
        "http://www.w3.org/2003/05/soap-envelope");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Header_ (const ::MESSAGEMODEL::Header& s,
           const ::xml_schema::NamespaceInfomap& m,
           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "Header",
        "http://www.w3.org/2003/05/soap-envelope",
        m, f));

    ::MESSAGEMODEL::Header_ (*d, s, f);
    return d;
  }

  void
  Body_ (::std::ostream& o,
         const ::MESSAGEMODEL::Body& s,
         const ::xml_schema::NamespaceInfomap& m,
         const ::std::string& e,
         ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Body_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Body_ (::std::ostream& o,
         const ::MESSAGEMODEL::Body& s,
         ::xml_schema::ErrorHandler& h,
         const ::xml_schema::NamespaceInfomap& m,
         const ::std::string& e,
         ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Body_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Body_ (::std::ostream& o,
         const ::MESSAGEMODEL::Body& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::NamespaceInfomap& m,
         const ::std::string& e,
         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Body_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Body_ (::xercesc::XMLFormatTarget& t,
         const ::MESSAGEMODEL::Body& s,
         const ::xml_schema::NamespaceInfomap& m,
         const ::std::string& e,
         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Body_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Body_ (::xercesc::XMLFormatTarget& t,
         const ::MESSAGEMODEL::Body& s,
         ::xml_schema::ErrorHandler& h,
         const ::xml_schema::NamespaceInfomap& m,
         const ::std::string& e,
         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Body_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Body_ (::xercesc::XMLFormatTarget& t,
         const ::MESSAGEMODEL::Body& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::NamespaceInfomap& m,
         const ::std::string& e,
         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Body_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Body_ (::xercesc::DOMDocument& d,
         const ::MESSAGEMODEL::Body& s,
         ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Body" &&
        n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Body",
        "http://www.w3.org/2003/05/soap-envelope");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Body_ (const ::MESSAGEMODEL::Body& s,
         const ::xml_schema::NamespaceInfomap& m,
         ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "Body",
        "http://www.w3.org/2003/05/soap-envelope",
        m, f));

    ::MESSAGEMODEL::Body_ (*d, s, f);
    return d;
  }

  void
  Envelope_ (::std::ostream& o,
             const ::MESSAGEMODEL::Envelope& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Envelope_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Envelope_ (::std::ostream& o,
             const ::MESSAGEMODEL::Envelope& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Envelope_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Envelope_ (::std::ostream& o,
             const ::MESSAGEMODEL::Envelope& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Envelope_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Envelope_ (::xercesc::XMLFormatTarget& t,
             const ::MESSAGEMODEL::Envelope& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Envelope_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Envelope_ (::xercesc::XMLFormatTarget& t,
             const ::MESSAGEMODEL::Envelope& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Envelope_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Envelope_ (::xercesc::XMLFormatTarget& t,
             const ::MESSAGEMODEL::Envelope& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::MESSAGEMODEL::Envelope_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Envelope_ (::xercesc::DOMDocument& d,
             const ::MESSAGEMODEL::Envelope& s,
             ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Envelope" &&
        n.namespace_ () == "http://www.w3.org/2003/05/soap-envelope")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Envelope",
        "http://www.w3.org/2003/05/soap-envelope");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Envelope_ (const ::MESSAGEMODEL::Envelope& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "Envelope",
        "http://www.w3.org/2003/05/soap-envelope",
        m, f));

    ::MESSAGEMODEL::Envelope_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const Header& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Action
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.Action ())
      {
        const Header::ActionType& x (*i.Action ());
        if (typeid (Header::ActionType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Action",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Action",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // AppSequence
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.AppSequence ())
      {
        const Header::AppSequenceType& x (*i.AppSequence ());
        if (typeid (Header::AppSequenceType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AppSequence",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "AppSequence",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // FaultTo
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.FaultTo ())
      {
        const Header::FaultToType& x (*i.FaultTo ());
        if (typeid (Header::FaultToType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FaultTo",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "FaultTo",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // From
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.From ())
      {
        const Header::FromType& x (*i.From ());
        if (typeid (Header::FromType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "From",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "From",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // MessageID
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.MessageID ())
      {
        const Header::MessageIDType& x (*i.MessageID ());
        if (typeid (Header::MessageIDType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MessageID",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "MessageID",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // ReferenceParameters
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.ReferenceParameters ())
      {
        const Header::ReferenceParametersType& x (*i.ReferenceParameters ());
        if (typeid (Header::ReferenceParametersType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReferenceParameters",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "ReferenceParameters",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // RelatesTo
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.RelatesTo ())
      {
        const Header::RelatesToType& x (*i.RelatesTo ());
        if (typeid (Header::RelatesToType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RelatesTo",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "RelatesTo",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // ReplyTo
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.ReplyTo ())
      {
        const Header::ReplyToType& x (*i.ReplyTo ());
        if (typeid (Header::ReplyToType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReplyTo",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "ReplyTo",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // To
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.To ())
      {
        const Header::ToType& x (*i.To ());
        if (typeid (Header::ToType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "To",
              "http://www.w3.org/2005/08/addressing",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "To",
            "http://www.w3.org/2005/08/addressing",
            true, true, e, x);
      }
    }

    // Identifier
    //
    if (i.Identifier ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Identifier",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.Identifier ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Body& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Bye
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.Bye ())
      {
        const Body::ByeType& x (*i.Bye ());
        if (typeid (Body::ByeType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Bye",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Bye",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // Hello
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.Hello ())
      {
        const Body::HelloType& x (*i.Hello ());
        if (typeid (Body::HelloType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Hello",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Hello",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // Probe
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.Probe ())
      {
        const Body::ProbeType& x (*i.Probe ());
        if (typeid (Body::ProbeType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Probe",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Probe",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // ProbeMatches
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.ProbeMatches ())
      {
        const Body::ProbeMatchesType& x (*i.ProbeMatches ());
        if (typeid (Body::ProbeMatchesType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProbeMatches",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "ProbeMatches",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // Resolve
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.Resolve ())
      {
        const Body::ResolveType& x (*i.Resolve ());
        if (typeid (Body::ResolveType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Resolve",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Resolve",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // ResolveMatches
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.ResolveMatches ())
      {
        const Body::ResolveMatchesType& x (*i.ResolveMatches ());
        if (typeid (Body::ResolveMatchesType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ResolveMatches",
              "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "ResolveMatches",
            "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01",
            true, true, e, x);
      }
    }

    // GetMetadata
    //
    if (i.GetMetadata ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMetadata",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          e));

      s << *i.GetMetadata ();
    }

    // Metadata
    //
    if (i.Metadata ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Metadata",
          "http://schemas.xmlsoap.org/ws/2004/09/mex",
          e));

      s << *i.Metadata ();
    }

    // Subscribe
    //
    if (i.Subscribe ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Subscribe",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.Subscribe ();
    }

    // SubscribeResponse
    //
    if (i.SubscribeResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SubscribeResponse",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.SubscribeResponse ();
    }

    // Unsubscribe
    //
    if (i.Unsubscribe ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Unsubscribe",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.Unsubscribe ();
    }

    // Renew
    //
    if (i.Renew ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Renew",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.Renew ();
    }

    // RenewResponse
    //
    if (i.RenewResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "RenewResponse",
          "http://schemas.xmlsoap.org/ws/2004/08/eventing",
          e));

      s << *i.RenewResponse ();
    }

    // GetContextStates
    //
    if (i.GetContextStates ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetContextStates",
          "http://message-model-uri/15/04",
          e));

      s << *i.GetContextStates ();
    }

    // GetContextStatesResponse
    //
    if (i.GetContextStatesResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetContextStatesResponse",
          "http://message-model-uri/15/04",
          e));

      s << *i.GetContextStatesResponse ();
    }

    // SetContextState
    //
    if (i.SetContextState ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetContextState",
          "http://message-model-uri/15/04",
          e));

      s << *i.SetContextState ();
    }

    // SetContextStateResponse
    //
    if (i.SetContextStateResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetContextStateResponse",
          "http://message-model-uri/15/04",
          e));

      s << *i.SetContextStateResponse ();
    }

    // EpisodicContextChangedReport
    //
    if (i.EpisodicContextChangedReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EpisodicContextChangedReport",
          "http://message-model-uri/15/04",
          e));

      s << *i.EpisodicContextChangedReport ();
    }

    // PeriodicContextChangedReport
    //
    if (i.PeriodicContextChangedReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PeriodicContextChangedReport",
          "http://message-model-uri/15/04",
          e));

      s << *i.PeriodicContextChangedReport ();
    }

    // EpisodicAlertReport
    //
    if (i.EpisodicAlertReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EpisodicAlertReport",
          "http://message-model-uri/15/04",
          e));

      s << *i.EpisodicAlertReport ();
    }

    // EpisodicMetricReport
    //
    if (i.EpisodicMetricReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EpisodicMetricReport",
          "http://message-model-uri/15/04",
          e));

      s << *i.EpisodicMetricReport ();
    }

    // PeriodicAlertReport
    //
    if (i.PeriodicAlertReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PeriodicAlertReport",
          "http://message-model-uri/15/04",
          e));

      s << *i.PeriodicAlertReport ();
    }

    // PeriodicMetricReport
    //
    if (i.PeriodicMetricReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PeriodicMetricReport",
          "http://message-model-uri/15/04",
          e));

      s << *i.PeriodicMetricReport ();
    }

    // OperationInvokedReport
    //
    if (i.OperationInvokedReport ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OperationInvokedReport",
          "http://message-model-uri/15/04",
          e));

      s << *i.OperationInvokedReport ();
    }

    // GetMDDescription
    //
    if (i.GetMDDescription ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMDDescription",
          "http://message-model-uri/15/04",
          e));

      s << *i.GetMDDescription ();
    }

    // GetMDDescriptionResponse
    //
    if (i.GetMDDescriptionResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMDDescriptionResponse",
          "http://message-model-uri/15/04",
          e));

      s << *i.GetMDDescriptionResponse ();
    }

    // GetMDIB
    //
    if (i.GetMDIB ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMDIB",
          "http://message-model-uri/15/04",
          e));

      s << *i.GetMDIB ();
    }

    // GetMDIBResponse
    //
    if (i.GetMDIBResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMDIBResponse",
          "http://message-model-uri/15/04",
          e));

      s << *i.GetMDIBResponse ();
    }

    // GetMDState
    //
    if (i.GetMDState ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMDState",
          "http://message-model-uri/15/04",
          e));

      s << *i.GetMDState ();
    }

    // GetMDStateResponse
    //
    if (i.GetMDStateResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GetMDStateResponse",
          "http://message-model-uri/15/04",
          e));

      s << *i.GetMDStateResponse ();
    }

    // Activate
    //
    if (i.Activate ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Activate",
          "http://message-model-uri/15/04",
          e));

      s << *i.Activate ();
    }

    // ActivateResponse
    //
    if (i.ActivateResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ActivateResponse",
          "http://message-model-uri/15/04",
          e));

      s << *i.ActivateResponse ();
    }

    // SetAlertState
    //
    if (i.SetAlertState ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetAlertState",
          "http://message-model-uri/15/04",
          e));

      s << *i.SetAlertState ();
    }

    // SetAlertStateResponse
    //
    if (i.SetAlertStateResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetAlertStateResponse",
          "http://message-model-uri/15/04",
          e));

      s << *i.SetAlertStateResponse ();
    }

    // SetString
    //
    if (i.SetString ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetString",
          "http://message-model-uri/15/04",
          e));

      s << *i.SetString ();
    }

    // SetStringResponse
    //
    if (i.SetStringResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetStringResponse",
          "http://message-model-uri/15/04",
          e));

      s << *i.SetStringResponse ();
    }

    // SetValue
    //
    if (i.SetValue ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetValue",
          "http://message-model-uri/15/04",
          e));

      s << *i.SetValue ();
    }

    // SetValueResponse
    //
    if (i.SetValueResponse ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SetValueResponse",
          "http://message-model-uri/15/04",
          e));

      s << *i.SetValueResponse ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Envelope& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // Header
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Header",
          "http://www.w3.org/2003/05/soap-envelope",
          e));

      s << i.Header ();
    }

    // Body
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Body",
          "http://www.w3.org/2003/05/soap-envelope",
          e));

      s << i.Body ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

