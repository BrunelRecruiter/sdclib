// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "wsdl-soap-binding.hxx"

namespace WS
{
  namespace WSDL
  {
    namespace SOAP_BINDING
    {
      // BindingType
      // 

      const BindingType::TransportOptional& BindingType::
      transport () const
      {
        return this->transport_;
      }

      BindingType::TransportOptional& BindingType::
      transport ()
      {
        return this->transport_;
      }

      void BindingType::
      transport (const TransportType& x)
      {
        this->transport_.set (x);
      }

      void BindingType::
      transport (const TransportOptional& x)
      {
        this->transport_ = x;
      }

      void BindingType::
      transport (::std::unique_ptr< TransportType > x)
      {
        this->transport_.set (std::move (x));
      }

      const BindingType::StyleOptional& BindingType::
      style () const
      {
        return this->style_;
      }

      BindingType::StyleOptional& BindingType::
      style ()
      {
        return this->style_;
      }

      void BindingType::
      style (const StyleType& x)
      {
        this->style_.set (x);
      }

      void BindingType::
      style (const StyleOptional& x)
      {
        this->style_ = x;
      }

      void BindingType::
      style (::std::unique_ptr< StyleType > x)
      {
        this->style_.set (std::move (x));
      }


      // StyleChoice
      // 

      StyleChoice::
      StyleChoice (Value v)
      : ::xml_schema::String (_xsd_StyleChoice_literals_[v])
      {
      }

      StyleChoice::
      StyleChoice (const char* v)
      : ::xml_schema::String (v)
      {
      }

      StyleChoice::
      StyleChoice (const ::std::string& v)
      : ::xml_schema::String (v)
      {
      }

      StyleChoice::
      StyleChoice (const ::xml_schema::String& v)
      : ::xml_schema::String (v)
      {
      }

      StyleChoice::
      StyleChoice (const StyleChoice& v,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
      : ::xml_schema::String (v, f, c)
      {
      }

      StyleChoice& StyleChoice::
      operator= (Value v)
      {
        static_cast< ::xml_schema::String& > (*this) = 
        ::xml_schema::String (_xsd_StyleChoice_literals_[v]);

        return *this;
      }


      // OperationType
      // 

      const OperationType::SoapActionOptional& OperationType::
      soapAction () const
      {
        return this->soapAction_;
      }

      OperationType::SoapActionOptional& OperationType::
      soapAction ()
      {
        return this->soapAction_;
      }

      void OperationType::
      soapAction (const SoapActionType& x)
      {
        this->soapAction_.set (x);
      }

      void OperationType::
      soapAction (const SoapActionOptional& x)
      {
        this->soapAction_ = x;
      }

      void OperationType::
      soapAction (::std::unique_ptr< SoapActionType > x)
      {
        this->soapAction_.set (std::move (x));
      }

      const OperationType::StyleOptional& OperationType::
      style () const
      {
        return this->style_;
      }

      OperationType::StyleOptional& OperationType::
      style ()
      {
        return this->style_;
      }

      void OperationType::
      style (const StyleType& x)
      {
        this->style_.set (x);
      }

      void OperationType::
      style (const StyleOptional& x)
      {
        this->style_ = x;
      }

      void OperationType::
      style (::std::unique_ptr< StyleType > x)
      {
        this->style_.set (std::move (x));
      }


      // BodyType
      // 

      const BodyType::EncodingStyleOptional& BodyType::
      encodingStyle () const
      {
        return this->encodingStyle_;
      }

      BodyType::EncodingStyleOptional& BodyType::
      encodingStyle ()
      {
        return this->encodingStyle_;
      }

      void BodyType::
      encodingStyle (const EncodingStyleType& x)
      {
        this->encodingStyle_.set (x);
      }

      void BodyType::
      encodingStyle (const EncodingStyleOptional& x)
      {
        this->encodingStyle_ = x;
      }

      void BodyType::
      encodingStyle (::std::unique_ptr< EncodingStyleType > x)
      {
        this->encodingStyle_.set (std::move (x));
      }

      const BodyType::PartsOptional& BodyType::
      parts () const
      {
        return this->parts_;
      }

      BodyType::PartsOptional& BodyType::
      parts ()
      {
        return this->parts_;
      }

      void BodyType::
      parts (const PartsType& x)
      {
        this->parts_.set (x);
      }

      void BodyType::
      parts (const PartsOptional& x)
      {
        this->parts_ = x;
      }

      void BodyType::
      parts (::std::unique_ptr< PartsType > x)
      {
        this->parts_.set (std::move (x));
      }

      const BodyType::UseOptional& BodyType::
      use () const
      {
        return this->use_;
      }

      BodyType::UseOptional& BodyType::
      use ()
      {
        return this->use_;
      }

      void BodyType::
      use (const UseType& x)
      {
        this->use_.set (x);
      }

      void BodyType::
      use (const UseOptional& x)
      {
        this->use_ = x;
      }

      void BodyType::
      use (::std::unique_ptr< UseType > x)
      {
        this->use_.set (std::move (x));
      }

      const BodyType::NamespaceOptional& BodyType::
      namespace_ () const
      {
        return this->namespace__;
      }

      BodyType::NamespaceOptional& BodyType::
      namespace_ ()
      {
        return this->namespace__;
      }

      void BodyType::
      namespace_ (const NamespaceType& x)
      {
        this->namespace__.set (x);
      }

      void BodyType::
      namespace_ (const NamespaceOptional& x)
      {
        this->namespace__ = x;
      }

      void BodyType::
      namespace_ (::std::unique_ptr< NamespaceType > x)
      {
        this->namespace__.set (std::move (x));
      }


      // UseChoice
      // 

      UseChoice::
      UseChoice (Value v)
      : ::xml_schema::String (_xsd_UseChoice_literals_[v])
      {
      }

      UseChoice::
      UseChoice (const char* v)
      : ::xml_schema::String (v)
      {
      }

      UseChoice::
      UseChoice (const ::std::string& v)
      : ::xml_schema::String (v)
      {
      }

      UseChoice::
      UseChoice (const ::xml_schema::String& v)
      : ::xml_schema::String (v)
      {
      }

      UseChoice::
      UseChoice (const UseChoice& v,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
      : ::xml_schema::String (v, f, c)
      {
      }

      UseChoice& UseChoice::
      operator= (Value v)
      {
        static_cast< ::xml_schema::String& > (*this) = 
        ::xml_schema::String (_xsd_UseChoice_literals_[v]);

        return *this;
      }


      // FaultType
      // 


      // HeaderType
      // 

      const HeaderType::HeaderfaultType& HeaderType::
      headerfault () const
      {
        return this->headerfault_.get ();
      }

      HeaderType::HeaderfaultType& HeaderType::
      headerfault ()
      {
        return this->headerfault_.get ();
      }

      void HeaderType::
      headerfault (const HeaderfaultType& x)
      {
        this->headerfault_.set (x);
      }

      void HeaderType::
      headerfault (::std::unique_ptr< HeaderfaultType > x)
      {
        this->headerfault_.set (std::move (x));
      }

      const HeaderType::MessageType& HeaderType::
      message () const
      {
        return this->message_.get ();
      }

      HeaderType::MessageType& HeaderType::
      message ()
      {
        return this->message_.get ();
      }

      void HeaderType::
      message (const MessageType& x)
      {
        this->message_.set (x);
      }

      void HeaderType::
      message (::std::unique_ptr< MessageType > x)
      {
        this->message_.set (std::move (x));
      }

      const HeaderType::PartsType& HeaderType::
      parts () const
      {
        return this->parts_.get ();
      }

      HeaderType::PartsType& HeaderType::
      parts ()
      {
        return this->parts_.get ();
      }

      void HeaderType::
      parts (const PartsType& x)
      {
        this->parts_.set (x);
      }

      void HeaderType::
      parts (::std::unique_ptr< PartsType > x)
      {
        this->parts_.set (std::move (x));
      }

      const HeaderType::UseType& HeaderType::
      use () const
      {
        return this->use_.get ();
      }

      HeaderType::UseType& HeaderType::
      use ()
      {
        return this->use_.get ();
      }

      void HeaderType::
      use (const UseType& x)
      {
        this->use_.set (x);
      }

      void HeaderType::
      use (::std::unique_ptr< UseType > x)
      {
        this->use_.set (std::move (x));
      }

      const HeaderType::EncodingStyleOptional& HeaderType::
      encodingStyle () const
      {
        return this->encodingStyle_;
      }

      HeaderType::EncodingStyleOptional& HeaderType::
      encodingStyle ()
      {
        return this->encodingStyle_;
      }

      void HeaderType::
      encodingStyle (const EncodingStyleType& x)
      {
        this->encodingStyle_.set (x);
      }

      void HeaderType::
      encodingStyle (const EncodingStyleOptional& x)
      {
        this->encodingStyle_ = x;
      }

      void HeaderType::
      encodingStyle (::std::unique_ptr< EncodingStyleType > x)
      {
        this->encodingStyle_.set (std::move (x));
      }

      const HeaderType::NamespaceOptional& HeaderType::
      namespace_ () const
      {
        return this->namespace__;
      }

      HeaderType::NamespaceOptional& HeaderType::
      namespace_ ()
      {
        return this->namespace__;
      }

      void HeaderType::
      namespace_ (const NamespaceType& x)
      {
        this->namespace__.set (x);
      }

      void HeaderType::
      namespace_ (const NamespaceOptional& x)
      {
        this->namespace__ = x;
      }

      void HeaderType::
      namespace_ (::std::unique_ptr< NamespaceType > x)
      {
        this->namespace__.set (std::move (x));
      }


      // HeaderfaultType
      // 

      const HeaderfaultType::MessageType& HeaderfaultType::
      message () const
      {
        return this->message_.get ();
      }

      HeaderfaultType::MessageType& HeaderfaultType::
      message ()
      {
        return this->message_.get ();
      }

      void HeaderfaultType::
      message (const MessageType& x)
      {
        this->message_.set (x);
      }

      void HeaderfaultType::
      message (::std::unique_ptr< MessageType > x)
      {
        this->message_.set (std::move (x));
      }

      const HeaderfaultType::PartsType& HeaderfaultType::
      parts () const
      {
        return this->parts_.get ();
      }

      HeaderfaultType::PartsType& HeaderfaultType::
      parts ()
      {
        return this->parts_.get ();
      }

      void HeaderfaultType::
      parts (const PartsType& x)
      {
        this->parts_.set (x);
      }

      void HeaderfaultType::
      parts (::std::unique_ptr< PartsType > x)
      {
        this->parts_.set (std::move (x));
      }

      const HeaderfaultType::UseType& HeaderfaultType::
      use () const
      {
        return this->use_.get ();
      }

      HeaderfaultType::UseType& HeaderfaultType::
      use ()
      {
        return this->use_.get ();
      }

      void HeaderfaultType::
      use (const UseType& x)
      {
        this->use_.set (x);
      }

      void HeaderfaultType::
      use (::std::unique_ptr< UseType > x)
      {
        this->use_.set (std::move (x));
      }

      const HeaderfaultType::EncodingStyleOptional& HeaderfaultType::
      encodingStyle () const
      {
        return this->encodingStyle_;
      }

      HeaderfaultType::EncodingStyleOptional& HeaderfaultType::
      encodingStyle ()
      {
        return this->encodingStyle_;
      }

      void HeaderfaultType::
      encodingStyle (const EncodingStyleType& x)
      {
        this->encodingStyle_.set (x);
      }

      void HeaderfaultType::
      encodingStyle (const EncodingStyleOptional& x)
      {
        this->encodingStyle_ = x;
      }

      void HeaderfaultType::
      encodingStyle (::std::unique_ptr< EncodingStyleType > x)
      {
        this->encodingStyle_.set (std::move (x));
      }

      const HeaderfaultType::NamespaceOptional& HeaderfaultType::
      namespace_ () const
      {
        return this->namespace__;
      }

      HeaderfaultType::NamespaceOptional& HeaderfaultType::
      namespace_ ()
      {
        return this->namespace__;
      }

      void HeaderfaultType::
      namespace_ (const NamespaceType& x)
      {
        this->namespace__.set (x);
      }

      void HeaderfaultType::
      namespace_ (const NamespaceOptional& x)
      {
        this->namespace__ = x;
      }

      void HeaderfaultType::
      namespace_ (::std::unique_ptr< NamespaceType > x)
      {
        this->namespace__.set (std::move (x));
      }


      // AddressType
      // 

      const AddressType::LocationType& AddressType::
      location () const
      {
        return this->location_.get ();
      }

      AddressType::LocationType& AddressType::
      location ()
      {
        return this->location_.get ();
      }

      void AddressType::
      location (const LocationType& x)
      {
        this->location_.set (x);
      }

      void AddressType::
      location (::std::unique_ptr< LocationType > x)
      {
        this->location_.set (std::move (x));
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace WS
{
  namespace WSDL
  {
    namespace SOAP_BINDING
    {
      // BindingType
      //

      BindingType::
      BindingType ()
      : ::xml_schema::Type (),
        transport_ (this),
        style_ (this)
      {
      }

      BindingType::
      BindingType (const BindingType& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        transport_ (x.transport_, f, this),
        style_ (x.style_, f, this)
      {
      }

      BindingType::
      BindingType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        transport_ (this),
        style_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
          this->parse (p, f);
        }
      }

      void BindingType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "transport" && n.namespace_ ().empty ())
          {
            this->transport_.set (TransportTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "style" && n.namespace_ ().empty ())
          {
            this->style_.set (StyleTraits::create (i, f, this));
            continue;
          }
        }
      }

      BindingType* BindingType::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class BindingType (*this, f, c);
      }

      BindingType& BindingType::
      operator= (const BindingType& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->transport_ = x.transport_;
          this->style_ = x.style_;
        }

        return *this;
      }

      BindingType::
      ~BindingType ()
      {
      }

      static
      const ::xsd::cxx::tree::type_factory_initializer< 0, char, BindingType >
      _xsd_BindingType_type_factory_init (
        "bindingType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");

      // StyleChoice
      //

      StyleChoice::
      StyleChoice (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
      : ::xml_schema::String (e, f, c)
      {
        _xsd_StyleChoice_convert ();
      }

      StyleChoice::
      StyleChoice (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
      : ::xml_schema::String (a, f, c)
      {
        _xsd_StyleChoice_convert ();
      }

      StyleChoice::
      StyleChoice (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
      : ::xml_schema::String (s, e, f, c)
      {
        _xsd_StyleChoice_convert ();
      }

      StyleChoice* StyleChoice::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class StyleChoice (*this, f, c);
      }

      StyleChoice::Value StyleChoice::
      _xsd_StyleChoice_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_StyleChoice_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_StyleChoice_indexes_,
                          _xsd_StyleChoice_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_StyleChoice_indexes_ + 2 || _xsd_StyleChoice_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const StyleChoice::
      _xsd_StyleChoice_literals_[2] =
      {
        "rpc",
        "document"
      };

      const StyleChoice::Value StyleChoice::
      _xsd_StyleChoice_indexes_[2] =
      {
        ::WS::WSDL::SOAP_BINDING::StyleChoice::document,
        ::WS::WSDL::SOAP_BINDING::StyleChoice::rpc
      };

      static
      const ::xsd::cxx::tree::type_factory_initializer< 0, char, StyleChoice >
      _xsd_StyleChoice_type_factory_init (
        "styleChoice",
        "http://schemas.xmlsoap.org/wsdl/soap12/");

      // OperationType
      //

      OperationType::
      OperationType ()
      : ::xml_schema::Type (),
        soapAction_ (this),
        style_ (this)
      {
      }

      OperationType::
      OperationType (const OperationType& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        soapAction_ (x.soapAction_, f, this),
        style_ (x.style_, f, this)
      {
      }

      OperationType::
      OperationType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        soapAction_ (this),
        style_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
          this->parse (p, f);
        }
      }

      void OperationType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "soapAction" && n.namespace_ ().empty ())
          {
            this->soapAction_.set (SoapActionTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "style" && n.namespace_ ().empty ())
          {
            this->style_.set (StyleTraits::create (i, f, this));
            continue;
          }
        }
      }

      OperationType* OperationType::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class OperationType (*this, f, c);
      }

      OperationType& OperationType::
      operator= (const OperationType& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->soapAction_ = x.soapAction_;
          this->style_ = x.style_;
        }

        return *this;
      }

      OperationType::
      ~OperationType ()
      {
      }

      static
      const ::xsd::cxx::tree::type_factory_initializer< 0, char, OperationType >
      _xsd_OperationType_type_factory_init (
        "operationType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");

      // BodyType
      //

      BodyType::
      BodyType ()
      : ::xml_schema::Type (),
        encodingStyle_ (this),
        parts_ (this),
        use_ (this),
        namespace__ (this)
      {
      }

      BodyType::
      BodyType (const BodyType& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        encodingStyle_ (x.encodingStyle_, f, this),
        parts_ (x.parts_, f, this),
        use_ (x.use_, f, this),
        namespace__ (x.namespace__, f, this)
      {
      }

      BodyType::
      BodyType (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        encodingStyle_ (this),
        parts_ (this),
        use_ (this),
        namespace__ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
          this->parse (p, f);
        }
      }

      void BodyType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "encodingStyle" && n.namespace_ ().empty ())
          {
            this->encodingStyle_.set (EncodingStyleTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "parts" && n.namespace_ ().empty ())
          {
            this->parts_.set (PartsTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "use" && n.namespace_ ().empty ())
          {
            this->use_.set (UseTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "namespace" && n.namespace_ ().empty ())
          {
            this->namespace__.set (NamespaceTraits::create (i, f, this));
            continue;
          }
        }
      }

      BodyType* BodyType::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class BodyType (*this, f, c);
      }

      BodyType& BodyType::
      operator= (const BodyType& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->encodingStyle_ = x.encodingStyle_;
          this->parts_ = x.parts_;
          this->use_ = x.use_;
          this->namespace__ = x.namespace__;
        }

        return *this;
      }

      BodyType::
      ~BodyType ()
      {
      }

      static
      const ::xsd::cxx::tree::type_factory_initializer< 0, char, BodyType >
      _xsd_BodyType_type_factory_init (
        "bodyType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");

      // UseChoice
      //

      UseChoice::
      UseChoice (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
      : ::xml_schema::String (e, f, c)
      {
        _xsd_UseChoice_convert ();
      }

      UseChoice::
      UseChoice (const ::xercesc::DOMAttr& a,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
      : ::xml_schema::String (a, f, c)
      {
        _xsd_UseChoice_convert ();
      }

      UseChoice::
      UseChoice (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
      : ::xml_schema::String (s, e, f, c)
      {
        _xsd_UseChoice_convert ();
      }

      UseChoice* UseChoice::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class UseChoice (*this, f, c);
      }

      UseChoice::Value UseChoice::
      _xsd_UseChoice_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_UseChoice_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_UseChoice_indexes_,
                          _xsd_UseChoice_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_UseChoice_indexes_ + 2 || _xsd_UseChoice_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const UseChoice::
      _xsd_UseChoice_literals_[2] =
      {
        "literal",
        "encoded"
      };

      const UseChoice::Value UseChoice::
      _xsd_UseChoice_indexes_[2] =
      {
        ::WS::WSDL::SOAP_BINDING::UseChoice::encoded,
        ::WS::WSDL::SOAP_BINDING::UseChoice::literal
      };

      static
      const ::xsd::cxx::tree::type_factory_initializer< 0, char, UseChoice >
      _xsd_UseChoice_type_factory_init (
        "useChoice",
        "http://schemas.xmlsoap.org/wsdl/soap12/");

      // FaultType
      //

      FaultType::
      FaultType ()
      : ::WS::WSDL::SOAP_BINDING::BodyType ()
      {
      }

      FaultType::
      FaultType (const FaultType& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
      : ::WS::WSDL::SOAP_BINDING::BodyType (x, f, c)
      {
      }

      FaultType::
      FaultType (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
      : ::WS::WSDL::SOAP_BINDING::BodyType (e, f, c)
      {
      }

      FaultType* FaultType::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class FaultType (*this, f, c);
      }

      FaultType::
      ~FaultType ()
      {
      }

      static
      const ::xsd::cxx::tree::type_factory_initializer< 0, char, FaultType >
      _xsd_FaultType_type_factory_init (
        "faultType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");

      // HeaderType
      //

      HeaderType::
      HeaderType (const HeaderfaultType& headerfault,
                  const MessageType& message,
                  const PartsType& parts,
                  const UseType& use)
      : ::xml_schema::Type (),
        headerfault_ (headerfault, this),
        message_ (message, this),
        parts_ (parts, this),
        use_ (use, this),
        encodingStyle_ (this),
        namespace__ (this)
      {
      }

      HeaderType::
      HeaderType (::std::unique_ptr< HeaderfaultType > headerfault,
                  const MessageType& message,
                  const PartsType& parts,
                  const UseType& use)
      : ::xml_schema::Type (),
        headerfault_ (std::move (headerfault), this),
        message_ (message, this),
        parts_ (parts, this),
        use_ (use, this),
        encodingStyle_ (this),
        namespace__ (this)
      {
      }

      HeaderType::
      HeaderType (const HeaderType& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        headerfault_ (x.headerfault_, f, this),
        message_ (x.message_, f, this),
        parts_ (x.parts_, f, this),
        use_ (x.use_, f, this),
        encodingStyle_ (x.encodingStyle_, f, this),
        namespace__ (x.namespace__, f, this)
      {
      }

      HeaderType::
      HeaderType (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        headerfault_ (this),
        message_ (this),
        parts_ (this),
        use_ (this),
        encodingStyle_ (this),
        namespace__ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void HeaderType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // headerfault
          //
          {
            ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
              ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                "headerfault",
                "http://schemas.xmlsoap.org/wsdl/soap12/",
                &::xsd::cxx::tree::factory_impl< HeaderfaultType >,
                true, true, i, n, f, this));

            if (tmp.get () != 0)
            {
              if (!headerfault_.present ())
              {
                ::std::unique_ptr< HeaderfaultType > r (
                  dynamic_cast< HeaderfaultType* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->headerfault_.set (::std::move (r));
                continue;
              }
            }
          }

          break;
        }

        if (!headerfault_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "headerfault",
            "http://schemas.xmlsoap.org/wsdl/soap12/");
        }

        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "message" && n.namespace_ ().empty ())
          {
            this->message_.set (MessageTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "parts" && n.namespace_ ().empty ())
          {
            this->parts_.set (PartsTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "use" && n.namespace_ ().empty ())
          {
            this->use_.set (UseTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "encodingStyle" && n.namespace_ ().empty ())
          {
            this->encodingStyle_.set (EncodingStyleTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "namespace" && n.namespace_ ().empty ())
          {
            this->namespace__.set (NamespaceTraits::create (i, f, this));
            continue;
          }
        }

        if (!message_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "message",
            "");
        }

        if (!parts_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "parts",
            "");
        }

        if (!use_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "use",
            "");
        }
      }

      HeaderType* HeaderType::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class HeaderType (*this, f, c);
      }

      HeaderType& HeaderType::
      operator= (const HeaderType& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->headerfault_ = x.headerfault_;
          this->message_ = x.message_;
          this->parts_ = x.parts_;
          this->use_ = x.use_;
          this->encodingStyle_ = x.encodingStyle_;
          this->namespace__ = x.namespace__;
        }

        return *this;
      }

      HeaderType::
      ~HeaderType ()
      {
      }

      static
      const ::xsd::cxx::tree::type_factory_initializer< 0, char, HeaderType >
      _xsd_HeaderType_type_factory_init (
        "headerType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");

      // HeaderfaultType
      //

      HeaderfaultType::
      HeaderfaultType (const MessageType& message,
                       const PartsType& parts,
                       const UseType& use)
      : ::xml_schema::Type (),
        message_ (message, this),
        parts_ (parts, this),
        use_ (use, this),
        encodingStyle_ (this),
        namespace__ (this)
      {
      }

      HeaderfaultType::
      HeaderfaultType (const HeaderfaultType& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        message_ (x.message_, f, this),
        parts_ (x.parts_, f, this),
        use_ (x.use_, f, this),
        encodingStyle_ (x.encodingStyle_, f, this),
        namespace__ (x.namespace__, f, this)
      {
      }

      HeaderfaultType::
      HeaderfaultType (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        message_ (this),
        parts_ (this),
        use_ (this),
        encodingStyle_ (this),
        namespace__ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
          this->parse (p, f);
        }
      }

      void HeaderfaultType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "message" && n.namespace_ ().empty ())
          {
            this->message_.set (MessageTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "parts" && n.namespace_ ().empty ())
          {
            this->parts_.set (PartsTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "use" && n.namespace_ ().empty ())
          {
            this->use_.set (UseTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "encodingStyle" && n.namespace_ ().empty ())
          {
            this->encodingStyle_.set (EncodingStyleTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "namespace" && n.namespace_ ().empty ())
          {
            this->namespace__.set (NamespaceTraits::create (i, f, this));
            continue;
          }
        }

        if (!message_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "message",
            "");
        }

        if (!parts_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "parts",
            "");
        }

        if (!use_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "use",
            "");
        }
      }

      HeaderfaultType* HeaderfaultType::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class HeaderfaultType (*this, f, c);
      }

      HeaderfaultType& HeaderfaultType::
      operator= (const HeaderfaultType& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->message_ = x.message_;
          this->parts_ = x.parts_;
          this->use_ = x.use_;
          this->encodingStyle_ = x.encodingStyle_;
          this->namespace__ = x.namespace__;
        }

        return *this;
      }

      HeaderfaultType::
      ~HeaderfaultType ()
      {
      }

      static
      const ::xsd::cxx::tree::type_factory_initializer< 0, char, HeaderfaultType >
      _xsd_HeaderfaultType_type_factory_init (
        "headerfaultType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");

      // AddressType
      //

      AddressType::
      AddressType (const LocationType& location)
      : ::xml_schema::Type (),
        location_ (location, this)
      {
      }

      AddressType::
      AddressType (const AddressType& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
      : ::xml_schema::Type (x, f, c),
        location_ (x.location_, f, this)
      {
      }

      AddressType::
      AddressType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
      : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
        location_ (this)
      {
        if ((f & ::xml_schema::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
          this->parse (p, f);
        }
      }

      void AddressType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::Flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "location" && n.namespace_ ().empty ())
          {
            this->location_.set (LocationTraits::create (i, f, this));
            continue;
          }
        }

        if (!location_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "location",
            "");
        }
      }

      AddressType* AddressType::
      _clone (::xml_schema::Flags f,
              ::xml_schema::Container* c) const
      {
        return new class AddressType (*this, f, c);
      }

      AddressType& AddressType::
      operator= (const AddressType& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::Type& > (*this) = x;
          this->location_ = x.location_;
        }

        return *this;
      }

      AddressType::
      ~AddressType ()
      {
      }

      static
      const ::xsd::cxx::tree::type_factory_initializer< 0, char, AddressType >
      _xsd_AddressType_type_factory_init (
        "addressType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace WS
{
  namespace WSDL
  {
    namespace SOAP_BINDING
    {
      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (const ::std::string& u,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType > (
          ::WS::WSDL::SOAP_BINDING::binding (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (const ::std::string& u,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType > (
          ::WS::WSDL::SOAP_BINDING::binding (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType > (
          ::WS::WSDL::SOAP_BINDING::binding (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::std::istream& is,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::binding (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::std::istream& is,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::binding (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::binding (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::binding (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::binding (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::binding (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::xercesc::InputSource& i,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType > (
          ::WS::WSDL::SOAP_BINDING::binding (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::xercesc::InputSource& i,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType > (
          ::WS::WSDL::SOAP_BINDING::binding (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType > (
          ::WS::WSDL::SOAP_BINDING::binding (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (const ::xercesc::DOMDocument& doc,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType > (
            ::WS::WSDL::SOAP_BINDING::binding (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "binding",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::BindingType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::BindingType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "binding",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType >
      binding (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "binding",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::BindingType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {

          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BindingType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::BindingType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "binding",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (const ::std::string& u,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType > (
          ::WS::WSDL::SOAP_BINDING::operation (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (const ::std::string& u,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType > (
          ::WS::WSDL::SOAP_BINDING::operation (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType > (
          ::WS::WSDL::SOAP_BINDING::operation (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::std::istream& is,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::operation (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::std::istream& is,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::operation (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::operation (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::operation (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::operation (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::operation (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::xercesc::InputSource& i,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType > (
          ::WS::WSDL::SOAP_BINDING::operation (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::xercesc::InputSource& i,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType > (
          ::WS::WSDL::SOAP_BINDING::operation (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType > (
          ::WS::WSDL::SOAP_BINDING::operation (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType > (
            ::WS::WSDL::SOAP_BINDING::operation (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "operation",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::OperationType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::OperationType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "operation",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType >
      operation (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "operation",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::OperationType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {

          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::OperationType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::OperationType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "operation",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (const ::std::string& u,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType > (
          ::WS::WSDL::SOAP_BINDING::body (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (const ::std::string& u,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType > (
          ::WS::WSDL::SOAP_BINDING::body (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType > (
          ::WS::WSDL::SOAP_BINDING::body (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::std::istream& is,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::body (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::std::istream& is,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::body (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::body (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::body (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::body (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::body (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::xercesc::InputSource& i,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType > (
          ::WS::WSDL::SOAP_BINDING::body (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::xercesc::InputSource& i,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType > (
          ::WS::WSDL::SOAP_BINDING::body (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType > (
          ::WS::WSDL::SOAP_BINDING::body (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (const ::xercesc::DOMDocument& doc,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType > (
            ::WS::WSDL::SOAP_BINDING::body (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "body",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::BodyType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::BodyType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "body",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType >
      body (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "body",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::BodyType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {

          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::BodyType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::BodyType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "body",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType > (
          ::WS::WSDL::SOAP_BINDING::fault (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType > (
          ::WS::WSDL::SOAP_BINDING::fault (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType > (
          ::WS::WSDL::SOAP_BINDING::fault (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::fault (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::fault (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::fault (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::fault (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::fault (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::fault (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType > (
          ::WS::WSDL::SOAP_BINDING::fault (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType > (
          ::WS::WSDL::SOAP_BINDING::fault (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType > (
          ::WS::WSDL::SOAP_BINDING::fault (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType > (
            ::WS::WSDL::SOAP_BINDING::fault (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "fault",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::FaultType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::FaultType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "fault",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType >
      fault (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "fault",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::FaultType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {

          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::FaultType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::FaultType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "fault",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (const ::std::string& u,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType > (
          ::WS::WSDL::SOAP_BINDING::header (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (const ::std::string& u,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType > (
          ::WS::WSDL::SOAP_BINDING::header (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType > (
          ::WS::WSDL::SOAP_BINDING::header (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::std::istream& is,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::header (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::std::istream& is,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::header (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::header (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::header (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::header (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::header (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::xercesc::InputSource& i,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType > (
          ::WS::WSDL::SOAP_BINDING::header (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::xercesc::InputSource& i,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType > (
          ::WS::WSDL::SOAP_BINDING::header (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType > (
          ::WS::WSDL::SOAP_BINDING::header (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (const ::xercesc::DOMDocument& doc,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType > (
            ::WS::WSDL::SOAP_BINDING::header (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "header",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::HeaderType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::HeaderType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "header",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType >
      header (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "header",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::HeaderType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {

          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::HeaderType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "header",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (const ::std::string& u,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType > (
          ::WS::WSDL::SOAP_BINDING::headerfault (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (const ::std::string& u,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType > (
          ::WS::WSDL::SOAP_BINDING::headerfault (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType > (
          ::WS::WSDL::SOAP_BINDING::headerfault (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::std::istream& is,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::headerfault (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::std::istream& is,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::headerfault (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::headerfault (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::headerfault (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::headerfault (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::headerfault (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::xercesc::InputSource& i,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType > (
          ::WS::WSDL::SOAP_BINDING::headerfault (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::xercesc::InputSource& i,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType > (
          ::WS::WSDL::SOAP_BINDING::headerfault (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType > (
          ::WS::WSDL::SOAP_BINDING::headerfault (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType > (
            ::WS::WSDL::SOAP_BINDING::headerfault (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "headerfault",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::HeaderfaultType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "headerfault",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >
      headerfault (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "headerfault",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::HeaderfaultType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {

          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::HeaderfaultType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::HeaderfaultType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "headerfault",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (const ::std::string& u,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType > (
          ::WS::WSDL::SOAP_BINDING::address (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (const ::std::string& u,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType > (
          ::WS::WSDL::SOAP_BINDING::address (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType > (
          ::WS::WSDL::SOAP_BINDING::address (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::std::istream& is,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::address (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::std::istream& is,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::address (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::WS::WSDL::SOAP_BINDING::address (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::address (isrc, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0,
          (f & ::xml_schema::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::address (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::WS::WSDL::SOAP_BINDING::address (isrc, h, f, p);
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::xercesc::InputSource& i,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType > (
          ::WS::WSDL::SOAP_BINDING::address (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::xercesc::InputSource& i,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType > (
          ::WS::WSDL::SOAP_BINDING::address (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType > (
          ::WS::WSDL::SOAP_BINDING::address (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (const ::xercesc::DOMDocument& doc,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
      {
        if (f & ::xml_schema::Flags::keep_dom)
        {
          ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType > (
            ::WS::WSDL::SOAP_BINDING::address (
              std::move (d), f | ::xml_schema::Flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "address",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::AddressType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {
          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::AddressType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "address",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }

      ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType >
      address (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties&)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::Flags::keep_dom) &&
           !(f & ::xml_schema::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::Flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "address",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            &::xsd::cxx::tree::factory_impl< ::WS::WSDL::SOAP_BINDING::AddressType >,
            true, true, e, n, f, 0));

        if (tmp.get () != 0)
        {

          ::std::unique_ptr< ::WS::WSDL::SOAP_BINDING::AddressType > r (
            dynamic_cast< ::WS::WSDL::SOAP_BINDING::AddressType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "address",
          "http://schemas.xmlsoap.org/wsdl/soap12/");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace WS
{
  namespace WSDL
  {
    namespace SOAP_BINDING
    {
      void
      binding (::std::ostream& o,
               const ::WS::WSDL::SOAP_BINDING::BindingType& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::binding (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      binding (::std::ostream& o,
               const ::WS::WSDL::SOAP_BINDING::BindingType& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::binding (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      binding (::std::ostream& o,
               const ::WS::WSDL::SOAP_BINDING::BindingType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::binding (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      binding (::xercesc::XMLFormatTarget& t,
               const ::WS::WSDL::SOAP_BINDING::BindingType& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::binding (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      binding (::xercesc::XMLFormatTarget& t,
               const ::WS::WSDL::SOAP_BINDING::BindingType& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::binding (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      binding (::xercesc::XMLFormatTarget& t,
               const ::WS::WSDL::SOAP_BINDING::BindingType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::binding (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      binding (::xercesc::DOMDocument& d,
               const ::WS::WSDL::SOAP_BINDING::BindingType& s,
               ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (typeid (::WS::WSDL::SOAP_BINDING::BindingType) == typeid (s))
        {
          if (n.name () == "binding" &&
              n.namespace_ () == "http://schemas.xmlsoap.org/wsdl/soap12/")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "binding",
              "http://schemas.xmlsoap.org/wsdl/soap12/");
          }
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "binding",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            e, n, s);
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      binding (const ::WS::WSDL::SOAP_BINDING::BindingType& s,
               const ::xml_schema::NamespaceInfomap& m,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::WS::WSDL::SOAP_BINDING::BindingType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< char > (
            "binding",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, f);
        }
        else
        {
          d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "binding",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, s, f);
        }

        ::WS::WSDL::SOAP_BINDING::binding (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const BindingType& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // transport
        //
        if (i.transport ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "transport",
              e));

          a << *i.transport ();
        }

        // style
        //
        if (i.style ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "style",
              e));

          a << *i.style ();
        }
      }

      static
      const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BindingType >
      _xsd_BindingType_type_serializer_init (
        "bindingType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");


      void
      operator<< (::xercesc::DOMElement& e, const StyleChoice& i)
      {
        e << static_cast< const ::xml_schema::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const StyleChoice& i)
      {
        a << static_cast< const ::xml_schema::String& > (i);
      }

      void
      operator<< (::xml_schema::ListStream& l,
                  const StyleChoice& i)
      {
        l << static_cast< const ::xml_schema::String& > (i);
      }

      static
      const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StyleChoice >
      _xsd_StyleChoice_type_serializer_init (
        "styleChoice",
        "http://schemas.xmlsoap.org/wsdl/soap12/");


      void
      operation (::std::ostream& o,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& s,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::operation (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      operation (::std::ostream& o,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& s,
                 ::xml_schema::ErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::operation (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      operation (::std::ostream& o,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::operation (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      operation (::xercesc::XMLFormatTarget& t,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& s,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::operation (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      operation (::xercesc::XMLFormatTarget& t,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& s,
                 ::xml_schema::ErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::operation (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      operation (::xercesc::XMLFormatTarget& t,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::operation (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      operation (::xercesc::DOMDocument& d,
                 const ::WS::WSDL::SOAP_BINDING::OperationType& s,
                 ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (typeid (::WS::WSDL::SOAP_BINDING::OperationType) == typeid (s))
        {
          if (n.name () == "operation" &&
              n.namespace_ () == "http://schemas.xmlsoap.org/wsdl/soap12/")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "operation",
              "http://schemas.xmlsoap.org/wsdl/soap12/");
          }
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "operation",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            e, n, s);
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      operation (const ::WS::WSDL::SOAP_BINDING::OperationType& s,
                 const ::xml_schema::NamespaceInfomap& m,
                 ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::WS::WSDL::SOAP_BINDING::OperationType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< char > (
            "operation",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, f);
        }
        else
        {
          d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "operation",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, s, f);
        }

        ::WS::WSDL::SOAP_BINDING::operation (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const OperationType& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // soapAction
        //
        if (i.soapAction ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "soapAction",
              e));

          a << *i.soapAction ();
        }

        // style
        //
        if (i.style ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "style",
              e));

          a << *i.style ();
        }
      }

      static
      const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OperationType >
      _xsd_OperationType_type_serializer_init (
        "operationType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");


      void
      body (::std::ostream& o,
            const ::WS::WSDL::SOAP_BINDING::BodyType& s,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::body (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      body (::std::ostream& o,
            const ::WS::WSDL::SOAP_BINDING::BodyType& s,
            ::xml_schema::ErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::body (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      body (::std::ostream& o,
            const ::WS::WSDL::SOAP_BINDING::BodyType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::body (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      body (::xercesc::XMLFormatTarget& t,
            const ::WS::WSDL::SOAP_BINDING::BodyType& s,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::body (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      body (::xercesc::XMLFormatTarget& t,
            const ::WS::WSDL::SOAP_BINDING::BodyType& s,
            ::xml_schema::ErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::body (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      body (::xercesc::XMLFormatTarget& t,
            const ::WS::WSDL::SOAP_BINDING::BodyType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::body (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      body (::xercesc::DOMDocument& d,
            const ::WS::WSDL::SOAP_BINDING::BodyType& s,
            ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (typeid (::WS::WSDL::SOAP_BINDING::BodyType) == typeid (s))
        {
          if (n.name () == "body" &&
              n.namespace_ () == "http://schemas.xmlsoap.org/wsdl/soap12/")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "body",
              "http://schemas.xmlsoap.org/wsdl/soap12/");
          }
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "body",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            e, n, s);
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      body (const ::WS::WSDL::SOAP_BINDING::BodyType& s,
            const ::xml_schema::NamespaceInfomap& m,
            ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::WS::WSDL::SOAP_BINDING::BodyType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< char > (
            "body",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, f);
        }
        else
        {
          d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "body",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, s, f);
        }

        ::WS::WSDL::SOAP_BINDING::body (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const BodyType& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // encodingStyle
        //
        if (i.encodingStyle ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "encodingStyle",
              e));

          a << *i.encodingStyle ();
        }

        // parts
        //
        if (i.parts ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "parts",
              e));

          a << *i.parts ();
        }

        // use
        //
        if (i.use ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "use",
              e));

          a << *i.use ();
        }

        // namespace
        //
        if (i.namespace_ ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "namespace",
              e));

          a << *i.namespace_ ();
        }
      }

      static
      const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BodyType >
      _xsd_BodyType_type_serializer_init (
        "bodyType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");


      void
      operator<< (::xercesc::DOMElement& e, const UseChoice& i)
      {
        e << static_cast< const ::xml_schema::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const UseChoice& i)
      {
        a << static_cast< const ::xml_schema::String& > (i);
      }

      void
      operator<< (::xml_schema::ListStream& l,
                  const UseChoice& i)
      {
        l << static_cast< const ::xml_schema::String& > (i);
      }

      static
      const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UseChoice >
      _xsd_UseChoice_type_serializer_init (
        "useChoice",
        "http://schemas.xmlsoap.org/wsdl/soap12/");


      void
      fault (::std::ostream& o,
             const ::WS::WSDL::SOAP_BINDING::FaultType& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::fault (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      fault (::std::ostream& o,
             const ::WS::WSDL::SOAP_BINDING::FaultType& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::fault (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      fault (::std::ostream& o,
             const ::WS::WSDL::SOAP_BINDING::FaultType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::fault (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      fault (::xercesc::XMLFormatTarget& t,
             const ::WS::WSDL::SOAP_BINDING::FaultType& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::fault (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      fault (::xercesc::XMLFormatTarget& t,
             const ::WS::WSDL::SOAP_BINDING::FaultType& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::fault (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      fault (::xercesc::XMLFormatTarget& t,
             const ::WS::WSDL::SOAP_BINDING::FaultType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::fault (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      fault (::xercesc::DOMDocument& d,
             const ::WS::WSDL::SOAP_BINDING::FaultType& s,
             ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (typeid (::WS::WSDL::SOAP_BINDING::FaultType) == typeid (s))
        {
          if (n.name () == "fault" &&
              n.namespace_ () == "http://schemas.xmlsoap.org/wsdl/soap12/")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "fault",
              "http://schemas.xmlsoap.org/wsdl/soap12/");
          }
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "fault",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            e, n, s);
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      fault (const ::WS::WSDL::SOAP_BINDING::FaultType& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::WS::WSDL::SOAP_BINDING::FaultType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< char > (
            "fault",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, f);
        }
        else
        {
          d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "fault",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, s, f);
        }

        ::WS::WSDL::SOAP_BINDING::fault (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const FaultType& i)
      {
        e << static_cast< const ::WS::WSDL::SOAP_BINDING::BodyType& > (i);
      }

      static
      const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FaultType >
      _xsd_FaultType_type_serializer_init (
        "faultType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");


      void
      header (::std::ostream& o,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& s,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::header (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      header (::std::ostream& o,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& s,
              ::xml_schema::ErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::header (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      header (::std::ostream& o,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::header (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      header (::xercesc::XMLFormatTarget& t,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& s,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::header (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      header (::xercesc::XMLFormatTarget& t,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& s,
              ::xml_schema::ErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::header (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      header (::xercesc::XMLFormatTarget& t,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::header (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      header (::xercesc::DOMDocument& d,
              const ::WS::WSDL::SOAP_BINDING::HeaderType& s,
              ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (typeid (::WS::WSDL::SOAP_BINDING::HeaderType) == typeid (s))
        {
          if (n.name () == "header" &&
              n.namespace_ () == "http://schemas.xmlsoap.org/wsdl/soap12/")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "header",
              "http://schemas.xmlsoap.org/wsdl/soap12/");
          }
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "header",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            e, n, s);
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      header (const ::WS::WSDL::SOAP_BINDING::HeaderType& s,
              const ::xml_schema::NamespaceInfomap& m,
              ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::WS::WSDL::SOAP_BINDING::HeaderType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< char > (
            "header",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, f);
        }
        else
        {
          d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "header",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, s, f);
        }

        ::WS::WSDL::SOAP_BINDING::header (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const HeaderType& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // headerfault
        //
        {
          ::xsd::cxx::tree::type_serializer_map< char >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

          const HeaderType::HeaderfaultType& x (i.headerfault ());
          if (typeid (HeaderType::HeaderfaultType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "headerfault",
                "http://schemas.xmlsoap.org/wsdl/soap12/",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "headerfault",
              "http://schemas.xmlsoap.org/wsdl/soap12/",
              true, true, e, x);
        }

        // message
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "message",
              e));

          a << i.message ();
        }

        // parts
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "parts",
              e));

          a << i.parts ();
        }

        // use
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "use",
              e));

          a << i.use ();
        }

        // encodingStyle
        //
        if (i.encodingStyle ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "encodingStyle",
              e));

          a << *i.encodingStyle ();
        }

        // namespace
        //
        if (i.namespace_ ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "namespace",
              e));

          a << *i.namespace_ ();
        }
      }

      static
      const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HeaderType >
      _xsd_HeaderType_type_serializer_init (
        "headerType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");


      void
      headerfault (::std::ostream& o,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::headerfault (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      headerfault (::std::ostream& o,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::headerfault (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      headerfault (::std::ostream& o,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::headerfault (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      headerfault (::xercesc::XMLFormatTarget& t,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::headerfault (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      headerfault (::xercesc::XMLFormatTarget& t,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::headerfault (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      headerfault (::xercesc::XMLFormatTarget& t,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::headerfault (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      headerfault (::xercesc::DOMDocument& d,
                   const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& s,
                   ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (typeid (::WS::WSDL::SOAP_BINDING::HeaderfaultType) == typeid (s))
        {
          if (n.name () == "headerfault" &&
              n.namespace_ () == "http://schemas.xmlsoap.org/wsdl/soap12/")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "headerfault",
              "http://schemas.xmlsoap.org/wsdl/soap12/");
          }
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "headerfault",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            e, n, s);
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      headerfault (const ::WS::WSDL::SOAP_BINDING::HeaderfaultType& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::WS::WSDL::SOAP_BINDING::HeaderfaultType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< char > (
            "headerfault",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, f);
        }
        else
        {
          d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "headerfault",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, s, f);
        }

        ::WS::WSDL::SOAP_BINDING::headerfault (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const HeaderfaultType& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // message
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "message",
              e));

          a << i.message ();
        }

        // parts
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "parts",
              e));

          a << i.parts ();
        }

        // use
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "use",
              e));

          a << i.use ();
        }

        // encodingStyle
        //
        if (i.encodingStyle ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "encodingStyle",
              e));

          a << *i.encodingStyle ();
        }

        // namespace
        //
        if (i.namespace_ ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "namespace",
              e));

          a << *i.namespace_ ();
        }
      }

      static
      const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HeaderfaultType >
      _xsd_HeaderfaultType_type_serializer_init (
        "headerfaultType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");


      void
      address (::std::ostream& o,
               const ::WS::WSDL::SOAP_BINDING::AddressType& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::address (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      address (::std::ostream& o,
               const ::WS::WSDL::SOAP_BINDING::AddressType& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::Flags::dont_initialize) == 0);

        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::address (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      address (::std::ostream& o,
               const ::WS::WSDL::SOAP_BINDING::AddressType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::address (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      address (::xercesc::XMLFormatTarget& t,
               const ::WS::WSDL::SOAP_BINDING::AddressType& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::address (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      address (::xercesc::XMLFormatTarget& t,
               const ::WS::WSDL::SOAP_BINDING::AddressType& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::address (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      address (::xercesc::XMLFormatTarget& t,
               const ::WS::WSDL::SOAP_BINDING::AddressType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          ::WS::WSDL::SOAP_BINDING::address (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      address (::xercesc::DOMDocument& d,
               const ::WS::WSDL::SOAP_BINDING::AddressType& s,
               ::xml_schema::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (typeid (::WS::WSDL::SOAP_BINDING::AddressType) == typeid (s))
        {
          if (n.name () == "address" &&
              n.namespace_ () == "http://schemas.xmlsoap.org/wsdl/soap12/")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "address",
              "http://schemas.xmlsoap.org/wsdl/soap12/");
          }
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "address",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            e, n, s);
        }
      }

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      address (const ::WS::WSDL::SOAP_BINDING::AddressType& s,
               const ::xml_schema::NamespaceInfomap& m,
               ::xml_schema::Flags f)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::WS::WSDL::SOAP_BINDING::AddressType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< char > (
            "address",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, f);
        }
        else
        {
          d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
            "address",
            "http://schemas.xmlsoap.org/wsdl/soap12/",
            m, s, f);
        }

        ::WS::WSDL::SOAP_BINDING::address (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const AddressType& i)
      {
        e << static_cast< const ::xml_schema::Type& > (i);

        // location
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "location",
              e));

          a << i.location ();
        }
      }

      static
      const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AddressType >
      _xsd_AddressType_type_serializer_init (
        "addressType",
        "http://schemas.xmlsoap.org/wsdl/soap12/");
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

