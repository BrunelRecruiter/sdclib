// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MESSAGE_MODEL_DISCOVERY_HXX
#define MESSAGE_MODEL_DISCOVERY_HXX

#include "MessageModel-Discovery-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ws-addressing.hxx"

#include "wsdd-discovery-1.1-schema-os.hxx"

namespace WS
{
  namespace MESSAGEMODEL
  {
    namespace DISCOVERY
    {
      class Envelope: public ::xml_schema::Type
      {
        public:
        // Header
        //
        typedef ::WS::MESSAGEMODEL::DISCOVERY::Header HeaderType;
        typedef ::xsd::cxx::tree::traits< HeaderType, char > HeaderTraits;

        const HeaderType&
        Header () const;

        HeaderType&
        Header ();

        void
        Header (const HeaderType& x);

        void
        Header (::std::unique_ptr< HeaderType > p);

        // Body
        //
        typedef ::WS::MESSAGEMODEL::DISCOVERY::Body BodyType;
        typedef ::xsd::cxx::tree::traits< BodyType, char > BodyTraits;

        const BodyType&
        Body () const;

        BodyType&
        Body ();

        void
        Body (const BodyType& x);

        void
        Body (::std::unique_ptr< BodyType > p);

        // Constructors.
        //
        Envelope (const HeaderType&,
                  const BodyType&);

        Envelope (::std::unique_ptr< HeaderType >,
                  ::std::unique_ptr< BodyType >);

        Envelope (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        Envelope (const Envelope& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

        virtual Envelope*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Envelope&
        operator= (const Envelope& x);

        virtual 
        ~Envelope ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ::xsd::cxx::tree::one< HeaderType > Header_;
        ::xsd::cxx::tree::one< BodyType > Body_;
      };

      class Header: public ::xml_schema::Type
      {
        public:
        // Action
        //
        typedef ::WS::ADDRESSING::AttributedURIType ActionType;
        typedef ::xsd::cxx::tree::optional< ActionType > ActionOptional;
        typedef ::xsd::cxx::tree::traits< ActionType, char > ActionTraits;

        const ActionOptional&
        Action () const;

        ActionOptional&
        Action ();

        void
        Action (const ActionType& x);

        void
        Action (const ActionOptional& x);

        void
        Action (::std::unique_ptr< ActionType > p);

        // AppSequence
        //
        typedef ::WS::DISCOVERY::AppSequenceType AppSequenceType;
        typedef ::xsd::cxx::tree::optional< AppSequenceType > AppSequenceOptional;
        typedef ::xsd::cxx::tree::traits< AppSequenceType, char > AppSequenceTraits;

        const AppSequenceOptional&
        AppSequence () const;

        AppSequenceOptional&
        AppSequence ();

        void
        AppSequence (const AppSequenceType& x);

        void
        AppSequence (const AppSequenceOptional& x);

        void
        AppSequence (::std::unique_ptr< AppSequenceType > p);

        // From
        //
        typedef ::WS::ADDRESSING::EndpointReferenceType FromType;
        typedef ::xsd::cxx::tree::optional< FromType > FromOptional;
        typedef ::xsd::cxx::tree::traits< FromType, char > FromTraits;

        const FromOptional&
        From () const;

        FromOptional&
        From ();

        void
        From (const FromType& x);

        void
        From (const FromOptional& x);

        void
        From (::std::unique_ptr< FromType > p);

        // MessageID
        //
        typedef ::WS::ADDRESSING::AttributedURIType MessageIDType;
        typedef ::xsd::cxx::tree::optional< MessageIDType > MessageIDOptional;
        typedef ::xsd::cxx::tree::traits< MessageIDType, char > MessageIDTraits;

        const MessageIDOptional&
        MessageID () const;

        MessageIDOptional&
        MessageID ();

        void
        MessageID (const MessageIDType& x);

        void
        MessageID (const MessageIDOptional& x);

        void
        MessageID (::std::unique_ptr< MessageIDType > p);

        // ReferenceParameters
        //
        typedef ::WS::ADDRESSING::ReferenceParametersType ReferenceParametersType;
        typedef ::xsd::cxx::tree::optional< ReferenceParametersType > ReferenceParametersOptional;
        typedef ::xsd::cxx::tree::traits< ReferenceParametersType, char > ReferenceParametersTraits;

        const ReferenceParametersOptional&
        ReferenceParameters () const;

        ReferenceParametersOptional&
        ReferenceParameters ();

        void
        ReferenceParameters (const ReferenceParametersType& x);

        void
        ReferenceParameters (const ReferenceParametersOptional& x);

        void
        ReferenceParameters (::std::unique_ptr< ReferenceParametersType > p);

        // RelatesTo
        //
        typedef ::WS::ADDRESSING::RelatesToType RelatesToType;
        typedef ::xsd::cxx::tree::optional< RelatesToType > RelatesToOptional;
        typedef ::xsd::cxx::tree::traits< RelatesToType, char > RelatesToTraits;

        const RelatesToOptional&
        RelatesTo () const;

        RelatesToOptional&
        RelatesTo ();

        void
        RelatesTo (const RelatesToType& x);

        void
        RelatesTo (const RelatesToOptional& x);

        void
        RelatesTo (::std::unique_ptr< RelatesToType > p);

        // ReplyTo
        //
        typedef ::WS::ADDRESSING::EndpointReferenceType ReplyToType;
        typedef ::xsd::cxx::tree::optional< ReplyToType > ReplyToOptional;
        typedef ::xsd::cxx::tree::traits< ReplyToType, char > ReplyToTraits;

        const ReplyToOptional&
        ReplyTo () const;

        ReplyToOptional&
        ReplyTo ();

        void
        ReplyTo (const ReplyToType& x);

        void
        ReplyTo (const ReplyToOptional& x);

        void
        ReplyTo (::std::unique_ptr< ReplyToType > p);

        // To
        //
        typedef ::WS::ADDRESSING::AttributedURIType ToType;
        typedef ::xsd::cxx::tree::optional< ToType > ToOptional;
        typedef ::xsd::cxx::tree::traits< ToType, char > ToTraits;

        const ToOptional&
        To () const;

        ToOptional&
        To ();

        void
        To (const ToType& x);

        void
        To (const ToOptional& x);

        void
        To (::std::unique_ptr< ToType > p);

        // Constructors.
        //
        Header ();

        Header (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        Header (const Header& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

        virtual Header*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Header&
        operator= (const Header& x);

        virtual 
        ~Header ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ActionOptional Action_;
        AppSequenceOptional AppSequence_;
        FromOptional From_;
        MessageIDOptional MessageID_;
        ReferenceParametersOptional ReferenceParameters_;
        RelatesToOptional RelatesTo_;
        ReplyToOptional ReplyTo_;
        ToOptional To_;
      };

      class Body: public ::xml_schema::Type
      {
        public:
        // Bye
        //
        typedef ::WS::DISCOVERY::ByeType ByeType;
        typedef ::xsd::cxx::tree::optional< ByeType > ByeOptional;
        typedef ::xsd::cxx::tree::traits< ByeType, char > ByeTraits;

        const ByeOptional&
        Bye () const;

        ByeOptional&
        Bye ();

        void
        Bye (const ByeType& x);

        void
        Bye (const ByeOptional& x);

        void
        Bye (::std::unique_ptr< ByeType > p);

        // Hello
        //
        typedef ::WS::DISCOVERY::HelloType HelloType;
        typedef ::xsd::cxx::tree::optional< HelloType > HelloOptional;
        typedef ::xsd::cxx::tree::traits< HelloType, char > HelloTraits;

        const HelloOptional&
        Hello () const;

        HelloOptional&
        Hello ();

        void
        Hello (const HelloType& x);

        void
        Hello (const HelloOptional& x);

        void
        Hello (::std::unique_ptr< HelloType > p);

        // Probe
        //
        typedef ::WS::DISCOVERY::ProbeType ProbeType;
        typedef ::xsd::cxx::tree::optional< ProbeType > ProbeOptional;
        typedef ::xsd::cxx::tree::traits< ProbeType, char > ProbeTraits;

        const ProbeOptional&
        Probe () const;

        ProbeOptional&
        Probe ();

        void
        Probe (const ProbeType& x);

        void
        Probe (const ProbeOptional& x);

        void
        Probe (::std::unique_ptr< ProbeType > p);

        // ProbeMatches
        //
        typedef ::WS::DISCOVERY::ProbeMatchesType ProbeMatchesType;
        typedef ::xsd::cxx::tree::optional< ProbeMatchesType > ProbeMatchesOptional;
        typedef ::xsd::cxx::tree::traits< ProbeMatchesType, char > ProbeMatchesTraits;

        const ProbeMatchesOptional&
        ProbeMatches () const;

        ProbeMatchesOptional&
        ProbeMatches ();

        void
        ProbeMatches (const ProbeMatchesType& x);

        void
        ProbeMatches (const ProbeMatchesOptional& x);

        void
        ProbeMatches (::std::unique_ptr< ProbeMatchesType > p);

        // Resolve
        //
        typedef ::WS::DISCOVERY::ResolveType ResolveType;
        typedef ::xsd::cxx::tree::optional< ResolveType > ResolveOptional;
        typedef ::xsd::cxx::tree::traits< ResolveType, char > ResolveTraits;

        const ResolveOptional&
        Resolve () const;

        ResolveOptional&
        Resolve ();

        void
        Resolve (const ResolveType& x);

        void
        Resolve (const ResolveOptional& x);

        void
        Resolve (::std::unique_ptr< ResolveType > p);

        // ResolveMatches
        //
        typedef ::WS::DISCOVERY::ResolveMatchesType ResolveMatchesType;
        typedef ::xsd::cxx::tree::optional< ResolveMatchesType > ResolveMatchesOptional;
        typedef ::xsd::cxx::tree::traits< ResolveMatchesType, char > ResolveMatchesTraits;

        const ResolveMatchesOptional&
        ResolveMatches () const;

        ResolveMatchesOptional&
        ResolveMatches ();

        void
        ResolveMatches (const ResolveMatchesType& x);

        void
        ResolveMatches (const ResolveMatchesOptional& x);

        void
        ResolveMatches (::std::unique_ptr< ResolveMatchesType > p);

        // Constructors.
        //
        Body ();

        Body (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        Body (const Body& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

        virtual Body*
        _clone (::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0) const;

        Body&
        operator= (const Body& x);

        virtual 
        ~Body ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::Flags);

        protected:
        ByeOptional Bye_;
        HelloOptional Hello_;
        ProbeOptional Probe_;
        ProbeMatchesOptional ProbeMatches_;
        ResolveOptional Resolve_;
        ResolveMatchesOptional ResolveMatches_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace WS
{
  namespace MESSAGEMODEL
  {
    namespace DISCOVERY
    {
      // Parse a URI or a local file.
      //

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (const ::std::string& uri,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (const ::std::string& uri,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse std::istream.
      //

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (::std::istream& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (::std::istream& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::InputSource.
      //

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (::xercesc::InputSource& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (::xercesc::InputSource& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

      ::std::unique_ptr< ::WS::MESSAGEMODEL::DISCOVERY::Envelope >
      Envelope_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace WS
{
  namespace MESSAGEMODEL
  {
    namespace DISCOVERY
    {
      // Serialize to std::ostream.
      //

      void
      Envelope_ (::std::ostream& os,
                 const ::WS::MESSAGEMODEL::DISCOVERY::Envelope& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      void
      Envelope_ (::std::ostream& os,
                 const ::WS::MESSAGEMODEL::DISCOVERY::Envelope& x, 
                 ::xml_schema::ErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      void
      Envelope_ (::std::ostream& os,
                 const ::WS::MESSAGEMODEL::DISCOVERY::Envelope& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Envelope_ (::xercesc::XMLFormatTarget& ft,
                 const ::WS::MESSAGEMODEL::DISCOVERY::Envelope& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      void
      Envelope_ (::xercesc::XMLFormatTarget& ft,
                 const ::WS::MESSAGEMODEL::DISCOVERY::Envelope& x, 
                 ::xml_schema::ErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      void
      Envelope_ (::xercesc::XMLFormatTarget& ft,
                 const ::WS::MESSAGEMODEL::DISCOVERY::Envelope& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Envelope_ (::xercesc::DOMDocument& d,
                 const ::WS::MESSAGEMODEL::DISCOVERY::Envelope& x,
                 ::xml_schema::Flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
      Envelope_ (const ::WS::MESSAGEMODEL::DISCOVERY::Envelope& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 ::xml_schema::Flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const Envelope&);

      void
      operator<< (::xercesc::DOMElement&, const Header&);

      void
      operator<< (::xercesc::DOMElement&, const Body&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MESSAGE_MODEL_DISCOVERY_HXX
