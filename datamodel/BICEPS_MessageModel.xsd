<?xml version="1.0" encoding="utf-8"?>
<!--
	Clue for documentation elements: Please start and end a documentation by directly beginning after/ending before the opening/closing tag. Example:
	<xsd:documentation>Here the doc starts [...] and ends.</document>

	Do not do something like this:
	<xsd:documentation>
		Here the doc starts [...] and ends.
	</document>


	Always begin a new line at the beginning of the line and do not indent with whitespaces or tabs. Example:
	<xsd:documentation>Here the doc starts [...]
Here, a new line starts [...]
Another new line starts [...]
and the doc ends.</document>

	Do not do something like this:
	<xsd:documentation>Here the doc starts [...]
		Here, a new line starts [...]
		Another new line starts [...]
		and the doc ends.</document>

	All these rules prevent the documentation output format (that is generated using Altova XML Spy) from looking akward/not well-shaped.

	=====

	Information: Search for "TODO: add documentation" for missing documentation items
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ext="http://extension-point-uri/15/03" xmlns:dom="http://domain-model-uri/15/04" xmlns:msg="http://message-model-uri/15/04" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:npre="http://jaxb2-commons.dev.java.net/namespace-prefix" targetNamespace="http://message-model-uri/15/04" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0-BETA_04" xml:lang="en" jaxb:version="2.0">
	<xsd:import namespace="http://extension-point-uri/15/03" schemaLocation="ExtensionPoint.xsd"/>
	<xsd:import namespace="http://domain-model-uri/15/04" schemaLocation="BICEPS_DomainModel.xsd"/>
	<xsd:annotation>
		<xsd:documentation>This XML schema defines the 'Basic Integrated Clinical Environment Protocol Specification' (BICEPS) that is a Domain Information Model (DIM) for point of care medical device communication.
			It encompasses the device model and the corresponding messages.
			This XML Schema is based on the ISO/IEEE 11073-10201 Domain Information Model standard,
			which belongs to the "Point-of-care medical device communication" standard family in ISO/IEEE 11073.
			This standard family should not to be confused with the ISO/IEEE 11073 "Personal Health Device" standard family.
			While former is based on the standards ISO/IEEE 11073-10101, 11073-10201, 11073-20101, and 11073-30200,
			the latter is based on ISO/IEEE 11073-20601 and ISO/IEEE 11073-104xx.
			The Domain Information model is subdivided into two parts, a static part (referred to as Descriptor)
			that provides general information about the hardware specification of the elements and
			a dynamic part (referred to as State) that may change during time.</xsd:documentation>
		<xsd:appinfo>
			<jaxb:schemaBindings>
				<jaxb:nameXmlTransform>
					<!--jaxb:elementName prefix="Msg"/>
						<jaxb:typeName prefix="Msg"/>
						<jaxb:anonymousTypeName prefix="Msg"/-->
				</jaxb:nameXmlTransform>
			</jaxb:schemaBindings>
			<!--jaxb:globalBindings generateValueClass="false" /-->
			<!--jaxb.globalBindings>
			<jaxb:javaType name="java.util.Calendar" xmlType="xs:dateTime" 
parseMethod="javax.xml.bind.DatatypeConverter.parseDateTime" 
printMethod="javax.xml.bind.DatatypeConverter.printDateTime"/> 
			</jaxb.globalBindings-->
		</xsd:appinfo>
	</xsd:annotation>
	<!--Message Model - Get Service-->
	<!-- xsd:simpleType name="HandleConstraint">
		<xsd:restriction base="msg:HandleRef"/>
	</xsd:simpleType-->
	<!---->
	<xsd:complexType name="AbstractGet">
		<xsd:annotation>
			<xsd:documentation>Abstract super type of any request message for the GET service.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="AbstractGetResponse">
		<xsd:annotation>
			<xsd:documentation>Abstract super type of any response message for the GET service.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attribute ref="dom:MDIBVersion" use="required"/>
	</xsd:complexType>
	<!--MDIB-->
	<xsd:element name="GetMDIB">
		<xsd:annotation>
			<xsd:documentation>The GetMDIB message indicates that the complete MDIB (a.k.a capability description of the medical device(s)) SHOULD be returned as response.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractGet"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GetMDIBResponse">
		<xsd:annotation>
			<xsd:documentation>The response for a GetMDIB request that transports the MDIB of the communication node (may handle multiple medical devices).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractGetResponse">
					<xsd:sequence>
						<xsd:element name="MDIB" type="dom:MDIB">
							<xsd:annotation>
								<xsd:documentation>The current MDIB of the communication node that may handle multiple medical devices.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<!-- xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="anyExtensionGetMDIBResponses"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:any-->
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GetMDDescription">
		<xsd:annotation>
			<xsd:documentation>The GetMDDescription message indicates that referenced MDS descriptors SHOULD be returned as response. If no MDS descriptors are referenced all MDS descriptors SHOULD be returned.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractGet">
					<xsd:sequence>
						<xsd:element name="HandleRef" type="dom:HandleRef" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation>List of handles that specify which descriptors SHOULD be returned. If no handle is provided, all descriptors in the MDIB SHOULD be returned.</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="Handles"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GetMDDescriptionResponse">
		<xsd:annotation>
			<xsd:documentation>The response for a GetMDDescription request that transports a set of MDS descriptors of the device. The contained MDS descriptors depend on the handle list of the request. If the handle list of the request is empty all MDS descriptors will be returned. If a handle in the list belongs to a MDS descriptor all states referencing the MDS descriptor will be returned. </xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractGetResponse">
					<xsd:sequence>
						<xsd:element name="StaticDescription" type="dom:MDDescription"/>
						<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="anyExtensionGetMDDescriptionResponses"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:any-->
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GetMDState">
		<xsd:annotation>
			<xsd:documentation>The GetMDState message indicates that the specified states SHOULD be returned. If no HandleRef is specified all states SHOULD be returned.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractGet">
					<xsd:sequence>
						<xsd:element name="HandleRef" type="dom:HandleRef" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation>List of handles that specify which states SHOULD be returned. If no handle is provided, all states in the MDIB SHOULD be returned.</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="Handles"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GetMDStateResponse">
		<xsd:annotation>
			<xsd:documentation>The response for a GetMDState request that transports a set of states of the device. The contained states depend on the handle list of the request. If the handle list of the request is empty all states will be returned. If a handle in the list belongs to a descriptor all states referencing the descriptor will be returned.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractGetResponse">
					<xsd:sequence>
						<xsd:element name="MDState" type="dom:MDState">
							<xsd:annotation>
								<xsd:documentation>The requested MDState object.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="anyExtensionGetMDStateResponse"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:any-->
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GetContextStates">
		<xsd:annotation>
			<xsd:documentation>The GetContextState message indicates that the specified context SHOULD be returned as response.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="GetContextStates"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractGet">
					<xsd:sequence>
						<xsd:element name="HandleRef" type="dom:HandleRef" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation>List of handles that specify which patients SHOULD be returned. If no handle is provided all patients in the MDIB SHOULD be returned. If a Handle of a non-patient object (e.g. MDS) is provided than all patients that are associated with that object SHOULD be returned.</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="Handles"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GetContextStatesResponse">
		<xsd:annotation>
			<xsd:documentation>The response to a GetContextStateResponse request that transports the requested patient information of the device.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="GetContextStatesResponse"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractGetResponse">
					<xsd:sequence>
						<xsd:element name="ContextState" type="dom:AbstractContextState" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation>List of context values that includes all or just a subset of the requested context information.</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="ContextStates"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GetContainmentTree">
		<xsd:annotation>
			<xsd:documentation>The GetContainmentTree message indicates that the child elements of the referenced element should be returned.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractGet">
					<xsd:sequence>
						<xsd:element name="HandleRef" type="dom:HandleRef" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation>List of handles that specify which containment tree element be returned. If no handle is provided, all containment tree elements in the MDIB SHOULD be returned.</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="Handles"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GetContainmentTreeResponse">
		<xsd:annotation>
			<xsd:documentation>The response to a GetContainmentTree request that transports the containment tree information of the child elements for the specified parents from the request.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractGetResponse">
					<xsd:sequence>
						<xsd:element name="ContainmentTree" type="dom:ContainmentTree">
							<xsd:annotation>
								<xsd:documentation>TODO: add documentation</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GetDescriptor">
		<xsd:annotation>
			<xsd:documentation>The GetDescriptor message indicates that the defined descriptors should be returned without child descriptors included.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractGet">
					<xsd:sequence>
						<xsd:element name="HandleRef" type="dom:HandleRef" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation>List of handles that specify which descriptors should be returned. If no handle is provided, all descrtiptors should be returned.</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="Handles"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GetDescriptorResponse">
		<xsd:annotation>
			<xsd:documentation>The response to a GetDescriptor request that transports the descriptors woth out child descriptors for the specified handles from the request. </xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractGetResponse">
					<xsd:sequence>
						<xsd:element name="Descriptor" type="dom:AbstractDescriptor" minOccurs="0" maxOccurs="unbounded"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!--Localization-->
	<xsd:complexType name="GetLocalizedText">
		<xsd:annotation>
			<xsd:documentation>GetLocalizedText is a request message to obtain a localized text referenced in the MDIB.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractGet">
				<xsd:sequence>
					<xsd:element name="Ref" type="dom:LocalizedTextRef">
						<xsd:annotation>
							<xsd:documentation>Reference name of the text that is requested.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Version" type="dom:ReferencedVersion" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Revision of the referenced text that is requested.

The following rules SHALL apply:
- If the referenced text is not available in the specific version, GetLocalizedTextResponse includes an empty result
- If Version is not specified, GetLocalizedTextResponse responds with the latest version of the text.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Lang" type="xsd:language" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>Zero or more language identifiers according to RFC 5646 (see http://tools.ietf.org/html/rfc5646) to get different translations of the requested text.

The following rules SHALL apply:
- If there is no Lang element given in the request message, all translations will be returned in the GetLocalizedTextResponse message.
- Otherwise, the GetLocalizedTextResponse message contains translations in all languages matching the Lang elements of the GetLocalizedText request message. If a text is not available in a specific language, the result for that specific language is omitted. Supported languages can be retrieved using the GetSupportedLanguages request message.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="GetLocalizedTextResponse">
		<xsd:annotation>
			<xsd:documentation>GetLocalizedTextResponse is sent in response to a GetLocalizedText message and SHALL contain the result requested by GetLocalizedText.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractGetResponse">
				<xsd:sequence>
					<xsd:element name="Text" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>A list of texts in different translations in accordance to the GetLocalizedText request message. There might be no elements present if a referenced text does not exist or is not availabe in the requested language(s) and version.</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:simpleContent>
								<xsd:extension base="xsd:string">
									<xsd:attribute name="Lang" type="xsd:language">
										<xsd:annotation>
											<xsd:documentation>The language of the underlying text in accordance to RFC 5646 (see http://tools.ietf.org/html/rfc5646).</xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
								</xsd:extension>
							</xsd:simpleContent>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="GetSupportedLanguages">
		<xsd:annotation>
			<xsd:documentation>By sending a GetSupportedLanguages request, a service SHALL respond with a GetSupportedLanguagesResponse message containing a list of supported translations of referenced localized texts. GetSupportedLanguages requires no further parameters.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractGet">
				<xsd:sequence/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="GetSupportedLanguagesResponse">
		<xsd:annotation>
			<xsd:documentation>A GetSupportedLanguagesResponse message SHALL be send in answer to a GetSupportedLanguages request message. The GetSupportedLanguagesResponse message SHALL contain all language identifiers available for referenced localized texts.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractGetResponse">
				<xsd:sequence>
					<xsd:element name="Lang" type="xsd:language" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of available languages as RFC 5646 (see http://tools.ietf.org/html/rfc5646) language identifiers.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--Archive-->
	<xsd:complexType name="GetDescriptorsFromArchive">
		<xsd:annotation>
			<xsd:documentation>GetDescriptorsFromArchive message is used by the archive service to request descriptors related to a specific descriptor version and/or time frame.

GetDescriptorsFromArchive SHALL at least expect a version or a time frame filter. If both a version and a time frame are defined, the filter SHALL apply by conjunction. If none are defined, the message is invalid. Clue: It is not sufficient to provide handles only.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractGet">
				<xsd:sequence>
					<xsd:element name="DescriptorRevision" type="dom:ReferencedVersion" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>DescriptorRevision is a version filter. It is the referenced descriptor version that will be requested. By adding this optional element to the request, GetDescriptorsFromArchiveResponse SHALL only respond with descriptors matching this version.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="TimeFrame" type="msg:TimeFrame" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>TimeFrame defines a time-based filter. By adding this optional element to the request, GetDescriptorsFromArchiveResponse SHALL only respond with descriptors matching this time frame.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Handle" type="dom:HandleRef" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>A list of handle references which serve as a filter for the response.

If one or more handle references are defined, GetDescriptorsFromArchiveResponse SHALL respond only with descriptors matching these handle references at the given revision and/or time frame. If no handle references are defined, GetDescriptorsFromArchiveResponse SHALL respond with all descriptors at the given revision and/or time frame.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="GetDescriptorsFromArchiveResponse">
		<xsd:annotation>
			<xsd:documentation>GetDescriptorsFromArchiveResponse message is sent as the response to a GetDescriptorsFromArchive request message using the archive service.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractGetResponse">
				<xsd:sequence>
					<xsd:element name="Descriptor" type="dom:AbstractDescriptor" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>A list of descriptors. The descriptors SHALL match the time frame as well as the version and handle references of the GetDescriptorsFromArchive request message.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="GetStatesFromArchive">
		<xsd:annotation>
			<xsd:documentation>GetStatesFromArchive message is used by the archive service to request states related to a specific state version and/or time frame.

GetStatesFromArchive SHALL at least expect a version or a time frame filter. If both a version and a time frame are defined, the filter SHALL apply by conjunction. If none are defined, the message is invalid. Clue: It is not sufficient to provide handles only.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractGet">
				<xsd:sequence>
					<xsd:element name="StateRevision" type="dom:ReferencedVersion">
						<xsd:annotation>
							<xsd:documentation>StateRevision is a version filter. It is the referenced state version that will be requested. By adding this optional element to the request, GetStatesFromArchiveResponse SHALL only respond with states matching this version.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="TimeFrame" type="msg:TimeFrame" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>TimeFrame defines a time-based filter. By adding this optional element to the request, GetStatesFromArchiveResponse SHALL only respond with states matching this time frame.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Handle" type="dom:HandleRef" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>A list of handle references which serve as a filter for the response.

If one or more handle references are defined, GetStatesFromArchiveResponse SHALL respond only with states matching these handle references at the given revision and/or time frame. If no handle references are defined, GetStatesFromArchiveResponse SHALL respond with all states at the given revision and/or time frame. If a handle is a descriptor handle that points to a multi state, GetStatesFromArchiveResponse SHALL respond with all states referring to the descriptor handle.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="GetStatesFromArchiveResponse">
		<xsd:annotation>
			<xsd:documentation>GetStatesFromArchiveResponse message is sent as the response to a GetStatesFromArchive request message using the archive service.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractGet">
				<xsd:sequence>
					<xsd:element name="State" type="dom:AbstractState" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>A list of states. The states SHALL match the time frame as well as the version and handle references of the GetStatesFromArchive request message.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="TimeFrame">
		<xsd:annotation>
			<xsd:documentation>Defines a time frame by defining start and end time whereby the following rule SHALL apply: Start less than End.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="Start" type="dom:Timestamp">
			<xsd:annotation>
				<xsd:documentation>The start time of the time frame.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="End" type="dom:Timestamp">
			<xsd:annotation>
				<xsd:documentation>The end time of the time frame.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<!--Messagel Model - SET service-->
	<xsd:simpleType name="TransactionID">
		<xsd:annotation>
			<xsd:documentation>Defines a transaction ID, e.g., to be used when performing a queued SET operation.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:unsignedInt"/>
	</xsd:simpleType>
	<xsd:simpleType name="InvocationState">
		<xsd:annotation>
			<xsd:documentation>State of the execution of an invoked operation.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass name="InvocationState"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Wait">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="WAITING"/>
					</xsd:appinfo>
					<xsd:documentation>Wait = Waiting. The operation has been queued and waits for execution.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Start">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="STARTED"/>
					</xsd:appinfo>
					<xsd:documentation>Start = Started. The execution of this operation has been started.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Cnclld">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="CANCELLED"/>
					</xsd:appinfo>
					<xsd:documentation>Cnclld = Cancelled. The execution has been cancelled by the DEVICE.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="CnclldMan">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="CANCELLED_MANUALLY"/>
					</xsd:appinfo>
					<xsd:documentation>CnclldMan = Cancelled Manually. The execution has been cancelled by the operator.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Fin">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="FINISHED"/>
					</xsd:appinfo>
					<xsd:documentation>Fin = Finished. The execution has been finished.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Fail">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="FAILED"/>
					</xsd:appinfo>
					<xsd:documentation>The execution has been been failed.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="ArgumentType">
		<xsd:annotation>
			<xsd:documentation>Describes an operation argument, e.g., used by Activate.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="ArgValue" type="xsd:anySimpleType">
				<xsd:annotation>
					<xsd:documentation>The value type as a XML simple type.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="AbstractSet">
		<xsd:annotation>
			<xsd:documentation>Abstract super class of all setter operation messages.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="OperationHandleRef" type="dom:HandleRef">
				<xsd:annotation>
					<xsd:documentation>Handle of the operation that SHOULD be invoked. 
Note: Only valid operation handles from the MDIB are allowed.</xsd:documentation>
					<xsd:appinfo>
						<jaxb:property name="OperationHandle"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="AbstractSetResponse">
		<xsd:annotation>
			<xsd:documentation>Abstract super class of all setter operation response messages.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="TransactionId" type="msg:TransactionID">
				<xsd:annotation>
					<xsd:documentation>The ID of the transaction that has been assigned to the processing of the setter operation request.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="InvocationState" type="msg:InvocationState">
				<xsd:annotation>
					<xsd:documentation>State of the execution of the invoked operation.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="OperationError" type="msg:InvocationError" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>If the OperationState indicates a failure, this attribute may convey more information about the error.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="OperationErrorMessage" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>If the OperationState indicates a failure, this attribute may convey a message for a user with information about the error.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute ref="dom:MDIBVersion" use="required"/>
	</xsd:complexType>
	<xsd:element name="SetRange">
		<xsd:annotation>
			<xsd:documentation>The SetRange method corresponds to the SeRangeOperation objects in the MDIB and allows the modification of a range.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSet">
					<xsd:sequence>
						<xsd:element name="RequestedRange" type="dom:Range">
							<xsd:annotation>
								<xsd:documentation>The new value the range SHOULD be set to.</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="Range"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="anyExtensionSetRanges"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:any-->
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="SetRangeResponse">
		<xsd:annotation>
			<xsd:documentation>Response message to a SetRange request message.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSetResponse"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="SetValue">
		<xsd:annotation>
			<xsd:documentation>The SetValue method corresponds to the SetValueOperation objects in the MDIB and allows the modification of a numeric metric.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSet">
					<xsd:sequence>
						<xsd:element name="RequestedNumericValue" type="xsd:decimal">
							<xsd:annotation>
								<xsd:documentation>The new value the metric SHOULD be set to.</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="Value"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="anyExtensionSetValues"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:any-->
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="SetValueResponse">
		<xsd:annotation>
			<xsd:documentation>Response message to a SetValue request message.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSetResponse"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="SetString">
		<xsd:annotation>
			<xsd:documentation>The SetString method corresponds to the SetStringOperation objects in the MDIB and allows the modification of a string metric.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSet">
					<xsd:sequence>
						<xsd:element name="RequestedStringValue" type="xsd:string">
							<xsd:annotation>
								<xsd:documentation>The new value the metric SHOULD be set to.</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="String"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="anyExtensionSetStrings"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:any-->
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="SetStringResponse">
		<xsd:annotation>
			<xsd:documentation>Response message to a SetString request message.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSetResponse"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="SetAlertState">
		<xsd:annotation>
			<xsd:documentation>The SetAlertState method corresponds to the SetAlertStateOperation objects in the MDIB and allows the modification of an alert.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSet">
					<xsd:sequence>
						<xsd:element name="RequestedAlertState" type="dom:AbstractAlertState">
							<xsd:annotation>
								<xsd:documentation>The new value state of the alert SHOULD be set to.</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="State"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="SetAlertStateResponse">
		<xsd:annotation>
			<xsd:documentation>Response message to a SetAlertState request message.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSetResponse"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="Activate">
		<xsd:annotation>
			<xsd:documentation>The Activate method corresponds to the Activate objects in the MDIB and allows the invocation of a predefined job, e.g., silence alarms.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSet">
					<xsd:sequence>
						<xsd:element name="Argument" type="msg:ArgumentType" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation>List of arguments that SHOULD be used for invocation. TODO: Berücksichtigung für Param-Index / reihenfolge wie definition im descr</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="Arguments"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ActivateResponse">
		<xsd:annotation>
			<xsd:documentation>Response message to an Activate request message.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSetResponse"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!-- Message Model - SET service - context -->
	<xsd:element name="SetContextState">
		<xsd:annotation>
			<xsd:documentation>Request message of a SetContextOperation call to insert a new or modify an existing context state.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSet">
					<xsd:sequence>
						<xsd:element name="ProposedContextState" type="dom:AbstractContextState" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation>Defines the context states that has to be inserted or updated. Requests MAY insert or modify more than one context per request. The following semantics apply:
- If no handle in ProposedContextState/Handle is defined, the proposed object SHALL be created as a new context state .
- If a handle in ProposedContextState/Handle is defined, the proposed object already exist and SHALL be modified. If the handle references a multi state descriptor handle, the request SHALL be invalid.

A device MAY reject any requests. This applies especially for requests which have an impact on the device's memory allocation or deliver invalid handle names.
</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="ProposedContextStates"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="anyExtensionSetContext"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:any-->
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="SetContextStateResponse">
		<xsd:annotation>
			<xsd:documentation>Response message to a SetContextState request message.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="SetContextStateResponse"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSetResponse"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!--Messagel Model - SET service -  Patient-->
	<xsd:element name="SetPatientAssociationState">
		<xsd:annotation>
			<xsd:documentation>The SetPatientAssociationState method allows the modification of the association state of the patient.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="SetPatientState"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSet">
					<xsd:sequence>
						<xsd:element name="RequestedAssociation" type="dom:ContextAssociation">
							<xsd:annotation>
								<xsd:documentation>The new context association to set.</xsd:documentation>
								<xsd:appinfo>
									<jaxb:property name="PatientAssociationState"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="anyExtensionPatientStates"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:any-->
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="SetPatientAssociationStateResponse">
		<xsd:annotation>
			<xsd:documentation>Response message to a SetPatientAssociationState request message.</xsd:documentation>
			<xsd:appinfo>
				<jaxb:class name="SetPatientStateResponse"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractSetResponse"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!--Message Model - Reports-->
	<xsd:complexType name="AbstractReport">
		<xsd:annotation>
			<xsd:documentation>TODO: add documentation</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attribute ref="dom:MDIBVersion" use="required"/>
	</xsd:complexType>
	<xsd:complexType name="AbstractReportPart">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="ReportPart"/>
			</xsd:appinfo>
			<xsd:documentation>TODO: add documentation</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="ext:Extension" minOccurs="0"/>
			<xsd:element name="SourceMDS" type="dom:HandleRef" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Optional reference to the MDS that has triggered the sending of this report. Maybe be used for filtering.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!--Messagel Model - Reports - MDIB State Reports-->
	<xsd:complexType name="MetricReportPart">
		<xsd:annotation>
			<xsd:documentation>A container of a list of metric states that is reported.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReportPart">
				<xsd:sequence>
					<xsd:element name="MetricState" type="dom:AbstractMetricState" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of metrics that build the content of this report.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="Metrics"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AbstractMetricReport">
		<xsd:annotation>
			<xsd:documentation>A report that contains information about metrics.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReport">
				<xsd:sequence>
					<xsd:element name="ReportPart" type="msg:MetricReportPart" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of report containers associated to one MDS.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="ReportParts"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="PeriodicMetricReport">
		<xsd:annotation>
			<xsd:documentation>The PeriodicMetricReport is sent periodically and contains all current metrics from the MDIB.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractMetricReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="EpisodicMetricReport">
		<xsd:annotation>
			<xsd:documentation>The EpisodicMetricReport is sent if at least one property of at least one metric has changed and SHOULD contain only the changed metrics.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractMetricReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="AlertReportPart">
		<xsd:annotation>
			<xsd:documentation>A container of a list of alert states that is reported. </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReportPart">
				<xsd:sequence>
					<xsd:element name="AlertState" type="dom:AbstractAlertState" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of alert states that build the content of this report.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="AlertStates"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AbstractAlertReport">
		<xsd:annotation>
			<xsd:documentation>A report that contains information about alerts.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReport">
				<xsd:sequence>
					<xsd:element name="AlertReportDetail" type="msg:AlertReportPart" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of report containers.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="ReportParts"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="anyExtensionAbstractAlertReports"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:any-->
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="PeriodicAlertReport">
		<xsd:annotation>
			<xsd:documentation>The PeriodicAlertReport is sent periodically and contains all current alerts from the MDIB.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractAlertReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="EpisodicAlertReport">
		<xsd:annotation>
			<xsd:documentation>The EpisodicAlertReport is sent if at least one property of at least one alert has changed and SHOULD contain only the changed alerts.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractAlertReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!-- Context reports -->
	<!--xsd:complexType name="ContextStateReportPart">
		<xsd:annotation>
			<xsd:documentation>A container of a list of context states that is reported. </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReportPart">
				<xsd:sequence>
					<xsd:element name="ContextState" type="msg:ContextStateElement" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of abstract contexts that build the content of this report.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="ContextStates"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AbstractContextReport">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="AbstractContextReport"/>
			</xsd:appinfo>
			<xsd:documentation>A report that contains information about metrics.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReport">
				<xsd:sequence>
					<xsd:element name="ReportPart" type="msg:ContextStateReportPart" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of report containers associated to one MDS.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="ReportParts"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="PeriodicContextReport">
		<xsd:annotation>
			<xsd:documentation>The PeriodicContextReport is sent periodically and contains all current context infos from the MDIB.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractContextReport">
					
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="EpisodicContextReport">
		<xsd:annotation>
			<xsd:documentation>The EpisodicMetricReport is sent if at least one property of at least one metric has changed and SHOULD contain only the changed metrics.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractContextReport">
					
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
-->
	<!--Changed report -->
	<xsd:complexType name="ContextChangedReportPart">
		<xsd:annotation>
			<xsd:documentation>A container of a list of context states that is reported. </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReportPart">
				<xsd:sequence>
					<!--xsd:element name="ChangedContext" type="msg:ContextAssociationState" minOccurs="0" maxOccurs="unbounded"-->
					<xsd:element name="ChangedContextState" type="dom:HandleRef" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of abstract contexts that build the content of this report.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="ChangedContextStates"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AbstractContextChangedReport">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="AbstractContextChangedReport"/>
			</xsd:appinfo>
			<xsd:documentation>A report that contains information about metrics.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReport">
				<xsd:sequence>
					<xsd:element name="ReportPart" type="msg:ContextChangedReportPart" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of report containers associated to one MDS.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="ReportParts"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="PeriodicContextChangedReport">
		<xsd:annotation>
			<xsd:documentation>The PeriodicContextReport is sent periodically and contains all current context infos from the MDIB.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractContextChangedReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="EpisodicContextChangedReport">
		<xsd:annotation>
			<xsd:documentation>The EpisodicMetricReport is sent if at least one property of at least one metric has changed and SHOULD contain only the changed metrics.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractContextChangedReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!--Message Model - Reports - Interaktion-->
	<xsd:simpleType name="InvocationError">
		<xsd:annotation>
			<xsd:documentation>Presents more details with respect to the origin of the failure</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass name="InvocationError"/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Unspec">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="UNSPECIFIED"/>
					</xsd:appinfo>
					<xsd:documentation>Unspec = Unspecified. An unspecified error has occurred.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Unkn">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="UNKNOWN_OPERATION"/>
					</xsd:appinfo>
					<xsd:documentation>Unkn = Unknown Operation. The handle to the operation object is not known.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Inv">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="INVALID_VALUE"/>
					</xsd:appinfo>
					<xsd:documentation>Inv = Invalid Value. The handle to the operation object does not match the invocation request message.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Oth">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="OTHER"/>
					</xsd:appinfo>
					<xsd:documentation>Oth = Other. Another type of error has occurred</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<!--xsd:enumeration value="Unspecified">
				<xsd:annotation>
					<xsd:documentation>An unspecified error has occurred.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="UnknownOperation">
				<xsd:annotation>
					<xsd:documentation>The handle to the operation object is not known.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="InvalidValue">
				<xsd:annotation>
					<xsd:documentation>The handle to the operation object does not match the invocation request message.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration-->
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="OperationDescriptionModificationReportPart">
		<xsd:annotation>
			<xsd:documentation>A container for a an operation description modification that is reported.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReportPart">
				<xsd:sequence>
					<xsd:element name="OperationDescription" type="dom:AbstractOperationDescriptor" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of modified operations.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="Operations"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="anyExtensionOperationDescriptionModificationReportParts"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:any-->
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="OperationDescriptionModificationReport">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:class name="OperationModificationReport"/>
			</xsd:appinfo>
			<xsd:documentation>The OperationModificationReport is sent if at least one operation description has been changed during runtime.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReport">
				<xsd:sequence>
					<xsd:element name="ReportDetail" type="msg:OperationDescriptionModificationReportPart" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of report containers.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="ReportParts"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="anyExtensionOperationModificationReports"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:any-->
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="OperationInvokedReportPart">
		<xsd:annotation>
			<xsd:documentation>A container for information on the state of the requested execution of an opeation.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReportPart">
				<xsd:sequence>
					<xsd:element name="TransactionId" type="msg:TransactionID">
						<xsd:annotation>
							<xsd:documentation>The internal transaction ID of the remote operation request.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="OperationHandleRef" type="dom:HandleRef">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="Operation"/>
							</xsd:appinfo>
							<xsd:documentation>The descriptor handle referencing the operation that was requested to be executed.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="OperationTarget" type="dom:HandleRef" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The optional target handle of the operation that was requested to be executed.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<!-- Shortcut to e.g. Metric -->
					<!-- TODO Besser InvocationState -->
					<xsd:element name="OperationState" type="msg:InvocationState">
						<xsd:annotation>
							<xsd:documentation>The current state of the operation request execution.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<!-- new type -->
					<xsd:element name="OperationError" type="msg:InvocationError" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>If the OperationState indicates a failure, this attribute may convey more information about the error.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="OperationErrorMessage" type="xsd:string" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>If the OperationState indicates a failure, this attribute may convey a message for a user with information about the error.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="OperationInvokedReport">
		<xsd:annotation>
			<xsd:documentation>An OperationInvokedReport is fired if the state of the execution of a remote operation request has changed.

If a remote operation affects a multi state, the following rules SHALL apply:
- To identify which state of a multi state is changed or created, operation-invoked reports have to include the OperationTarget attribute in at least one of the transaction messages. As a consequence, the caller of the operation knows the state that has been modified or created.
- Once an OperationInvokedReport message includes the OperationTarget attribute, it is guaranteed that the generated or affected handle does not change anymore.
</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractReport">
					<xsd:sequence>
						<xsd:element name="ReportDetail" type="msg:OperationInvokedReportPart" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="ReportDetails"/>
								</xsd:appinfo>
								<xsd:documentation>List of report details.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="anyExtensionOperationInvokedReports"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:any-->
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="OperationalStateChangedReportPart">
		<xsd:annotation>
			<xsd:documentation>A container for a list of operation states that is reported.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReportPart">
				<xsd:sequence>
					<xsd:element name="Operation" type="dom:OperationState" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>List of operation states that build the content of this report.</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="Operations"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="anyExtensionOperationalStateChangedReports"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:any-->
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="OperationalStateChangedReport">
		<xsd:annotation>
			<xsd:documentation>An OperationInvokedReport is fired if the state of the execution of a remote operation changed.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractReport">
					<xsd:sequence>
						<xsd:element name="ReportDetail" type="msg:OperationalStateChangedReportPart" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="ReportDetails"/>
								</xsd:appinfo>
								<xsd:documentation>List of report details.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="anyExtensionOperationInvokedReports"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:any-->
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!--Message Model - Reports - MDIB Description Reports-->
	<xsd:element name="OperationCreatedReport">
		<xsd:annotation>
			<xsd:documentation>The OperationCreatedReport is sent if at least one new operation has been created during runtime and can be invoked by a remote device.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:OperationDescriptionModificationReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="OperationDeletedReport">
		<xsd:annotation>
			<xsd:documentation>The OperationDeletedReport is sent if at least one operation has been deleted during runtime and can be invoked by a remote device.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:OperationDescriptionModificationReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:simpleType name="DescriptionModificationType">
		<xsd:annotation>
			<xsd:documentation>DescriptionModificationType designates the modification mode when sending a DescriptionModificationReport.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Crt">
				<xsd:annotation>
					<xsd:documentation>Crt = Created. Indicates that the object transmitted by a modification message has been created (inserted into the MDIB).</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Upt">
				<xsd:annotation>
					<xsd:documentation>Upt = Updated. Indicates that the object transmitted by a modification message has been updated.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Del">
				<xsd:annotation>
					<xsd:documentation>Del = Deleted. Indicates that the object transmitted by a modification message has been deleted (removed from the MDIB).</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="DescriptionModificationReportPart">
		<xsd:annotation>
			<xsd:documentation>A container for a list of descriptors that belong to one parent and that have changed.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReportPart">
				<xsd:sequence>
					<xsd:element name="Descriptor" type="dom:AbstractDescriptor">
						<xsd:annotation>
							<xsd:documentation>Descriptor that has been inserted into, updated from or deleted from the MDIB. The mode is stored in the ModificationType attribute.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="ParentDescriptor" type="dom:HandleRef" use="required">
					<xsd:annotation>
						<xsd:documentation>
							The parent descriptor of the descriptor stored in the Descriptor element.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="ModificationType" type="msg:DescriptionModificationType" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Determines if the descriptor stored in the Descriptor element has been inserted into, updated from or deleted from the MDIB. Default value SHALL be "Upt" for "updated".
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="DescriptionModificationReport">
		<xsd:annotation>
			<xsd:documentation>The DescriptionModificationReport is sent if at least one descriptor item has been changed during runtime,</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReport">
				<xsd:sequence>
					<xsd:element name="ReportDetail" type="msg:DescriptionModificationReportPart" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="ReportDetails"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="MDSModificationReportPart">
		<xsd:annotation>
			<xsd:documentation>A container for a list of MDS descriptors that belong to one parent and that have changed.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReportPart">
				<xsd:sequence>
					<xsd:element name="MDS" type="dom:AbstractMDSDescriptor" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>???</xsd:documentation>
							<xsd:appinfo>
								<jaxb:property name="MDSDescriptors"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="anyExtensionMDSModificationReportParts"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:any-->
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="MDSModificationReport">
		<xsd:annotation>
			<xsd:documentation>The MDSModificationReport is sent if at least one MDS descriptor item has been changed during runtime,</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReport">
				<xsd:sequence>
					<xsd:element name="ReportDetail" type="msg:MDSModificationReportPart" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<jaxb:property name="ReportDetails"/>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="ObjectCreatedReport">
		<xsd:annotation>
			<xsd:documentation>The ObjectCreatedReport is sent if at least one VMO description has been created during runtime.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:DescriptionModificationReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ObjectUpdatedReport">
		<xsd:annotation>
			<xsd:documentation>The ObjectUpdateReport is sent if at least one VMO description has been updated during runtime.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:DescriptionModificationReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ObjectDeletedReport">
		<xsd:annotation>
			<xsd:documentation>The ObjectDeletedReport is sent if at least one VMO description has been deleted during runtime.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:DescriptionModificationReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="MDSCreatedReport">
		<xsd:annotation>
			<xsd:documentation>The MDSCreatedReport is sent if a MDS has been created during runtime.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:MDSModificationReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="MDSDeletedReport">
		<xsd:annotation>
			<xsd:documentation>The MDSCreatedReport is sent if a MDS has been created during runtime.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:MDSModificationReport"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!--Message Model - Reports - System Error-->
	<xsd:complexType name="SystemErrorReportReportPart">
		<xsd:annotation>
			<xsd:documentation>A container for information on the system error state that is reported.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="msg:AbstractReportPart">
				<xsd:sequence>
					<xsd:element name="ErrorCode" type="dom:CodedValue">
						<xsd:annotation>
							<xsd:documentation>The code of the error.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="ErrorInfo" type="xsd:string" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Additional textual information.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="SystemErrorReport">
		<xsd:annotation>
			<xsd:documentation>The SystemErrorReport is sent episodically, if a system error has occurred and contains one system error report.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="msg:AbstractReport">
					<xsd:sequence>
						<xsd:element name="ReportDetail" type="msg:SystemErrorReportReportPart" minOccurs="0" maxOccurs="unbounded"/>
						<!--xsd:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:appinfo>
									<jaxb:property name="anyExtensionSystemErrorReports"/>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:any-->
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!--Message Model - Reports - Streams-->
	<xsd:element name="WaveformStream">
		<xsd:annotation>
			<xsd:documentation>The WaveformStream message is sent in order to transmit a set of samples of one or more waveforms.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="ext:Extension" minOccurs="0"/>
				<xsd:element name="RealTimeSampleArray" type="dom:RealTimeSampleArrayMetricState" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>The sample array of a waveform-</xsd:documentation>
						<xsd:appinfo>
							<jaxb:property name="RealTimeSampleArrays"/>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="StreamElement">
		<xsd:sequence>
				<xsd:element name="Value" type="dom:AbstractMetricValue" minOccurs="0" maxOccurs="1"/>
			</xsd:sequence>
							<xsd:attribute name="Metric" type="dom:HandleRef" use="required">
					<xsd:annotation>
						<xsd:documentation>Todo.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="OVStream">
		<xsd:annotation>
			<xsd:documentation>TODO</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="ext:Extension" minOccurs="0"/>
				<xsd:element name="Value" type="msg:StreamElement" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!-- Message Model - Metric Retrievability -->
	<xsd:simpleType name="MetricRetrievability">
		<xsd:annotation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass name="MetricRetrievability"/>
			</xsd:appinfo>
			<xsd:documentation>MetricAvailability provides information on how it is possible to access the metric value.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Get">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="GET"/>
					</xsd:appinfo>
					<xsd:documentation>The metric is retrievable via a Get request. Use the corresponding get message (e.g.GetMetrics).</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Per">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="PERIODIC"/>
					</xsd:appinfo>
					<xsd:documentation>Per = Periodic. The metric is retrievable via a periodic event report (TODO: 11073: MDC_NOTI_BUF_SCAN_RPT (1:3331), even though not configurable). Use the corresponding periodic event report message (e.g. EpisodicMetricReport) . </xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Ep">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="EPISODIC"/>
					</xsd:appinfo>
					<xsd:documentation>Ep = Episodic. The metric is retrievable via a periodic event report (MDC_NOTI_BUF_SCAN_RPT (1:3331) ???, not configurable). Use the corresponding episodic event report message (e.g. PeriodicMetricReport) .</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="Strm">
				<xsd:annotation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="STREAM"/>
					</xsd:appinfo>
					<xsd:documentation>Strm = Stream. The metric is retrievable via a WaveformStream. Use the WaveformStream message.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:element name="Retrievability">
		<xsd:annotation>
			<xsd:documentation>Extension point for the domain model which SHOULD be included as AbstractMetricDescriptor extensions to describe the metric retrievability (see simple type MetricRetrievability). Since a metric might be retrievable by several methods, Retrievability comprises of a list of By elements.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="By" type="msg:MetricRetrievability" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>By defines a single metric retrievability.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="OperationReference">
		<xsd:annotation>
			<xsd:documentation>TODO</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="ServiceID" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>Identifier for a hosted service that is unique within a network device.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="Action" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Identifier for the action to be invoked.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>
