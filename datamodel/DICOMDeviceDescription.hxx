// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef DICOMDEVICE_DESCRIPTION_HXX
#define DICOMDEVICE_DESCRIPTION_HXX

#include "DICOMDeviceDescription-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "BICEPS_DomainModel.hxx"

namespace CDM
{
  class DICOMTransferRole: public ::xml_schema::String
  {
    public:
    enum Value
    {
      SCU,
      SCP
    };

    DICOMTransferRole (Value v);

    DICOMTransferRole (const char* v);

    DICOMTransferRole (const ::std::string& v);

    DICOMTransferRole (const ::xml_schema::String& v);

    DICOMTransferRole (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    DICOMTransferRole (const ::xercesc::DOMAttr& a,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    DICOMTransferRole (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    DICOMTransferRole (const DICOMTransferRole& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    virtual DICOMTransferRole*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DICOMTransferRole&
    operator= (Value v);

    virtual
    operator Value () const
    {
      return _xsd_DICOMTransferRole_convert ();
    }

    protected:
    Value
    _xsd_DICOMTransferRole_convert () const;

    public:
    static const char* const _xsd_DICOMTransferRole_literals_[2];
    static const Value _xsd_DICOMTransferRole_indexes_[2];
  };

  class DICOMTransferCapability: public ::xml_schema::Type
  {
    public:
    // TransferSyntax
    //
    typedef ::xml_schema::String TransferSyntaxType;
    typedef ::xsd::cxx::tree::sequence< TransferSyntaxType > TransferSyntaxSequence;
    typedef TransferSyntaxSequence::iterator TransferSyntaxIterator;
    typedef TransferSyntaxSequence::const_iterator TransferSyntaxConstIterator;
    typedef ::xsd::cxx::tree::traits< TransferSyntaxType, char > TransferSyntaxTraits;

    const TransferSyntaxSequence&
    TransferSyntax () const;

    TransferSyntaxSequence&
    TransferSyntax ();

    void
    TransferSyntax (const TransferSyntaxSequence& s);

    // SOPClass
    //
    typedef ::xml_schema::String SOPClassType;
    typedef ::xsd::cxx::tree::traits< SOPClassType, char > SOPClassTraits;

    const SOPClassType&
    SOPClass () const;

    SOPClassType&
    SOPClass ();

    void
    SOPClass (const SOPClassType& x);

    void
    SOPClass (::std::unique_ptr< SOPClassType > p);

    // TransferRole
    //
    typedef ::CDM::DICOMTransferRole TransferRoleType;
    typedef ::xsd::cxx::tree::traits< TransferRoleType, char > TransferRoleTraits;

    const TransferRoleType&
    TransferRole () const;

    TransferRoleType&
    TransferRole ();

    void
    TransferRole (const TransferRoleType& x);

    void
    TransferRole (::std::unique_ptr< TransferRoleType > p);

    // Constructors.
    //
    DICOMTransferCapability (const SOPClassType&,
                             const TransferRoleType&);

    DICOMTransferCapability (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    DICOMTransferCapability (const DICOMTransferCapability& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    virtual DICOMTransferCapability*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DICOMTransferCapability&
    operator= (const DICOMTransferCapability& x);

    virtual 
    ~DICOMTransferCapability ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    TransferSyntaxSequence TransferSyntax_;
    ::xsd::cxx::tree::one< SOPClassType > SOPClass_;
    ::xsd::cxx::tree::one< TransferRoleType > TransferRole_;
  };

  class DICOMNetworkAE: public ::xml_schema::Type
  {
    public:
    // TransferCapability
    //
    typedef ::CDM::DICOMTransferCapability TransferCapabilityType;
    typedef ::xsd::cxx::tree::sequence< TransferCapabilityType > TransferCapabilitySequence;
    typedef TransferCapabilitySequence::iterator TransferCapabilityIterator;
    typedef TransferCapabilitySequence::const_iterator TransferCapabilityConstIterator;
    typedef ::xsd::cxx::tree::traits< TransferCapabilityType, char > TransferCapabilityTraits;

    const TransferCapabilitySequence&
    TransferCapability () const;

    TransferCapabilitySequence&
    TransferCapability ();

    void
    TransferCapability (const TransferCapabilitySequence& s);

    // ApplicationCluster
    //
    typedef ::CDM::LocalizedText ApplicationClusterType;
    typedef ::xsd::cxx::tree::sequence< ApplicationClusterType > ApplicationClusterSequence;
    typedef ApplicationClusterSequence::iterator ApplicationClusterIterator;
    typedef ApplicationClusterSequence::const_iterator ApplicationClusterConstIterator;
    typedef ::xsd::cxx::tree::traits< ApplicationClusterType, char > ApplicationClusterTraits;

    const ApplicationClusterSequence&
    ApplicationCluster () const;

    ApplicationClusterSequence&
    ApplicationCluster ();

    void
    ApplicationCluster (const ApplicationClusterSequence& s);

    // SupportedCharacterSet
    //
    typedef ::xml_schema::String SupportedCharacterSetType;
    typedef ::xsd::cxx::tree::sequence< SupportedCharacterSetType > SupportedCharacterSetSequence;
    typedef SupportedCharacterSetSequence::iterator SupportedCharacterSetIterator;
    typedef SupportedCharacterSetSequence::const_iterator SupportedCharacterSetConstIterator;
    typedef ::xsd::cxx::tree::traits< SupportedCharacterSetType, char > SupportedCharacterSetTraits;

    const SupportedCharacterSetSequence&
    SupportedCharacterSet () const;

    SupportedCharacterSetSequence&
    SupportedCharacterSet ();

    void
    SupportedCharacterSet (const SupportedCharacterSetSequence& s);

    // AETitle
    //
    typedef ::xml_schema::String AETitleType;
    typedef ::xsd::cxx::tree::traits< AETitleType, char > AETitleTraits;

    const AETitleType&
    AETitle () const;

    AETitleType&
    AETitle ();

    void
    AETitle (const AETitleType& x);

    void
    AETitle (::std::unique_ptr< AETitleType > p);

    // NetworkConnectionReference
    //
    typedef ::xml_schema::Idrefs NetworkConnectionReferenceType;
    typedef ::xsd::cxx::tree::traits< NetworkConnectionReferenceType, char > NetworkConnectionReferenceTraits;

    const NetworkConnectionReferenceType&
    NetworkConnectionReference () const;

    NetworkConnectionReferenceType&
    NetworkConnectionReference ();

    void
    NetworkConnectionReference (const NetworkConnectionReferenceType& x);

    void
    NetworkConnectionReference (::std::unique_ptr< NetworkConnectionReferenceType > p);

    // AssociationInitiator
    //
    typedef ::xml_schema::Boolean AssociationInitiatorType;
    typedef ::xsd::cxx::tree::traits< AssociationInitiatorType, char > AssociationInitiatorTraits;

    const AssociationInitiatorType&
    AssociationInitiator () const;

    AssociationInitiatorType&
    AssociationInitiator ();

    void
    AssociationInitiator (const AssociationInitiatorType& x);

    // AssociationAcceptor
    //
    typedef ::xml_schema::Boolean AssociationAcceptorType;
    typedef ::xsd::cxx::tree::traits< AssociationAcceptorType, char > AssociationAcceptorTraits;

    const AssociationAcceptorType&
    AssociationAcceptor () const;

    AssociationAcceptorType&
    AssociationAcceptor ();

    void
    AssociationAcceptor (const AssociationAcceptorType& x);

    // Description
    //
    typedef ::xml_schema::String DescriptionType;
    typedef ::xsd::cxx::tree::optional< DescriptionType > DescriptionOptional;
    typedef ::xsd::cxx::tree::traits< DescriptionType, char > DescriptionTraits;

    const DescriptionOptional&
    Description () const;

    DescriptionOptional&
    Description ();

    void
    Description (const DescriptionType& x);

    void
    Description (const DescriptionOptional& x);

    void
    Description (::std::unique_ptr< DescriptionType > p);

    // Constructors.
    //
    DICOMNetworkAE (const AETitleType&,
                    const NetworkConnectionReferenceType&,
                    const AssociationInitiatorType&,
                    const AssociationAcceptorType&);

    DICOMNetworkAE (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    DICOMNetworkAE (const DICOMNetworkAE& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual DICOMNetworkAE*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DICOMNetworkAE&
    operator= (const DICOMNetworkAE& x);

    virtual 
    ~DICOMNetworkAE ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    TransferCapabilitySequence TransferCapability_;
    ApplicationClusterSequence ApplicationCluster_;
    SupportedCharacterSetSequence SupportedCharacterSet_;
    ::xsd::cxx::tree::one< AETitleType > AETitle_;
    ::xsd::cxx::tree::one< NetworkConnectionReferenceType > NetworkConnectionReference_;
    ::xsd::cxx::tree::one< AssociationInitiatorType > AssociationInitiator_;
    ::xsd::cxx::tree::one< AssociationAcceptorType > AssociationAcceptor_;
    DescriptionOptional Description_;
  };

  class DICOMNetworkConnection: public ::xml_schema::Type
  {
    public:
    // TLSCipherSuite
    //
    typedef ::xml_schema::String TLSCipherSuiteType;
    typedef ::xsd::cxx::tree::sequence< TLSCipherSuiteType > TLSCipherSuiteSequence;
    typedef TLSCipherSuiteSequence::iterator TLSCipherSuiteIterator;
    typedef TLSCipherSuiteSequence::const_iterator TLSCipherSuiteConstIterator;
    typedef ::xsd::cxx::tree::traits< TLSCipherSuiteType, char > TLSCipherSuiteTraits;

    const TLSCipherSuiteSequence&
    TLSCipherSuite () const;

    TLSCipherSuiteSequence&
    TLSCipherSuite ();

    void
    TLSCipherSuite (const TLSCipherSuiteSequence& s);

    // id
    //
    typedef ::xml_schema::Id IdType;
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    const IdType&
    id () const;

    IdType&
    id ();

    void
    id (const IdType& x);

    void
    id (::std::unique_ptr< IdType > p);

    // Hostname
    //
    typedef ::xml_schema::String HostnameType;
    typedef ::xsd::cxx::tree::traits< HostnameType, char > HostnameTraits;

    const HostnameType&
    Hostname () const;

    HostnameType&
    Hostname ();

    void
    Hostname (const HostnameType& x);

    void
    Hostname (::std::unique_ptr< HostnameType > p);

    // Port
    //
    typedef ::xml_schema::UnsignedShort PortType;
    typedef ::xsd::cxx::tree::optional< PortType > PortOptional;
    typedef ::xsd::cxx::tree::traits< PortType, char > PortTraits;

    const PortOptional&
    Port () const;

    PortOptional&
    Port ();

    void
    Port (const PortType& x);

    void
    Port (const PortOptional& x);

    // Constructors.
    //
    DICOMNetworkConnection (const IdType&,
                            const HostnameType&);

    DICOMNetworkConnection (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    DICOMNetworkConnection (const DICOMNetworkConnection& x,
                            ::xml_schema::Flags f = 0,
                            ::xml_schema::Container* c = 0);

    virtual DICOMNetworkConnection*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DICOMNetworkConnection&
    operator= (const DICOMNetworkConnection& x);

    virtual 
    ~DICOMNetworkConnection ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    TLSCipherSuiteSequence TLSCipherSuite_;
    ::xsd::cxx::tree::one< IdType > id_;
    ::xsd::cxx::tree::one< HostnameType > Hostname_;
    PortOptional Port_;
  };

  class DICOMDeviceDescriptor: public ::CDM::AbstractMDSDescriptor
  {
    public:
    // NetworkAE
    //
    typedef ::CDM::DICOMNetworkAE NetworkAEType;
    typedef ::xsd::cxx::tree::sequence< NetworkAEType > NetworkAESequence;
    typedef NetworkAESequence::iterator NetworkAEIterator;
    typedef NetworkAESequence::const_iterator NetworkAEConstIterator;
    typedef ::xsd::cxx::tree::traits< NetworkAEType, char > NetworkAETraits;

    const NetworkAESequence&
    NetworkAE () const;

    NetworkAESequence&
    NetworkAE ();

    void
    NetworkAE (const NetworkAESequence& s);

    // NetworkConnection
    //
    typedef ::CDM::DICOMNetworkConnection NetworkConnectionType;
    typedef ::xsd::cxx::tree::sequence< NetworkConnectionType > NetworkConnectionSequence;
    typedef NetworkConnectionSequence::iterator NetworkConnectionIterator;
    typedef NetworkConnectionSequence::const_iterator NetworkConnectionConstIterator;
    typedef ::xsd::cxx::tree::traits< NetworkConnectionType, char > NetworkConnectionTraits;

    const NetworkConnectionSequence&
    NetworkConnection () const;

    NetworkConnectionSequence&
    NetworkConnection ();

    void
    NetworkConnection (const NetworkConnectionSequence& s);

    // SoftwareVersion
    //
    typedef ::xml_schema::String SoftwareVersionType;
    typedef ::xsd::cxx::tree::sequence< SoftwareVersionType > SoftwareVersionSequence;
    typedef SoftwareVersionSequence::iterator SoftwareVersionIterator;
    typedef SoftwareVersionSequence::const_iterator SoftwareVersionConstIterator;
    typedef ::xsd::cxx::tree::traits< SoftwareVersionType, char > SoftwareVersionTraits;

    const SoftwareVersionSequence&
    SoftwareVersion () const;

    SoftwareVersionSequence&
    SoftwareVersion ();

    void
    SoftwareVersion (const SoftwareVersionSequence& s);

    // InstitutionName
    //
    typedef ::CDM::LocalizedText InstitutionNameType;
    typedef ::xsd::cxx::tree::sequence< InstitutionNameType > InstitutionNameSequence;
    typedef InstitutionNameSequence::iterator InstitutionNameIterator;
    typedef InstitutionNameSequence::const_iterator InstitutionNameConstIterator;
    typedef ::xsd::cxx::tree::traits< InstitutionNameType, char > InstitutionNameTraits;

    const InstitutionNameSequence&
    InstitutionName () const;

    InstitutionNameSequence&
    InstitutionName ();

    void
    InstitutionName (const InstitutionNameSequence& s);

    // InstitutionAddress
    //
    typedef ::CDM::LocalizedText InstitutionAddressType;
    typedef ::xsd::cxx::tree::sequence< InstitutionAddressType > InstitutionAddressSequence;
    typedef InstitutionAddressSequence::iterator InstitutionAddressIterator;
    typedef InstitutionAddressSequence::const_iterator InstitutionAddressConstIterator;
    typedef ::xsd::cxx::tree::traits< InstitutionAddressType, char > InstitutionAddressTraits;

    const InstitutionAddressSequence&
    InstitutionAddress () const;

    InstitutionAddressSequence&
    InstitutionAddress ();

    void
    InstitutionAddress (const InstitutionAddressSequence& s);

    // InstitutionalDepartmentName
    //
    typedef ::CDM::LocalizedText InstitutionalDepartmentNameType;
    typedef ::xsd::cxx::tree::sequence< InstitutionalDepartmentNameType > InstitutionalDepartmentNameSequence;
    typedef InstitutionalDepartmentNameSequence::iterator InstitutionalDepartmentNameIterator;
    typedef InstitutionalDepartmentNameSequence::const_iterator InstitutionalDepartmentNameConstIterator;
    typedef ::xsd::cxx::tree::traits< InstitutionalDepartmentNameType, char > InstitutionalDepartmentNameTraits;

    const InstitutionalDepartmentNameSequence&
    InstitutionalDepartmentName () const;

    InstitutionalDepartmentNameSequence&
    InstitutionalDepartmentName ();

    void
    InstitutionalDepartmentName (const InstitutionalDepartmentNameSequence& s);

    // PrimaryDeviceType
    //
    typedef ::CDM::LocalizedText PrimaryDeviceTypeType;
    typedef ::xsd::cxx::tree::sequence< PrimaryDeviceTypeType > PrimaryDeviceTypeSequence;
    typedef PrimaryDeviceTypeSequence::iterator PrimaryDeviceTypeIterator;
    typedef PrimaryDeviceTypeSequence::const_iterator PrimaryDeviceTypeConstIterator;
    typedef ::xsd::cxx::tree::traits< PrimaryDeviceTypeType, char > PrimaryDeviceTypeTraits;

    const PrimaryDeviceTypeSequence&
    PrimaryDeviceType () const;

    PrimaryDeviceTypeSequence&
    PrimaryDeviceType ();

    void
    PrimaryDeviceType (const PrimaryDeviceTypeSequence& s);

    // PublicCertificate
    //
    typedef ::xml_schema::Base64Binary PublicCertificateType;
    typedef ::xsd::cxx::tree::sequence< PublicCertificateType > PublicCertificateSequence;
    typedef PublicCertificateSequence::iterator PublicCertificateIterator;
    typedef PublicCertificateSequence::const_iterator PublicCertificateConstIterator;
    typedef ::xsd::cxx::tree::traits< PublicCertificateType, char > PublicCertificateTraits;

    const PublicCertificateSequence&
    PublicCertificate () const;

    PublicCertificateSequence&
    PublicCertificate ();

    void
    PublicCertificate (const PublicCertificateSequence& s);

    // Description
    //
    typedef ::xml_schema::String DescriptionType;
    typedef ::xsd::cxx::tree::optional< DescriptionType > DescriptionOptional;
    typedef ::xsd::cxx::tree::traits< DescriptionType, char > DescriptionTraits;

    const DescriptionOptional&
    Description () const;

    DescriptionOptional&
    Description ();

    void
    Description (const DescriptionType& x);

    void
    Description (const DescriptionOptional& x);

    void
    Description (::std::unique_ptr< DescriptionType > p);

    // StationName
    //
    typedef ::xml_schema::String StationNameType;
    typedef ::xsd::cxx::tree::optional< StationNameType > StationNameOptional;
    typedef ::xsd::cxx::tree::traits< StationNameType, char > StationNameTraits;

    const StationNameOptional&
    StationName () const;

    StationNameOptional&
    StationName ();

    void
    StationName (const StationNameType& x);

    void
    StationName (const StationNameOptional& x);

    void
    StationName (::std::unique_ptr< StationNameType > p);

    // IssuerOfPatientID
    //
    typedef ::xml_schema::String IssuerOfPatientIDType;
    typedef ::xsd::cxx::tree::optional< IssuerOfPatientIDType > IssuerOfPatientIDOptional;
    typedef ::xsd::cxx::tree::traits< IssuerOfPatientIDType, char > IssuerOfPatientIDTraits;

    const IssuerOfPatientIDOptional&
    IssuerOfPatientID () const;

    IssuerOfPatientIDOptional&
    IssuerOfPatientID ();

    void
    IssuerOfPatientID (const IssuerOfPatientIDType& x);

    void
    IssuerOfPatientID (const IssuerOfPatientIDOptional& x);

    void
    IssuerOfPatientID (::std::unique_ptr< IssuerOfPatientIDType > p);

    // Constructors.
    //
    DICOMDeviceDescriptor (const HandleType&,
                           const ContextType&);

    DICOMDeviceDescriptor (const HandleType&,
                           ::std::unique_ptr< ContextType >);

    DICOMDeviceDescriptor (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    DICOMDeviceDescriptor (const DICOMDeviceDescriptor& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual DICOMDeviceDescriptor*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DICOMDeviceDescriptor&
    operator= (const DICOMDeviceDescriptor& x);

    virtual 
    ~DICOMDeviceDescriptor ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    NetworkAESequence NetworkAE_;
    NetworkConnectionSequence NetworkConnection_;
    SoftwareVersionSequence SoftwareVersion_;
    InstitutionNameSequence InstitutionName_;
    InstitutionAddressSequence InstitutionAddress_;
    InstitutionalDepartmentNameSequence InstitutionalDepartmentName_;
    PrimaryDeviceTypeSequence PrimaryDeviceType_;
    PublicCertificateSequence PublicCertificate_;
    DescriptionOptional Description_;
    StationNameOptional StationName_;
    IssuerOfPatientIDOptional IssuerOfPatientID_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace CDM
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace CDM
{
  void
  operator<< (::xercesc::DOMElement&, const DICOMTransferRole&);

  void
  operator<< (::xercesc::DOMAttr&, const DICOMTransferRole&);

  void
  operator<< (::xml_schema::ListStream&,
              const DICOMTransferRole&);

  void
  operator<< (::xercesc::DOMElement&, const DICOMTransferCapability&);

  void
  operator<< (::xercesc::DOMElement&, const DICOMNetworkAE&);

  void
  operator<< (::xercesc::DOMElement&, const DICOMNetworkConnection&);

  void
  operator<< (::xercesc::DOMElement&, const DICOMDeviceDescriptor&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // DICOMDEVICE_DESCRIPTION_HXX
