# A quick how-to to create the necessary certificate files with openssl. (WIP!)


# THIS IS IMPORTANT! KEEP IT SAFE!
openssl genrsa -des3 -out ca.key 4096
# THIS IS IMPORTANT! KEEP IT SAFE!

# IMPORTANT: The value you enter when asked for 'Common Name' MUST be different than in the sdc certificate !
openssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 -out ca.pem


# Now we generate a certificate for each server:
# IMPORTANT: The value you enter when asked for 'Common Name' MUST be different than in the ca ccertificate !

openssl genrsa -out userkey.pem 2048

# Generate a CSR (Certificate Signing Request) with this key:
openssl req -new -key userkey.pem -out sdccert.csr

# Verify (If no errors, proceed):
openssl req -in sdccert.csr -noout -text

# Sign it 1st time: (NOTE: Use -CAcreateserial only with the first time you sign a certificate):
openssl x509 -req -in sdccert.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out sdccert.pem -days 500 -sha256
# 2nd time and later (NOTE: Use the -CAserial option)
openssl x509 -req -in sdccert.csr -CA ca.pem -CAkey ca.key -CAserial -out sdccert.pem -days 500 -sha256

# Verify it:
openssl x509 -in sdccert.pem -text -noout

# You should now have:
- ca.key (KEEP THIS ONE SAFE!)
- ca.pem (Your root certificate. Can be used to sign other certificates, but this is the root authority, every other certificate will always refer to this one.)
- ca.srl (Contains the CAs serial number. Incremented each time you sign a new certificate.)

# 1st generated sdc certificate
- sdccert.pem (A signed sdc certificate (1st child in the chain). Can be used to sign other certificates.)
- userkey.pem
- sdccert.csr
(Note: To convert .key to .pem: openssl rsa -in userkey.key -text > private.pem)

# If necessary you can extract the public key:
openssl rsa -pubout -in userkey.pem -out public.pem

# Test! (WIP)
openssl verify -verbose -x509_strict -CAfile ca.pem sdccert.pem

# Install the Files:
# Calc the hash:
openssl x509 -noout -hash -in <FILENAME>

# Create a symbolic link (add it to /usr/lib/ssl or check with openssl version -d):
ln -s ca.pem `openssl x509 -hash -noout -in ca.pem`.0
