Update to version 4.3.2

- Removed unused tclap library files from include folder

Update to version 4.3.1

- Changed default behaviour of setting endpoint reference
- Replaced Poco::Timestamp and Poco::Timespan with std::chrono counterparts
- Replaced some Poco::Mutex with std::mutex
- Fixed Examples discoverEndpointReference with new UUIDv5 calculation

Update to version 4.3.0

- Centralized UUID generation. EPRs are per default now UUIDv5 and of type urn:uuid:<UUIDv5>.
- UUIDv5 generation is seeded with SDC Namespace UUID according to IEEE-11073 20701 Annex A.
- MessageIDs are of type urn:uuid<UUID> (random time based, MAC Address seeded)
- Subscription IDs remain of type <UUID> (random time based, MAC Address seeded)
- EpisodicMetricReport now updates MdibVersion
- Removed some deprecated functions in ServiceManager


Update to version 4.2.3

- Fixed SSL bug in HTTP exchange code


Update to version 4.2.2

- All unit tests passing.
- Merged reevaluateAlertCondition Fix from master.

Update to version 4.2.1

- Removed SSLHandler and moved functionality to SDCConfig->SSLConfig
- Fixed UUID generation for MessageID. Discovery (in ConnectionLost and MultiSDC UnitTests) now works properly.
- Reworked / Fixed some UnitTests

Update to version 4.2.0

- Introduces SDCConfig (NetworkConfig / SSLConfig) to SDCInstance
- Fixed Discovery
- Fixed Application Level Transmission Delay (APP_MAX_DELAY) related bug.


Update to version 4.1.1

- Upgrade Poco from 1.9.0 to 1.9.2 to include some bugfixes.
- Some small tweaks to CMake configuration.

Update to version 4.1.0

- Rudimentary SSL Implementation [experimental]
- See Examples/SSL: ExampleProviderSSL and ExampleConsumerSSL as well as Examples/SSL/doc/
- OpenSSL (libssl-dev) needed to build SDCLib now
- Further work on cmake/Modules

Update to version 4.0.3

- Added CMake install instructions to install SDCLib and Poco header and lib files.

Update to version 4.0.2

- Removed remainings of "OSC"lib


Update to version 4.0.1

- Bugfixes related to Examples and Porthandling
- SDCInstances now choses a random MDPWS port to listen by default (Parameter = 0)

Update to version 4.0.0

- API changes
- Implemented SDCInstance: Provider / ServiceManager now need SDCInstance. Allows binding to individual network adapters.
- Bugfixes
- incompatible to former versions of SDCLib!

Update to version 3.1.0 final standard: 

- Update to latest standard version
- Standard xsd can be found here: http://standards.ieee.org/downloads/11073/

Update to version 3.0.2 D10_2017_10_05_rev2:

- SDCProvider and SDCConsumer network bindings are separately configurable


Update to version 3.0.1 D10_2017_10_05_rev2:

- Portable to Windows systems, mind that xerces and xsd header files and xerces .lib files must be downloaded seperately
- Compilable / Runnable with Visual Studio 2013 (tested with XSD 4.0), Visual Studio 2015, Visual Studio 2017 (tested  with XSD 4.0, used msvcr120.dll from VS13, via CMake integrated in VS17)
- Bugfixes 

Update to version 3.0.0 D10_2017_10_05_rev2:

- Nomenclature changed: OSC(P)* -> SDC*
- State handlers are templated now. Old API state handler classes deleted. 		
- Use e.g. SDCProviderMDStateHandler<NumericMetricState> / SDCConsumerMDStateHandler<NumericMetricState> instead.
- Unified state handlers: No multistate handlers anymore. Multistates are also handled by SDCConsumerEventHandler. Use one handler per state and / or define a state handler for the descriptor that comprises all the multiple context state



Update to version 2.1.0 D10_2017_10_05_rev2:

- updated to new participant model (data model), standard version: Draft 10 Revision 2
- implemented code generator for data model XSD wrapper classes
- API adapted: 
	- MDIB classes have no (publicly accessable) default constructor, user has to pass mandatory MDIB fields to the constructor (security feature)
	- findState(), requestState() adapted (returing smart pointers instead of using referenced object)
	
Update to version 2.0.1:

- sdcProvider expanded: able to load MDDescription from xml file
- Selectable number of attempts to open a socket if port is blocked in OSCLibrary 
- Bugfixes


Upgrade to version 2.0.0:

- new architecture for higher stability and security
- new API: finalized (not derivable) API-classes (see ExampleProject.cpp for an implementation example of a service provider, service consumer and state handlers)
- incompatible to former versions of OSClib 1.X.X 
