/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };


  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	int msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }

}

namespace Swig {
  namespace {
    jclass jclass_OSCLibJNI = NULL;
    jmethodID director_methids[82];
  }
}

#include "osdm.hxx"

#include "OSCLib/OSCLibrary.h"
#include "OSCLib/Data/OSCP/MDIB/ActivateOperationDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/AlertConditionDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/AlertConditionReference.h"
#include "OSCLib/Data/OSCP/MDIB/AlertConditionState.h"
#include "OSCLib/Data/OSCP/MDIB/AlertSignalDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/AlertSignalState.h"
#include "OSCLib/Data/OSCP/MDIB/AlertSystemDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/AlertSystemState.h"
#include "OSCLib/Data/OSCP/MDIB/Annotation.h"
#include "OSCLib/Data/OSCP/MDIB/Base64Binary.h"
#include "OSCLib/Data/OSCP/MDIB/BaseDemographics.h"
#include "OSCLib/Data/OSCP/MDIB/CalibrationInfo.h"
#include "OSCLib/Data/OSCP/MDIB/CauseInfo.h"
#include "OSCLib/Data/OSCP/MDIB/ChannelDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/ClinicalInfo.h"
#include "OSCLib/Data/OSCP/MDIB/ClockDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/ClockState.h"
#include "OSCLib/Data/OSCP/MDIB/CodedValue.h"
#include "OSCLib/Data/OSCP/MDIB/ComponentState.h"
#include "OSCLib/Data/OSCP/MDIB/DateTime.h"
#include "OSCLib/Data/OSCP/MDIB/Defaults.h"
#include "OSCLib/Data/OSCP/MDIB/DICOMDeviceDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/DICOMNetworkAE.h"
#include "OSCLib/Data/OSCP/MDIB/DICOMNetworkConnection.h"
#include "OSCLib/Data/OSCP/MDIB/DICOMTransferCapability.h"
#include "OSCLib/Data/OSCP/MDIB/Duration.h"
#include "OSCLib/Data/OSCP/MDIB/EnsembleContextDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/EnsembleContextState.h"
#include "OSCLib/Data/OSCP/MDIB/EnumMappings.h"
#include "OSCLib/Data/OSCP/MDIB/EnumNomenRef.h"
#include "OSCLib/Data/OSCP/MDIB/EnumStringMetricDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/EnumStringMetricState.h"
#include "OSCLib/Data/OSCP/MDIB/HydraMDSDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/HydraMDSState.h"
#include "OSCLib/Data/OSCP/MDIB/ImagingProcedure.h"
#include "OSCLib/Data/OSCP/MDIB/InstanceIdentifier.h"
#include "OSCLib/Data/OSCP/MDIB/Language.h"
#include "OSCLib/Data/OSCP/MDIB/LimitAlertConditionDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/LimitAlertConditionState.h"
#include "OSCLib/Data/OSCP/MDIB/LocalizedText.h"
#include "OSCLib/Data/OSCP/MDIB/LocationContextDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/LocationContextState.h"
#include "OSCLib/Data/OSCP/MDIB/MDDescription.h"
#include "OSCLib/Data/OSCP/MDIB/MDIBContainer.h"
#include "OSCLib/Data/OSCP/MDIB/MDIB-fwd.h"
#include "OSCLib/Data/OSCP/MDIB/MDState.h"
#include "OSCLib/Data/OSCP/MDIB/Measure.h"
#include "OSCLib/Data/OSCP/MDIB/MeasurementState.h"
#include "OSCLib/Data/OSCP/MDIB/NumericMetricDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/NumericMetricState.h"
#include "OSCLib/Data/OSCP/MDIB/NumericMetricValue.h"
#include "OSCLib/Data/OSCP/MDIB/OperationInvocationContext.h"
#include "OSCLib/Data/OSCP/MDIB/OperationState.h"
#include "OSCLib/Data/OSCP/MDIB/OperatorContextDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/OperatorContextState.h"
#include "OSCLib/Data/OSCP/MDIB/OrderDetail.h"
#include "OSCLib/Data/OSCP/MDIB/Order.h"
#include "OSCLib/Data/OSCP/MDIB/PatientContextDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/PatientContextState.h"
#include "OSCLib/Data/OSCP/MDIB/PatientDemographicsCoreData.h"
#include "OSCLib/Data/OSCP/MDIB/PersonParticipation.h"
#include "OSCLib/Data/OSCP/MDIB/PersonReference.h"
#include "OSCLib/Data/OSCP/MDIB/ProductionSpecification.h"
#include "OSCLib/Data/OSCP/MDIB/Range.h"
#include "OSCLib/Data/OSCP/MDIB/RealTimeSampleArrayMetricDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/RealTimeSampleArrayMetricState.h"
#include "OSCLib/Data/OSCP/MDIB/RealTimeSampleArrayValue.h"
#include "OSCLib/Data/OSCP/MDIB/ReferencedVersion.h"
#include "OSCLib/Data/OSCP/MDIB/RemedyInfo.h"
#include "OSCLib/Data/OSCP/MDIB/RTValueType.h"
#include "OSCLib/Data/OSCP/MDIB/SampleIndex.h"
#include "OSCLib/Data/OSCP/MDIB/SCODescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/SetAlertStateOperationDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/SetContextOperationDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/SetRangeOperationDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/SetStringOperationDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/SetValueOperationDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/StringMetricDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/StringMetricState.h"
#include "OSCLib/Data/OSCP/MDIB/StringMetricValue.h"
#include "OSCLib/Data/OSCP/MDIB/SystemContext.h"
#include "OSCLib/Data/OSCP/MDIB/SystemMetaData.h"
#include "OSCLib/Data/OSCP/MDIB/Timestamp.h"
#include "OSCLib/Data/OSCP/MDIB/TimeZone.h"
#include "OSCLib/Data/OSCP/MDIB/VersionCounter.h"
#include "OSCLib/Data/OSCP/MDIB/VMDDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/WorkflowContextDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/WorkflowContextState.h"
#include "OSCLib/Data/OSCP/FutureInvocationState.h"
#include "OSCLib/Data/OSCP/OSCPCachedProvider.h"
#include "OSCLib/Data/OSCP/OSCPConsumerEventHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerAlertConditionStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerAlertSignalStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerAlertSystemStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerConnectionLostHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerContextStateChangedHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerEnumStringMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumer.h"
#include "OSCLib/Data/OSCP/OSCPConsumerLimitAlertConditionStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerNumericMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerRealTimeSampleArrayMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerStringMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerSubscriptionLostHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderMDStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderActivateOperationHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderAlertConditionStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderAlertSignalStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderAlertSystemStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderClockStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderComponentStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderContextStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderEnumStringMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProvider.h"
#include "OSCLib/Data/OSCP/OSCPProviderHydraMDSStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderLimitAlertConditionStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderNumericMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderRealTimeSampleArrayMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderStringMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPServiceManager.h"
#include "OSCLib/Dev/DeviceCharacteristics.h"

using namespace std;
using namespace OSCLib;
using namespace OSCLib::Cli;
using namespace OSCLib::Util;
using namespace OSCLib::Data::OSCP;



#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <stdexcept>


#include <deque>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include <string>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< char >::const_reference std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::const_reference std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__get(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__set(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,int i,std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::CodedValue >::const_reference std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__get(std::vector< OSCLib::Data::OSCP::CodedValue > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__set(std::vector< OSCLib::Data::OSCP::CodedValue > *self,int i,std::vector< OSCLib::Data::OSCP::CodedValue >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LocalizedText >::const_reference std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__get(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__set(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,int i,std::vector< OSCLib::Data::OSCP::LocalizedText >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::VMDDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::VMDDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertConditionState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__get(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__set(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,int i,std::vector< OSCLib::Data::OSCP::AlertConditionState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSignalState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__get(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__set(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,int i,std::vector< OSCLib::Data::OSCP::AlertSignalState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSystemState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__get(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__set(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,int i,std::vector< OSCLib::Data::OSCP::AlertSystemState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Annotation >::const_reference std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__get(std::vector< OSCLib::Data::OSCP::Annotation > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__set(std::vector< OSCLib::Data::OSCP::Annotation > *self,int i,std::vector< OSCLib::Data::OSCP::Annotation >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Base64Binary >::const_reference std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__get(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__set(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,int i,std::vector< OSCLib::Data::OSCP::Base64Binary >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::BaseDemographics >::const_reference std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__get(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__set(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,int i,std::vector< OSCLib::Data::OSCP::BaseDemographics >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::CauseInfo >::const_reference std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__get(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__set(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,int i,std::vector< OSCLib::Data::OSCP::CauseInfo >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ClinicalInfo >::const_reference std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__get(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__set(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,int i,std::vector< OSCLib::Data::OSCP::ClinicalInfo >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ClockDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::ClockDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ClockState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__get(std::vector< OSCLib::Data::OSCP::ClockState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__set(std::vector< OSCLib::Data::OSCP::ClockState > *self,int i,std::vector< OSCLib::Data::OSCP::ClockState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ComponentState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__get(std::vector< OSCLib::Data::OSCP::ComponentState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__set(std::vector< OSCLib::Data::OSCP::ComponentState > *self,int i,std::vector< OSCLib::Data::OSCP::ComponentState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::const_reference std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__get(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__set(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,int i,std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::const_reference std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__get(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__set(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,int i,std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::const_reference std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__get(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__set(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,int i,std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnsembleContextState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__get(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__set(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,int i,std::vector< OSCLib::Data::OSCP::EnsembleContextState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnumNomenRef >::const_reference std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__get(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__set(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,int i,std::vector< OSCLib::Data::OSCP::EnumNomenRef >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__get(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__set(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,int i,std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::HydraMDSState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__get(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__set(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,int i,std::vector< OSCLib::Data::OSCP::HydraMDSState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ImagingProcedure >::const_reference std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__get(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__set(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,int i,std::vector< OSCLib::Data::OSCP::ImagingProcedure >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::const_reference std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__get(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__set(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,int i,std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__get(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__set(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,int i,std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LocationContextState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__get(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__set(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,int i,std::vector< OSCLib::Data::OSCP::LocationContextState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Measure >::const_reference std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__get(std::vector< OSCLib::Data::OSCP::Measure > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__set(std::vector< OSCLib::Data::OSCP::Measure > *self,int i,std::vector< OSCLib::Data::OSCP::Measure >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::NumericMetricState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__get(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__set(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,int i,std::vector< OSCLib::Data::OSCP::NumericMetricState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::OperatorContextState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__get(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__set(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,int i,std::vector< OSCLib::Data::OSCP::OperatorContextState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::PatientContextState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__get(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__set(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,int i,std::vector< OSCLib::Data::OSCP::PatientContextState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::PersonParticipation >::const_reference std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__get(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__set(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,int i,std::vector< OSCLib::Data::OSCP::PersonParticipation >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ProductionSpecification >::const_reference std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__get(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__set(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,int i,std::vector< OSCLib::Data::OSCP::ProductionSpecification >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Range >::const_reference std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__get(std::vector< OSCLib::Data::OSCP::Range > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__set(std::vector< OSCLib::Data::OSCP::Range > *self,int i,std::vector< OSCLib::Data::OSCP::Range >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__get(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__set(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,int i,std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::const_reference std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__get(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__set(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,int i,std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::StringMetricState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__get(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__set(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,int i,std::vector< OSCLib::Data::OSCP::StringMetricState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OSCLib::Data::OSCP::WorkflowContextState >::const_reference std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__get(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__set(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,int i,std::vector< OSCLib::Data::OSCP::WorkflowContextState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "OSCLibJava_wrap.h"

SwigDirector_OSCPCachedProvider::SwigDirector_OSCPCachedProvider(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPCachedProvider(), Swig::Director(jenv) {
}

SwigDirector_OSCPCachedProvider::~SwigDirector_OSCPCachedProvider() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPCachedProvider::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPCachedProvider");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
  }
}


SwigDirector_OSCPConsumerEventHandler::SwigDirector_OSCPConsumerEventHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPConsumerEventHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPConsumerEventHandler::~SwigDirector_OSCPConsumerEventHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPConsumerEventHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong joic = 0 ;
  jint jis  ;
  
  if (!swig_override[0]) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jis = (jint) is;
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[0], swigjobj, joic, jis);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_OSCPConsumerEventHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerEventHandler::getHandle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[1], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerEventHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPConsumerEventHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onOperationInvoked", "(Losclib/OperationInvocationContext;Losclib/InvocationState;)V", NULL 
    },
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPConsumerEventHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPConsumerAlertConditionStateHandler::SwigDirector_OSCPConsumerAlertConditionStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPConsumerAlertConditionStateHandler::~SwigDirector_OSCPConsumerAlertConditionStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPConsumerAlertConditionStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong joic = 0 ;
  jint jis  ;
  
  if (!swig_override[0]) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jis = (jint) is;
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[2], swigjobj, joic, jis);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler::onOperationInvoked ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_OSCPConsumerAlertConditionStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler::getHandle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[3], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPConsumerAlertConditionStateHandler::onStateChanged(OSCLib::Data::OSCP::AlertConditionState const &state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler::onStateChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::AlertConditionState **)&jstate = (OSCLib::Data::OSCP::AlertConditionState *) &state; 
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[4], swigjobj, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler::onStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OSCPConsumerAlertConditionStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onOperationInvoked", "(Losclib/OperationInvocationContext;Losclib/InvocationState;)V", NULL 
    },
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChanged", "(Losclib/AlertConditionState;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPConsumerAlertConditionStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPConsumerAlertSignalStateHandler::SwigDirector_OSCPConsumerAlertSignalStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPConsumerAlertSignalStateHandler::~SwigDirector_OSCPConsumerAlertSignalStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPConsumerAlertSignalStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong joic = 0 ;
  jint jis  ;
  
  if (!swig_override[0]) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jis = (jint) is;
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[5], swigjobj, joic, jis);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler::onOperationInvoked ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_OSCPConsumerAlertSignalStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler::getHandle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[6], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPConsumerAlertSignalStateHandler::onStateChanged(OSCLib::Data::OSCP::AlertSignalState const &state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler::onStateChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::AlertSignalState **)&jstate = (OSCLib::Data::OSCP::AlertSignalState *) &state; 
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[7], swigjobj, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler::onStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OSCPConsumerAlertSignalStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onOperationInvoked", "(Losclib/OperationInvocationContext;Losclib/InvocationState;)V", NULL 
    },
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChanged", "(Losclib/AlertSignalState;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPConsumerAlertSignalStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPConsumerAlertSystemStateHandler::SwigDirector_OSCPConsumerAlertSystemStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPConsumerAlertSystemStateHandler::~SwigDirector_OSCPConsumerAlertSystemStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPConsumerAlertSystemStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong joic = 0 ;
  jint jis  ;
  
  if (!swig_override[0]) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jis = (jint) is;
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[8], swigjobj, joic, jis);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler::onOperationInvoked ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_OSCPConsumerAlertSystemStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler::getHandle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[9], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPConsumerAlertSystemStateHandler::onStateChanged(OSCLib::Data::OSCP::AlertSystemState const &state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler::onStateChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::AlertSystemState **)&jstate = (OSCLib::Data::OSCP::AlertSystemState *) &state; 
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[10], swigjobj, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler::onStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OSCPConsumerAlertSystemStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onOperationInvoked", "(Losclib/OperationInvocationContext;Losclib/InvocationState;)V", NULL 
    },
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChanged", "(Losclib/AlertSystemState;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPConsumerAlertSystemStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPConsumerConnectionLostHandler::SwigDirector_OSCPConsumerConnectionLostHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPConsumerConnectionLostHandler::~SwigDirector_OSCPConsumerConnectionLostHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPConsumerConnectionLostHandler::onConnectionLost() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler::onConnectionLost.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[11], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler::onConnectionLost ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OSCPConsumerConnectionLostHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onConnectionLost", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPConsumerConnectionLostHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPConsumerContextStateChangedHandler::SwigDirector_OSCPConsumerContextStateChangedHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPConsumerContextStateChangedHandler::~SwigDirector_OSCPConsumerContextStateChangedHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPConsumerContextStateChangedHandler::onContextStateChanged(std::vector< std::string > const &handles) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhandles = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler::onContextStateChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::vector< std::string > **)&jhandles = (std::vector< std::string > *) &handles; 
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[12], swigjobj, jhandles);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler::onContextStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OSCPConsumerContextStateChangedHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onContextStateChanged", "(Losclib/StringVector;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPConsumerContextStateChangedHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPConsumerEnumStringMetricStateHandler::SwigDirector_OSCPConsumerEnumStringMetricStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPConsumerEnumStringMetricStateHandler::~SwigDirector_OSCPConsumerEnumStringMetricStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPConsumerEnumStringMetricStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong joic = 0 ;
  jint jis  ;
  
  if (!swig_override[0]) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jis = (jint) is;
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[13], swigjobj, joic, jis);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler::onOperationInvoked ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_OSCPConsumerEnumStringMetricStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler::getHandle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[14], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPConsumerEnumStringMetricStateHandler::onStateChanged(OSCLib::Data::OSCP::EnumStringMetricState const &state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler::onStateChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::EnumStringMetricState **)&jstate = (OSCLib::Data::OSCP::EnumStringMetricState *) &state; 
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[15], swigjobj, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler::onStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OSCPConsumerEnumStringMetricStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onOperationInvoked", "(Losclib/OperationInvocationContext;Losclib/InvocationState;)V", NULL 
    },
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChanged", "(Losclib/EnumStringMetricState;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPConsumerEnumStringMetricStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::SwigDirector_OSCPConsumerLimitAlertConditionStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::~SwigDirector_OSCPConsumerLimitAlertConditionStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong joic = 0 ;
  jint jis  ;
  
  if (!swig_override[0]) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jis = (jint) is;
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[16], swigjobj, joic, jis);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler::onOperationInvoked ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler::getHandle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[17], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::onStateChanged(OSCLib::Data::OSCP::LimitAlertConditionState const &state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler::onStateChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jstate = (OSCLib::Data::OSCP::LimitAlertConditionState *) &state; 
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[18], swigjobj, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler::onStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onOperationInvoked", "(Losclib/OperationInvocationContext;Losclib/InvocationState;)V", NULL 
    },
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChanged", "(Losclib/LimitAlertConditionState;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPConsumerLimitAlertConditionStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPConsumerNumericMetricStateHandler::SwigDirector_OSCPConsumerNumericMetricStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPConsumerNumericMetricStateHandler::~SwigDirector_OSCPConsumerNumericMetricStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPConsumerNumericMetricStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong joic = 0 ;
  jint jis  ;
  
  if (!swig_override[0]) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jis = (jint) is;
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[19], swigjobj, joic, jis);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler::onOperationInvoked ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_OSCPConsumerNumericMetricStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler::getHandle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[20], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPConsumerNumericMetricStateHandler::onStateChanged(OSCLib::Data::OSCP::NumericMetricState const &state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler::onStateChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::NumericMetricState **)&jstate = (OSCLib::Data::OSCP::NumericMetricState *) &state; 
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[21], swigjobj, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler::onStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OSCPConsumerNumericMetricStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onOperationInvoked", "(Losclib/OperationInvocationContext;Losclib/InvocationState;)V", NULL 
    },
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChanged", "(Losclib/NumericMetricState;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPConsumerNumericMetricStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::~SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong joic = 0 ;
  jint jis  ;
  
  if (!swig_override[0]) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jis = (jint) is;
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[22], swigjobj, joic, jis);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler::onOperationInvoked ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler::getHandle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[23], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::onStateChanged(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler::onStateChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jstate = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &state; 
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[24], swigjobj, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler::onStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onOperationInvoked", "(Losclib/OperationInvocationContext;Losclib/InvocationState;)V", NULL 
    },
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChanged", "(Losclib/RealTimeSampleArrayMetricState;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPConsumerRealTimeSampleArrayMetricStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPConsumerStringMetricStateHandler::SwigDirector_OSCPConsumerStringMetricStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPConsumerStringMetricStateHandler::~SwigDirector_OSCPConsumerStringMetricStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPConsumerStringMetricStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong joic = 0 ;
  jint jis  ;
  
  if (!swig_override[0]) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jis = (jint) is;
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[25], swigjobj, joic, jis);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler::onOperationInvoked ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_OSCPConsumerStringMetricStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler::getHandle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[26], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPConsumerStringMetricStateHandler::onStateChanged(OSCLib::Data::OSCP::StringMetricState const &state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler::onStateChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::StringMetricState **)&jstate = (OSCLib::Data::OSCP::StringMetricState *) &state; 
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[27], swigjobj, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler::onStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OSCPConsumerStringMetricStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onOperationInvoked", "(Losclib/OperationInvocationContext;Losclib/InvocationState;)V", NULL 
    },
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChanged", "(Losclib/StringMetricState;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPConsumerStringMetricStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderMDStateHandler::SwigDirector_OSCPProviderMDStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderMDStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderMDStateHandler::~SwigDirector_OSCPProviderMDStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderMDStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderMDStateHandler::getHandle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[28], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderMDStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderMDStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderMDStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderActivateOperationHandler::SwigDirector_OSCPProviderActivateOperationHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderActivateOperationHandler::~SwigDirector_OSCPProviderActivateOperationHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderActivateOperationHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler::getHandle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[29], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderActivateOperationHandler::onActivateRequest(OSCLib::Data::OSCP::MDIBContainer const &mdib, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmdib = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[1]) {
    return OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler::onActivateRequest(mdib,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::MDIBContainer **)&jmdib = (OSCLib::Data::OSCP::MDIBContainer *) &mdib; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[30], swigjobj, jmdib, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler::onActivateRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderActivateOperationHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onActivateRequest", "(Losclib/MDIBContainer;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderActivateOperationHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderAlertConditionStateHandler::SwigDirector_OSCPProviderAlertConditionStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderAlertConditionStateHandler::~SwigDirector_OSCPProviderAlertConditionStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderAlertConditionStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::getHandle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[31], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderAlertConditionStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::AlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[1]) {
    return OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::AlertConditionState **)&jstate = (OSCLib::Data::OSCP::AlertConditionState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[32], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderAlertConditionStateHandler::sourceHasChanged(std::string const &sourceHandle) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jsourceHandle = 0 ;
  
  if (!swig_override[2]) {
    OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::sourceHasChanged(sourceHandle);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsourceHandle = jenv->NewStringUTF((&sourceHandle)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[33], swigjobj, jsourceHandle);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::sourceHasChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

OSCLib::Data::OSCP::AlertConditionState SwigDirector_OSCPProviderAlertConditionStateHandler::getState() {
  OSCLib::Data::OSCP::AlertConditionState c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::AlertConditionState *argp ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::getState.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[34], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::AlertConditionState **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::AlertConditionState");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::getState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderAlertConditionStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/AlertConditionState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "sourceHasChanged", "(Ljava/lang/String;)V", NULL 
    },
    {
      "getState", "()Losclib/AlertConditionState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderAlertConditionStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderAlertSignalStateHandler::SwigDirector_OSCPProviderAlertSignalStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderAlertSignalStateHandler::~SwigDirector_OSCPProviderAlertSignalStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderAlertSignalStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::getHandle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[35], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderAlertSignalStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::AlertSignalState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[1]) {
    return OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::AlertSignalState **)&jstate = (OSCLib::Data::OSCP::AlertSignalState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[36], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::AlertSignalState SwigDirector_OSCPProviderAlertSignalStateHandler::getState() {
  OSCLib::Data::OSCP::AlertSignalState c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::AlertSignalState *argp ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::getState.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[37], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::AlertSignalState **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::AlertSignalState");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::getState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderAlertSignalStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/AlertSignalState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "getState", "()Losclib/AlertSignalState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderAlertSignalStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderAlertSystemStateHandler::SwigDirector_OSCPProviderAlertSystemStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderAlertSystemStateHandler::~SwigDirector_OSCPProviderAlertSystemStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderAlertSystemStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::getHandle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[38], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderAlertSystemStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::AlertSystemState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[1]) {
    return OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::AlertSystemState **)&jstate = (OSCLib::Data::OSCP::AlertSystemState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[39], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::AlertSystemState SwigDirector_OSCPProviderAlertSystemStateHandler::getState() {
  OSCLib::Data::OSCP::AlertSystemState c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::AlertSystemState *argp ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::getState.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[40], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::AlertSystemState **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::AlertSystemState");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::getState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderAlertSystemStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/AlertSystemState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "getState", "()Losclib/AlertSystemState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderAlertSystemStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderClockStateHandler::SwigDirector_OSCPProviderClockStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderClockStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderClockStateHandler::~SwigDirector_OSCPProviderClockStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderClockStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProviderClockStateHandler::getHandle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[41], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderClockStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::ClockState SwigDirector_OSCPProviderClockStateHandler::getState() {
  OSCLib::Data::OSCP::ClockState c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::ClockState *argp ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderClockStateHandler::getState.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[42], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::ClockState **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::ClockState");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderClockStateHandler::getState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderClockStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "getState", "()Losclib/ClockState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderClockStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderComponentStateHandler::SwigDirector_OSCPProviderComponentStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderComponentStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderComponentStateHandler::~SwigDirector_OSCPProviderComponentStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderComponentStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProviderComponentStateHandler::getHandle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[43], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderComponentStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::ComponentState SwigDirector_OSCPProviderComponentStateHandler::getState() {
  OSCLib::Data::OSCP::ComponentState c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::ComponentState *argp ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderComponentStateHandler::getState.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[44], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::ComponentState **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::ComponentState");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderComponentStateHandler::getState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderComponentStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "getState", "()Losclib/ComponentState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderComponentStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderContextStateHandler::SwigDirector_OSCPProviderContextStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderContextStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderContextStateHandler::~SwigDirector_OSCPProviderContextStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderContextStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getHandle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[45], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderContextStateHandler::onStateChangeRequest(std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &ecStates, std::vector< OSCLib::Data::OSCP::LocationContextState > const &lcStates, std::vector< OSCLib::Data::OSCP::OperatorContextState > const &ocStates, std::vector< OSCLib::Data::OSCP::PatientContextState > const &pcStates, std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &wcStates, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jecStates = 0 ;
  jlong jlcStates = 0 ;
  jlong jocStates = 0 ;
  jlong jpcStates = 0 ;
  jlong jwcStates = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[1]) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::onStateChangeRequest(ecStates,lcStates,ocStates,pcStates,wcStates,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jecStates = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) &ecStates; 
    *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jlcStates = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) &lcStates; 
    *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jocStates = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) &ocStates; 
    *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jpcStates = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) &pcStates; 
    *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jwcStates = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) &wcStates; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[46], swigjobj, jecStates, jlcStates, jocStates, jpcStates, jwcStates, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderContextStateHandler::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< OSCLib::Data::OSCP::EnsembleContextState > SwigDirector_OSCPProviderContextStateHandler::getEnsembleContextStates() {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *argp ;
  
  if (!swig_override[2]) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getEnsembleContextStates();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[47], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< OSCLib::Data::OSCP::EnsembleContextState >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getEnsembleContextStates ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< OSCLib::Data::OSCP::LocationContextState > SwigDirector_OSCPProviderContextStateHandler::getLocationContextStates() {
  std::vector< OSCLib::Data::OSCP::LocationContextState > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *argp ;
  
  if (!swig_override[3]) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getLocationContextStates();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[48], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< OSCLib::Data::OSCP::LocationContextState >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getLocationContextStates ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< OSCLib::Data::OSCP::OperatorContextState > SwigDirector_OSCPProviderContextStateHandler::getOperatorContextStates() {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *argp ;
  
  if (!swig_override[4]) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getOperatorContextStates();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[49], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< OSCLib::Data::OSCP::OperatorContextState >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getOperatorContextStates ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< OSCLib::Data::OSCP::PatientContextState > SwigDirector_OSCPProviderContextStateHandler::getPatientContextStates() {
  std::vector< OSCLib::Data::OSCP::PatientContextState > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *argp ;
  
  if (!swig_override[5]) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getPatientContextStates();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[50], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< OSCLib::Data::OSCP::PatientContextState >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getPatientContextStates ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< OSCLib::Data::OSCP::WorkflowContextState > SwigDirector_OSCPProviderContextStateHandler::getWorkflowContextStates() {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *argp ;
  
  if (!swig_override[6]) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getWorkflowContextStates();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[51], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< OSCLib::Data::OSCP::WorkflowContextState >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getWorkflowContextStates ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderContextStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/EnsembleContextStateVector;Losclib/LocationContextStateVector;Losclib/OperatorContextStateVector;Losclib/PatientContextStateVector;Losclib/WorkflowContextStateVector;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "getEnsembleContextStates", "()Losclib/EnsembleContextStateVector;", NULL 
    },
    {
      "getLocationContextStates", "()Losclib/LocationContextStateVector;", NULL 
    },
    {
      "getOperatorContextStates", "()Losclib/OperatorContextStateVector;", NULL 
    },
    {
      "getPatientContextStates", "()Losclib/PatientContextStateVector;", NULL 
    },
    {
      "getWorkflowContextStates", "()Losclib/WorkflowContextStateVector;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderContextStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderEnumStringMetricStateHandler::SwigDirector_OSCPProviderEnumStringMetricStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderEnumStringMetricStateHandler::~SwigDirector_OSCPProviderEnumStringMetricStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderEnumStringMetricStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::getHandle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[52], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderEnumStringMetricStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::EnumStringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[1]) {
    return OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::EnumStringMetricState **)&jstate = (OSCLib::Data::OSCP::EnumStringMetricState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[53], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::EnumStringMetricState SwigDirector_OSCPProviderEnumStringMetricStateHandler::getState() {
  OSCLib::Data::OSCP::EnumStringMetricState c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::EnumStringMetricState *argp ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::getState.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[54], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::EnumStringMetricState");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::getState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderEnumStringMetricStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/EnumStringMetricState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "getState", "()Losclib/EnumStringMetricState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderEnumStringMetricStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProvider::SwigDirector_OSCPProvider(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProvider(), Swig::Director(jenv) {
}

SwigDirector_OSCPProvider::~SwigDirector_OSCPProvider() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


OSCLib::Data::OSCP::MDIBContainer SwigDirector_OSCPProvider::getMDIB() {
  OSCLib::Data::OSCP::MDIBContainer c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::MDIBContainer *argp ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProvider::getMDIB();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[55], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::MDIBContainer **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::MDIBContainer");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProvider::getMDIB ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::MDDescription SwigDirector_OSCPProvider::getMDDescription() {
  OSCLib::Data::OSCP::MDDescription c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::MDDescription *argp ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProvider::getMDDescription.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[56], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::MDDescription **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::MDDescription");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProvider::getMDDescription ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::MDState SwigDirector_OSCPProvider::getMDState() {
  OSCLib::Data::OSCP::MDState c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::MDState *argp ;
  
  if (!swig_override[2]) {
    return OSCLib::Data::OSCP::OSCPProvider::getMDState();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[57], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::MDState **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::MDState");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProvider::getMDState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::EnumStringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[3]) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::EnumStringMetricState **)&jstate = (OSCLib::Data::OSCP::EnumStringMetricState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[58], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::NumericMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[4]) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::NumericMetricState **)&jstate = (OSCLib::Data::OSCP::NumericMetricState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[59], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::StringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[5]) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::StringMetricState **)&jstate = (OSCLib::Data::OSCP::StringMetricState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[60], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[6]) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jstate = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[61], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::AlertSystemState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[7]) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::AlertSystemState **)&jstate = (OSCLib::Data::OSCP::AlertSystemState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[62], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::AlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[8]) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::AlertConditionState **)&jstate = (OSCLib::Data::OSCP::AlertConditionState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[63], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::AlertSignalState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[9]) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::AlertSignalState **)&jstate = (OSCLib::Data::OSCP::AlertSignalState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[64], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::LimitAlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[10]) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jstate = (OSCLib::Data::OSCP::LimitAlertConditionState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[65], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProvider::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getMDIB", "()Losclib/MDIBContainer;", NULL 
    },
    {
      "getMDDescription", "()Losclib/MDDescription;", NULL 
    },
    {
      "getMDState", "()Losclib/MDState;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/EnumStringMetricState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/NumericMetricState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/StringMetricState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/RealTimeSampleArrayMetricState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/AlertSystemState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/AlertConditionState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/AlertSignalState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/LimitAlertConditionState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProvider");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 11; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderHydraMDSStateHandler::SwigDirector_OSCPProviderHydraMDSStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderHydraMDSStateHandler::~SwigDirector_OSCPProviderHydraMDSStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderHydraMDSStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler::getHandle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[66], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::HydraMDSState SwigDirector_OSCPProviderHydraMDSStateHandler::getState() {
  OSCLib::Data::OSCP::HydraMDSState c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::HydraMDSState *argp ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler::getState.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[67], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::HydraMDSState **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::HydraMDSState");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler::getState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderHydraMDSStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "getState", "()Losclib/HydraMDSState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderHydraMDSStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderLimitAlertConditionStateHandler::SwigDirector_OSCPProviderLimitAlertConditionStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderLimitAlertConditionStateHandler::~SwigDirector_OSCPProviderLimitAlertConditionStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderLimitAlertConditionStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::getHandle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[68], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderLimitAlertConditionStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::LimitAlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[1]) {
    return OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jstate = (OSCLib::Data::OSCP::LimitAlertConditionState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[69], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderLimitAlertConditionStateHandler::sourceHasChanged(std::string const &sourceHandle) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jsourceHandle = 0 ;
  
  if (!swig_override[2]) {
    OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::sourceHasChanged(sourceHandle);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsourceHandle = jenv->NewStringUTF((&sourceHandle)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[70], swigjobj, jsourceHandle);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::sourceHasChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

OSCLib::Data::OSCP::LimitAlertConditionState SwigDirector_OSCPProviderLimitAlertConditionStateHandler::getState() {
  OSCLib::Data::OSCP::LimitAlertConditionState c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::LimitAlertConditionState *argp ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::getState.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[71], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::LimitAlertConditionState");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::getState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderLimitAlertConditionStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/LimitAlertConditionState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "sourceHasChanged", "(Ljava/lang/String;)V", NULL 
    },
    {
      "getState", "()Losclib/LimitAlertConditionState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderLimitAlertConditionStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderNumericMetricStateHandler::SwigDirector_OSCPProviderNumericMetricStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderNumericMetricStateHandler::~SwigDirector_OSCPProviderNumericMetricStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderNumericMetricStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::getHandle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[72], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderNumericMetricStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::NumericMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[1]) {
    return OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::NumericMetricState **)&jstate = (OSCLib::Data::OSCP::NumericMetricState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[73], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::NumericMetricState SwigDirector_OSCPProviderNumericMetricStateHandler::getState() {
  OSCLib::Data::OSCP::NumericMetricState c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::NumericMetricState *argp ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::getState.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[74], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::NumericMetricState **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::NumericMetricState");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::getState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderNumericMetricStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/NumericMetricState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "getState", "()Losclib/NumericMetricState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderNumericMetricStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::~SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::getHandle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[75], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[1]) {
    return OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jstate = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[76], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::RealTimeSampleArrayMetricState SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::getState() {
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *argp ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::getState.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[77], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::RealTimeSampleArrayMetricState");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::getState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/RealTimeSampleArrayMetricState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "getState", "()Losclib/RealTimeSampleArrayMetricState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderRealTimeSampleArrayMetricStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPProviderStringMetricStateHandler::SwigDirector_OSCPProviderStringMetricStateHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPProviderStringMetricStateHandler::~SwigDirector_OSCPProviderStringMetricStateHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_OSCPProviderStringMetricStateHandler::getHandle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::getHandle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[78], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::getHandle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderStringMetricStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::StringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate = 0 ;
  jlong joic = 0 ;
  
  if (!swig_override[1]) {
    return OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::onStateChangeRequest(state,oic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OSCLib::Data::OSCP::StringMetricState **)&jstate = (OSCLib::Data::OSCP::StringMetricState *) &state; 
    *(OSCLib::Data::OSCP::OperationInvocationContext **)&joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[79], swigjobj, jstate, joic);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::onStateChangeRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

OSCLib::Data::OSCP::StringMetricState SwigDirector_OSCPProviderStringMetricStateHandler::getState() {
  OSCLib::Data::OSCP::StringMetricState c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  OSCLib::Data::OSCP::StringMetricState *argp ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::getState.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[80], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(OSCLib::Data::OSCP::StringMetricState **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OSCLib::Data::OSCP::StringMetricState");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::getState ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OSCPProviderStringMetricStateHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getHandle", "()Ljava/lang/String;", NULL 
    },
    {
      "onStateChangeRequest", "(Losclib/StringMetricState;Losclib/OperationInvocationContext;)Losclib/InvocationState;", NULL 
    },
    {
      "getState", "()Losclib/StringMetricState;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPProviderStringMetricStateHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OSCPHelloReceivedHandler::SwigDirector_OSCPHelloReceivedHandler(JNIEnv *jenv) : OSCLib::Data::OSCP::OSCPHelloReceivedHandler(), Swig::Director(jenv) {
}

SwigDirector_OSCPHelloReceivedHandler::~SwigDirector_OSCPHelloReceivedHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OSCPHelloReceivedHandler::helloReceived(std::string const &epr) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jepr = 0 ;
  
  if (!swig_override[0]) {
    OSCLib::Data::OSCP::OSCPHelloReceivedHandler::helloReceived(epr);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jepr = jenv->NewStringUTF((&epr)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_OSCLibJNI, Swig::director_methids[81], swigjobj, jepr);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OSCLib::Data::OSCP::OSCPHelloReceivedHandler::helloReceived ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OSCPHelloReceivedHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "helloReceived", "(Ljava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("osclib/OSCPHelloReceivedHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1CharVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< char > *)new std::vector< char >();
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1CharVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< char >::size_type arg1 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< char >::size_type)jarg1; 
  result = (std::vector< char > *)new std::vector< char >(arg1);
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CharVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = ((std::vector< char > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CharVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = ((std::vector< char > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CharVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_CharVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = (bool)((std::vector< char > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CharVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CharVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  std::vector< char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  temp2 = (std::vector< char >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
}


SWIGEXPORT jchar JNICALL Java_osclib_OSCLibJNI_CharVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jchar)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CharVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  std::vector< char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__set(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1CharVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DoubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DoubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DoubleVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DoubleVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DoubleVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DoubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DoubleVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_DoubleVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DoubleVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1DoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)new std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >();
  *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::size_type arg1 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)new std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >(arg1);
  *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumerVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumerVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumerVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumerVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::value_type **)&jresult = *result ? new std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__set(arg1,arg2,(std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1CodedValueVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::CodedValue > *)new std::vector< OSCLib::Data::OSCP::CodedValue >();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1CodedValueVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::CodedValue > *)new std::vector< OSCLib::Data::OSCP::CodedValue >(arg1);
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CodedValueVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::CodedValue > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CodedValueVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::CodedValue > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CodedValueVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::CodedValue >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_CodedValueVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::CodedValue > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CodedValueVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CodedValueVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::CodedValue >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::CodedValue >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::CodedValue >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CodedValueVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::CodedValue >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::CodedValue >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::CodedValue >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CodedValueVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::CodedValue >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::CodedValue >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::CodedValue >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::CodedValue const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1CodedValueVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LocalizedTextVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)new std::vector< OSCLib::Data::OSCP::LocalizedText >();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LocalizedTextVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)new std::vector< OSCLib::Data::OSCP::LocalizedText >(arg1);
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocalizedTextVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LocalizedText > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocalizedTextVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LocalizedText > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocalizedTextVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::LocalizedText >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocalizedTextVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::LocalizedText > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocalizedTextVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocalizedTextVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::LocalizedText >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::LocalizedText >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::LocalizedText >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocalizedTextVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LocalizedText >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::LocalizedText >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocalizedTextVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::LocalizedText >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::LocalizedText >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::LocalizedText const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1LocalizedTextVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ChannelDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)new std::vector< OSCLib::Data::OSCP::ChannelDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ChannelDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)new std::vector< OSCLib::Data::OSCP::ChannelDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ChannelDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ChannelDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ChannelDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ChannelDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ChannelDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::ChannelDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ChannelDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1HydraMDSDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)new std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1HydraMDSDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)new std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::HydraMDSDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1HydraMDSDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1VMDDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)new std::vector< OSCLib::Data::OSCP::VMDDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1VMDDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)new std::vector< OSCLib::Data::OSCP::VMDDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::VMDDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::VMDDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_VMDDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_VMDDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::VMDDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_VMDDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_VMDDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::VMDDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::VMDDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::VMDDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::VMDDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::VMDDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_VMDDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::VMDDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::VMDDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::VMDDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1VMDDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ActivateOperationDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ActivateOperationDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::ActivateOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ActivateOperationDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertConditionDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)new std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertConditionDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)new std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertConditionDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertConditionStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)new std::vector< OSCLib::Data::OSCP::AlertConditionState >();
  *(std::vector< OSCLib::Data::OSCP::AlertConditionState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertConditionStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)new std::vector< OSCLib::Data::OSCP::AlertConditionState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::AlertConditionState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertConditionState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertConditionState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertConditionState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::AlertConditionState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::AlertConditionState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::AlertConditionState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::AlertConditionState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertConditionState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::AlertConditionState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::AlertConditionState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::AlertConditionState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::AlertConditionState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertConditionStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertConditionState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSignalDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)new std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSignalDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)new std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertSignalDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSignalStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)new std::vector< OSCLib::Data::OSCP::AlertSignalState >();
  *(std::vector< OSCLib::Data::OSCP::AlertSignalState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSignalStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)new std::vector< OSCLib::Data::OSCP::AlertSignalState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::AlertSignalState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSignalState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSignalState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSignalStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertSignalState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::AlertSignalState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSignalStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSignalStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::AlertSignalState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::AlertSignalState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::AlertSignalState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSignalState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::AlertSignalState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSignalStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::AlertSignalState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::AlertSignalState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::AlertSignalState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertSignalStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSignalState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSystemDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)new std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSystemDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)new std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertSystemDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSystemStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)new std::vector< OSCLib::Data::OSCP::AlertSystemState >();
  *(std::vector< OSCLib::Data::OSCP::AlertSystemState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSystemStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)new std::vector< OSCLib::Data::OSCP::AlertSystemState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::AlertSystemState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSystemState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSystemState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSystemStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertSystemState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::AlertSystemState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSystemStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSystemStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::AlertSystemState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::AlertSystemState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::AlertSystemState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSystemState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::AlertSystemState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSystemStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::AlertSystemState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::AlertSystemState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::AlertSystemState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertSystemStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::AlertSystemState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AnnotationVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::Annotation > *)new std::vector< OSCLib::Data::OSCP::Annotation >();
  *(std::vector< OSCLib::Data::OSCP::Annotation > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AnnotationVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::Annotation > *)new std::vector< OSCLib::Data::OSCP::Annotation >(arg1);
  *(std::vector< OSCLib::Data::OSCP::Annotation > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AnnotationVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Annotation > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Annotation > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AnnotationVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Annotation > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Annotation > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AnnotationVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Annotation > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::Annotation >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AnnotationVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Annotation > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::Annotation > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AnnotationVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Annotation > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AnnotationVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Annotation > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::Annotation >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::Annotation >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::Annotation >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AnnotationVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Annotation >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Annotation > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Annotation >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::Annotation >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AnnotationVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Annotation >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Annotation > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::Annotation >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::Annotation >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::Annotation const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AnnotationVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Annotation > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Base64BinaryVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)new std::vector< OSCLib::Data::OSCP::Base64Binary >();
  *(std::vector< OSCLib::Data::OSCP::Base64Binary > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Base64BinaryVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)new std::vector< OSCLib::Data::OSCP::Base64Binary >(arg1);
  *(std::vector< OSCLib::Data::OSCP::Base64Binary > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Base64BinaryVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Base64Binary > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Base64Binary > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Base64BinaryVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Base64Binary > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Base64Binary > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Base64BinaryVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Base64Binary > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::Base64Binary >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Base64BinaryVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Base64Binary > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::Base64Binary > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Base64BinaryVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Base64Binary > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Base64BinaryVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Base64Binary > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::Base64Binary >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::Base64Binary >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::Base64Binary >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Base64BinaryVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Base64Binary > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Base64Binary >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::Base64Binary >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Base64BinaryVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Base64Binary > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::Base64Binary >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::Base64Binary >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::Base64Binary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1Base64BinaryVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Base64Binary > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1BaseDemographicsVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)new std::vector< OSCLib::Data::OSCP::BaseDemographics >();
  *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1BaseDemographicsVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)new std::vector< OSCLib::Data::OSCP::BaseDemographics >(arg1);
  *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_BaseDemographicsVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::BaseDemographics > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_BaseDemographicsVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::BaseDemographics > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_BaseDemographicsVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::BaseDemographics >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_BaseDemographicsVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::BaseDemographics > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_BaseDemographicsVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_BaseDemographicsVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::BaseDemographics >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::BaseDemographics >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::BaseDemographics >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_BaseDemographicsVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::BaseDemographics >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::BaseDemographics >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_BaseDemographicsVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::BaseDemographics >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::BaseDemographics >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::BaseDemographics const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1BaseDemographicsVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1CauseInfoVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)new std::vector< OSCLib::Data::OSCP::CauseInfo >();
  *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1CauseInfoVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)new std::vector< OSCLib::Data::OSCP::CauseInfo >(arg1);
  *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CauseInfoVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::CauseInfo > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CauseInfoVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::CauseInfo > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CauseInfoVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::CauseInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_CauseInfoVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::CauseInfo > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CauseInfoVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CauseInfoVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::CauseInfo >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::CauseInfo >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::CauseInfo >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CauseInfoVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::CauseInfo >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::CauseInfo >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CauseInfoVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::CauseInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::CauseInfo >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::CauseInfo const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1CauseInfoVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ClinicalInfoVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)new std::vector< OSCLib::Data::OSCP::ClinicalInfo >();
  *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ClinicalInfoVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)new std::vector< OSCLib::Data::OSCP::ClinicalInfo >(arg1);
  *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClinicalInfoVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ClinicalInfo > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClinicalInfoVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ClinicalInfo > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClinicalInfoVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClinicalInfoVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::ClinicalInfo > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClinicalInfoVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClinicalInfoVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::ClinicalInfo >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ClinicalInfo >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::ClinicalInfo >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClinicalInfoVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ClinicalInfo >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::ClinicalInfo >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClinicalInfoVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::ClinicalInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ClinicalInfo >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::ClinicalInfo const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ClinicalInfoVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ClockDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)new std::vector< OSCLib::Data::OSCP::ClockDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::ClockDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ClockDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)new std::vector< OSCLib::Data::OSCP::ClockDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::ClockDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ClockDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ClockDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClockDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::ClockDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClockDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClockDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::ClockDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ClockDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::ClockDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ClockDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::ClockDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClockDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::ClockDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ClockDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::ClockDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ClockDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ClockStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::ClockState > *)new std::vector< OSCLib::Data::OSCP::ClockState >();
  *(std::vector< OSCLib::Data::OSCP::ClockState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ClockStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::ClockState > *)new std::vector< OSCLib::Data::OSCP::ClockState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::ClockState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ClockState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ClockState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClockStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ClockState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::ClockState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClockStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClockStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::ClockState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ClockState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::ClockState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClockState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ClockState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::ClockState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClockStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClockState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::ClockState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ClockState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::ClockState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ClockStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ClockState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ComponentStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::ComponentState > *)new std::vector< OSCLib::Data::OSCP::ComponentState >();
  *(std::vector< OSCLib::Data::OSCP::ComponentState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ComponentStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::ComponentState > *)new std::vector< OSCLib::Data::OSCP::ComponentState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::ComponentState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ComponentStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ComponentState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ComponentState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ComponentStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ComponentState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ComponentState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ComponentStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ComponentState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ComponentState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ComponentState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::ComponentState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ComponentStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ComponentState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ComponentStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ComponentState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::ComponentState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ComponentState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::ComponentState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ComponentStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ComponentState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ComponentState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ComponentState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::ComponentState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ComponentStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ComponentState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ComponentState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::ComponentState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ComponentState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::ComponentState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ComponentStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ComponentState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMDeviceDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)new std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMDeviceDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)new std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::DICOMDeviceDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1DICOMDeviceDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMNetworkAEVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)new std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >();
  *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMNetworkAEVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)new std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >(arg1);
  *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAEVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAEVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAEVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAEVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAEVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAEVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAEVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAEVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::DICOMNetworkAE const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1DICOMNetworkAEVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMNetworkConnectionVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)new std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >();
  *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMNetworkConnectionVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)new std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >(arg1);
  *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnectionVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnectionVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnectionVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnectionVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnectionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnectionVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnectionVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnectionVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::DICOMNetworkConnection const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1DICOMNetworkConnectionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMTransferCapabilityVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)new std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >();
  *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMTransferCapabilityVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)new std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >(arg1);
  *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapabilityVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapabilityVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapabilityVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapabilityVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapabilityVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapabilityVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapabilityVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapabilityVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::DICOMTransferCapability const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1DICOMTransferCapabilityVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnsembleContextStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)new std::vector< OSCLib::Data::OSCP::EnsembleContextState >();
  *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnsembleContextStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)new std::vector< OSCLib::Data::OSCP::EnsembleContextState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnsembleContextState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnsembleContextState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnsembleContextStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::EnsembleContextState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnsembleContextStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnsembleContextStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::EnsembleContextState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::EnsembleContextState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnsembleContextState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::EnsembleContextState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnsembleContextStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::EnsembleContextState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::EnsembleContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1EnsembleContextStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumNomenRefVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)new std::vector< OSCLib::Data::OSCP::EnumNomenRef >();
  *(std::vector< OSCLib::Data::OSCP::EnumNomenRef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumNomenRefVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)new std::vector< OSCLib::Data::OSCP::EnumNomenRef >(arg1);
  *(std::vector< OSCLib::Data::OSCP::EnumNomenRef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumNomenRefVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumNomenRef > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnumNomenRef > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumNomenRefVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumNomenRef > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnumNomenRef > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumNomenRefVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumNomenRef > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumNomenRefVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumNomenRef > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::EnumNomenRef > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumNomenRefVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumNomenRef > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumNomenRefVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumNomenRef > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::EnumNomenRef >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::EnumNomenRef >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::EnumNomenRef >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumNomenRefVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumNomenRef > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnumNomenRef >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::EnumNomenRef >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumNomenRefVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumNomenRef > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::EnumNomenRef >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::EnumNomenRef >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::EnumNomenRef const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1EnumNomenRefVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumNomenRef > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumStringMetricDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumStringMetricDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::EnumStringMetricDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1EnumStringMetricDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumStringMetricStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)new std::vector< OSCLib::Data::OSCP::EnumStringMetricState >();
  *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumStringMetricStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)new std::vector< OSCLib::Data::OSCP::EnumStringMetricState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::EnumStringMetricState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1EnumStringMetricStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1HydraMDSStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)new std::vector< OSCLib::Data::OSCP::HydraMDSState >();
  *(std::vector< OSCLib::Data::OSCP::HydraMDSState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1HydraMDSStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)new std::vector< OSCLib::Data::OSCP::HydraMDSState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::HydraMDSState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::HydraMDSState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::HydraMDSState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_HydraMDSStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::HydraMDSState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::HydraMDSState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_HydraMDSStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_HydraMDSStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::HydraMDSState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::HydraMDSState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::HydraMDSState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::HydraMDSState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::HydraMDSState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_HydraMDSStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::HydraMDSState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::HydraMDSState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::HydraMDSState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1HydraMDSStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::HydraMDSState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ImagingProcedureVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)new std::vector< OSCLib::Data::OSCP::ImagingProcedure >();
  *(std::vector< OSCLib::Data::OSCP::ImagingProcedure > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ImagingProcedureVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)new std::vector< OSCLib::Data::OSCP::ImagingProcedure >(arg1);
  *(std::vector< OSCLib::Data::OSCP::ImagingProcedure > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedureVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ImagingProcedure > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ImagingProcedure > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedureVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ImagingProcedure > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ImagingProcedure > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ImagingProcedureVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ImagingProcedure > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ImagingProcedureVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ImagingProcedure > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::ImagingProcedure > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ImagingProcedureVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ImagingProcedure > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ImagingProcedureVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ImagingProcedure > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::ImagingProcedure >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ImagingProcedure >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::ImagingProcedure >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedureVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ImagingProcedure > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ImagingProcedure >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::ImagingProcedure >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ImagingProcedureVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ImagingProcedure > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::ImagingProcedure >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ImagingProcedure >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::ImagingProcedure const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ImagingProcedureVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ImagingProcedure > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1InstanceIdentifierVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1InstanceIdentifierVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >(arg1);
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_InstanceIdentifierVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_InstanceIdentifierVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_InstanceIdentifierVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_InstanceIdentifierVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_InstanceIdentifierVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_InstanceIdentifierVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_InstanceIdentifierVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_InstanceIdentifierVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::InstanceIdentifier const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1InstanceIdentifierVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LimitAlertConditionDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)new std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LimitAlertConditionDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)new std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1LimitAlertConditionDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LimitAlertConditionStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)new std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >();
  *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LimitAlertConditionStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)new std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1LimitAlertConditionStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LocationContextStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)new std::vector< OSCLib::Data::OSCP::LocationContextState >();
  *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LocationContextStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)new std::vector< OSCLib::Data::OSCP::LocationContextState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LocationContextState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LocationContextState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocationContextStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::LocationContextState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::LocationContextState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocationContextStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocationContextStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::LocationContextState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::LocationContextState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::LocationContextState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LocationContextState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::LocationContextState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocationContextStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::LocationContextState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::LocationContextState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::LocationContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1LocationContextStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1MeasureVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Measure > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::Measure > *)new std::vector< OSCLib::Data::OSCP::Measure >();
  *(std::vector< OSCLib::Data::OSCP::Measure > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1MeasureVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Measure >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::Measure > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::Measure > *)new std::vector< OSCLib::Data::OSCP::Measure >(arg1);
  *(std::vector< OSCLib::Data::OSCP::Measure > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MeasureVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Measure >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Measure > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Measure > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MeasureVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Measure >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Measure > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Measure > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_MeasureVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Measure >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Measure > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::Measure >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MeasureVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Measure > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::Measure > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_MeasureVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Measure > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_MeasureVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Measure >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Measure > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::Measure >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::Measure >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::Measure >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MeasureVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Measure >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Measure > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Measure >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::Measure >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_MeasureVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Measure >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Measure > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::Measure >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::Measure >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::Measure const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1MeasureVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Measure > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1NumericMetricDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1NumericMetricDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::NumericMetricDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1NumericMetricDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1NumericMetricStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)new std::vector< OSCLib::Data::OSCP::NumericMetricState >();
  *(std::vector< OSCLib::Data::OSCP::NumericMetricState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1NumericMetricStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)new std::vector< OSCLib::Data::OSCP::NumericMetricState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::NumericMetricState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::NumericMetricState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::NumericMetricState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::NumericMetricState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::NumericMetricState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::NumericMetricState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::NumericMetricState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::NumericMetricState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::NumericMetricState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::NumericMetricState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::NumericMetricState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::NumericMetricState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::NumericMetricState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1NumericMetricStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::NumericMetricState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OperatorContextStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)new std::vector< OSCLib::Data::OSCP::OperatorContextState >();
  *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OperatorContextStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)new std::vector< OSCLib::Data::OSCP::OperatorContextState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::OperatorContextState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::OperatorContextState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OperatorContextStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::OperatorContextState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::OperatorContextState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OperatorContextStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OperatorContextStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::OperatorContextState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::OperatorContextState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::OperatorContextState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::OperatorContextState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OperatorContextStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::OperatorContextState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::OperatorContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OperatorContextStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PatientContextStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)new std::vector< OSCLib::Data::OSCP::PatientContextState >();
  *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PatientContextStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)new std::vector< OSCLib::Data::OSCP::PatientContextState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::PatientContextState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::PatientContextState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PatientContextStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::PatientContextState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::PatientContextState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PatientContextStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PatientContextStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::PatientContextState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::PatientContextState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::PatientContextState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::PatientContextState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::PatientContextState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PatientContextStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::PatientContextState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::PatientContextState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::PatientContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1PatientContextStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PersonParticipationVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)new std::vector< OSCLib::Data::OSCP::PersonParticipation >();
  *(std::vector< OSCLib::Data::OSCP::PersonParticipation > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PersonParticipationVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)new std::vector< OSCLib::Data::OSCP::PersonParticipation >(arg1);
  *(std::vector< OSCLib::Data::OSCP::PersonParticipation > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonParticipationVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PersonParticipation > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::PersonParticipation > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonParticipationVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PersonParticipation > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::PersonParticipation > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PersonParticipationVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PersonParticipation > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::PersonParticipation >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PersonParticipationVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PersonParticipation > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::PersonParticipation > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PersonParticipationVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PersonParticipation > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PersonParticipationVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PersonParticipation > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::PersonParticipation >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::PersonParticipation >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::PersonParticipation >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonParticipationVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PersonParticipation > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::PersonParticipation >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::PersonParticipation >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PersonParticipationVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PersonParticipation > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::PersonParticipation >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::PersonParticipation >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::PersonParticipation const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1PersonParticipationVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::PersonParticipation > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ProductionSpecificationVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)new std::vector< OSCLib::Data::OSCP::ProductionSpecification >();
  *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ProductionSpecificationVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)new std::vector< OSCLib::Data::OSCP::ProductionSpecification >(arg1);
  *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ProductionSpecificationVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ProductionSpecification > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ProductionSpecificationVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ProductionSpecification > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ProductionSpecificationVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ProductionSpecificationVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::ProductionSpecification > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ProductionSpecificationVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ProductionSpecificationVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::ProductionSpecification >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ProductionSpecification >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::ProductionSpecification >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ProductionSpecificationVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ProductionSpecification >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::ProductionSpecification >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ProductionSpecificationVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::ProductionSpecification >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::ProductionSpecification >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::ProductionSpecification const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ProductionSpecificationVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RangeVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Range > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::Range > *)new std::vector< OSCLib::Data::OSCP::Range >();
  *(std::vector< OSCLib::Data::OSCP::Range > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RangeVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Range >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::Range > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::Range >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::Range > *)new std::vector< OSCLib::Data::OSCP::Range >(arg1);
  *(std::vector< OSCLib::Data::OSCP::Range > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RangeVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Range > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Range > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RangeVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Range > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Range > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RangeVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Range > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::Range >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RangeVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Range > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::Range > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RangeVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Range > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RangeVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Range > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::Range >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::Range >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::Range >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RangeVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Range >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Range > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Range >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::Range >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RangeVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Range >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Range > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::Range >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::Range >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::Range const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1RangeVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::Range > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RealTimeSampleArrayMetricDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RealTimeSampleArrayMetricDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1RealTimeSampleArrayMetricDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RealTimeSampleArrayMetricStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >();
  *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RealTimeSampleArrayMetricStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1RealTimeSampleArrayMetricStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetAlertStateOperationDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetAlertStateOperationDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SetAlertStateOperationDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetContextOperationDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetContextOperationDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::SetContextOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SetContextOperationDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetRangeOperationDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetRangeOperationDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::SetRangeOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SetRangeOperationDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetStringOperationDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetStringOperationDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::SetStringOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SetStringOperationDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetValueOperationDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetValueOperationDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::SetValueOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SetValueOperationDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1StringMetricDescriptorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >();
  *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1StringMetricDescriptorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >(arg1);
  *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::StringMetricDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1StringMetricDescriptorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1StringMetricStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)new std::vector< OSCLib::Data::OSCP::StringMetricState >();
  *(std::vector< OSCLib::Data::OSCP::StringMetricState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1StringMetricStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)new std::vector< OSCLib::Data::OSCP::StringMetricState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::StringMetricState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::StringMetricState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::StringMetricState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringMetricStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::StringMetricState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::StringMetricState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringMetricStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringMetricStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::StringMetricState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::StringMetricState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::StringMetricState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::StringMetricState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::StringMetricState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringMetricStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::StringMetricState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::StringMetricState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::StringMetricState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1StringMetricStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::StringMetricState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1WorkflowContextStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)new std::vector< OSCLib::Data::OSCP::WorkflowContextState >();
  *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1WorkflowContextStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState >::size_type arg1 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState >::size_type)jarg1; 
  result = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)new std::vector< OSCLib::Data::OSCP::WorkflowContextState >(arg1);
  *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::WorkflowContextState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::WorkflowContextState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_WorkflowContextStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jarg1; 
  result = (bool)((std::vector< OSCLib::Data::OSCP::WorkflowContextState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_WorkflowContextStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_WorkflowContextStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::WorkflowContextState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OSCLib::Data::OSCP::WorkflowContextState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::WorkflowContextState >::value_type *) &std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OSCLib::Data::OSCP::WorkflowContextState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_WorkflowContextStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::WorkflowContextState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__set(arg1,arg2,(OSCLib::Data::OSCP::WorkflowContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1WorkflowContextStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCLibrary(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::OSCLibrary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::OSCLibrary *)new OSCLib::OSCLibrary();
  *(OSCLib::OSCLibrary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCLibrary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1scheduleManagerForShutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  OSCLib::Comm::CommunicationManager *arg2 = (OSCLib::Comm::CommunicationManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  arg2 = *(OSCLib::Comm::CommunicationManager **)&jarg2; 
  (arg1)->scheduleManagerForShutdown(arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1scheduleTaskForShutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  SwigValueWrapper< std::shared_ptr< OSCLib::Util::Task > > arg2 ;
  std::shared_ptr< OSCLib::Util::Task > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  argp2 = *(std::shared_ptr< OSCLib::Util::Task > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< OSCLib::Util::Task >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->scheduleTaskForShutdown(arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1processAllScheduledForShutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  (arg1)->processAllScheduledForShutdown();
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1existsManagerScheduledForShutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  result = (bool)(arg1)->existsManagerScheduledForShutdown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::OSCLibrary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::OSCLibrary *)OSCLib::OSCLibrary::getInstance();
  *(OSCLib::OSCLibrary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1startup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  Util::DebugOut::LogLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  arg2 = (Util::DebugOut::LogLevel)jarg2; 
  (arg1)->startup(arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1startup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  (arg1)->startup();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1shutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  (arg1)->shutdown();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1setBindInterface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setBindInterface((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1getBindInterface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  result = (arg1)->getBindInterface();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1setPortStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPortStart(arg2);
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1extractNextPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  result = (int)(arg1)->extractNextPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1readMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  (arg1)->readMessages();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1getNetInterface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  OSCLib::Comm::NetworkInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  result = (OSCLib::Comm::NetworkInterface *)(arg1)->getNetInterface();
  *(OSCLib::Comm::NetworkInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1isInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  result = (bool)(arg1)->isInitialized();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCLibrary_1bindToAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::OSCLibrary **)&jarg1; 
  (arg1)->bindToAll();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ReaderThread(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::ReaderThread *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::ReaderThread *)new OSCLib::ReaderThread();
  *(OSCLib::ReaderThread **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ReaderThread_1runImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::ReaderThread *arg1 = (OSCLib::ReaderThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::ReaderThread **)&jarg1; 
  (arg1)->runImpl();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ReaderThread(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::ReaderThread *arg1 = (OSCLib::ReaderThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::ReaderThread **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ActivateOperationDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)new OSCLib::Data::OSCP::ActivateOperationDescriptor();
  *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ActivateOperationDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ActivateOperationDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)new OSCLib::Data::OSCP::ActivateOperationDescriptor((OSCLib::Data::OSCP::ActivateOperationDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ActivateOperationDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ActivateOperationDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ActivateOperationDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->setType((CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getType();
  *(CodedValue **)&jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getDescriptorVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  arg2 = *(IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1setOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->setOperationTarget((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1getOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getOperationTarget();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1addModifiableElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->addModifiableElement((CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1getModifiableElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getModifiableElements();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1clearModifiableElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  (arg1)->clearModifiableElements();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1setActivationDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  arg2 = *(Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->setActivationDuration((Duration const &)*arg2);
  *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1getActivationDuration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  Duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getActivationDuration();
  *(Duration **)&jresult = new Duration((const Duration &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1getActivationDuration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  arg2 = *(Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Duration & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getActivationDuration(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ActivateOperationDescriptor_1hasActivationDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->hasActivationDuration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertConditionDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *)new OSCLib::Data::OSCP::AlertConditionDescriptor();
  *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertConditionDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *)new OSCLib::Data::OSCP::AlertConditionDescriptor((OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertConditionDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->setType((CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getType();
  *(CodedValue **)&jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getDescriptorVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  arg2 = *(IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1setKind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  AlertConditionKind *arg2 = 0 ;
  AlertConditionKind temp2 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  temp2 = (AlertConditionKind)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->setKind((AlertConditionKind const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1getKind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  AlertConditionKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  result = (AlertConditionKind)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getKind();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1setPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  AlertConditionPriority *arg2 = 0 ;
  AlertConditionPriority temp2 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  temp2 = (AlertConditionPriority)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->setPriority((AlertConditionPriority const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1getPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  AlertConditionPriority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  result = (AlertConditionPriority)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1addSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->addSource((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1getSources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getSources();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1clearSources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  (arg1)->clearSources();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1addCauseInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  CauseInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  arg2 = *(CauseInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CauseInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->addCauseInfo((CauseInfo const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1getCauseInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getCauseInfo();
  *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jresult = new std::vector< OSCLib::Data::OSCP::CauseInfo >((const std::vector< OSCLib::Data::OSCP::CauseInfo > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionDescriptor_1clearCauseInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg1; 
  (arg1)->clearCauseInfo();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertConditionReference_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::AlertConditionReference *)new OSCLib::Data::OSCP::AlertConditionReference();
  *(OSCLib::Data::OSCP::AlertConditionReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertConditionReference_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionReference **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionReference const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionReference *)new OSCLib::Data::OSCP::AlertConditionReference((OSCLib::Data::OSCP::AlertConditionReference const &)*arg1);
  *(OSCLib::Data::OSCP::AlertConditionReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertConditionReference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::AlertConditionReference *arg1 = (OSCLib::Data::OSCP::AlertConditionReference *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionReference **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionReference_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::AlertConditionReference *arg1 = (OSCLib::Data::OSCP::AlertConditionReference *) 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionReference **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionReference const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertConditionReference const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionReference_1addHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *arg1 = (OSCLib::Data::OSCP::AlertConditionReference *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionReference **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::AlertConditionReference *) &(arg1)->addHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionReference_1getHandles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *arg1 = (OSCLib::Data::OSCP::AlertConditionReference *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionReference **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionReference const *)arg1)->getHandles();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertConditionState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::AlertConditionState *)new OSCLib::Data::OSCP::AlertConditionState();
  *(OSCLib::Data::OSCP::AlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertConditionState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionState *)new OSCLib::Data::OSCP::AlertConditionState((OSCLib::Data::OSCP::AlertConditionState const &)*arg1);
  *(OSCLib::Data::OSCP::AlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertConditionState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getStateVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1setActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  PausableActivation *arg2 = 0 ;
  PausableActivation temp2 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  temp2 = (PausableActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setActivationState((PausableActivation const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1getActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  PausableActivation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  result = (PausableActivation)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getActivationState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1setRank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setRank((int const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1getRank_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getRank();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1getRank_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getRank(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1hasRank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->hasRank();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1setPresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setPresence((bool const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1getPresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getPresence();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1setObservationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setObservationTime((Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::AlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1getObservationTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getObservationTime();
  *(Timestamp **)&jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1getObservationTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getObservationTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertConditionState_1hasObservationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->hasObservationTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSignalDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *)new OSCLib::Data::OSCP::AlertSignalDescriptor();
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSignalDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *)new OSCLib::Data::OSCP::AlertSignalDescriptor((OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertSignalDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setType((CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getType();
  *(CodedValue **)&jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getDescriptorVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  arg2 = *(IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1setConditionSignaled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setConditionSignaled((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getConditionSignaled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getConditionSignaled();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1setManifestation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  AlertSignalManifestation *arg2 = 0 ;
  AlertSignalManifestation temp2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  temp2 = (AlertSignalManifestation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setManifestation((AlertSignalManifestation const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getManifestation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  AlertSignalManifestation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = (AlertSignalManifestation)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getManifestation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1setLatching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setLatching((bool const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getLatching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getLatching();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1setDefaultSignalGenerationDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  arg2 = *(Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setDefaultSignalGenerationDelay((Duration const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getDefaultSignalGenerationDelay_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  Duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getDefaultSignalGenerationDelay();
  *(Duration **)&jresult = new Duration((const Duration &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getDefaultSignalGenerationDelay_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  arg2 = *(Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Duration & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getDefaultSignalGenerationDelay(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1hasDefaultSignalGenerationDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasDefaultSignalGenerationDelay();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1setSignalDelegationSupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setSignalDelegationSupported((bool const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getSignalDelegationSupported_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getSignalDelegationSupported();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getSignalDelegationSupported_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  arg2 = *(bool **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getSignalDelegationSupported(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1hasSignalDelegationSupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasSignalDelegationSupported();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1setAcknowledgementSupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setAcknowledgementSupported((bool const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getAcknowledgementSupported_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getAcknowledgementSupported();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getAcknowledgementSupported_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  arg2 = *(bool **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getAcknowledgementSupported(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1hasAcknowledgementSupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasAcknowledgementSupported();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1setAcknowledgeTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  arg2 = *(Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setAcknowledgeTimeout((Duration const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getAcknowledgeTimeout_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  Duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getAcknowledgeTimeout();
  *(Duration **)&jresult = new Duration((const Duration &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1getAcknowledgeTimeout_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  arg2 = *(Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Duration & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getAcknowledgeTimeout(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalDescriptor_1hasAcknowledgeTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasAcknowledgeTimeout();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSignalState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::AlertSignalState *)new OSCLib::Data::OSCP::AlertSignalState();
  *(OSCLib::Data::OSCP::AlertSignalState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSignalState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalState *)new OSCLib::Data::OSCP::AlertSignalState((OSCLib::Data::OSCP::AlertSignalState const &)*arg1);
  *(OSCLib::Data::OSCP::AlertSignalState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertSignalState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getStateVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1setLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  PrimaryAlertSignalLocation *arg2 = 0 ;
  PrimaryAlertSignalLocation temp2 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  temp2 = (PrimaryAlertSignalLocation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setLocation((PrimaryAlertSignalLocation const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1getLocation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  PrimaryAlertSignalLocation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  result = (PrimaryAlertSignalLocation)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getLocation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1getLocation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  PrimaryAlertSignalLocation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  arg2 = *(PrimaryAlertSignalLocation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PrimaryAlertSignalLocation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getLocation(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1hasLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->hasLocation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1setSlot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setSlot((int const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1getSlot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getSlot();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1getSlot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getSlot(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1hasSlot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->hasSlot();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1setActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  PausableActivation *arg2 = 0 ;
  PausableActivation temp2 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  temp2 = (PausableActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setActivationState((PausableActivation const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1getActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  PausableActivation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  result = (PausableActivation)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getActivationState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1setPresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  SignalPresence *arg2 = 0 ;
  SignalPresence temp2 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  temp2 = (SignalPresence)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setPresence((SignalPresence const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSignalState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1getPresence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  SignalPresence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  result = (SignalPresence)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getPresence();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1getPresence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  SignalPresence *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  arg2 = *(SignalPresence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SignalPresence & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getPresence(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSignalState_1hasPresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->hasPresence();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSystemDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *)new OSCLib::Data::OSCP::AlertSystemDescriptor();
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSystemDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *)new OSCLib::Data::OSCP::AlertSystemDescriptor((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertSystemDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setType((CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getType();
  *(CodedValue **)&jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getDescriptorVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1setMaxPhysiologicalAlarmListEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setMaxPhysiologicalAlarmListEntries((int const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getMaxPhysiologicalAlarmListEntries_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getMaxPhysiologicalAlarmListEntries();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getMaxPhysiologicalAlarmListEntries_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getMaxPhysiologicalAlarmListEntries(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1hasMaxPhysiologicalAlarmListEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->hasMaxPhysiologicalAlarmListEntries();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1setMaxTechnicalAlarmListEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setMaxTechnicalAlarmListEntries((int const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getMaxTechnicalAlarmListEntries_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getMaxTechnicalAlarmListEntries();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getMaxTechnicalAlarmListEntries_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getMaxTechnicalAlarmListEntries(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1hasMaxTechnicalAlarmListEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->hasMaxTechnicalAlarmListEntries();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1setSelfCheckPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setSelfCheckPeriod((Duration const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getSelfCheckPeriod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  Duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getSelfCheckPeriod();
  *(Duration **)&jresult = new Duration((const Duration &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getSelfCheckPeriod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Duration & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getSelfCheckPeriod(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1hasSelfCheckPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->hasSelfCheckPeriod();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1addAlertSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->addAlertSignal((OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getAlertSignals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getAlertSignals();
  *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >((const std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1clearAlertSignals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  (arg1)->clearAlertSignals();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1addAlertCondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->addAlertCondition((OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getAlertConditions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getAlertConditions();
  *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >((const std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1addLimitAlertCondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  LimitAlertConditionDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  arg2 = *(LimitAlertConditionDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LimitAlertConditionDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->addLimitAlertCondition((LimitAlertConditionDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemDescriptor_1getLimitAlertConditions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getLimitAlertConditions();
  *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >((const std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSystemState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::AlertSystemState *)new OSCLib::Data::OSCP::AlertSystemState();
  *(OSCLib::Data::OSCP::AlertSystemState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1AlertSystemState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemState *)new OSCLib::Data::OSCP::AlertSystemState((OSCLib::Data::OSCP::AlertSystemState const &)*arg1);
  *(OSCLib::Data::OSCP::AlertSystemState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1AlertSystemState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::AlertSystemState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::AlertSystemState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getStateVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1setActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  PausableActivation *arg2 = 0 ;
  PausableActivation temp2 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  temp2 = (PausableActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSystemState *) &(arg1)->setActivationState((PausableActivation const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1getActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  PausableActivation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  result = (PausableActivation)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getActivationState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1setPresentPhysiologicalAlarmConditions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionReference const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemState *) &(arg1)->setPresentPhysiologicalAlarmConditions((OSCLib::Data::OSCP::AlertConditionReference const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1getPresentPhysiologicalAlarmConditions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionReference result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getPresentPhysiologicalAlarmConditions();
  *(OSCLib::Data::OSCP::AlertConditionReference **)&jresult = new OSCLib::Data::OSCP::AlertConditionReference((const OSCLib::Data::OSCP::AlertConditionReference &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1getPresentPhysiologicalAlarmConditions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionReference & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getPresentPhysiologicalAlarmConditions(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1hasPresentPhysiologicalAlarmConditions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->hasPresentPhysiologicalAlarmConditions();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1setPresentTechnicalAlarmConditions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionReference const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemState *) &(arg1)->setPresentTechnicalAlarmConditions((OSCLib::Data::OSCP::AlertConditionReference const &)*arg2);
  *(OSCLib::Data::OSCP::AlertSystemState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1getPresentTechnicalAlarmConditions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionReference result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getPresentTechnicalAlarmConditions();
  *(OSCLib::Data::OSCP::AlertConditionReference **)&jresult = new OSCLib::Data::OSCP::AlertConditionReference((const OSCLib::Data::OSCP::AlertConditionReference &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1getPresentTechnicalAlarmConditions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionReference & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getPresentTechnicalAlarmConditions(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_AlertSystemState_1hasPresentTechnicalAlarmConditions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->hasPresentTechnicalAlarmConditions();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Annotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Annotation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::Annotation *)new OSCLib::Data::OSCP::Annotation();
  *(OSCLib::Data::OSCP::Annotation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Annotation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Annotation *arg1 = 0 ;
  OSCLib::Data::OSCP::Annotation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Annotation **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Annotation const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Annotation *)new OSCLib::Data::OSCP::Annotation((OSCLib::Data::OSCP::Annotation const &)*arg1);
  *(OSCLib::Data::OSCP::Annotation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1Annotation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::Annotation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Annotation_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  OSCLib::Data::OSCP::Annotation *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Annotation **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Annotation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Annotation const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Annotation const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Annotation_1setCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::Annotation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Annotation **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Annotation *) &(arg1)->setCode((CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::Annotation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Annotation_1getCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Annotation **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Annotation const *)arg1)->getCode();
  *(CodedValue **)&jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Annotation_1setSampleIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  SampleIndex *arg2 = 0 ;
  OSCLib::Data::OSCP::Annotation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Annotation **)&jarg1; 
  arg2 = *(SampleIndex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SampleIndex const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Annotation *) &(arg1)->setSampleIndex((SampleIndex const &)*arg2);
  *(OSCLib::Data::OSCP::Annotation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Annotation_1getSampleIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  SampleIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Annotation **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Annotation const *)arg1)->getSampleIndex();
  *(SampleIndex **)&jresult = new SampleIndex((const SampleIndex &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Annotation_1getSampleIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  SampleIndex *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Annotation **)&jarg1; 
  arg2 = *(SampleIndex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SampleIndex & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::Annotation const *)arg1)->getSampleIndex(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Annotation_1hasSampleIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Annotation **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Annotation const *)arg1)->hasSampleIndex();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Base64Binary_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Base64Binary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::Base64Binary *)new OSCLib::Data::OSCP::Base64Binary();
  *(OSCLib::Data::OSCP::Base64Binary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Base64Binary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Base64Binary *arg1 = 0 ;
  OSCLib::Data::OSCP::Base64Binary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Base64Binary **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Base64Binary const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Base64Binary *)new OSCLib::Data::OSCP::Base64Binary((OSCLib::Data::OSCP::Base64Binary const &)*arg1);
  *(OSCLib::Data::OSCP::Base64Binary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1Base64Binary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::Base64Binary *arg1 = (OSCLib::Data::OSCP::Base64Binary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::Base64Binary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Base64Binary_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::Base64Binary *arg1 = (OSCLib::Data::OSCP::Base64Binary *) 0 ;
  OSCLib::Data::OSCP::Base64Binary *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Base64Binary **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Base64Binary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Base64Binary const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Base64Binary const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Base64Binary_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Base64Binary *arg1 = (OSCLib::Data::OSCP::Base64Binary *) 0 ;
  std::vector< char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Base64Binary **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Base64Binary const *)arg1)->getData();
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Base64Binary_1setData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Base64Binary *arg1 = (OSCLib::Data::OSCP::Base64Binary *) 0 ;
  std::vector< char > *arg2 = 0 ;
  OSCLib::Data::OSCP::Base64Binary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Base64Binary **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Base64Binary *) &(arg1)->setData((std::vector< char > const &)*arg2);
  *(OSCLib::Data::OSCP::Base64Binary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1BaseDemographics_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::BaseDemographics *)new OSCLib::Data::OSCP::BaseDemographics();
  *(OSCLib::Data::OSCP::BaseDemographics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1BaseDemographics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::BaseDemographics const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::BaseDemographics *)new OSCLib::Data::OSCP::BaseDemographics((OSCLib::Data::OSCP::BaseDemographics const &)*arg1);
  *(OSCLib::Data::OSCP::BaseDemographics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1BaseDemographics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::BaseDemographics const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::BaseDemographics const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1setGivenname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::BaseDemographics *) &(arg1)->setGivenname((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::BaseDemographics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1getGivenname_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  result = ((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getGivenname();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1getGivenname_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getGivenname(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1hasGivenname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->hasGivenname();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1setFamilyname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::BaseDemographics *) &(arg1)->setFamilyname((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::BaseDemographics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1getFamilyname_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  result = ((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getFamilyname();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1getFamilyname_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getFamilyname(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1hasFamilyname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->hasFamilyname();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1setBirthname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::BaseDemographics *) &(arg1)->setBirthname((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::BaseDemographics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1getBirthname_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  result = ((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getBirthname();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1getBirthname_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getBirthname(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1hasBirthname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->hasBirthname();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1setTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::BaseDemographics *) &(arg1)->setTitle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::BaseDemographics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1getTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  result = ((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getTitle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1getTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getTitle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1hasTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->hasTitle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1addMiddlename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::BaseDemographics *) &(arg1)->addMiddlename((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::BaseDemographics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1getMiddlenames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  result = ((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getMiddlenames();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_BaseDemographics_1clearMiddlenames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg1; 
  (arg1)->clearMiddlenames();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1CalibrationInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::CalibrationInfo *)new OSCLib::Data::OSCP::CalibrationInfo();
  *(OSCLib::Data::OSCP::CalibrationInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1CalibrationInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CalibrationInfo *)new OSCLib::Data::OSCP::CalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg1);
  *(OSCLib::Data::OSCP::CalibrationInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1CalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = (OSCLib::Data::OSCP::CalibrationInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CalibrationInfo_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = (OSCLib::Data::OSCP::CalibrationInfo *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CalibrationInfo_1setComponentCalibrationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = (OSCLib::Data::OSCP::CalibrationInfo *) 0 ;
  CalibrationState *arg2 = 0 ;
  CalibrationState temp2 ;
  OSCLib::Data::OSCP::CalibrationInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg1; 
  temp2 = (CalibrationState)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::CalibrationInfo *) &(arg1)->setComponentCalibrationState((CalibrationState const &)*arg2);
  *(OSCLib::Data::OSCP::CalibrationInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_CalibrationInfo_1getComponentCalibrationState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = (OSCLib::Data::OSCP::CalibrationInfo *) 0 ;
  CalibrationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg1; 
  result = (CalibrationState)((OSCLib::Data::OSCP::CalibrationInfo const *)arg1)->getComponentCalibrationState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_CalibrationInfo_1getComponentCalibrationState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = (OSCLib::Data::OSCP::CalibrationInfo *) 0 ;
  CalibrationState *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg1; 
  arg2 = *(CalibrationState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CalibrationState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::CalibrationInfo const *)arg1)->getComponentCalibrationState(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_CalibrationInfo_1hasComponentCalibrationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = (OSCLib::Data::OSCP::CalibrationInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::CalibrationInfo const *)arg1)->hasComponentCalibrationState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1CauseInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CauseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::CauseInfo *)new OSCLib::Data::OSCP::CauseInfo();
  *(OSCLib::Data::OSCP::CauseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1CauseInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = 0 ;
  OSCLib::Data::OSCP::CauseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CauseInfo **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CauseInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CauseInfo *)new OSCLib::Data::OSCP::CauseInfo((OSCLib::Data::OSCP::CauseInfo const &)*arg1);
  *(OSCLib::Data::OSCP::CauseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1CauseInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::CauseInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CauseInfo_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  OSCLib::Data::OSCP::CauseInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::CauseInfo **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CauseInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CauseInfo const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::CauseInfo const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CauseInfo_1setRemedy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  RemedyInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::CauseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::CauseInfo **)&jarg1; 
  arg2 = *(RemedyInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RemedyInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CauseInfo *) &(arg1)->setRemedy((RemedyInfo const &)*arg2);
  *(OSCLib::Data::OSCP::CauseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CauseInfo_1getRemedy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  RemedyInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CauseInfo **)&jarg1; 
  result = ((OSCLib::Data::OSCP::CauseInfo const *)arg1)->getRemedy();
  *(RemedyInfo **)&jresult = new RemedyInfo((const RemedyInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_CauseInfo_1getRemedy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  RemedyInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::CauseInfo **)&jarg1; 
  arg2 = *(RemedyInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RemedyInfo & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::CauseInfo const *)arg1)->getRemedy(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_CauseInfo_1hasRemedy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CauseInfo **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::CauseInfo const *)arg1)->hasRemedy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CauseInfo_1addDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::CauseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::CauseInfo **)&jarg1; 
  arg2 = *(LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CauseInfo *) &(arg1)->addDescription((LocalizedText const &)*arg2);
  *(OSCLib::Data::OSCP::CauseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CauseInfo_1getDescriptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CauseInfo **)&jarg1; 
  result = ((OSCLib::Data::OSCP::CauseInfo const *)arg1)->getDescriptions();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CauseInfo_1clearDescriptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CauseInfo **)&jarg1; 
  (arg1)->clearDescriptions();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ChannelDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::ChannelDescriptor *)new OSCLib::Data::OSCP::ChannelDescriptor();
  *(OSCLib::Data::OSCP::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ChannelDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ChannelDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *)new OSCLib::Data::OSCP::ChannelDescriptor((OSCLib::Data::OSCP::ChannelDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ChannelDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ChannelDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ChannelDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->setType((CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getType();
  *(CodedValue **)&jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getDescriptorVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1addProductionSpecification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  ProductionSpecification *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(ProductionSpecification **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ProductionSpecification const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->addProductionSpecification((ProductionSpecification const &)*arg2);
  *(OSCLib::Data::OSCP::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getProductionSpecifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getProductionSpecifications();
  *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jresult = new std::vector< OSCLib::Data::OSCP::ProductionSpecification >((const std::vector< OSCLib::Data::OSCP::ProductionSpecification > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1clearProductionSpecifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  (arg1)->clearProductionSpecifications();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1setAlertSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->setAlertSystem((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getAlertSystem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getAlertSystem();
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = new OSCLib::Data::OSCP::AlertSystemDescriptor((const OSCLib::Data::OSCP::AlertSystemDescriptor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getAlertSystem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getAlertSystem(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1hasAlertSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->hasAlertSystem();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getEnumStringMetricDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getEnumStringMetricDescriptors();
  *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getNumericMetricDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getNumericMetricDescriptors();
  *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getStringMetricDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getStringMetricDescriptors();
  *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1getRealTimeSampleArrayMetricDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getRealTimeSampleArrayMetricDescriptors();
  *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1addMetric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  EnumStringMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(EnumStringMetricDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "EnumStringMetricDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->addMetric((EnumStringMetricDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1addMetric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  NumericMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(NumericMetricDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NumericMetricDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->addMetric((NumericMetricDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1addMetric_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  StringMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(StringMetricDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringMetricDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->addMetric((StringMetricDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ChannelDescriptor_1addMetric_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  RealTimeSampleArrayMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg1; 
  arg2 = *(RealTimeSampleArrayMetricDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RealTimeSampleArrayMetricDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->addMetric((RealTimeSampleArrayMetricDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ClinicalInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::ClinicalInfo *)new OSCLib::Data::OSCP::ClinicalInfo();
  *(OSCLib::Data::OSCP::ClinicalInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ClinicalInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClinicalInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClinicalInfo *)new OSCLib::Data::OSCP::ClinicalInfo((OSCLib::Data::OSCP::ClinicalInfo const &)*arg1);
  *(OSCLib::Data::OSCP::ClinicalInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ClinicalInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClinicalInfo_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClinicalInfo const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ClinicalInfo const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClinicalInfo_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClinicalInfo *) &(arg1)->setType((CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::ClinicalInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClinicalInfo_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClinicalInfo const *)arg1)->getType();
  *(CodedValue **)&jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClinicalInfo_1setMeasuredValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::ClinicalInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ClinicalInfo *) &(arg1)->setMeasuredValue((double const &)*arg2);
  *(OSCLib::Data::OSCP::ClinicalInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_ClinicalInfo_1getMeasuredValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg1; 
  result = (double)((OSCLib::Data::OSCP::ClinicalInfo const *)arg1)->getMeasuredValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClinicalInfo_1addRelatedMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  Measure *arg2 = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg1; 
  arg2 = *(Measure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Measure const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClinicalInfo *) &(arg1)->addRelatedMeasurement((Measure const &)*arg2);
  *(OSCLib::Data::OSCP::ClinicalInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClinicalInfo_1getRelatedMeasurements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  std::vector< OSCLib::Data::OSCP::Measure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClinicalInfo const *)arg1)->getRelatedMeasurements();
  *(std::vector< OSCLib::Data::OSCP::Measure > **)&jresult = new std::vector< OSCLib::Data::OSCP::Measure >((const std::vector< OSCLib::Data::OSCP::Measure > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClinicalInfo_1clearRelatedMeasurements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg1; 
  (arg1)->clearRelatedMeasurements();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ClockDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::ClockDescriptor *)new OSCLib::Data::OSCP::ClockDescriptor();
  *(OSCLib::Data::OSCP::ClockDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ClockDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClockDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockDescriptor *)new OSCLib::Data::OSCP::ClockDescriptor((OSCLib::Data::OSCP::ClockDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::ClockDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ClockDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClockDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ClockDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockDescriptor *) &(arg1)->setType((CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::ClockDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getType();
  *(CodedValue **)&jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::ClockDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::ClockDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::ClockDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getDescriptorVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ClockDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::ClockDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  arg2 = *(IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1setResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  arg2 = *(Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockDescriptor *) &(arg1)->setResolution((Duration const &)*arg2);
  *(OSCLib::Data::OSCP::ClockDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1getResolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  Duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getResolution();
  *(Duration **)&jresult = new Duration((const Duration &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1getResolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  arg2 = *(Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Duration & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getResolution(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1hasResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->hasResolution();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1addTimeProtocol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockDescriptor *) &(arg1)->addTimeProtocol((CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::ClockDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1getTimeProtocols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getTimeProtocols();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClockDescriptor_1clearTimeProtocols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg1; 
  (arg1)->clearTimeProtocols();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ClockState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::ClockState *)new OSCLib::Data::OSCP::ClockState();
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ClockState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClockState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockState *)new OSCLib::Data::OSCP::ClockState((OSCLib::Data::OSCP::ClockState const &)*arg1);
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ClockState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ClockState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  OSCLib::Data::OSCP::ClockState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ClockState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClockState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ClockState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_ClockState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_ClockState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getStateVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1setActiveSyncProtocol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setActiveSyncProtocol((CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1getActiveSyncProtocol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getActiveSyncProtocol();
  *(CodedValue **)&jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1getActiveSyncProtocol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getActiveSyncProtocol(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1hasActiveSyncProtocol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasActiveSyncProtocol();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1setDateAndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setDateAndTime((Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1getDateAndTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getDateAndTime();
  *(Timestamp **)&jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1getDateAndTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getDateAndTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1hasDateAndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasDateAndTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1setRemoteSync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setRemoteSync((bool const &)*arg2);
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1getRemoteSync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getRemoteSync();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1setReferenceSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setReferenceSource((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_ClockState_1getReferenceSource_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getReferenceSource();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1getReferenceSource_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getReferenceSource(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1hasReferenceSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasReferenceSource();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1setAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setAccuracy((double const &)*arg2);
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_ClockState_1getAccuracy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = (double)((OSCLib::Data::OSCP::ClockState const *)arg1)->getAccuracy();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1getAccuracy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  double *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getAccuracy(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1hasAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasAccuracy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1setLastSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setLastSet((Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1getLastSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getLastSet();
  *(Timestamp **)&jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1getLastSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getLastSet(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1hasLastSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasLastSet();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1setTimeZone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  TimeZone *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(TimeZone **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TimeZone const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setTimeZone((TimeZone const &)*arg2);
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1getTimeZone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  TimeZone result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getTimeZone();
  *(TimeZone **)&jresult = new TimeZone((const TimeZone &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1getTimeZone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  TimeZone *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(TimeZone **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TimeZone & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getTimeZone(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1hasTimeZone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasTimeZone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ClockState_1setCriticalUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setCriticalUse((bool const &)*arg2);
  *(OSCLib::Data::OSCP::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1getCriticalUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getCriticalUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1getCriticalUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  arg2 = *(bool **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getCriticalUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ClockState_1hasCriticalUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ClockState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasCriticalUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1CodedValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::CodedValue *)new OSCLib::Data::OSCP::CodedValue();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1CodedValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CodedValue *)new OSCLib::Data::OSCP::CodedValue((OSCLib::Data::OSCP::CodedValue const &)*arg1);
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1CodedValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CodedValue_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::CodedValue const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CodedValue_1setCodingSystemId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::CodedValue *) &(arg1)->setCodingSystemId((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_CodedValue_1getCodingSystemId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::CodedValue const *)arg1)->getCodingSystemId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_CodedValue_1getCodingSystemId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::CodedValue const *)arg1)->getCodingSystemId(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_CodedValue_1hasCodingSystemId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::CodedValue const *)arg1)->hasCodingSystemId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CodedValue_1setVersionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::CodedValue *) &(arg1)->setVersionId((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_CodedValue_1getVersionId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::CodedValue const *)arg1)->getVersionId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_CodedValue_1getVersionId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::CodedValue const *)arg1)->getVersionId(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_CodedValue_1hasVersionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::CodedValue const *)arg1)->hasVersionId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CodedValue_1setCodeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::CodedValue *) &(arg1)->setCodeId((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_CodedValue_1getCodeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::CodedValue const *)arg1)->getCodeId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CodedValue_1addCodingSystemName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  arg2 = *(LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CodedValue *) &(arg1)->addCodingSystemName((LocalizedText const &)*arg2);
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CodedValue_1getCodingSystemNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::CodedValue const *)arg1)->getCodingSystemNames();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CodedValue_1clearCodingSystemNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  (arg1)->clearCodingSystemNames();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CodedValue_1addConceptDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  arg2 = *(LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CodedValue *) &(arg1)->addConceptDescription((LocalizedText const &)*arg2);
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_CodedValue_1getConceptDescriptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::CodedValue const *)arg1)->getConceptDescriptions();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_CodedValue_1clearConceptDescriptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::CodedValue **)&jarg1; 
  (arg1)->clearConceptDescriptions();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ComponentState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::ComponentState *)new OSCLib::Data::OSCP::ComponentState();
  *(OSCLib::Data::OSCP::ComponentState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ComponentState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = 0 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ComponentState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ComponentState *)new OSCLib::Data::OSCP::ComponentState((OSCLib::Data::OSCP::ComponentState const &)*arg1);
  *(OSCLib::Data::OSCP::ComponentState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ComponentState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ComponentState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  OSCLib::Data::OSCP::ComponentState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ComponentState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ComponentState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ComponentState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ComponentState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::ComponentState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_ComponentState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ComponentState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ComponentState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::ComponentState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_ComponentState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ComponentState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ComponentState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::ComponentState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ComponentState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ComponentState const *)arg1)->getStateVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ComponentState_1setComponentActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  ComponentActivation *arg2 = 0 ;
  ComponentActivation temp2 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  temp2 = (ComponentActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setComponentActivationState((ComponentActivation const &)*arg2);
  *(OSCLib::Data::OSCP::ComponentState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_ComponentState_1getComponentActivationState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  ComponentActivation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = (ComponentActivation)((OSCLib::Data::OSCP::ComponentState const *)arg1)->getComponentActivationState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentState_1getComponentActivationState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  ComponentActivation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  arg2 = *(ComponentActivation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ComponentActivation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->getComponentActivationState(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentState_1hasComponentActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->hasComponentActivationState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ComponentState_1setCalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setCalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
  *(OSCLib::Data::OSCP::ComponentState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ComponentState_1getCalibrationInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ComponentState const *)arg1)->getCalibrationInfo();
  *(OSCLib::Data::OSCP::CalibrationInfo **)&jresult = new OSCLib::Data::OSCP::CalibrationInfo((const OSCLib::Data::OSCP::CalibrationInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentState_1getCalibrationInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->getCalibrationInfo(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentState_1hasCalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->hasCalibrationInfo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ComponentState_1setOperatingHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setOperatingHours((int const &)*arg2);
  *(OSCLib::Data::OSCP::ComponentState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_ComponentState_1getOperatingHours_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::ComponentState const *)arg1)->getOperatingHours();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentState_1getOperatingHours_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->getOperatingHours(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentState_1hasOperatingHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->hasOperatingHours();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ComponentState_1setOperatingCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setOperatingCycles((int const &)*arg2);
  *(OSCLib::Data::OSCP::ComponentState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_ComponentState_1getOperatingCycles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::ComponentState const *)arg1)->getOperatingCycles();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentState_1getOperatingCycles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->getOperatingCycles(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ComponentState_1hasOperatingCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ComponentState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->hasOperatingCycles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DateTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::DateTime *)new OSCLib::Data::OSCP::DateTime();
  *(OSCLib::Data::OSCP::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DateTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = 0 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DateTime const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DateTime *)new OSCLib::Data::OSCP::DateTime((OSCLib::Data::OSCP::DateTime const &)*arg1);
  *(OSCLib::Data::OSCP::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1DateTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DateTime_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  OSCLib::Data::OSCP::DateTime *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::DateTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DateTime const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::DateTime const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DateTime_1setyear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DateTime *) &(arg1)->setyear((int const &)*arg2);
  *(OSCLib::Data::OSCP::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_DateTime_1getyear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::DateTime const *)arg1)->getyear();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DateTime_1setmonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DateTime *) &(arg1)->setmonth((unsigned short const &)*arg2);
  *(OSCLib::Data::OSCP::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_DateTime_1getmonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  result = (unsigned short)((OSCLib::Data::OSCP::DateTime const *)arg1)->getmonth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DateTime_1setday(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DateTime *) &(arg1)->setday((unsigned short const &)*arg2);
  *(OSCLib::Data::OSCP::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_DateTime_1getday(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  result = (unsigned short)((OSCLib::Data::OSCP::DateTime const *)arg1)->getday();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DateTime_1sethours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DateTime *) &(arg1)->sethours((unsigned short const &)*arg2);
  *(OSCLib::Data::OSCP::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_DateTime_1gethours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  result = (unsigned short)((OSCLib::Data::OSCP::DateTime const *)arg1)->gethours();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DateTime_1setminutes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DateTime *) &(arg1)->setminutes((unsigned short const &)*arg2);
  *(OSCLib::Data::OSCP::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_DateTime_1getminutes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  result = (unsigned short)((OSCLib::Data::OSCP::DateTime const *)arg1)->getminutes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DateTime_1setseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DateTime *) &(arg1)->setseconds((double const &)*arg2);
  *(OSCLib::Data::OSCP::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_DateTime_1getseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DateTime **)&jarg1; 
  result = (double)((OSCLib::Data::OSCP::DateTime const *)arg1)->getseconds();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_NOT_1ASSIGNED_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &OSCLib::Data::OSCP::NOT_ASSIGNED;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Defaults(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Defaults *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::Defaults *)new OSCLib::Data::OSCP::Defaults();
  *(OSCLib::Data::OSCP::Defaults **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1Defaults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::Defaults *arg1 = (OSCLib::Data::OSCP::Defaults *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::Defaults **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1ActivateOperationDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::ActivateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::ActivateOperationDescriptor *)OSCLib::Data::OSCP::Defaults::ActivateOperationDescriptor();
  *(CDM::ActivateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1AlertConditionDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::AlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::AlertConditionDescriptor *)OSCLib::Data::OSCP::Defaults::AlertConditionDescriptor();
  *(CDM::AlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1AlertConditionReference(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::AlertConditionReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::AlertConditionReference *)OSCLib::Data::OSCP::Defaults::AlertConditionReference();
  *(CDM::AlertConditionReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1AlertConditionState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::AlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::AlertConditionState *)OSCLib::Data::OSCP::Defaults::AlertConditionState();
  *(CDM::AlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1AlertSignalDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::AlertSignalDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::AlertSignalDescriptor *)OSCLib::Data::OSCP::Defaults::AlertSignalDescriptor();
  *(CDM::AlertSignalDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1AlertSignalState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::AlertSignalState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::AlertSignalState *)OSCLib::Data::OSCP::Defaults::AlertSignalState();
  *(CDM::AlertSignalState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1AlertSystemDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::AlertSystemDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::AlertSystemDescriptor *)OSCLib::Data::OSCP::Defaults::AlertSystemDescriptor();
  *(CDM::AlertSystemDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1AlertSystemState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::AlertSystemState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::AlertSystemState *)OSCLib::Data::OSCP::Defaults::AlertSystemState();
  *(CDM::AlertSystemState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1Annotation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::Annotation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::Annotation *)OSCLib::Data::OSCP::Defaults::Annotation();
  *(CDM::Annotation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1Base64Binary(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::Base64Binary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::Base64Binary *)OSCLib::Data::OSCP::Defaults::Base64Binary();
  *(CDM::Base64Binary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1BaseDemographics(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::BaseDemographics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::BaseDemographics *)OSCLib::Data::OSCP::Defaults::BaseDemographics();
  *(CDM::BaseDemographics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1CauseInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::CauseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::CauseInfo *)OSCLib::Data::OSCP::Defaults::CauseInfo();
  *(CDM::CauseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1CalibrationInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::CalibrationInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::CalibrationInfo *)OSCLib::Data::OSCP::Defaults::CalibrationInfo();
  *(CDM::CalibrationInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1ChannelDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::ChannelDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::ChannelDescriptor *)OSCLib::Data::OSCP::Defaults::ChannelDescriptor();
  *(CDM::ChannelDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1ClinicalInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::ClinicalInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::ClinicalInfo *)OSCLib::Data::OSCP::Defaults::ClinicalInfo();
  *(CDM::ClinicalInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1ClockDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::ClockDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::ClockDescriptor *)OSCLib::Data::OSCP::Defaults::ClockDescriptor();
  *(CDM::ClockDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1ClockState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::ClockState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::ClockState *)OSCLib::Data::OSCP::Defaults::ClockState();
  *(CDM::ClockState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1CodedValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::CodedValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::CodedValue *)OSCLib::Data::OSCP::Defaults::CodedValue();
  *(CDM::CodedValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1ComponentState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::ComponentState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::ComponentState *)OSCLib::Data::OSCP::Defaults::ComponentState();
  *(CDM::ComponentState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1DateTime(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::DateTime *)OSCLib::Data::OSCP::Defaults::DateTime();
  *(CDM::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1DICOMNetworkAE(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::DICOMNetworkAE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::DICOMNetworkAE *)OSCLib::Data::OSCP::Defaults::DICOMNetworkAE();
  *(CDM::DICOMNetworkAE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1DICOMDeviceDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::DICOMDeviceDescriptor *)OSCLib::Data::OSCP::Defaults::DICOMDeviceDescriptor();
  *(CDM::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1DICOMNetworkConnection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::DICOMNetworkConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::DICOMNetworkConnection *)OSCLib::Data::OSCP::Defaults::DICOMNetworkConnection();
  *(CDM::DICOMNetworkConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1DICOMTransferCapability(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::DICOMTransferCapability *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::DICOMTransferCapability *)OSCLib::Data::OSCP::Defaults::DICOMTransferCapability();
  *(CDM::DICOMTransferCapability **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1Duration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::Duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::Duration *)OSCLib::Data::OSCP::Defaults::Duration();
  *(CDM::Duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1EnsembleContextDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::EnsembleContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::EnsembleContextDescriptor *)OSCLib::Data::OSCP::Defaults::EnsembleContextDescriptor();
  *(CDM::EnsembleContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1EnsembleContextState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::EnsembleContextState *)OSCLib::Data::OSCP::Defaults::EnsembleContextState();
  *(CDM::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1EnumNomenRef(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::EnumNomenRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::EnumNomenRef *)OSCLib::Data::OSCP::Defaults::EnumNomenRef();
  *(CDM::EnumNomenRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1EnumStringMetricDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::EnumStringMetricDescriptor *)OSCLib::Data::OSCP::Defaults::EnumStringMetricDescriptor();
  *(CDM::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1EnumStringMetricState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::EnumStringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::EnumStringMetricState *)OSCLib::Data::OSCP::Defaults::EnumStringMetricState();
  *(CDM::EnumStringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1HydraMDSDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::HydraMDSDescriptor *)OSCLib::Data::OSCP::Defaults::HydraMDSDescriptor();
  *(CDM::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1HydraMDSState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::HydraMDSState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::HydraMDSState *)OSCLib::Data::OSCP::Defaults::HydraMDSState();
  *(CDM::HydraMDSState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1ImagingProcedure(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::ImagingProcedure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::ImagingProcedure *)OSCLib::Data::OSCP::Defaults::ImagingProcedure();
  *(CDM::ImagingProcedure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1InstanceIdentifier(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::InstanceIdentifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::InstanceIdentifier *)OSCLib::Data::OSCP::Defaults::InstanceIdentifier();
  *(CDM::InstanceIdentifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1Language(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::Language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::Language *)OSCLib::Data::OSCP::Defaults::Language();
  *(CDM::Language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1LimitAlertConditionDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::LimitAlertConditionDescriptor *)OSCLib::Data::OSCP::Defaults::LimitAlertConditionDescriptor();
  *(CDM::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1LimitAlertConditionState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::LimitAlertConditionState *)OSCLib::Data::OSCP::Defaults::LimitAlertConditionState();
  *(CDM::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1LocalizedText(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::LocalizedText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::LocalizedText *)OSCLib::Data::OSCP::Defaults::LocalizedText();
  *(CDM::LocalizedText **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1LocationContextDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::LocationContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::LocationContextDescriptor *)OSCLib::Data::OSCP::Defaults::LocationContextDescriptor();
  *(CDM::LocationContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1LocationContextState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::LocationContextState *)OSCLib::Data::OSCP::Defaults::LocationContextState();
  *(CDM::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1Measure(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::Measure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::Measure *)OSCLib::Data::OSCP::Defaults::Measure();
  *(CDM::Measure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1MeasurementState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::MeasurementState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::MeasurementState *)OSCLib::Data::OSCP::Defaults::MeasurementState();
  *(CDM::MeasurementState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1MDDescription(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::MDDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::MDDescription *)OSCLib::Data::OSCP::Defaults::MDDescription();
  *(CDM::MDDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1MDState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::MDState *)OSCLib::Data::OSCP::Defaults::MDState();
  *(CDM::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1NumericMetricDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::NumericMetricDescriptor *)OSCLib::Data::OSCP::Defaults::NumericMetricDescriptor();
  *(CDM::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1NumericMetricState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::NumericMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::NumericMetricState *)OSCLib::Data::OSCP::Defaults::NumericMetricState();
  *(CDM::NumericMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1NumericMetricValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::NumericMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::NumericMetricValue *)OSCLib::Data::OSCP::Defaults::NumericMetricValue();
  *(CDM::NumericMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1OperationState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::OperationState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::OperationState *)OSCLib::Data::OSCP::Defaults::OperationState();
  *(CDM::OperationState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1OperatorContextDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::OperatorContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::OperatorContextDescriptor *)OSCLib::Data::OSCP::Defaults::OperatorContextDescriptor();
  *(CDM::OperatorContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1OperatorContextState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::OperatorContextState *)OSCLib::Data::OSCP::Defaults::OperatorContextState();
  *(CDM::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1Order(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::Order *)OSCLib::Data::OSCP::Defaults::Order();
  *(CDM::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1OrderDetail(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::OrderDetail *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::OrderDetail *)OSCLib::Data::OSCP::Defaults::OrderDetail();
  *(CDM::OrderDetail **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1PatientContextDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::PatientContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::PatientContextDescriptor *)OSCLib::Data::OSCP::Defaults::PatientContextDescriptor();
  *(CDM::PatientContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1PatientContextState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::PatientContextState *)OSCLib::Data::OSCP::Defaults::PatientContextState();
  *(CDM::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1PatientDemographicsCoreData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::PatientDemographicsCoreData *)OSCLib::Data::OSCP::Defaults::PatientDemographicsCoreData();
  *(CDM::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1PersonParticipation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::PersonParticipation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::PersonParticipation *)OSCLib::Data::OSCP::Defaults::PersonParticipation();
  *(CDM::PersonParticipation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1PersonReference(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::PersonReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::PersonReference *)OSCLib::Data::OSCP::Defaults::PersonReference();
  *(CDM::PersonReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1ProductionSpecification(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::ProductionSpecification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::ProductionSpecification *)OSCLib::Data::OSCP::Defaults::ProductionSpecification();
  *(CDM::ProductionSpecification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1Range(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::Range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::Range *)OSCLib::Data::OSCP::Defaults::Range();
  *(CDM::Range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1RealTimeSampleArrayMetricDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::RealTimeSampleArrayMetricDescriptor *)OSCLib::Data::OSCP::Defaults::RealTimeSampleArrayMetricDescriptor();
  *(CDM::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1RealTimeSampleArrayMetricState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::RealTimeSampleArrayMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::RealTimeSampleArrayMetricState *)OSCLib::Data::OSCP::Defaults::RealTimeSampleArrayMetricState();
  *(CDM::RealTimeSampleArrayMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1RealTimeSampleArrayValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::RealTimeSampleArrayValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::RealTimeSampleArrayValue *)OSCLib::Data::OSCP::Defaults::RealTimeSampleArrayValue();
  *(CDM::RealTimeSampleArrayValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1ReferencedVersion(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::ReferencedVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::ReferencedVersion *)OSCLib::Data::OSCP::Defaults::ReferencedVersion();
  *(CDM::ReferencedVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1RemedyInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::RemedyInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::RemedyInfo *)OSCLib::Data::OSCP::Defaults::RemedyInfo();
  *(CDM::RemedyInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1RTValueType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::RTValueType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::RTValueType *)OSCLib::Data::OSCP::Defaults::RTValueType();
  *(CDM::RTValueType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1SampleIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::SampleIndex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::SampleIndex *)OSCLib::Data::OSCP::Defaults::SampleIndex();
  *(CDM::SampleIndex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1SCODescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::SCODescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::SCODescriptor *)OSCLib::Data::OSCP::Defaults::SCODescriptor();
  *(CDM::SCODescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1SetAlertStateOperationDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::SetAlertStateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::SetAlertStateOperationDescriptor *)OSCLib::Data::OSCP::Defaults::SetAlertStateOperationDescriptor();
  *(CDM::SetAlertStateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1SetContextOperationDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::SetContextOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::SetContextOperationDescriptor *)OSCLib::Data::OSCP::Defaults::SetContextOperationDescriptor();
  *(CDM::SetContextOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1SetRangeOperationDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::SetRangeOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::SetRangeOperationDescriptor *)OSCLib::Data::OSCP::Defaults::SetRangeOperationDescriptor();
  *(CDM::SetRangeOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1SetStringOperationDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::SetStringOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::SetStringOperationDescriptor *)OSCLib::Data::OSCP::Defaults::SetStringOperationDescriptor();
  *(CDM::SetStringOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1SetValueOperationDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::SetValueOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::SetValueOperationDescriptor *)OSCLib::Data::OSCP::Defaults::SetValueOperationDescriptor();
  *(CDM::SetValueOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1StringMetricDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::StringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::StringMetricDescriptor *)OSCLib::Data::OSCP::Defaults::StringMetricDescriptor();
  *(CDM::StringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1StringMetricState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::StringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::StringMetricState *)OSCLib::Data::OSCP::Defaults::StringMetricState();
  *(CDM::StringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1StringMetricValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::StringMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::StringMetricValue *)OSCLib::Data::OSCP::Defaults::StringMetricValue();
  *(CDM::StringMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1SystemContext(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::SystemContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::SystemContext *)OSCLib::Data::OSCP::Defaults::SystemContext();
  *(CDM::SystemContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1SystemMetaData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::SystemMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::SystemMetaData *)OSCLib::Data::OSCP::Defaults::SystemMetaData();
  *(CDM::SystemMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1Timestamp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::Timestamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::Timestamp *)OSCLib::Data::OSCP::Defaults::Timestamp();
  *(CDM::Timestamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1TimeZone(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::TimeZone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::TimeZone *)OSCLib::Data::OSCP::Defaults::TimeZone();
  *(CDM::TimeZone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1VersionCounter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::VersionCounter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::VersionCounter *)OSCLib::Data::OSCP::Defaults::VersionCounter();
  *(CDM::VersionCounter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1VMDDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::VMDDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::VMDDescriptor *)OSCLib::Data::OSCP::Defaults::VMDDescriptor();
  *(CDM::VMDDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1WorkflowContextDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::WorkflowContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::WorkflowContextDescriptor *)OSCLib::Data::OSCP::Defaults::WorkflowContextDescriptor();
  *(CDM::WorkflowContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Defaults_1WorkflowContextState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CDM::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CDM::WorkflowContextState *)OSCLib::Data::OSCP::Defaults::WorkflowContextState();
  *(CDM::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMDeviceDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)new OSCLib::Data::OSCP::DICOMDeviceDescriptor();
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMDeviceDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DICOMDeviceDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)new OSCLib::Data::OSCP::DICOMDeviceDescriptor((OSCLib::Data::OSCP::DICOMDeviceDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1DICOMDeviceDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DICOMDeviceDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::DICOMDeviceDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getDescriptorVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1addProductionSpecification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  ProductionSpecification *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(ProductionSpecification **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ProductionSpecification const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addProductionSpecification((ProductionSpecification const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getProductionSpecifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getProductionSpecifications();
  *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jresult = new std::vector< OSCLib::Data::OSCP::ProductionSpecification >((const std::vector< OSCLib::Data::OSCP::ProductionSpecification > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1clearProductionSpecifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  (arg1)->clearProductionSpecifications();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1setMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  SystemMetaData *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(SystemMetaData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SystemMetaData const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setMetaData((SystemMetaData const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getMetaData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  SystemMetaData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getMetaData();
  *(SystemMetaData **)&jresult = new SystemMetaData((const SystemMetaData &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getMetaData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  SystemMetaData *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(SystemMetaData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SystemMetaData & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getMetaData(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1hasMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasMetaData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1setContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  SystemContext *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(SystemContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SystemContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setContext((SystemContext const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  SystemContext result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getContext();
  *(SystemContext **)&jresult = new SystemContext((const SystemContext &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1setClock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClockDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setClock((OSCLib::Data::OSCP::ClockDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getClock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getClock();
  *(OSCLib::Data::OSCP::ClockDescriptor **)&jresult = new OSCLib::Data::OSCP::ClockDescriptor((const OSCLib::Data::OSCP::ClockDescriptor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getClock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClockDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getClock(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1hasClock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasClock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setDescription((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getDescription_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getDescription();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getDescription_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getDescription(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1hasDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasDescription();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1setStationName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setStationName((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getStationName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getStationName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getStationName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getStationName(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1hasStationName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasStationName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1setIssuerOfPatientID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setIssuerOfPatientID((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getIssuerOfPatientID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getIssuerOfPatientID();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getIssuerOfPatientID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getIssuerOfPatientID(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1hasIssuerOfPatientID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasIssuerOfPatientID();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1addNetworkAE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  DICOMNetworkAE *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(DICOMNetworkAE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DICOMNetworkAE const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addNetworkAE((DICOMNetworkAE const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getNetworkAEs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getNetworkAEs();
  *(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > **)&jresult = new std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >((const std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1clearNetworkAEs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  (arg1)->clearNetworkAEs();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1addNetworkConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  DICOMNetworkConnection *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(DICOMNetworkConnection **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DICOMNetworkConnection const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addNetworkConnection((DICOMNetworkConnection const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getNetworkConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getNetworkConnection();
  *(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > **)&jresult = new std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >((const std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1clearNetworkConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  (arg1)->clearNetworkConnection();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1addSoftwareVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addSoftwareVersion((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getSoftwareVersions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getSoftwareVersions();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1clearSoftwareVersions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  (arg1)->clearSoftwareVersions();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1addInstitutionName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addInstitutionName((LocalizedText const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getInstitutionNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getInstitutionNames();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1clearInstitutionNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  (arg1)->clearInstitutionNames();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1addInstitutionAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addInstitutionAddress((LocalizedText const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getInstitutionAddresses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getInstitutionAddresses();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1clearInstitutionAddresses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  (arg1)->clearInstitutionAddresses();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1addInstitutionalDepartmentName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addInstitutionalDepartmentName((LocalizedText const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getInstitutionalDepartmentNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getInstitutionalDepartmentNames();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1clearInstitutionalDepartmentNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  (arg1)->clearInstitutionalDepartmentNames();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1addPrimaryDeviceType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addPrimaryDeviceType((LocalizedText const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getPrimaryDeviceTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getPrimaryDeviceTypes();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1clearPrimaryDeviceTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  (arg1)->clearPrimaryDeviceTypes();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1addPublicCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::Base64Binary *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Base64Binary **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Base64Binary const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addPublicCertificate((OSCLib::Data::OSCP::Base64Binary const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1getPublicCertificates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getPublicCertificates();
  *(std::vector< OSCLib::Data::OSCP::Base64Binary > **)&jresult = new std::vector< OSCLib::Data::OSCP::Base64Binary >((const std::vector< OSCLib::Data::OSCP::Base64Binary > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMDeviceDescriptor_1clearPublicCertificates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg1; 
  (arg1)->clearPublicCertificates();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMNetworkAE_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *)new OSCLib::Data::OSCP::DICOMNetworkAE();
  *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMNetworkAE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DICOMNetworkAE const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *)new OSCLib::Data::OSCP::DICOMNetworkAE((OSCLib::Data::OSCP::DICOMNetworkAE const &)*arg1);
  *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1DICOMNetworkAE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DICOMNetworkAE const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::DICOMNetworkAE const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1setAETitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->setAETitle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1getAETitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getAETitle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1setAssociationInitiator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->setAssociationInitiator((bool const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1getAssociationInitiator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getAssociationInitiator();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1setAssociationAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->setAssociationAcceptor((bool const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1getAssociationAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getAssociationAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->setDescription((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1getDescription_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getDescription();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1getDescription_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getDescription(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1hasDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->hasDescription();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1addNetworkConnectionReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->addNetworkConnectionReference((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1getNetworkConnectionReferences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getNetworkConnectionReferences();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1clearNetworkConnectionReferences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  (arg1)->clearNetworkConnectionReferences();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1addTransferCapability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  DICOMTransferCapability *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  arg2 = *(DICOMTransferCapability **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DICOMTransferCapability const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->addTransferCapability((DICOMTransferCapability const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1getTransferCapabilities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getTransferCapabilities();
  *(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > **)&jresult = new std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >((const std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1clearTransferCapabilities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  (arg1)->clearTransferCapabilities();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1addApplicationCluster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  arg2 = *(LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->addApplicationCluster((LocalizedText const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1getApplicationClusters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getApplicationClusters();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1clearApplicationClusters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  (arg1)->clearApplicationClusters();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1addSupportedCharacterSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->addSupportedCharacterSet((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1getSupportedCharacterSets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getSupportedCharacterSets();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkAE_1clearSupportedCharacterSets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkAE **)&jarg1; 
  (arg1)->clearSupportedCharacterSets();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMNetworkConnection_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::DICOMNetworkConnection *)new OSCLib::Data::OSCP::DICOMNetworkConnection();
  *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMNetworkConnection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DICOMNetworkConnection const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMNetworkConnection *)new OSCLib::Data::OSCP::DICOMNetworkConnection((OSCLib::Data::OSCP::DICOMNetworkConnection const &)*arg1);
  *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1DICOMNetworkConnection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnection_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DICOMNetworkConnection const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::DICOMNetworkConnection const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnection_1setid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMNetworkConnection *) &(arg1)->setid((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnection_1getid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkConnection const *)arg1)->getid();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnection_1setHostname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMNetworkConnection *) &(arg1)->setHostname((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnection_1getHostname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkConnection const *)arg1)->getHostname();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnection_1setPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DICOMNetworkConnection *) &(arg1)->setPort((unsigned short const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnection_1getPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  result = (unsigned short)((OSCLib::Data::OSCP::DICOMNetworkConnection const *)arg1)->getPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnection_1getPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  unsigned short *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  arg2 = *(unsigned short **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned short & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::DICOMNetworkConnection const *)arg1)->getPort(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnection_1hasPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMNetworkConnection const *)arg1)->hasPort();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnection_1addTLSCipherSuite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMNetworkConnection *) &(arg1)->addTLSCipherSuite((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnection_1getTLSCipherSuites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkConnection const *)arg1)->getTLSCipherSuites();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMNetworkConnection_1clearTLSCipherSuites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMNetworkConnection **)&jarg1; 
  (arg1)->clearTLSCipherSuites();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMTransferCapability_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::DICOMTransferCapability *)new OSCLib::Data::OSCP::DICOMTransferCapability();
  *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DICOMTransferCapability_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DICOMTransferCapability const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMTransferCapability *)new OSCLib::Data::OSCP::DICOMTransferCapability((OSCLib::Data::OSCP::DICOMTransferCapability const &)*arg1);
  *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1DICOMTransferCapability(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapability_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DICOMTransferCapability const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::DICOMTransferCapability const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapability_1setSOPClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMTransferCapability *) &(arg1)->setSOPClass((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapability_1getSOPClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMTransferCapability const *)arg1)->getSOPClass();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapability_1setTransferRole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  DICOMTransferRole *arg2 = 0 ;
  DICOMTransferRole temp2 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jarg1; 
  temp2 = (DICOMTransferRole)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DICOMTransferCapability *) &(arg1)->setTransferRole((DICOMTransferRole const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapability_1getTransferRole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  DICOMTransferRole result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jarg1; 
  result = (DICOMTransferRole)((OSCLib::Data::OSCP::DICOMTransferCapability const *)arg1)->getTransferRole();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapability_1addTransferSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::DICOMTransferCapability *) &(arg1)->addTransferSyntax((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapability_1getTransferSyntaxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMTransferCapability const *)arg1)->getTransferSyntaxes();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DICOMTransferCapability_1clearTransferSyntaxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::DICOMTransferCapability **)&jarg1; 
  (arg1)->clearTransferSyntaxes();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Duration_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::Duration *)new OSCLib::Data::OSCP::Duration();
  *(OSCLib::Data::OSCP::Duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Duration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = 0 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Duration *)new OSCLib::Data::OSCP::Duration((OSCLib::Data::OSCP::Duration const &)*arg1);
  *(OSCLib::Data::OSCP::Duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1Duration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Duration_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Duration const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Duration_1setnegative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->setnegative((bool const &)*arg2);
  *(OSCLib::Data::OSCP::Duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Duration_1getnegative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Duration const *)arg1)->getnegative();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Duration_1setyears(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->setyears((unsigned int const &)*arg2);
  *(OSCLib::Data::OSCP::Duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Duration_1getyears(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  result = (unsigned int)((OSCLib::Data::OSCP::Duration const *)arg1)->getyears();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Duration_1setmonths(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->setmonths((unsigned int const &)*arg2);
  *(OSCLib::Data::OSCP::Duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Duration_1getmonths(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  result = (unsigned int)((OSCLib::Data::OSCP::Duration const *)arg1)->getmonths();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Duration_1setdays(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->setdays((unsigned int const &)*arg2);
  *(OSCLib::Data::OSCP::Duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Duration_1getdays(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  result = (unsigned int)((OSCLib::Data::OSCP::Duration const *)arg1)->getdays();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Duration_1sethours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->sethours((unsigned int const &)*arg2);
  *(OSCLib::Data::OSCP::Duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Duration_1gethours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  result = (unsigned int)((OSCLib::Data::OSCP::Duration const *)arg1)->gethours();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Duration_1setminutes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->setminutes((unsigned int const &)*arg2);
  *(OSCLib::Data::OSCP::Duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Duration_1getminutes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  result = (unsigned int)((OSCLib::Data::OSCP::Duration const *)arg1)->getminutes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Duration_1setseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->setseconds((double const &)*arg2);
  *(OSCLib::Data::OSCP::Duration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_Duration_1getseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Duration **)&jarg1; 
  result = (double)((OSCLib::Data::OSCP::Duration const *)arg1)->getseconds();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnsembleContextDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)new OSCLib::Data::OSCP::EnsembleContextDescriptor();
  *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnsembleContextDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)new OSCLib::Data::OSCP::EnsembleContextDescriptor((OSCLib::Data::OSCP::EnsembleContextDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1EnsembleContextDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::EnsembleContextDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->getDescriptorVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  arg2 = *(IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnsembleContextState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::EnsembleContextState *)new OSCLib::Data::OSCP::EnsembleContextState();
  *(OSCLib::Data::OSCP::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnsembleContextState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *)new OSCLib::Data::OSCP::EnsembleContextState((OSCLib::Data::OSCP::EnsembleContextState const &)*arg1);
  *(OSCLib::Data::OSCP::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1EnsembleContextState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getStateVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1setContextAssociation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ContextAssociation *arg2 = 0 ;
  ContextAssociation temp2 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  temp2 = (ContextAssociation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setContextAssociation((ContextAssociation const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getContextAssociation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ContextAssociation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = (ContextAssociation)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getContextAssociation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getContextAssociation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ContextAssociation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(ContextAssociation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ContextAssociation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getContextAssociation(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1hasContextAssociation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->hasContextAssociation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1setBindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ReferencedVersion const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setBindingMDIBVersion((ReferencedVersion const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getBindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ReferencedVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getBindingMDIBVersion();
  *(ReferencedVersion **)&jresult = new ReferencedVersion((const ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1setUnbindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ReferencedVersion const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setUnbindingMDIBVersion((ReferencedVersion const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getUnbindingMDIBVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ReferencedVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getUnbindingMDIBVersion();
  *(ReferencedVersion **)&jresult = new ReferencedVersion((const ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getUnbindingMDIBVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ReferencedVersion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ReferencedVersion & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getUnbindingMDIBVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1hasUnbindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->hasUnbindingMDIBVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1setBindingStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setBindingStartTime((Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getBindingStartTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getBindingStartTime();
  *(Timestamp **)&jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getBindingStartTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getBindingStartTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1hasBindingStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->hasBindingStartTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1setBindingEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setBindingEndTime((Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getBindingEndTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getBindingEndTime();
  *(Timestamp **)&jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getBindingEndTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getBindingEndTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1hasBindingEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->hasBindingEndTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1addValidator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->addValidator((InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getValidators();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1clearValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  (arg1)->clearValidators();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1addIdentification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  arg2 = *(InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->addIdentification((InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::EnsembleContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1getIdentifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getIdentifications();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnsembleContextState_1clearIdentifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg1; 
  (arg1)->clearIdentifications();
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::Activation arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::Activation)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionKind arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::AlertConditionKind)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertConditionPriority arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::AlertConditionPriority)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::AlertSignalManifestation arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::AlertSignalManifestation)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::CalibrationState arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::CalibrationState)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::ComponentActivation arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::ComponentActivation)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::ContextAssociation arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::ContextAssociation)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::DICOMTransferRole arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::DICOMTransferRole)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::GenerationMode arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::GenerationMode)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::InvocationState arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::InvocationState)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::MetricAvailability arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::MetricAvailability)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::MetricCategory arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::MetricCategory)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::MetricMeasurementValidity arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::MetricMeasurementValidity)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::MetricRetrievability arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::MetricRetrievability)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::MonitoredAlertLimits arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::MonitoredAlertLimits)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OperatingMode arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::OperatingMode)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::PatientType arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::PatientType)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::PausableActivation arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::PausableActivation)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::PrimaryAlertSignalLocation arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::PrimaryAlertSignalLocation)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::Sex arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::Sex)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumToString_1convert_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SignalPresence arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Data::OSCP::SignalPresence)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumToString(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumToString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::EnumToString *)new OSCLib::Data::OSCP::EnumToString();
  *(OSCLib::Data::OSCP::EnumToString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1EnumToString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::EnumToString *arg1 = (OSCLib::Data::OSCP::EnumToString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::EnumToString **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumNomenRef_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::EnumNomenRef *)new OSCLib::Data::OSCP::EnumNomenRef();
  *(OSCLib::Data::OSCP::EnumNomenRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumNomenRef_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumNomenRef **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumNomenRef const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumNomenRef *)new OSCLib::Data::OSCP::EnumNomenRef((OSCLib::Data::OSCP::EnumNomenRef const &)*arg1);
  *(OSCLib::Data::OSCP::EnumNomenRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1EnumNomenRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::EnumNomenRef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumNomenRef_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumNomenRef **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumNomenRef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumNomenRef const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::EnumNomenRef const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumNomenRef_1setCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumNomenRef **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumNomenRef *) &(arg1)->setCode((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::EnumNomenRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumNomenRef_1getCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumNomenRef **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumNomenRef const *)arg1)->getCode();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumNomenRef_1setEnumIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  SampleIndex *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumNomenRef **)&jarg1; 
  arg2 = *(SampleIndex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SampleIndex const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumNomenRef *) &(arg1)->setEnumIndex((SampleIndex const &)*arg2);
  *(OSCLib::Data::OSCP::EnumNomenRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumNomenRef_1getEnumIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  SampleIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumNomenRef **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumNomenRef const *)arg1)->getEnumIndex();
  *(SampleIndex **)&jresult = new SampleIndex((const SampleIndex &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumNomenRef_1getEnumIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  SampleIndex *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumNomenRef **)&jarg1; 
  arg2 = *(SampleIndex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SampleIndex & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnumNomenRef const *)arg1)->getEnumIndex(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumNomenRef_1hasEnumIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumNomenRef **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumNomenRef const *)arg1)->hasEnumIndex();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumStringMetricDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)new OSCLib::Data::OSCP::EnumStringMetricDescriptor();
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumStringMetricDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)new OSCLib::Data::OSCP::EnumStringMetricDescriptor((OSCLib::Data::OSCP::EnumStringMetricDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1EnumStringMetricDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::EnumStringMetricDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getDescriptorVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1setUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setUnit((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getUnit();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1setMetricCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricCategory temp2 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricCategory)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setMetricCategory((OSCLib::Data::OSCP::MetricCategory const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getMetricCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::MetricCategory)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getMetricCategory();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1setAvailability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricAvailability temp2 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricAvailability)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setAvailability((OSCLib::Data::OSCP::MetricAvailability const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getAvailability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::MetricAvailability)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getAvailability();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1setMaxDelayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setMaxDelayTime((OSCLib::Data::OSCP::Duration const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getMaxDelayTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getMaxDelayTime();
  *(OSCLib::Data::OSCP::Duration **)&jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getMaxDelayTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getMaxDelayTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1hasMaxDelayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->hasMaxDelayTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1addBodySite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->addBodySite((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getBodySites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getBodySites();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1clearBodySites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  (arg1)->clearBodySites();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1addAllowedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->addAllowedValue((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getAllowedValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getAllowedValues();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1clearAllowedValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  (arg1)->clearAllowedValues();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1addEnumCodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumNomenRef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumNomenRef const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->addEnumCodes((OSCLib::Data::OSCP::EnumNomenRef const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1getEnumCodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getEnumCodes();
  *(std::vector< OSCLib::Data::OSCP::EnumNomenRef > **)&jresult = new std::vector< OSCLib::Data::OSCP::EnumNomenRef >((const std::vector< OSCLib::Data::OSCP::EnumNomenRef > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricDescriptor_1clearEnumCodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg1; 
  (arg1)->clearEnumCodes();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumStringMetricState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::EnumStringMetricState *)new OSCLib::Data::OSCP::EnumStringMetricState();
  *(OSCLib::Data::OSCP::EnumStringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1EnumStringMetricState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *)new OSCLib::Data::OSCP::EnumStringMetricState((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg1);
  *(OSCLib::Data::OSCP::EnumStringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1EnumStringMetricState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getStateVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1setComponentActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentActivation temp2 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::ComponentActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setComponentActivationState((OSCLib::Data::OSCP::ComponentActivation const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getComponentActivationState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = (OSCLib::Data::OSCP::ComponentActivation)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getComponentActivationState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getComponentActivationState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ComponentActivation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ComponentActivation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getComponentActivationState(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1hasComponentActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasComponentActivationState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1setCalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setCalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getCalibrationInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getCalibrationInfo();
  *(OSCLib::Data::OSCP::CalibrationInfo **)&jresult = new OSCLib::Data::OSCP::CalibrationInfo((const OSCLib::Data::OSCP::CalibrationInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getCalibrationInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getCalibrationInfo(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1hasCalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasCalibrationInfo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1setOperatingHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setOperatingHours((int const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getOperatingHours_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getOperatingHours();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getOperatingHours_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getOperatingHours(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1hasOperatingHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasOperatingHours();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1setOperatingCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setOperatingCycles((int const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getOperatingCycles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getOperatingCycles();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getOperatingCycles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getOperatingCycles(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1hasOperatingCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasOperatingCycles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1setObservedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  StringMetricValue *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  arg2 = *(StringMetricValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringMetricValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setObservedValue((StringMetricValue const &)*arg2);
  *(OSCLib::Data::OSCP::EnumStringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getObservedValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  StringMetricValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getObservedValue();
  *(StringMetricValue **)&jresult = new StringMetricValue((const StringMetricValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1getObservedValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  StringMetricValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  arg2 = *(StringMetricValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringMetricValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getObservedValue(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_EnumStringMetricState_1hasObservedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasObservedValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1HydraMDSDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *)new OSCLib::Data::OSCP::HydraMDSDescriptor();
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1HydraMDSDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *)new OSCLib::Data::OSCP::HydraMDSDescriptor((OSCLib::Data::OSCP::HydraMDSDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1HydraMDSDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::HydraMDSDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getDescriptorVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1addProductionSpecification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  ProductionSpecification *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(ProductionSpecification **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ProductionSpecification const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->addProductionSpecification((ProductionSpecification const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getProductionSpecifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getProductionSpecifications();
  *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jresult = new std::vector< OSCLib::Data::OSCP::ProductionSpecification >((const std::vector< OSCLib::Data::OSCP::ProductionSpecification > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1clearProductionSpecifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  (arg1)->clearProductionSpecifications();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1setMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SystemMetaData *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(SystemMetaData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SystemMetaData const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setMetaData((SystemMetaData const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getMetaData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SystemMetaData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getMetaData();
  *(SystemMetaData **)&jresult = new SystemMetaData((const SystemMetaData &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getMetaData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SystemMetaData *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(SystemMetaData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SystemMetaData & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getMetaData(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1hasMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasMetaData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1setContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SystemContext *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(SystemContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SystemContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setContext((SystemContext const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SystemContext result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getContext();
  *(SystemContext **)&jresult = new SystemContext((const SystemContext &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1setClock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClockDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setClock((OSCLib::Data::OSCP::ClockDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getClock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getClock();
  *(OSCLib::Data::OSCP::ClockDescriptor **)&jresult = new OSCLib::Data::OSCP::ClockDescriptor((const OSCLib::Data::OSCP::ClockDescriptor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getClock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClockDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getClock(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1hasClock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasClock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1setSCO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SCODescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(SCODescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SCODescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setSCO((SCODescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getSCO_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SCODescriptor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getSCO();
  *(SCODescriptor **)&jresult = new SCODescriptor((const SCODescriptor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getSCO_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SCODescriptor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(SCODescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SCODescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getSCO(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1hasSCO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasSCO();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1setAlertSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setAlertSystem((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getAlertSystem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getAlertSystem();
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = new OSCLib::Data::OSCP::AlertSystemDescriptor((const OSCLib::Data::OSCP::AlertSystemDescriptor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getAlertSystem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getAlertSystem(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1hasAlertSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasAlertSystem();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1addVMD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  VMDDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  arg2 = *(VMDDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VMDDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->addVMD((VMDDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1getVMDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getVMDs();
  *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::VMDDescriptor >((const std::vector< OSCLib::Data::OSCP::VMDDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_HydraMDSDescriptor_1clearVMDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg1; 
  (arg1)->clearVMDs();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1HydraMDSState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::HydraMDSState *)new OSCLib::Data::OSCP::HydraMDSState();
  *(OSCLib::Data::OSCP::HydraMDSState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1HydraMDSState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSState *)new OSCLib::Data::OSCP::HydraMDSState((OSCLib::Data::OSCP::HydraMDSState const &)*arg1);
  *(OSCLib::Data::OSCP::HydraMDSState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1HydraMDSState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::HydraMDSState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getStateVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1setComponentActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentActivation temp2 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::ComponentActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setComponentActivationState((OSCLib::Data::OSCP::ComponentActivation const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getComponentActivationState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = (OSCLib::Data::OSCP::ComponentActivation)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getComponentActivationState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getComponentActivationState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ComponentActivation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ComponentActivation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getComponentActivationState(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1hasComponentActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasComponentActivationState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1setCalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setCalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getCalibrationInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getCalibrationInfo();
  *(OSCLib::Data::OSCP::CalibrationInfo **)&jresult = new OSCLib::Data::OSCP::CalibrationInfo((const OSCLib::Data::OSCP::CalibrationInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getCalibrationInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getCalibrationInfo(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1hasCalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasCalibrationInfo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1setOperatingHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setOperatingHours((int const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getOperatingHours_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getOperatingHours();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getOperatingHours_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getOperatingHours(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1hasOperatingHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasOperatingHours();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1setOperatingCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setOperatingCycles((int const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getOperatingCycles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getOperatingCycles();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getOperatingCycles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getOperatingCycles(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1hasOperatingCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasOperatingCycles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1setLang(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  Language *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  arg2 = *(Language **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Language const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setLang((Language const &)*arg2);
  *(OSCLib::Data::OSCP::HydraMDSState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getLang_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  Language result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getLang();
  *(Language **)&jresult = new Language((const Language &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1getLang_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  Language *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  arg2 = *(Language **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Language & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getLang(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_HydraMDSState_1hasLang(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasLang();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ImagingProcedure_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::ImagingProcedure *)new OSCLib::Data::OSCP::ImagingProcedure();
  *(OSCLib::Data::OSCP::ImagingProcedure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ImagingProcedure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ImagingProcedure const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *)new OSCLib::Data::OSCP::ImagingProcedure((OSCLib::Data::OSCP::ImagingProcedure const &)*arg1);
  *(OSCLib::Data::OSCP::ImagingProcedure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ImagingProcedure(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ImagingProcedure const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ImagingProcedure const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1setAccessionIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  arg2 = *(InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *) &(arg1)->setAccessionIdentifier((InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::ImagingProcedure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1getAccessionIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getAccessionIdentifier();
  *(InstanceIdentifier **)&jresult = new InstanceIdentifier((const InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1setRequestedProcedureID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  arg2 = *(InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *) &(arg1)->setRequestedProcedureID((InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::ImagingProcedure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1getRequestedProcedureID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getRequestedProcedureID();
  *(InstanceIdentifier **)&jresult = new InstanceIdentifier((const InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1setStudyInstanceUID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  arg2 = *(InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *) &(arg1)->setStudyInstanceUID((InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::ImagingProcedure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1getStudyInstanceUID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getStudyInstanceUID();
  *(InstanceIdentifier **)&jresult = new InstanceIdentifier((const InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1setScheduledProcedureStepID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  arg2 = *(InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *) &(arg1)->setScheduledProcedureStepID((InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::ImagingProcedure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1getScheduledProcedureStepID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getScheduledProcedureStepID();
  *(InstanceIdentifier **)&jresult = new InstanceIdentifier((const InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1setModality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *) &(arg1)->setModality((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::ImagingProcedure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1getModality_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getModality();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1getModality_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getModality(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1hasModality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->hasModality();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1setProtocolCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *) &(arg1)->setProtocolCode((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::ImagingProcedure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1getProtocolCode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getProtocolCode();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1getProtocolCode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getProtocolCode(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ImagingProcedure_1hasProtocolCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->hasProtocolCode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1InstanceIdentifier_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::InstanceIdentifier *)new OSCLib::Data::OSCP::InstanceIdentifier();
  *(OSCLib::Data::OSCP::InstanceIdentifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1InstanceIdentifier_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InstanceIdentifier *)new OSCLib::Data::OSCP::InstanceIdentifier((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg1);
  *(OSCLib::Data::OSCP::InstanceIdentifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1InstanceIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_InstanceIdentifier_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_InstanceIdentifier_1setroot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::InstanceIdentifier *) &(arg1)->setroot((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::InstanceIdentifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_InstanceIdentifier_1getroot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg1; 
  result = ((OSCLib::Data::OSCP::InstanceIdentifier const *)arg1)->getroot();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_InstanceIdentifier_1setextension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::InstanceIdentifier *) &(arg1)->setextension((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::InstanceIdentifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_InstanceIdentifier_1getextension_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg1; 
  result = ((OSCLib::Data::OSCP::InstanceIdentifier const *)arg1)->getextension();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_InstanceIdentifier_1getextension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::InstanceIdentifier const *)arg1)->getextension(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_InstanceIdentifier_1hasextension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::InstanceIdentifier const *)arg1)->hasextension();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_InstanceIdentifier_1addIdentifierName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg1; 
  arg2 = *(LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InstanceIdentifier *) &(arg1)->addIdentifierName((LocalizedText const &)*arg2);
  *(OSCLib::Data::OSCP::InstanceIdentifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_InstanceIdentifier_1getIdentifierNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg1; 
  result = ((OSCLib::Data::OSCP::InstanceIdentifier const *)arg1)->getIdentifierNames();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_InstanceIdentifier_1clearIdentifierNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg1; 
  (arg1)->clearIdentifierNames();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Language_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::Language *)new OSCLib::Data::OSCP::Language();
  *(OSCLib::Data::OSCP::Language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Language_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Language *arg1 = 0 ;
  OSCLib::Data::OSCP::Language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Language **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Language const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Language *)new OSCLib::Data::OSCP::Language((OSCLib::Data::OSCP::Language const &)*arg1);
  *(OSCLib::Data::OSCP::Language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1Language(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::Language *arg1 = (OSCLib::Data::OSCP::Language *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::Language **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Language_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::Language *arg1 = (OSCLib::Data::OSCP::Language *) 0 ;
  OSCLib::Data::OSCP::Language *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Language **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Language **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Language const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Language const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_Language_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::Language *arg1 = (OSCLib::Data::OSCP::Language *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Language **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Language const *)arg1)->get();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Language_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Language *arg1 = (OSCLib::Data::OSCP::Language *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::Language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Language **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::Language *) &(arg1)->set((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::Language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LimitAlertConditionDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)new OSCLib::Data::OSCP::LimitAlertConditionDescriptor();
  *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LimitAlertConditionDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)new OSCLib::Data::OSCP::LimitAlertConditionDescriptor((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1LimitAlertConditionDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getDescriptorVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1setKind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertConditionKind *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionKind temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::AlertConditionKind)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setKind((OSCLib::Data::OSCP::AlertConditionKind const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getKind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertConditionKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::AlertConditionKind)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getKind();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1setPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertConditionPriority *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionPriority temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::AlertConditionPriority)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setPriority((OSCLib::Data::OSCP::AlertConditionPriority const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertConditionPriority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::AlertConditionPriority)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1addSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->addSource((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getSources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getSources();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1clearSources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  (arg1)->clearSources();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1addCauseInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::CauseInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CauseInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CauseInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->addCauseInfo((OSCLib::Data::OSCP::CauseInfo const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getCauseInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getCauseInfo();
  *(std::vector< OSCLib::Data::OSCP::CauseInfo > **)&jresult = new std::vector< OSCLib::Data::OSCP::CauseInfo >((const std::vector< OSCLib::Data::OSCP::CauseInfo > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1clearCauseInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  (arg1)->clearCauseInfo();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1setMaxLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  Range *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  arg2 = *(Range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Range const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setMaxLimits((Range const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getMaxLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  Range result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getMaxLimits();
  *(Range **)&jresult = new Range((const Range &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1setAutoLimitSupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setAutoLimitSupported((bool const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getAutoLimitSupported_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getAutoLimitSupported();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1getAutoLimitSupported_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  arg2 = *(bool **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getAutoLimitSupported(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionDescriptor_1hasAutoLimitSupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->hasAutoLimitSupported();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LimitAlertConditionState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *)new OSCLib::Data::OSCP::LimitAlertConditionState();
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LimitAlertConditionState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *)new OSCLib::Data::OSCP::LimitAlertConditionState((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg1);
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1LimitAlertConditionState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getStateVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1setActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::PausableActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::PausableActivation temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::PausableActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setActivationState((OSCLib::Data::OSCP::PausableActivation const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::PausableActivation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = (OSCLib::Data::OSCP::PausableActivation)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getActivationState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1setRank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setRank((int const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getRank_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getRank();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getRank_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getRank(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1hasRank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->hasRank();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1setPresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setPresence((bool const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getPresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getPresence();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1setObservationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setObservationTime((Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getObservationTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getObservationTime();
  *(Timestamp **)&jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getObservationTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getObservationTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1hasObservationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->hasObservationTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1setLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  Range *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  arg2 = *(Range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Range const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setLimits((Range const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getLimits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  Range result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getLimits();
  *(Range **)&jresult = new Range((const Range &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getLimits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  Range *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  arg2 = *(Range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Range & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getLimits(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1hasLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->hasLimits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1setMonitoredAlertLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::MonitoredAlertLimits *arg2 = 0 ;
  OSCLib::Data::OSCP::MonitoredAlertLimits temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::MonitoredAlertLimits)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setMonitoredAlertLimits((OSCLib::Data::OSCP::MonitoredAlertLimits const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getMonitoredAlertLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::MonitoredAlertLimits result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = (OSCLib::Data::OSCP::MonitoredAlertLimits)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getMonitoredAlertLimits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1setAutoLimitActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::PausableActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::PausableActivation temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::PausableActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setAutoLimitActivationState((OSCLib::Data::OSCP::PausableActivation const &)*arg2);
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getAutoLimitActivationState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::PausableActivation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = (OSCLib::Data::OSCP::PausableActivation)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getAutoLimitActivationState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1getAutoLimitActivationState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::PausableActivation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PausableActivation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PausableActivation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getAutoLimitActivationState(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LimitAlertConditionState_1hasAutoLimitActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->hasAutoLimitActivationState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LocalizedText_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocalizedText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::LocalizedText *)new OSCLib::Data::OSCP::LocalizedText();
  *(OSCLib::Data::OSCP::LocalizedText **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LocalizedText_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = 0 ;
  OSCLib::Data::OSCP::LocalizedText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocalizedText *)new OSCLib::Data::OSCP::LocalizedText((OSCLib::Data::OSCP::LocalizedText const &)*arg1);
  *(OSCLib::Data::OSCP::LocalizedText **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1LocalizedText(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocalizedText_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocalizedText const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::LocalizedText const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocalizedText_1setLang(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  OSCLib::Data::OSCP::Language *arg2 = 0 ;
  OSCLib::Data::OSCP::LocalizedText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Language **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Language const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocalizedText *) &(arg1)->setLang((OSCLib::Data::OSCP::Language const &)*arg2);
  *(OSCLib::Data::OSCP::LocalizedText **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocalizedText_1getLang_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  OSCLib::Data::OSCP::Language result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocalizedText const *)arg1)->getLang();
  *(OSCLib::Data::OSCP::Language **)&jresult = new OSCLib::Data::OSCP::Language((const OSCLib::Data::OSCP::Language &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocalizedText_1getLang_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  OSCLib::Data::OSCP::Language *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Language **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Language & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LocalizedText const *)arg1)->getLang(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocalizedText_1hasLang(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocalizedText const *)arg1)->hasLang();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_LocalizedText_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocalizedText const *)arg1)->get();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocalizedText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocalizedText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::LocalizedText *) &(arg1)->set((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::LocalizedText **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LocationContextDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::LocationContextDescriptor *)new OSCLib::Data::OSCP::LocationContextDescriptor();
  *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LocationContextDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextDescriptor *)new OSCLib::Data::OSCP::LocationContextDescriptor((OSCLib::Data::OSCP::LocationContextDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1LocationContextDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::LocationContextDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::LocationContextDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->getDescriptorVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LocationContextDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LocationContextState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::LocationContextState *)new OSCLib::Data::OSCP::LocationContextState();
  *(OSCLib::Data::OSCP::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1LocationContextState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *)new OSCLib::Data::OSCP::LocationContextState((OSCLib::Data::OSCP::LocationContextState const &)*arg1);
  *(OSCLib::Data::OSCP::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1LocationContextState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocationContextState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::LocationContextState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getStateVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1setContextAssociation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation *arg2 = 0 ;
  OSCLib::Data::OSCP::ContextAssociation temp2 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::ContextAssociation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setContextAssociation((OSCLib::Data::OSCP::ContextAssociation const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getContextAssociation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = (OSCLib::Data::OSCP::ContextAssociation)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getContextAssociation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getContextAssociation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ContextAssociation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ContextAssociation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getContextAssociation(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextState_1hasContextAssociation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->hasContextAssociation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1setBindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ReferencedVersion const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setBindingMDIBVersion((ReferencedVersion const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getBindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  ReferencedVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getBindingMDIBVersion();
  *(ReferencedVersion **)&jresult = new ReferencedVersion((const ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1setUnbindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ReferencedVersion const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setUnbindingMDIBVersion((ReferencedVersion const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getUnbindingMDIBVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  ReferencedVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getUnbindingMDIBVersion();
  *(ReferencedVersion **)&jresult = new ReferencedVersion((const ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getUnbindingMDIBVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  ReferencedVersion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ReferencedVersion & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getUnbindingMDIBVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextState_1hasUnbindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->hasUnbindingMDIBVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1setBindingStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setBindingStartTime((Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getBindingStartTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getBindingStartTime();
  *(Timestamp **)&jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getBindingStartTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getBindingStartTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextState_1hasBindingStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->hasBindingStartTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1setBindingEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setBindingEndTime((Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getBindingEndTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getBindingEndTime();
  *(Timestamp **)&jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getBindingEndTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getBindingEndTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_LocationContextState_1hasBindingEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->hasBindingEndTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1addValidator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->addValidator((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getValidators();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocationContextState_1clearValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  (arg1)->clearValidators();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1addIdentification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->addIdentification((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::LocationContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_LocationContextState_1getIdentifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getIdentifications();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_LocationContextState_1clearIdentifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg1; 
  (arg1)->clearIdentifications();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1MDDescription_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::MDDescription *)new OSCLib::Data::OSCP::MDDescription();
  *(OSCLib::Data::OSCP::MDDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1MDDescription_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = 0 ;
  OSCLib::Data::OSCP::MDDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::MDDescription const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDDescription *)new OSCLib::Data::OSCP::MDDescription((OSCLib::Data::OSCP::MDDescription const &)*arg1);
  *(OSCLib::Data::OSCP::MDDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1MDDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_MDDescription_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  OSCLib::Data::OSCP::MDDescription *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::MDDescription **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::MDDescription const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::MDDescription const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1setDescriptionVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::MDDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDDescription *) &(arg1)->setDescriptionVersion((VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::MDDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1getDescriptionVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->getDescriptionVersion();
  *(VersionCounter **)&jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1getDescriptionVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  arg2 = *(VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->getDescriptionVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1hasDescriptionVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->hasDescriptionVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_MDDescription_1addHydraMDSDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor const & reference is null");
    return ;
  } 
  (arg1)->addHydraMDSDescriptor((OSCLib::Data::OSCP::HydraMDSDescriptor const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_MDDescription_1addDicomMDSDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::DICOMDeviceDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DICOMDeviceDescriptor const & reference is null");
    return ;
  } 
  (arg1)->addDicomMDSDescriptor((OSCLib::Data::OSCP::DICOMDeviceDescriptor const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1getFirstHydraMDSDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->getFirstHydraMDSDescriptor(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ChannelDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::ClockDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClockDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  NumericMetricDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(NumericMetricDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NumericMetricDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OperatorContextDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OperatorContextDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OperatorContextDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  PatientContextDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(PatientContextDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PatientContextDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  RealTimeSampleArrayMetricDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RealTimeSampleArrayMetricDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RealTimeSampleArrayMetricDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  StringMetricDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(StringMetricDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringMetricDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  VMDDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(VMDDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VMDDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDDescription_1findDescriptor_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  WorkflowContextDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(WorkflowContextDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "WorkflowContextDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_MDDescription_1getOperationTargetForOperationHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->getOperationTargetForOperationHandle((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_MDDescription_1getFirstOperationHandleForOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->getFirstOperationHandleForOperationTarget((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllAlertConditionDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllAlertConditionDescriptors();
  *(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >((const std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllAlertSignalDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllAlertSignalDescriptors();
  *(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >((const std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllAlertSystemDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllAlertSystemDescriptors();
  *(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >((const std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllLimitAlertConditionDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllLimitAlertConditionDescriptors();
  *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >((const std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllChannelDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllChannelDescriptors();
  *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::ChannelDescriptor >((const std::vector< OSCLib::Data::OSCP::ChannelDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllClockDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllClockDescriptors();
  *(std::vector< OSCLib::Data::OSCP::ClockDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::ClockDescriptor >((const std::vector< OSCLib::Data::OSCP::ClockDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllDICOMDeviceDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllDICOMDeviceDescriptors();
  *(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >((const std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllEnumStringMetricDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllEnumStringMetricDescriptors();
  *(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllHydraMDSDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllHydraMDSDescriptors();
  *(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >((const std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllNumericMetricDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllNumericMetricDescriptors();
  *(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllRealTimeSampleArrayMetricDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllRealTimeSampleArrayMetricDescriptors();
  *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllStringMetricDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllStringMetricDescriptors();
  *(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDDescription_1collectAllVMDDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDDescription **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllVMDDescriptors();
  *(std::vector< OSCLib::Data::OSCP::VMDDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::VMDDescriptor >((const std::vector< OSCLib::Data::OSCP::VMDDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1MDIBContainer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::MDIBContainer *)new OSCLib::Data::OSCP::MDIBContainer();
  *(OSCLib::Data::OSCP::MDIBContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1MDIBContainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1setMDDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  OSCLib::Data::OSCP::MDDescription *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::MDDescription **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::MDDescription const & reference is null");
    return ;
  } 
  (arg1)->setMDDescription((OSCLib::Data::OSCP::MDDescription const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1getMDDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  OSCLib::Data::OSCP::MDDescription result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->getMDDescription();
  *(OSCLib::Data::OSCP::MDDescription **)&jresult = new OSCLib::Data::OSCP::MDDescription((const OSCLib::Data::OSCP::MDDescription &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1setMDState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  MDState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  arg2 = *(MDState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MDState const & reference is null");
    return ;
  } 
  (arg1)->setMDState((MDState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1getMDState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  MDState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->getMDState();
  *(MDState **)&jresult = new MDState((const MDState &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1setMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long const)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->setMDIBVersion(arg2);
}


SWIGEXPORT jobject JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1getMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  result = (unsigned long long)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->getMDIBVersion();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1findDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1findDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1findDescriptor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1findDescriptor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1findDescriptor_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1findDescriptor_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  NumericMetricDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(NumericMetricDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NumericMetricDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1findDescriptor_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  RealTimeSampleArrayMetricDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RealTimeSampleArrayMetricDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RealTimeSampleArrayMetricDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1findDescriptor_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  StringMetricDescriptor *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(StringMetricDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringMetricDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1findState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1findState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  NumericMetricState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(NumericMetricState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NumericMetricState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1findState_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  RealTimeSampleArrayMetricState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RealTimeSampleArrayMetricState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RealTimeSampleArrayMetricState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDIBContainer_1findState_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  StringMetricState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(StringMetricState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringMetricState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1MDState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::MDState *)new OSCLib::Data::OSCP::MDState();
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1MDState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::MDState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *)new OSCLib::Data::OSCP::MDState((OSCLib::Data::OSCP::MDState const &)*arg1);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1MDState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_MDState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::MDState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::MDState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::MDState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::MDState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->getStateVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::ClockState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClockState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::ComponentState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ComponentState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MDState_1findState_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextState & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findAlertConditionStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findAlertConditionStates();
  *(std::vector< OSCLib::Data::OSCP::AlertConditionState > **)&jresult = new std::vector< OSCLib::Data::OSCP::AlertConditionState >((const std::vector< OSCLib::Data::OSCP::AlertConditionState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findAlertSignalStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findAlertSignalStates();
  *(std::vector< OSCLib::Data::OSCP::AlertSignalState > **)&jresult = new std::vector< OSCLib::Data::OSCP::AlertSignalState >((const std::vector< OSCLib::Data::OSCP::AlertSignalState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findAlertSystemStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findAlertSystemStates();
  *(std::vector< OSCLib::Data::OSCP::AlertSystemState > **)&jresult = new std::vector< OSCLib::Data::OSCP::AlertSystemState >((const std::vector< OSCLib::Data::OSCP::AlertSystemState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findClockStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findClockStates();
  *(std::vector< OSCLib::Data::OSCP::ClockState > **)&jresult = new std::vector< OSCLib::Data::OSCP::ClockState >((const std::vector< OSCLib::Data::OSCP::ClockState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findComponentStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findComponentStates();
  *(std::vector< OSCLib::Data::OSCP::ComponentState > **)&jresult = new std::vector< OSCLib::Data::OSCP::ComponentState >((const std::vector< OSCLib::Data::OSCP::ComponentState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findEnsembleContextStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findEnsembleContextStates();
  *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::EnsembleContextState >((const std::vector< OSCLib::Data::OSCP::EnsembleContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findEnumStringMetricStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findEnumStringMetricStates();
  *(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > **)&jresult = new std::vector< OSCLib::Data::OSCP::EnumStringMetricState >((const std::vector< OSCLib::Data::OSCP::EnumStringMetricState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findHydraMDSStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findHydraMDSStates();
  *(std::vector< OSCLib::Data::OSCP::HydraMDSState > **)&jresult = new std::vector< OSCLib::Data::OSCP::HydraMDSState >((const std::vector< OSCLib::Data::OSCP::HydraMDSState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findLimitAlertConditionStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findLimitAlertConditionStates();
  *(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > **)&jresult = new std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >((const std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findLocationContextStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findLocationContextStates();
  *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocationContextState >((const std::vector< OSCLib::Data::OSCP::LocationContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findNumericMetricStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findNumericMetricStates();
  *(std::vector< OSCLib::Data::OSCP::NumericMetricState > **)&jresult = new std::vector< OSCLib::Data::OSCP::NumericMetricState >((const std::vector< OSCLib::Data::OSCP::NumericMetricState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findOperatorContextStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findOperatorContextStates();
  *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::OperatorContextState >((const std::vector< OSCLib::Data::OSCP::OperatorContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findPatientContextStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findPatientContextStates();
  *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::PatientContextState >((const std::vector< OSCLib::Data::OSCP::PatientContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findRealTimeSampleArrayMetricStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findRealTimeSampleArrayMetricStates();
  *(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > **)&jresult = new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >((const std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findStringMetricStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findStringMetricStates();
  *(std::vector< OSCLib::Data::OSCP::StringMetricState > **)&jresult = new std::vector< OSCLib::Data::OSCP::StringMetricState >((const std::vector< OSCLib::Data::OSCP::StringMetricState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1findWorkflowContextStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findWorkflowContextStates();
  *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::WorkflowContextState >((const std::vector< OSCLib::Data::OSCP::WorkflowContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::ClockState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ClockState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClockState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::ClockState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::ComponentState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ComponentState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ComponentState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::ComponentState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::LocationContextState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::HydraMDSState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::HydraMDSState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::OperationState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperationState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::OperationState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::OperatorContextState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::PatientContextState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MDState_1addState_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MDState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2);
  *(OSCLib::Data::OSCP::MDState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Measure_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Measure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::Measure *)new OSCLib::Data::OSCP::Measure();
  *(OSCLib::Data::OSCP::Measure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Measure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Measure *arg1 = 0 ;
  OSCLib::Data::OSCP::Measure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Measure **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Measure const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Measure *)new OSCLib::Data::OSCP::Measure((OSCLib::Data::OSCP::Measure const &)*arg1);
  *(OSCLib::Data::OSCP::Measure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1Measure(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::Measure **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Measure_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  OSCLib::Data::OSCP::Measure *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Measure **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Measure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Measure const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Measure const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Measure_1setMeasurementUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::Measure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Measure **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Measure *) &(arg1)->setMeasurementUnit((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::Measure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Measure_1getMeasurementUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Measure **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Measure const *)arg1)->getMeasurementUnit();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Measure_1setMeasuredValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::Measure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Measure **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Measure *) &(arg1)->setMeasuredValue((double const &)*arg2);
  *(OSCLib::Data::OSCP::Measure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_Measure_1getMeasuredValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Measure **)&jarg1; 
  result = (double)((OSCLib::Data::OSCP::Measure const *)arg1)->getMeasuredValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Measure_1getMeasuredValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  double *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Measure **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::Measure const *)arg1)->getMeasuredValue(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Measure_1hasMeasuredValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Measure **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Measure const *)arg1)->hasMeasuredValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1MeasurementState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MeasurementState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::MeasurementState *)new OSCLib::Data::OSCP::MeasurementState();
  *(OSCLib::Data::OSCP::MeasurementState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1MeasurementState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = 0 ;
  OSCLib::Data::OSCP::MeasurementState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::MeasurementState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MeasurementState *)new OSCLib::Data::OSCP::MeasurementState((OSCLib::Data::OSCP::MeasurementState const &)*arg1);
  *(OSCLib::Data::OSCP::MeasurementState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1MeasurementState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_MeasurementState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::MeasurementState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::MeasurementState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MeasurementState_1setValidity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  OSCLib::Data::OSCP::MetricMeasurementValidity *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricMeasurementValidity temp2 ;
  OSCLib::Data::OSCP::MeasurementState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricMeasurementValidity)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::MeasurementState *) &(arg1)->setValidity((OSCLib::Data::OSCP::MetricMeasurementValidity const &)*arg2);
  *(OSCLib::Data::OSCP::MeasurementState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_MeasurementState_1getValidity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  OSCLib::Data::OSCP::MetricMeasurementValidity result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1; 
  result = (OSCLib::Data::OSCP::MetricMeasurementValidity)((OSCLib::Data::OSCP::MeasurementState const *)arg1)->getValidity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MeasurementState_1setMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  OSCLib::Data::OSCP::GenerationMode *arg2 = 0 ;
  OSCLib::Data::OSCP::GenerationMode temp2 ;
  OSCLib::Data::OSCP::MeasurementState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::GenerationMode)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::MeasurementState *) &(arg1)->setMode((OSCLib::Data::OSCP::GenerationMode const &)*arg2);
  *(OSCLib::Data::OSCP::MeasurementState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_MeasurementState_1getMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  OSCLib::Data::OSCP::GenerationMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1; 
  result = (OSCLib::Data::OSCP::GenerationMode)((OSCLib::Data::OSCP::MeasurementState const *)arg1)->getMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MeasurementState_1getMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  OSCLib::Data::OSCP::GenerationMode *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::GenerationMode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::GenerationMode & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MeasurementState const *)arg1)->getMode(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MeasurementState_1hasMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::MeasurementState const *)arg1)->hasMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_MeasurementState_1setQI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::MeasurementState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::MeasurementState *) &(arg1)->setQI((double const &)*arg2);
  *(OSCLib::Data::OSCP::MeasurementState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_MeasurementState_1getQI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1; 
  result = (double)((OSCLib::Data::OSCP::MeasurementState const *)arg1)->getQI();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MeasurementState_1getQI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  double *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MeasurementState const *)arg1)->getQI(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_MeasurementState_1hasQI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::MeasurementState const *)arg1)->hasQI();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1NumericMetricDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *)new OSCLib::Data::OSCP::NumericMetricDescriptor();
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1NumericMetricDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *)new OSCLib::Data::OSCP::NumericMetricDescriptor((OSCLib::Data::OSCP::NumericMetricDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1NumericMetricDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::NumericMetricDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1setUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setUnit((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getUnit();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1setMetricCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricCategory temp2 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricCategory)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setMetricCategory((OSCLib::Data::OSCP::MetricCategory const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getMetricCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::MetricCategory)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getMetricCategory();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1setAvailability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricAvailability temp2 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricAvailability)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setAvailability((OSCLib::Data::OSCP::MetricAvailability const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getAvailability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::MetricAvailability)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getAvailability();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1setMaxDelayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setMaxDelayTime((OSCLib::Data::OSCP::Duration const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getMaxDelayTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getMaxDelayTime();
  *(OSCLib::Data::OSCP::Duration **)&jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getMaxDelayTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getMaxDelayTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1hasMaxDelayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->hasMaxDelayTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1addBodySite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->addBodySite((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getBodySites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getBodySites();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1clearBodySites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  (arg1)->clearBodySites();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1setResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setResolution((double const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = (double)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getResolution();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1setMeasurePeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setMeasurePeriod((OSCLib::Data::OSCP::Duration const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getMeasurePeriod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getMeasurePeriod();
  *(OSCLib::Data::OSCP::Duration **)&jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getMeasurePeriod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getMeasurePeriod(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1hasMeasurePeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->hasMeasurePeriod();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1setAveragingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setAveragingPeriod((OSCLib::Data::OSCP::Duration const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getAveragingPeriod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getAveragingPeriod();
  *(OSCLib::Data::OSCP::Duration **)&jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getAveragingPeriod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getAveragingPeriod(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1hasAveragingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->hasAveragingPeriod();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1addTechnicalRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Range *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Range const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->addTechnicalRange((OSCLib::Data::OSCP::Range const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1getTechnicalRanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getTechnicalRanges();
  *(std::vector< OSCLib::Data::OSCP::Range > **)&jresult = new std::vector< OSCLib::Data::OSCP::Range >((const std::vector< OSCLib::Data::OSCP::Range > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricDescriptor_1clearTechnicalRanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg1; 
  (arg1)->clearTechnicalRanges();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1NumericMetricState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::NumericMetricState *)new OSCLib::Data::OSCP::NumericMetricState();
  *(OSCLib::Data::OSCP::NumericMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1NumericMetricState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricState *)new OSCLib::Data::OSCP::NumericMetricState((OSCLib::Data::OSCP::NumericMetricState const &)*arg1);
  *(OSCLib::Data::OSCP::NumericMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1NumericMetricState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getStateVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1setComponentActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentActivation temp2 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::ComponentActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setComponentActivationState((OSCLib::Data::OSCP::ComponentActivation const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getComponentActivationState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = (OSCLib::Data::OSCP::ComponentActivation)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getComponentActivationState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getComponentActivationState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ComponentActivation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ComponentActivation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getComponentActivationState(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1hasComponentActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasComponentActivationState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1setCalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setCalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getCalibrationInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getCalibrationInfo();
  *(OSCLib::Data::OSCP::CalibrationInfo **)&jresult = new OSCLib::Data::OSCP::CalibrationInfo((const OSCLib::Data::OSCP::CalibrationInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getCalibrationInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getCalibrationInfo(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1hasCalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasCalibrationInfo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1setOperatingHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setOperatingHours((int const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getOperatingHours_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getOperatingHours();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getOperatingHours_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getOperatingHours(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1hasOperatingHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasOperatingHours();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1setOperatingCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setOperatingCycles((int const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getOperatingCycles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getOperatingCycles();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getOperatingCycles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getOperatingCycles(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1hasOperatingCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasOperatingCycles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1setObservedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setObservedValue((OSCLib::Data::OSCP::NumericMetricValue const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getObservedValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::NumericMetricValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getObservedValue();
  *(OSCLib::Data::OSCP::NumericMetricValue **)&jresult = new OSCLib::Data::OSCP::NumericMetricValue((const OSCLib::Data::OSCP::NumericMetricValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getObservedValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getObservedValue(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1hasObservedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasObservedValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1addPhysiologicalRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::Range *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Range const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->addPhysiologicalRange((OSCLib::Data::OSCP::Range const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1getPhysiologicalRanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getPhysiologicalRanges();
  *(std::vector< OSCLib::Data::OSCP::Range > **)&jresult = new std::vector< OSCLib::Data::OSCP::Range >((const std::vector< OSCLib::Data::OSCP::Range > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricState_1clearPhysiologicalRanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg1; 
  (arg1)->clearPhysiologicalRanges();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1NumericMetricValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::NumericMetricValue *)new OSCLib::Data::OSCP::NumericMetricValue();
  *(OSCLib::Data::OSCP::NumericMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1NumericMetricValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricValue *)new OSCLib::Data::OSCP::NumericMetricValue((OSCLib::Data::OSCP::NumericMetricValue const &)*arg1);
  *(OSCLib::Data::OSCP::NumericMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1NumericMetricValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricValue const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::NumericMetricValue const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1setMeasurementState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::MeasurementState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricValue *) &(arg1)->setMeasurementState((OSCLib::Data::OSCP::MeasurementState const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1getMeasurementState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::MeasurementState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getMeasurementState();
  *(OSCLib::Data::OSCP::MeasurementState **)&jresult = new OSCLib::Data::OSCP::MeasurementState((const OSCLib::Data::OSCP::MeasurementState &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1setStart_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricValue *) &(arg1)->setStart_Time((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1getStart_1Time_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getStart_Time();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1getStart_1Time_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getStart_Time(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1hasStart_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->hasStart_Time();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1setStop_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricValue *) &(arg1)->setStop_Time((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1getStop_1Time_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getStop_Time();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1getStop_1Time_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getStop_Time(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1hasStop_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->hasStop_Time();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1setObservationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricValue *) &(arg1)->setObservationTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1getObservationTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getObservationTime();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1getObservationTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getObservationTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1hasObservationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->hasObservationTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricValue *) &(arg1)->setValue((double const &)*arg2);
  *(OSCLib::Data::OSCP::NumericMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1getValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  result = (double)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1getValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  double *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getValue(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_NumericMetricValue_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::NumericMetricValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->hasValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperationInvocationContext_1none(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< OSCLib::Data::OSCP::OperationInvocationContext > result;
  
  (void)jenv;
  (void)jcls;
  result = OSCLib::Data::OSCP::OperationInvocationContext::none();
  *(OSCLib::Data::OSCP::OperationInvocationContext **)&jresult = new OSCLib::Data::OSCP::OperationInvocationContext((const OSCLib::Data::OSCP::OperationInvocationContext &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OperationInvocationContext(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  OSCLib::Data::OSCP::OperationInvocationContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  result = (OSCLib::Data::OSCP::OperationInvocationContext *)new OSCLib::Data::OSCP::OperationInvocationContext((std::string const &)*arg1,arg2);
  *(OSCLib::Data::OSCP::OperationInvocationContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OperationInvocationContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OperationInvocationContext *arg1 = (OSCLib::Data::OSCP::OperationInvocationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OperationInvocationContext_1operationHandle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg1 = (OSCLib::Data::OSCP::OperationInvocationContext *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg1; 
  result = (std::string *) & ((arg1)->operationHandle);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperationInvocationContext_1transactionId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg1 = (OSCLib::Data::OSCP::OperationInvocationContext *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg1; 
  result = (unsigned int)(unsigned int) ((arg1)->transactionId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OperationState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OperationState *)new OSCLib::Data::OSCP::OperationState();
  *(OSCLib::Data::OSCP::OperationState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OperationState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = 0 ;
  OSCLib::Data::OSCP::OperationState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperationState *)new OSCLib::Data::OSCP::OperationState((OSCLib::Data::OSCP::OperationState const &)*arg1);
  *(OSCLib::Data::OSCP::OperationState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OperationState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OperationState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  OSCLib::Data::OSCP::OperationState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperationState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::OperationState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperationState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::OperationState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::OperationState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OperationState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperationState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperationState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OperationState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperationState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperationState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperationState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::OperationState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::OperationState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OperationState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperationState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperationState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperationState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::OperationState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperationState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperationState const *)arg1)->getStateVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperationState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OperationState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperationState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperationState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperationState_1setOperatingMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  OSCLib::Data::OSCP::OperatingMode *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatingMode temp2 ;
  OSCLib::Data::OSCP::OperationState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::OperatingMode)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::OperationState *) &(arg1)->setOperatingMode((OSCLib::Data::OSCP::OperatingMode const &)*arg2);
  *(OSCLib::Data::OSCP::OperationState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OperationState_1getOperatingMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  OSCLib::Data::OSCP::OperatingMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperationState **)&jarg1; 
  result = (OSCLib::Data::OSCP::OperatingMode)((OSCLib::Data::OSCP::OperationState const *)arg1)->getOperatingMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OperatorContextDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OperatorContextDescriptor *)new OSCLib::Data::OSCP::OperatorContextDescriptor();
  *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OperatorContextDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextDescriptor *)new OSCLib::Data::OSCP::OperatorContextDescriptor((OSCLib::Data::OSCP::OperatorContextDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OperatorContextDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::OperatorContextDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::OperatorContextDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::OperatorContextDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OperatorContextState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OperatorContextState *)new OSCLib::Data::OSCP::OperatorContextState();
  *(OSCLib::Data::OSCP::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OperatorContextState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *)new OSCLib::Data::OSCP::OperatorContextState((OSCLib::Data::OSCP::OperatorContextState const &)*arg1);
  *(OSCLib::Data::OSCP::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OperatorContextState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::OperatorContextState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getStateVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1setContextAssociation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation *arg2 = 0 ;
  OSCLib::Data::OSCP::ContextAssociation temp2 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::ContextAssociation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setContextAssociation((OSCLib::Data::OSCP::ContextAssociation const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getContextAssociation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = (OSCLib::Data::OSCP::ContextAssociation)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getContextAssociation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getContextAssociation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ContextAssociation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ContextAssociation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getContextAssociation(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1hasContextAssociation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->hasContextAssociation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1setBindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ReferencedVersion const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setBindingMDIBVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getBindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getBindingMDIBVersion();
  *(OSCLib::Data::OSCP::ReferencedVersion **)&jresult = new OSCLib::Data::OSCP::ReferencedVersion((const OSCLib::Data::OSCP::ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1setUnbindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ReferencedVersion const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setUnbindingMDIBVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getUnbindingMDIBVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getUnbindingMDIBVersion();
  *(OSCLib::Data::OSCP::ReferencedVersion **)&jresult = new OSCLib::Data::OSCP::ReferencedVersion((const OSCLib::Data::OSCP::ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getUnbindingMDIBVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ReferencedVersion & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getUnbindingMDIBVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1hasUnbindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->hasUnbindingMDIBVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1setBindingStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setBindingStartTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getBindingStartTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getBindingStartTime();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getBindingStartTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getBindingStartTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1hasBindingStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->hasBindingStartTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1setBindingEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setBindingEndTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getBindingEndTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getBindingEndTime();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getBindingEndTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getBindingEndTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1hasBindingEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->hasBindingEndTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1addValidator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->addValidator((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getValidators();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1clearValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  (arg1)->clearValidators();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1addIdentification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->addIdentification((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::OperatorContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1getIdentifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getIdentifications();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OperatorContextState_1clearIdentifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg1; 
  (arg1)->clearIdentifications();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OrderDetail_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OrderDetail *)new OSCLib::Data::OSCP::OrderDetail();
  *(OSCLib::Data::OSCP::OrderDetail **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OrderDetail_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = 0 ;
  OSCLib::Data::OSCP::OrderDetail *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OrderDetail const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OrderDetail *)new OSCLib::Data::OSCP::OrderDetail((OSCLib::Data::OSCP::OrderDetail const &)*arg1);
  *(OSCLib::Data::OSCP::OrderDetail **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OrderDetail(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OrderDetail_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OrderDetail const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::OrderDetail const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OrderDetail_1setStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::DateTime *arg2 = 0 ;
  OSCLib::Data::OSCP::OrderDetail *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::DateTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DateTime const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OrderDetail *) &(arg1)->setStart((OSCLib::Data::OSCP::DateTime const &)*arg2);
  *(OSCLib::Data::OSCP::OrderDetail **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OrderDetail_1getStart_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::DateTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OrderDetail const *)arg1)->getStart();
  *(OSCLib::Data::OSCP::DateTime **)&jresult = new OSCLib::Data::OSCP::DateTime((const OSCLib::Data::OSCP::DateTime &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OrderDetail_1getStart_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::DateTime *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::DateTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DateTime & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OrderDetail const *)arg1)->getStart(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OrderDetail_1hasStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OrderDetail const *)arg1)->hasStart();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OrderDetail_1setEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::DateTime *arg2 = 0 ;
  OSCLib::Data::OSCP::OrderDetail *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::DateTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DateTime const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OrderDetail *) &(arg1)->setEnd((OSCLib::Data::OSCP::DateTime const &)*arg2);
  *(OSCLib::Data::OSCP::OrderDetail **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OrderDetail_1getEnd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::DateTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OrderDetail const *)arg1)->getEnd();
  *(OSCLib::Data::OSCP::DateTime **)&jresult = new OSCLib::Data::OSCP::DateTime((const OSCLib::Data::OSCP::DateTime &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OrderDetail_1getEnd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::DateTime *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::DateTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DateTime & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::OrderDetail const *)arg1)->getEnd(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OrderDetail_1hasEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OrderDetail const *)arg1)->hasEnd();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OrderDetail_1addPerformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::PersonParticipation *arg2 = 0 ;
  OSCLib::Data::OSCP::OrderDetail *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PersonParticipation const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OrderDetail *) &(arg1)->addPerformer((OSCLib::Data::OSCP::PersonParticipation const &)*arg2);
  *(OSCLib::Data::OSCP::OrderDetail **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OrderDetail_1getPerformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OrderDetail const *)arg1)->getPerformers();
  *(std::vector< OSCLib::Data::OSCP::PersonParticipation > **)&jresult = new std::vector< OSCLib::Data::OSCP::PersonParticipation >((const std::vector< OSCLib::Data::OSCP::PersonParticipation > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OrderDetail_1clearPerformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  (arg1)->clearPerformers();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OrderDetail_1addService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::OrderDetail *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OrderDetail *) &(arg1)->addService((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::OrderDetail **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OrderDetail_1getServices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OrderDetail const *)arg1)->getServices();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OrderDetail_1clearServices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg1; 
  (arg1)->clearServices();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Order_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::Order *)new OSCLib::Data::OSCP::Order();
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Order_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Order const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *)new OSCLib::Data::OSCP::Order((OSCLib::Data::OSCP::Order const &)*arg1);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1Order(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Order_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::Order *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Order **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Order const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Order const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1setVisitNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setVisitNumber((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1getVisitNumber_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getVisitNumber();
  *(OSCLib::Data::OSCP::InstanceIdentifier **)&jresult = new OSCLib::Data::OSCP::InstanceIdentifier((const OSCLib::Data::OSCP::InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Order_1getVisitNumber_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->getVisitNumber(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Order_1hasVisitNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->hasVisitNumber();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1setPlacerOrderNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setPlacerOrderNumber((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1getPlacerOrderNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getPlacerOrderNumber();
  *(OSCLib::Data::OSCP::InstanceIdentifier **)&jresult = new OSCLib::Data::OSCP::InstanceIdentifier((const OSCLib::Data::OSCP::InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1setFillerOrderNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setFillerOrderNumber((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1getFillerOrderNumber_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getFillerOrderNumber();
  *(OSCLib::Data::OSCP::InstanceIdentifier **)&jresult = new OSCLib::Data::OSCP::InstanceIdentifier((const OSCLib::Data::OSCP::InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Order_1getFillerOrderNumber_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->getFillerOrderNumber(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Order_1hasFillerOrderNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->hasFillerOrderNumber();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1setPatient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PersonReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PersonReference const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setPatient((OSCLib::Data::OSCP::PersonReference const &)*arg2);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1getPatient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getPatient();
  *(OSCLib::Data::OSCP::PersonReference **)&jresult = new OSCLib::Data::OSCP::PersonReference((const OSCLib::Data::OSCP::PersonReference &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1setReferringPhysician(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PersonReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PersonReference const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setReferringPhysician((OSCLib::Data::OSCP::PersonReference const &)*arg2);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1getReferringPhysician_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getReferringPhysician();
  *(OSCLib::Data::OSCP::PersonReference **)&jresult = new OSCLib::Data::OSCP::PersonReference((const OSCLib::Data::OSCP::PersonReference &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Order_1getReferringPhysician_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PersonReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PersonReference & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->getReferringPhysician(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Order_1hasReferringPhysician(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->hasReferringPhysician();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1setRequestingPhysician(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PersonReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PersonReference const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setRequestingPhysician((OSCLib::Data::OSCP::PersonReference const &)*arg2);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1getRequestingPhysician_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getRequestingPhysician();
  *(OSCLib::Data::OSCP::PersonReference **)&jresult = new OSCLib::Data::OSCP::PersonReference((const OSCLib::Data::OSCP::PersonReference &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Order_1getRequestingPhysician_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PersonReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PersonReference & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->getRequestingPhysician(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Order_1hasRequestingPhysician(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->hasRequestingPhysician();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1setRequestedOrderDetail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OrderDetail const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setRequestedOrderDetail((OSCLib::Data::OSCP::OrderDetail const &)*arg2);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1getRequestedOrderDetail_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::OrderDetail result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getRequestedOrderDetail();
  *(OSCLib::Data::OSCP::OrderDetail **)&jresult = new OSCLib::Data::OSCP::OrderDetail((const OSCLib::Data::OSCP::OrderDetail &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Order_1getRequestedOrderDetail_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OrderDetail & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->getRequestedOrderDetail(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Order_1hasRequestedOrderDetail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->hasRequestedOrderDetail();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1setPerformedOrderDetail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OrderDetail const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setPerformedOrderDetail((OSCLib::Data::OSCP::OrderDetail const &)*arg2);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1getPerformedOrderDetail_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::OrderDetail result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getPerformedOrderDetail();
  *(OSCLib::Data::OSCP::OrderDetail **)&jresult = new OSCLib::Data::OSCP::OrderDetail((const OSCLib::Data::OSCP::OrderDetail &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Order_1getPerformedOrderDetail_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OrderDetail **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OrderDetail & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->getPerformedOrderDetail(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Order_1hasPerformedOrderDetail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->hasPerformedOrderDetail();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1addReason(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClinicalInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->addReason((OSCLib::Data::OSCP::ClinicalInfo const &)*arg2);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1getReasons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getReasons();
  *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jresult = new std::vector< OSCLib::Data::OSCP::ClinicalInfo >((const std::vector< OSCLib::Data::OSCP::ClinicalInfo > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Order_1clearReasons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  (arg1)->clearReasons();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1addDangerCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->addDangerCode((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1getDangerCodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getDangerCodes();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Order_1clearDangerCodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  (arg1)->clearDangerCodes();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1addRelevantClinicalInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ClinicalInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClinicalInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->addRelevantClinicalInfo((OSCLib::Data::OSCP::ClinicalInfo const &)*arg2);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1getRelevantClinicalInfos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getRelevantClinicalInfos();
  *(std::vector< OSCLib::Data::OSCP::ClinicalInfo > **)&jresult = new std::vector< OSCLib::Data::OSCP::ClinicalInfo >((const std::vector< OSCLib::Data::OSCP::ClinicalInfo > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Order_1clearRelevantClinicalInfos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  (arg1)->clearRelevantClinicalInfos();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1addImagingProcedure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ImagingProcedure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ImagingProcedure const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->addImagingProcedure((OSCLib::Data::OSCP::ImagingProcedure const &)*arg2);
  *(OSCLib::Data::OSCP::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Order_1getImagingProcedures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getImagingProcedures();
  *(std::vector< OSCLib::Data::OSCP::ImagingProcedure > **)&jresult = new std::vector< OSCLib::Data::OSCP::ImagingProcedure >((const std::vector< OSCLib::Data::OSCP::ImagingProcedure > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Order_1clearImagingProcedures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Order **)&jarg1; 
  (arg1)->clearImagingProcedures();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PatientContextDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::PatientContextDescriptor *)new OSCLib::Data::OSCP::PatientContextDescriptor();
  *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PatientContextDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextDescriptor *)new OSCLib::Data::OSCP::PatientContextDescriptor((OSCLib::Data::OSCP::PatientContextDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1PatientContextDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::PatientContextDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::PatientContextDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::PatientContextDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PatientContextState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::PatientContextState *)new OSCLib::Data::OSCP::PatientContextState();
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PatientContextState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *)new OSCLib::Data::OSCP::PatientContextState((OSCLib::Data::OSCP::PatientContextState const &)*arg1);
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1PatientContextState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PatientContextState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::PatientContextState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getStateVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1setContextAssociation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation *arg2 = 0 ;
  OSCLib::Data::OSCP::ContextAssociation temp2 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::ContextAssociation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setContextAssociation((OSCLib::Data::OSCP::ContextAssociation const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getContextAssociation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = (OSCLib::Data::OSCP::ContextAssociation)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getContextAssociation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getContextAssociation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ContextAssociation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ContextAssociation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getContextAssociation(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1hasContextAssociation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasContextAssociation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1setBindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ReferencedVersion const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setBindingMDIBVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getBindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getBindingMDIBVersion();
  *(OSCLib::Data::OSCP::ReferencedVersion **)&jresult = new OSCLib::Data::OSCP::ReferencedVersion((const OSCLib::Data::OSCP::ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1setUnbindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ReferencedVersion const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setUnbindingMDIBVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getUnbindingMDIBVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getUnbindingMDIBVersion();
  *(OSCLib::Data::OSCP::ReferencedVersion **)&jresult = new OSCLib::Data::OSCP::ReferencedVersion((const OSCLib::Data::OSCP::ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getUnbindingMDIBVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ReferencedVersion & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getUnbindingMDIBVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1hasUnbindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasUnbindingMDIBVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1setBindingStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setBindingStartTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getBindingStartTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getBindingStartTime();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getBindingStartTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getBindingStartTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1hasBindingStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasBindingStartTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1setBindingEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setBindingEndTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getBindingEndTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getBindingEndTime();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getBindingEndTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getBindingEndTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1hasBindingEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasBindingEndTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1addValidator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->addValidator((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getValidators();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PatientContextState_1clearValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  (arg1)->clearValidators();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1addIdentification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->addIdentification((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getIdentifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getIdentifications();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PatientContextState_1clearIdentifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  (arg1)->clearIdentifications();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1setCoreData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientDemographicsCoreData const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setCoreData((OSCLib::Data::OSCP::PatientDemographicsCoreData const &)*arg2);
  *(OSCLib::Data::OSCP::PatientContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getCoreData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getCoreData();
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = new OSCLib::Data::OSCP::PatientDemographicsCoreData((const OSCLib::Data::OSCP::PatientDemographicsCoreData &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1getCoreData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientDemographicsCoreData & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getCoreData(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientContextState_1hasCoreData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasCoreData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PatientDemographicsCoreData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)new OSCLib::Data::OSCP::PatientDemographicsCoreData();
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PatientDemographicsCoreData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientDemographicsCoreData const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)new OSCLib::Data::OSCP::PatientDemographicsCoreData((OSCLib::Data::OSCP::PatientDemographicsCoreData const &)*arg1);
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1PatientDemographicsCoreData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientDemographicsCoreData const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::PatientDemographicsCoreData const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1setGivenname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setGivenname((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getGivenname_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getGivenname();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getGivenname_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getGivenname(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1hasGivenname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasGivenname();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1setFamilyname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setFamilyname((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getFamilyname_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getFamilyname();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getFamilyname_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getFamilyname(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1hasFamilyname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasFamilyname();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1setBirthname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setBirthname((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getBirthname_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getBirthname();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getBirthname_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getBirthname(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1hasBirthname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasBirthname();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1setTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setTitle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getTitle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getTitle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1hasTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasTitle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1addMiddlename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->addMiddlename((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getMiddlenames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getMiddlenames();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1clearMiddlenames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  (arg1)->clearMiddlenames();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1setSex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Sex *arg2 = 0 ;
  OSCLib::Data::OSCP::Sex temp2 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::Sex)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setSex((OSCLib::Data::OSCP::Sex const &)*arg2);
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getSex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Sex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = (OSCLib::Data::OSCP::Sex)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getSex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getSex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Sex *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Sex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Sex & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getSex(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1hasSex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasSex();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1setPatientType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::PatientType *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientType temp2 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::PatientType)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setPatientType((OSCLib::Data::OSCP::PatientType const &)*arg2);
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getPatientType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::PatientType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = (OSCLib::Data::OSCP::PatientType)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getPatientType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getPatientType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::PatientType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PatientType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientType & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getPatientType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1hasPatientType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasPatientType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1setDateOfBirth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::DateTime *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::DateTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DateTime const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setDateOfBirth((OSCLib::Data::OSCP::DateTime const &)*arg2);
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getDateOfBirth_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::DateTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getDateOfBirth();
  *(OSCLib::Data::OSCP::DateTime **)&jresult = new OSCLib::Data::OSCP::DateTime((const OSCLib::Data::OSCP::DateTime &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getDateOfBirth_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::DateTime *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::DateTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::DateTime & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getDateOfBirth(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1hasDateOfBirth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasDateOfBirth();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1setHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Measure *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Measure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Measure const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setHeight((OSCLib::Data::OSCP::Measure const &)*arg2);
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getHeight_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Measure result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getHeight();
  *(OSCLib::Data::OSCP::Measure **)&jresult = new OSCLib::Data::OSCP::Measure((const OSCLib::Data::OSCP::Measure &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getHeight_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Measure *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Measure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Measure & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getHeight(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1hasHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasHeight();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1setWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Measure *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Measure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Measure const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setWeight((OSCLib::Data::OSCP::Measure const &)*arg2);
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getWeight_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Measure result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getWeight();
  *(OSCLib::Data::OSCP::Measure **)&jresult = new OSCLib::Data::OSCP::Measure((const OSCLib::Data::OSCP::Measure &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getWeight_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Measure *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Measure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Measure & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getWeight(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1hasWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasWeight();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1setRace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setRace((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getRace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getRace();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1getRace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getRace(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_PatientDemographicsCoreData_1hasRace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PatientDemographicsCoreData **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasRace();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PersonParticipation_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::PersonParticipation *)new OSCLib::Data::OSCP::PersonParticipation();
  *(OSCLib::Data::OSCP::PersonParticipation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PersonParticipation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PersonParticipation const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonParticipation *)new OSCLib::Data::OSCP::PersonParticipation((OSCLib::Data::OSCP::PersonParticipation const &)*arg1);
  *(OSCLib::Data::OSCP::PersonParticipation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1PersonParticipation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PersonParticipation_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  OSCLib::Data::OSCP::PersonParticipation *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PersonParticipation const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::PersonParticipation const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonParticipation_1addName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg2 = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::BaseDemographics const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonParticipation *) &(arg1)->addName((OSCLib::Data::OSCP::BaseDemographics const &)*arg2);
  *(OSCLib::Data::OSCP::PersonParticipation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonParticipation_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PersonParticipation const *)arg1)->getNames();
  *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jresult = new std::vector< OSCLib::Data::OSCP::BaseDemographics >((const std::vector< OSCLib::Data::OSCP::BaseDemographics > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PersonParticipation_1clearNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg1; 
  (arg1)->clearNames();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonParticipation_1addRole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonParticipation *) &(arg1)->addRole((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::PersonParticipation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonParticipation_1getRoles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PersonParticipation const *)arg1)->getRoles();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PersonParticipation_1clearRoles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg1; 
  (arg1)->clearRoles();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonParticipation_1addIdentification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonParticipation *) &(arg1)->addIdentification((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::PersonParticipation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonParticipation_1getIdentifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PersonParticipation **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PersonParticipation const *)arg1)->getIdentifications();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PersonReference_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::PersonReference *)new OSCLib::Data::OSCP::PersonReference();
  *(OSCLib::Data::OSCP::PersonReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1PersonReference_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonReference *arg1 = 0 ;
  OSCLib::Data::OSCP::PersonReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PersonReference **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PersonReference const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonReference *)new OSCLib::Data::OSCP::PersonReference((OSCLib::Data::OSCP::PersonReference const &)*arg1);
  *(OSCLib::Data::OSCP::PersonReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1PersonReference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::PersonReference **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PersonReference_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  OSCLib::Data::OSCP::PersonReference *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PersonReference **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PersonReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PersonReference const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::PersonReference const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonReference_1addName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg2 = 0 ;
  OSCLib::Data::OSCP::PersonReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PersonReference **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::BaseDemographics **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::BaseDemographics const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonReference *) &(arg1)->addName((OSCLib::Data::OSCP::BaseDemographics const &)*arg2);
  *(OSCLib::Data::OSCP::PersonReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonReference_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PersonReference **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PersonReference const *)arg1)->getNames();
  *(std::vector< OSCLib::Data::OSCP::BaseDemographics > **)&jresult = new std::vector< OSCLib::Data::OSCP::BaseDemographics >((const std::vector< OSCLib::Data::OSCP::BaseDemographics > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_PersonReference_1clearNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PersonReference **)&jarg1; 
  (arg1)->clearNames();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonReference_1addIdentification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::PersonReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::PersonReference **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonReference *) &(arg1)->addIdentification((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::PersonReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_PersonReference_1getIdentifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::PersonReference **)&jarg1; 
  result = ((OSCLib::Data::OSCP::PersonReference const *)arg1)->getIdentifications();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ProductionSpecification_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::ProductionSpecification *)new OSCLib::Data::OSCP::ProductionSpecification();
  *(OSCLib::Data::OSCP::ProductionSpecification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ProductionSpecification_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ProductionSpecification const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ProductionSpecification *)new OSCLib::Data::OSCP::ProductionSpecification((OSCLib::Data::OSCP::ProductionSpecification const &)*arg1);
  *(OSCLib::Data::OSCP::ProductionSpecification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ProductionSpecification(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ProductionSpecification_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ProductionSpecification const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ProductionSpecification const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ProductionSpecification_1setspecType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ProductionSpecification *) &(arg1)->setspecType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::ProductionSpecification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ProductionSpecification_1getspecType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ProductionSpecification const *)arg1)->getspecType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ProductionSpecification_1setproductionSpec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::ProductionSpecification *) &(arg1)->setproductionSpec((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::ProductionSpecification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_ProductionSpecification_1getproductionSpec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ProductionSpecification const *)arg1)->getproductionSpec();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ProductionSpecification_1setcomponentId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ProductionSpecification *) &(arg1)->setcomponentId((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::ProductionSpecification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ProductionSpecification_1getcomponentId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg1; 
  result = ((OSCLib::Data::OSCP::ProductionSpecification const *)arg1)->getcomponentId();
  *(OSCLib::Data::OSCP::InstanceIdentifier **)&jresult = new OSCLib::Data::OSCP::InstanceIdentifier((const OSCLib::Data::OSCP::InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ProductionSpecification_1getcomponentId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::ProductionSpecification const *)arg1)->getcomponentId(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_ProductionSpecification_1hascomponentId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ProductionSpecification const *)arg1)->hascomponentId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Range_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::Range *)new OSCLib::Data::OSCP::Range();
  *(OSCLib::Data::OSCP::Range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Range_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = 0 ;
  OSCLib::Data::OSCP::Range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Range const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Range *)new OSCLib::Data::OSCP::Range((OSCLib::Data::OSCP::Range const &)*arg1);
  *(OSCLib::Data::OSCP::Range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1Range(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Range_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  OSCLib::Data::OSCP::Range *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Range const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Range const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Range_1setLower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::Range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Range *) &(arg1)->setLower((double const &)*arg2);
  *(OSCLib::Data::OSCP::Range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_Range_1getLower_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  result = (double)((OSCLib::Data::OSCP::Range const *)arg1)->getLower();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Range_1getLower_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::Range const *)arg1)->getLower(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Range_1hasLower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Range const *)arg1)->hasLower();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Range_1setUpper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::Range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Range *) &(arg1)->setUpper((double const &)*arg2);
  *(OSCLib::Data::OSCP::Range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_Range_1getUpper_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  result = (double)((OSCLib::Data::OSCP::Range const *)arg1)->getUpper();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Range_1getUpper_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::Range const *)arg1)->getUpper(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Range_1hasUpper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Range const *)arg1)->hasUpper();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Range_1setStepWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::Range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Range *) &(arg1)->setStepWidth((double const &)*arg2);
  *(OSCLib::Data::OSCP::Range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_Range_1getStepWidth_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  result = (double)((OSCLib::Data::OSCP::Range const *)arg1)->getStepWidth();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Range_1getStepWidth_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::Range const *)arg1)->getStepWidth(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_Range_1hasStepWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Range **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Range const *)arg1)->hasStepWidth();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RealTimeSampleArrayMetricDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)new OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor();
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RealTimeSampleArrayMetricDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)new OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1RealTimeSampleArrayMetricDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1setUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setUnit((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getUnit();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1setMetricCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricCategory temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricCategory)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setMetricCategory((OSCLib::Data::OSCP::MetricCategory const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getMetricCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::MetricCategory)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getMetricCategory();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1setAvailability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricAvailability temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricAvailability)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setAvailability((OSCLib::Data::OSCP::MetricAvailability const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getAvailability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::MetricAvailability)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getAvailability();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1setMaxDelayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setMaxDelayTime((OSCLib::Data::OSCP::Duration const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getMaxDelayTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getMaxDelayTime();
  *(OSCLib::Data::OSCP::Duration **)&jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getMaxDelayTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getMaxDelayTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1hasMaxDelayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->hasMaxDelayTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1addBodySite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->addBodySite((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getBodySites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getBodySites();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1clearBodySites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  (arg1)->clearBodySites();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1setSamplePeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setSamplePeriod((OSCLib::Data::OSCP::Duration const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getSamplePeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getSamplePeriod();
  *(OSCLib::Data::OSCP::Duration **)&jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1setResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setResolution((double const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = (double)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getResolution();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1addTechnicalRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Range *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Range const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->addTechnicalRange((OSCLib::Data::OSCP::Range const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1getTechnicalRanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getTechnicalRanges();
  *(std::vector< OSCLib::Data::OSCP::Range > **)&jresult = new std::vector< OSCLib::Data::OSCP::Range >((const std::vector< OSCLib::Data::OSCP::Range > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricDescriptor_1clearTechnicalRanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor **)&jarg1; 
  (arg1)->clearTechnicalRanges();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RealTimeSampleArrayMetricState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)new OSCLib::Data::OSCP::RealTimeSampleArrayMetricState();
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RealTimeSampleArrayMetricState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)new OSCLib::Data::OSCP::RealTimeSampleArrayMetricState((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg1);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1RealTimeSampleArrayMetricState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getStateVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1setComponentActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentActivation temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::ComponentActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setComponentActivationState((OSCLib::Data::OSCP::ComponentActivation const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getComponentActivationState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = (OSCLib::Data::OSCP::ComponentActivation)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getComponentActivationState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getComponentActivationState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ComponentActivation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ComponentActivation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getComponentActivationState(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1hasComponentActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasComponentActivationState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1setCalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setCalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getCalibrationInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getCalibrationInfo();
  *(OSCLib::Data::OSCP::CalibrationInfo **)&jresult = new OSCLib::Data::OSCP::CalibrationInfo((const OSCLib::Data::OSCP::CalibrationInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getCalibrationInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getCalibrationInfo(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1hasCalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasCalibrationInfo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1setOperatingHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setOperatingHours((int const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getOperatingHours_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getOperatingHours();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getOperatingHours_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getOperatingHours(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1hasOperatingHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasOperatingHours();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1setOperatingCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setOperatingCycles((int const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getOperatingCycles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getOperatingCycles();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getOperatingCycles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getOperatingCycles(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1hasOperatingCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasOperatingCycles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1setObservedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setObservedValue((OSCLib::Data::OSCP::RealTimeSampleArrayValue const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getObservedValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getObservedValue();
  *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jresult = new OSCLib::Data::OSCP::RealTimeSampleArrayValue((const OSCLib::Data::OSCP::RealTimeSampleArrayValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1getObservedValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getObservedValue(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayMetricState_1hasObservedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasObservedValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RealTimeSampleArrayValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)new OSCLib::Data::OSCP::RealTimeSampleArrayValue();
  *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RealTimeSampleArrayValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)new OSCLib::Data::OSCP::RealTimeSampleArrayValue((OSCLib::Data::OSCP::RealTimeSampleArrayValue const &)*arg1);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1RealTimeSampleArrayValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayValue const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::RealTimeSampleArrayValue const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1setMeasurementState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::MeasurementState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) &(arg1)->setMeasurementState((OSCLib::Data::OSCP::MeasurementState const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1getMeasurementState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::MeasurementState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getMeasurementState();
  *(OSCLib::Data::OSCP::MeasurementState **)&jresult = new OSCLib::Data::OSCP::MeasurementState((const OSCLib::Data::OSCP::MeasurementState &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1setStart_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) &(arg1)->setStart_Time((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1getStart_1Time_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getStart_Time();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1getStart_1Time_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getStart_Time(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1hasStart_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->hasStart_Time();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1setStop_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) &(arg1)->setStop_Time((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1getStop_1Time_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getStop_Time();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1getStop_1Time_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getStop_Time(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1hasStop_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->hasStop_Time();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1setObservationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) &(arg1)->setObservationTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1getObservationTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getObservationTime();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1getObservationTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getObservationTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1hasObservationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->hasObservationTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1setSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::RTValueType *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RTValueType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RTValueType const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) &(arg1)->setSamples((OSCLib::Data::OSCP::RTValueType const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1getSamples_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::RTValueType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getSamples();
  *(OSCLib::Data::OSCP::RTValueType **)&jresult = new OSCLib::Data::OSCP::RTValueType((const OSCLib::Data::OSCP::RTValueType &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1getSamples_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::RTValueType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RTValueType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RTValueType & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getSamples(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1hasSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->hasSamples();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1addAnnotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Annotation *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Annotation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Annotation const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) &(arg1)->addAnnotation((OSCLib::Data::OSCP::Annotation const &)*arg2);
  *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1getAnnotations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getAnnotations();
  *(std::vector< OSCLib::Data::OSCP::Annotation > **)&jresult = new std::vector< OSCLib::Data::OSCP::Annotation >((const std::vector< OSCLib::Data::OSCP::Annotation > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RealTimeSampleArrayValue_1clearAnnotations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RealTimeSampleArrayValue **)&jarg1; 
  (arg1)->clearAnnotations();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ReferencedVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::ReferencedVersion *)new OSCLib::Data::OSCP::ReferencedVersion();
  *(OSCLib::Data::OSCP::ReferencedVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1ReferencedVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg1 = 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ReferencedVersion const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ReferencedVersion *)new OSCLib::Data::OSCP::ReferencedVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg1);
  *(OSCLib::Data::OSCP::ReferencedVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1ReferencedVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::ReferencedVersion *arg1 = (OSCLib::Data::OSCP::ReferencedVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_ReferencedVersion_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::ReferencedVersion *arg1 = (OSCLib::Data::OSCP::ReferencedVersion *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ReferencedVersion const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ReferencedVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg1 = (OSCLib::Data::OSCP::ReferencedVersion *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg1; 
  result = (long long)((OSCLib::Data::OSCP::ReferencedVersion const *)arg1)->get();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_ReferencedVersion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg1 = (OSCLib::Data::OSCP::ReferencedVersion *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  OSCLib::Data::OSCP::ReferencedVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ReferencedVersion *) &(arg1)->set((long long const &)*arg2);
  *(OSCLib::Data::OSCP::ReferencedVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RemedyInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RemedyInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::RemedyInfo *)new OSCLib::Data::OSCP::RemedyInfo();
  *(OSCLib::Data::OSCP::RemedyInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RemedyInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RemedyInfo *arg1 = 0 ;
  OSCLib::Data::OSCP::RemedyInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RemedyInfo **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RemedyInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RemedyInfo *)new OSCLib::Data::OSCP::RemedyInfo((OSCLib::Data::OSCP::RemedyInfo const &)*arg1);
  *(OSCLib::Data::OSCP::RemedyInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1RemedyInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::RemedyInfo *arg1 = (OSCLib::Data::OSCP::RemedyInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::RemedyInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RemedyInfo_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::RemedyInfo *arg1 = (OSCLib::Data::OSCP::RemedyInfo *) 0 ;
  OSCLib::Data::OSCP::RemedyInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RemedyInfo **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RemedyInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RemedyInfo const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::RemedyInfo const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RemedyInfo_1addDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RemedyInfo *arg1 = (OSCLib::Data::OSCP::RemedyInfo *) 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::RemedyInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RemedyInfo **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RemedyInfo *) &(arg1)->addDescription((OSCLib::Data::OSCP::LocalizedText const &)*arg2);
  *(OSCLib::Data::OSCP::RemedyInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RemedyInfo_1getDescriptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RemedyInfo *arg1 = (OSCLib::Data::OSCP::RemedyInfo *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RemedyInfo **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RemedyInfo const *)arg1)->getDescriptions();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RemedyInfo_1clearDescriptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::RemedyInfo *arg1 = (OSCLib::Data::OSCP::RemedyInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RemedyInfo **)&jarg1; 
  (arg1)->clearDescriptions();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RTValueType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RTValueType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::RTValueType *)new OSCLib::Data::OSCP::RTValueType();
  *(OSCLib::Data::OSCP::RTValueType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1RTValueType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RTValueType *arg1 = 0 ;
  OSCLib::Data::OSCP::RTValueType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RTValueType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RTValueType const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RTValueType *)new OSCLib::Data::OSCP::RTValueType((OSCLib::Data::OSCP::RTValueType const &)*arg1);
  *(OSCLib::Data::OSCP::RTValueType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1RTValueType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::RTValueType *arg1 = (OSCLib::Data::OSCP::RTValueType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::RTValueType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_RTValueType_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::RTValueType *arg1 = (OSCLib::Data::OSCP::RTValueType *) 0 ;
  OSCLib::Data::OSCP::RTValueType *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RTValueType **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RTValueType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RTValueType const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::RTValueType const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RTValueType_1setValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RTValueType *arg1 = (OSCLib::Data::OSCP::RTValueType *) 0 ;
  std::vector< double > *arg2 = 0 ;
  OSCLib::Data::OSCP::RTValueType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::RTValueType **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RTValueType *) &(arg1)->setValues((std::vector< double > const &)*arg2);
  *(OSCLib::Data::OSCP::RTValueType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_RTValueType_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::RTValueType *arg1 = (OSCLib::Data::OSCP::RTValueType *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::RTValueType **)&jarg1; 
  result = ((OSCLib::Data::OSCP::RTValueType const *)arg1)->getValues();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SampleIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SampleIndex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::SampleIndex *)new OSCLib::Data::OSCP::SampleIndex();
  *(OSCLib::Data::OSCP::SampleIndex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SampleIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SampleIndex *arg1 = 0 ;
  OSCLib::Data::OSCP::SampleIndex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SampleIndex **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SampleIndex const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SampleIndex *)new OSCLib::Data::OSCP::SampleIndex((OSCLib::Data::OSCP::SampleIndex const &)*arg1);
  *(OSCLib::Data::OSCP::SampleIndex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SampleIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::SampleIndex *arg1 = (OSCLib::Data::OSCP::SampleIndex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::SampleIndex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SampleIndex_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::SampleIndex *arg1 = (OSCLib::Data::OSCP::SampleIndex *) 0 ;
  OSCLib::Data::OSCP::SampleIndex *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SampleIndex **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::SampleIndex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SampleIndex const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SampleIndex const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_SampleIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::SampleIndex *arg1 = (OSCLib::Data::OSCP::SampleIndex *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SampleIndex **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::SampleIndex const *)arg1)->get();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SampleIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SampleIndex *arg1 = (OSCLib::Data::OSCP::SampleIndex *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::SampleIndex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SampleIndex **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SampleIndex *) &(arg1)->set((int const &)*arg2);
  *(OSCLib::Data::OSCP::SampleIndex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SCODescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::SCODescriptor *)new OSCLib::Data::OSCP::SCODescriptor();
  *(OSCLib::Data::OSCP::SCODescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SCODescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SCODescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SCODescriptor *)new OSCLib::Data::OSCP::SCODescriptor((OSCLib::Data::OSCP::SCODescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::SCODescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SCODescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SCODescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SCODescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SCODescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::SCODescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SCODescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SCODescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SCODescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::SCODescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SCODescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::SCODescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1addProductionSpecification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg2 = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ProductionSpecification const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SCODescriptor *) &(arg1)->addProductionSpecification((OSCLib::Data::OSCP::ProductionSpecification const &)*arg2);
  *(OSCLib::Data::OSCP::SCODescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1getProductionSpecifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getProductionSpecifications();
  *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jresult = new std::vector< OSCLib::Data::OSCP::ProductionSpecification >((const std::vector< OSCLib::Data::OSCP::ProductionSpecification > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1clearProductionSpecifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  (arg1)->clearProductionSpecifications();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1collectAllActivateOperationDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->collectAllActivateOperationDescriptors();
  *(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >((const std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1collectAllSetAlertStateOperationDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->collectAllSetAlertStateOperationDescriptors();
  *(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >((const std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1collectAllSetContextOperationDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->collectAllSetContextOperationDescriptors();
  *(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >((const std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1collectAllSetRangeOperationDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->collectAllSetRangeOperationDescriptors();
  *(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >((const std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1collectAllSetStringOperationDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->collectAllSetStringOperationDescriptors();
  *(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >((const std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SCODescriptor_1collectAllSetValueOperationDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SCODescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->collectAllSetValueOperationDescriptors();
  *(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >((const std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetAlertStateOperationDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)new OSCLib::Data::OSCP::SetAlertStateOperationDescriptor();
  *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetAlertStateOperationDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)new OSCLib::Data::OSCP::SetAlertStateOperationDescriptor((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SetAlertStateOperationDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1setOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &(arg1)->setOperationTarget((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1getOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getOperationTarget();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1addModifiableElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &(arg1)->addModifiableElement((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1getModifiableElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getModifiableElements();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetAlertStateOperationDescriptor_1clearModifiableElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor **)&jarg1; 
  (arg1)->clearModifiableElements();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetContextOperationDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)new OSCLib::Data::OSCP::SetContextOperationDescriptor();
  *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetContextOperationDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SetContextOperationDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)new OSCLib::Data::OSCP::SetContextOperationDescriptor((OSCLib::Data::OSCP::SetContextOperationDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SetContextOperationDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SetContextOperationDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SetContextOperationDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1setOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &(arg1)->setOperationTarget((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1getOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getOperationTarget();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1addModifiableElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &(arg1)->addModifiableElement((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1getModifiableElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getModifiableElements();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetContextOperationDescriptor_1clearModifiableElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetContextOperationDescriptor **)&jarg1; 
  (arg1)->clearModifiableElements();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetRangeOperationDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)new OSCLib::Data::OSCP::SetRangeOperationDescriptor();
  *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetRangeOperationDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SetRangeOperationDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)new OSCLib::Data::OSCP::SetRangeOperationDescriptor((OSCLib::Data::OSCP::SetRangeOperationDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SetRangeOperationDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SetRangeOperationDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SetRangeOperationDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1setOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->setOperationTarget((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1getOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getOperationTarget();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1addModifiableElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->addModifiableElement((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1getModifiableElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getModifiableElements();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1clearModifiableElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  (arg1)->clearModifiableElements();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1setAllowedMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::Range *arg2 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Range **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Range const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->setAllowedMaxRange((OSCLib::Data::OSCP::Range const &)*arg2);
  *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetRangeOperationDescriptor_1getAllowedMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::Range result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetRangeOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getAllowedMaxRange();
  *(OSCLib::Data::OSCP::Range **)&jresult = new OSCLib::Data::OSCP::Range((const OSCLib::Data::OSCP::Range &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetStringOperationDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)new OSCLib::Data::OSCP::SetStringOperationDescriptor();
  *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetStringOperationDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SetStringOperationDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)new OSCLib::Data::OSCP::SetStringOperationDescriptor((OSCLib::Data::OSCP::SetStringOperationDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SetStringOperationDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SetStringOperationDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SetStringOperationDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1setOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &(arg1)->setOperationTarget((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1getOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getOperationTarget();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1addModifiableElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &(arg1)->addModifiableElement((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1getModifiableElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getModifiableElements();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetStringOperationDescriptor_1clearModifiableElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetStringOperationDescriptor **)&jarg1; 
  (arg1)->clearModifiableElements();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetValueOperationDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)new OSCLib::Data::OSCP::SetValueOperationDescriptor();
  *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SetValueOperationDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SetValueOperationDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)new OSCLib::Data::OSCP::SetValueOperationDescriptor((OSCLib::Data::OSCP::SetValueOperationDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SetValueOperationDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SetValueOperationDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SetValueOperationDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1setOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &(arg1)->setOperationTarget((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1getOperationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getOperationTarget();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1addModifiableElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &(arg1)->addModifiableElement((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1getModifiableElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getModifiableElements();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SetValueOperationDescriptor_1clearModifiableElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SetValueOperationDescriptor **)&jarg1; 
  (arg1)->clearModifiableElements();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1StringMetricDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *)new OSCLib::Data::OSCP::StringMetricDescriptor();
  *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1StringMetricDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *)new OSCLib::Data::OSCP::StringMetricDescriptor((OSCLib::Data::OSCP::StringMetricDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1StringMetricDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::StringMetricDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1setUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setUnit((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getUnit();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1setMetricCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricCategory temp2 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricCategory)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setMetricCategory((OSCLib::Data::OSCP::MetricCategory const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getMetricCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::MetricCategory)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getMetricCategory();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1setAvailability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricAvailability temp2 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricAvailability)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setAvailability((OSCLib::Data::OSCP::MetricAvailability const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getAvailability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::MetricAvailability)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getAvailability();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1setMaxDelayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setMaxDelayTime((OSCLib::Data::OSCP::Duration const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getMaxDelayTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getMaxDelayTime();
  *(OSCLib::Data::OSCP::Duration **)&jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getMaxDelayTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Duration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Duration & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getMaxDelayTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1hasMaxDelayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->hasMaxDelayTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1addBodySite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->addBodySite((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1getBodySites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getBodySites();
  *(std::vector< OSCLib::Data::OSCP::CodedValue > **)&jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringMetricDescriptor_1clearBodySites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg1; 
  (arg1)->clearBodySites();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1StringMetricState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::StringMetricState *)new OSCLib::Data::OSCP::StringMetricState();
  *(OSCLib::Data::OSCP::StringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1StringMetricState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricState *)new OSCLib::Data::OSCP::StringMetricState((OSCLib::Data::OSCP::StringMetricState const &)*arg1);
  *(OSCLib::Data::OSCP::StringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1StringMetricState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringMetricState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getStateVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricState_1setComponentActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentActivation temp2 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::ComponentActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setComponentActivationState((OSCLib::Data::OSCP::ComponentActivation const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getComponentActivationState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = (OSCLib::Data::OSCP::ComponentActivation)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getComponentActivationState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getComponentActivationState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ComponentActivation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ComponentActivation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getComponentActivationState(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1hasComponentActivationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasComponentActivationState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricState_1setCalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setCalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getCalibrationInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getCalibrationInfo();
  *(OSCLib::Data::OSCP::CalibrationInfo **)&jresult = new OSCLib::Data::OSCP::CalibrationInfo((const OSCLib::Data::OSCP::CalibrationInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getCalibrationInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CalibrationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CalibrationInfo & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getCalibrationInfo(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1hasCalibrationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasCalibrationInfo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricState_1setOperatingHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setOperatingHours((int const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getOperatingHours_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getOperatingHours();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getOperatingHours_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getOperatingHours(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1hasOperatingHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasOperatingHours();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricState_1setOperatingCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setOperatingCycles((int const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getOperatingCycles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getOperatingCycles();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getOperatingCycles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  int *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getOperatingCycles(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1hasOperatingCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasOperatingCycles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricState_1setObservedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setObservedValue((OSCLib::Data::OSCP::StringMetricValue const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getObservedValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::StringMetricValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getObservedValue();
  *(OSCLib::Data::OSCP::StringMetricValue **)&jresult = new OSCLib::Data::OSCP::StringMetricValue((const OSCLib::Data::OSCP::StringMetricValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1getObservedValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getObservedValue(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricState_1hasObservedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasObservedValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1StringMetricValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::StringMetricValue *)new OSCLib::Data::OSCP::StringMetricValue();
  *(OSCLib::Data::OSCP::StringMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1StringMetricValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricValue *)new OSCLib::Data::OSCP::StringMetricValue((OSCLib::Data::OSCP::StringMetricValue const &)*arg1);
  *(OSCLib::Data::OSCP::StringMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1StringMetricValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricValue const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::StringMetricValue const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1setMeasurementState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::MeasurementState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::MeasurementState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricValue *) &(arg1)->setMeasurementState((OSCLib::Data::OSCP::MeasurementState const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1getMeasurementState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::MeasurementState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getMeasurementState();
  *(OSCLib::Data::OSCP::MeasurementState **)&jresult = new OSCLib::Data::OSCP::MeasurementState((const OSCLib::Data::OSCP::MeasurementState &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1setStart_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricValue *) &(arg1)->setStart_Time((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1getStart_1Time_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getStart_Time();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1getStart_1Time_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getStart_Time(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1hasStart_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->hasStart_Time();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1setStop_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricValue *) &(arg1)->setStop_Time((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1getStop_1Time_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getStop_Time();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1getStop_1Time_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getStop_Time(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1hasStop_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->hasStop_Time();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1setObservationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricValue *) &(arg1)->setObservationTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1getObservationTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getObservationTime();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1getObservationTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getObservationTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1hasObservationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->hasObservationTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::StringMetricValue *) &(arg1)->setValue((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::StringMetricValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1getValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getValue();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1getValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getValue(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_StringMetricValue_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::StringMetricValue **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->hasValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SystemContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::SystemContext *)new OSCLib::Data::OSCP::SystemContext();
  *(OSCLib::Data::OSCP::SystemContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SystemContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SystemContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemContext *)new OSCLib::Data::OSCP::SystemContext((OSCLib::Data::OSCP::SystemContext const &)*arg1);
  *(OSCLib::Data::OSCP::SystemContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SystemContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SystemContext_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::SystemContext *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::SystemContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SystemContext const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SystemContext const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemContext_1setEnsembleContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemContext *) &(arg1)->setEnsembleContext((OSCLib::Data::OSCP::EnsembleContextDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::SystemContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemContext_1getEnsembleContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SystemContext const *)arg1)->getEnsembleContext();
  *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jresult = new OSCLib::Data::OSCP::EnsembleContextDescriptor((const OSCLib::Data::OSCP::EnsembleContextDescriptor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SystemContext_1getEnsembleContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->getEnsembleContext(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SystemContext_1hasEnsembleContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->hasEnsembleContext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemContext_1setLocationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemContext *) &(arg1)->setLocationContext((OSCLib::Data::OSCP::LocationContextDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::SystemContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemContext_1getLocationContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SystemContext const *)arg1)->getLocationContext();
  *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jresult = new OSCLib::Data::OSCP::LocationContextDescriptor((const OSCLib::Data::OSCP::LocationContextDescriptor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SystemContext_1getLocationContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->getLocationContext(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SystemContext_1hasLocationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->hasLocationContext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemContext_1setOperatorContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemContext *) &(arg1)->setOperatorContext((OSCLib::Data::OSCP::OperatorContextDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::SystemContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemContext_1getOperatorContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SystemContext const *)arg1)->getOperatorContext();
  *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jresult = new OSCLib::Data::OSCP::OperatorContextDescriptor((const OSCLib::Data::OSCP::OperatorContextDescriptor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SystemContext_1getOperatorContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->getOperatorContext(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SystemContext_1hasOperatorContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->hasOperatorContext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemContext_1setPatientContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemContext *) &(arg1)->setPatientContext((OSCLib::Data::OSCP::PatientContextDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::SystemContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemContext_1getPatientContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SystemContext const *)arg1)->getPatientContext();
  *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jresult = new OSCLib::Data::OSCP::PatientContextDescriptor((const OSCLib::Data::OSCP::PatientContextDescriptor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SystemContext_1getPatientContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->getPatientContext(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SystemContext_1hasPatientContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->hasPatientContext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemContext_1setWorkflowContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemContext *) &(arg1)->setWorkflowContext((OSCLib::Data::OSCP::WorkflowContextDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::SystemContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemContext_1getWorkflowContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SystemContext const *)arg1)->getWorkflowContext();
  *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jresult = new OSCLib::Data::OSCP::WorkflowContextDescriptor((const OSCLib::Data::OSCP::WorkflowContextDescriptor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SystemContext_1getWorkflowContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->getWorkflowContext(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SystemContext_1hasWorkflowContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemContext **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->hasWorkflowContext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SystemMetaData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::SystemMetaData *)new OSCLib::Data::OSCP::SystemMetaData();
  *(OSCLib::Data::OSCP::SystemMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1SystemMetaData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SystemMetaData const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemMetaData *)new OSCLib::Data::OSCP::SystemMetaData((OSCLib::Data::OSCP::SystemMetaData const &)*arg1);
  *(OSCLib::Data::OSCP::SystemMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1SystemMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::SystemMetaData const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SystemMetaData const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1setUDI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SystemMetaData *) &(arg1)->setUDI((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SystemMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1getUDI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->getUDI();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1getUDI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->getUDI(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1hasUDI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->hasUDI();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1addManufacturer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemMetaData *) &(arg1)->addManufacturer((OSCLib::Data::OSCP::LocalizedText const &)*arg2);
  *(OSCLib::Data::OSCP::SystemMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1getManufacturer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->getManufacturer();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1clearManufacturer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  (arg1)->clearManufacturer();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1addModelName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LocalizedText **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocalizedText const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemMetaData *) &(arg1)->addModelName((OSCLib::Data::OSCP::LocalizedText const &)*arg2);
  *(OSCLib::Data::OSCP::SystemMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1getModelName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->getModelName();
  *(std::vector< OSCLib::Data::OSCP::LocalizedText > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1clearModelName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  (arg1)->clearModelName();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1addModelNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SystemMetaData *) &(arg1)->addModelNumber((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SystemMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1getModelNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->getModelNumber();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1clearModelNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  (arg1)->clearModelNumber();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1addSerialNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::SystemMetaData *) &(arg1)->addSerialNumber((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::SystemMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1getSerialNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  result = ((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->getSerialNumber();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_SystemMetaData_1clearSerialNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::SystemMetaData **)&jarg1; 
  (arg1)->clearSerialNumber();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Timestamp_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Timestamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::Timestamp *)new OSCLib::Data::OSCP::Timestamp();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1Timestamp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Timestamp *arg1 = 0 ;
  OSCLib::Data::OSCP::Timestamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Timestamp **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Timestamp *)new OSCLib::Data::OSCP::Timestamp((OSCLib::Data::OSCP::Timestamp const &)*arg1);
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1Timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::Timestamp *arg1 = (OSCLib::Data::OSCP::Timestamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::Timestamp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_Timestamp_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::Timestamp *arg1 = (OSCLib::Data::OSCP::Timestamp *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::Timestamp **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Timestamp const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Timestamp *arg1 = (OSCLib::Data::OSCP::Timestamp *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Timestamp **)&jarg1; 
  result = (long long)((OSCLib::Data::OSCP::Timestamp const *)arg1)->get();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_Timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::Timestamp *arg1 = (OSCLib::Data::OSCP::Timestamp *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  OSCLib::Data::OSCP::Timestamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::Timestamp **)&jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Timestamp *) &(arg1)->set((long long const &)*arg2);
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1TimeZone_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::TimeZone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::TimeZone *)new OSCLib::Data::OSCP::TimeZone();
  *(OSCLib::Data::OSCP::TimeZone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1TimeZone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::TimeZone *arg1 = 0 ;
  OSCLib::Data::OSCP::TimeZone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::TimeZone **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::TimeZone const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::TimeZone *)new OSCLib::Data::OSCP::TimeZone((OSCLib::Data::OSCP::TimeZone const &)*arg1);
  *(OSCLib::Data::OSCP::TimeZone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1TimeZone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::TimeZone *arg1 = (OSCLib::Data::OSCP::TimeZone *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::TimeZone **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_TimeZone_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::TimeZone *arg1 = (OSCLib::Data::OSCP::TimeZone *) 0 ;
  OSCLib::Data::OSCP::TimeZone *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::TimeZone **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::TimeZone **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::TimeZone const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::TimeZone const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_TimeZone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::TimeZone *arg1 = (OSCLib::Data::OSCP::TimeZone *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::TimeZone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::TimeZone **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::TimeZone *) &(arg1)->set((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::TimeZone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_TimeZone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::TimeZone *arg1 = (OSCLib::Data::OSCP::TimeZone *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::TimeZone **)&jarg1; 
  result = ((OSCLib::Data::OSCP::TimeZone const *)arg1)->get();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1VersionCounter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VersionCounter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::VersionCounter *)new OSCLib::Data::OSCP::VersionCounter();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1VersionCounter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg1 = 0 ;
  OSCLib::Data::OSCP::VersionCounter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VersionCounter *)new OSCLib::Data::OSCP::VersionCounter((OSCLib::Data::OSCP::VersionCounter const &)*arg1);
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1VersionCounter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::VersionCounter *arg1 = (OSCLib::Data::OSCP::VersionCounter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_VersionCounter_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::VersionCounter *arg1 = (OSCLib::Data::OSCP::VersionCounter *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VersionCounter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg1 = (OSCLib::Data::OSCP::VersionCounter *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg1; 
  result = (long long)((OSCLib::Data::OSCP::VersionCounter const *)arg1)->get();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VersionCounter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg1 = (OSCLib::Data::OSCP::VersionCounter *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  OSCLib::Data::OSCP::VersionCounter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::VersionCounter *) &(arg1)->set((long long const &)*arg2);
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1VMDDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::VMDDescriptor *)new OSCLib::Data::OSCP::VMDDescriptor();
  *(OSCLib::Data::OSCP::VMDDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1VMDDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VMDDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VMDDescriptor *)new OSCLib::Data::OSCP::VMDDescriptor((OSCLib::Data::OSCP::VMDDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::VMDDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1VMDDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VMDDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::VMDDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::VMDDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::VMDDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::VMDDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::VMDDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1addProductionSpecification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg2 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ProductionSpecification **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ProductionSpecification const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->addProductionSpecification((OSCLib::Data::OSCP::ProductionSpecification const &)*arg2);
  *(OSCLib::Data::OSCP::VMDDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1getProductionSpecifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getProductionSpecifications();
  *(std::vector< OSCLib::Data::OSCP::ProductionSpecification > **)&jresult = new std::vector< OSCLib::Data::OSCP::ProductionSpecification >((const std::vector< OSCLib::Data::OSCP::ProductionSpecification > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1clearProductionSpecifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  (arg1)->clearProductionSpecifications();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1setAlertSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->setAlertSystem((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::VMDDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1getAlertSystem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getAlertSystem();
  *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jresult = new OSCLib::Data::OSCP::AlertSystemDescriptor((const OSCLib::Data::OSCP::AlertSystemDescriptor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1getAlertSystem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemDescriptor & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getAlertSystem(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1hasAlertSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->hasAlertSystem();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1addChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ChannelDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ChannelDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->addChannel((OSCLib::Data::OSCP::ChannelDescriptor const &)*arg2);
  *(OSCLib::Data::OSCP::VMDDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1getChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getChannels();
  *(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > **)&jresult = new std::vector< OSCLib::Data::OSCP::ChannelDescriptor >((const std::vector< OSCLib::Data::OSCP::ChannelDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_VMDDescriptor_1clearChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::VMDDescriptor **)&jarg1; 
  (arg1)->clearChannels();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1WorkflowContextDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)new OSCLib::Data::OSCP::WorkflowContextDescriptor();
  *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1WorkflowContextDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextDescriptor const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)new OSCLib::Data::OSCP::WorkflowContextDescriptor((OSCLib::Data::OSCP::WorkflowContextDescriptor const &)*arg1);
  *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1WorkflowContextDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextDescriptor const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::WorkflowContextDescriptor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1getType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->getType();
  *(OSCLib::Data::OSCP::CodedValue **)&jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1getType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::CodedValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::CodedValue & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->getType(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->hasType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1setDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1getDescriptorVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->getDescriptorVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1getDescriptorVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->getDescriptorVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1hasDescriptorVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1setIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1getIntendedUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->getIntendedUse();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1getIntendedUse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::IntendedUse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::IntendedUse & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->getIntendedUse(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextDescriptor_1hasIntendedUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->hasIntendedUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1WorkflowContextState_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::WorkflowContextState *)new OSCLib::Data::OSCP::WorkflowContextState();
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1WorkflowContextState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *)new OSCLib::Data::OSCP::WorkflowContextState((OSCLib::Data::OSCP::WorkflowContextState const &)*arg1);
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1WorkflowContextState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextState const & reference is null");
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1setHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getHandle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1hasHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1setDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getDescriptorHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getDescriptorHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1setStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getStateVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getStateVersion();
  *(OSCLib::Data::OSCP::VersionCounter **)&jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getStateVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::VersionCounter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::VersionCounter & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getStateVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1hasStateVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasStateVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1setContextAssociation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation *arg2 = 0 ;
  OSCLib::Data::OSCP::ContextAssociation temp2 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  temp2 = (OSCLib::Data::OSCP::ContextAssociation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setContextAssociation((OSCLib::Data::OSCP::ContextAssociation const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getContextAssociation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = (OSCLib::Data::OSCP::ContextAssociation)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getContextAssociation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getContextAssociation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ContextAssociation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ContextAssociation & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getContextAssociation(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1hasContextAssociation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasContextAssociation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1setBindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ReferencedVersion const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setBindingMDIBVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getBindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getBindingMDIBVersion();
  *(OSCLib::Data::OSCP::ReferencedVersion **)&jresult = new OSCLib::Data::OSCP::ReferencedVersion((const OSCLib::Data::OSCP::ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1setUnbindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ReferencedVersion const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setUnbindingMDIBVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getUnbindingMDIBVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getUnbindingMDIBVersion();
  *(OSCLib::Data::OSCP::ReferencedVersion **)&jresult = new OSCLib::Data::OSCP::ReferencedVersion((const OSCLib::Data::OSCP::ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getUnbindingMDIBVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ReferencedVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ReferencedVersion & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getUnbindingMDIBVersion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1hasUnbindingMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasUnbindingMDIBVersion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1setBindingStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setBindingStartTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getBindingStartTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getBindingStartTime();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getBindingStartTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getBindingStartTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1hasBindingStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasBindingStartTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1setBindingEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setBindingEndTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getBindingEndTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getBindingEndTime();
  *(OSCLib::Data::OSCP::Timestamp **)&jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getBindingEndTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Timestamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Timestamp & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getBindingEndTime(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1hasBindingEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasBindingEndTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1addValidator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->addValidator((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getValidators();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1clearValidators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  (arg1)->clearValidators();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1addIdentification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::InstanceIdentifier **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::InstanceIdentifier const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->addIdentification((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getIdentifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getIdentifications();
  *(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > **)&jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1clearIdentifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  (arg1)->clearIdentifications();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1setOrderDetail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Order *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Order **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Order const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setOrderDetail((OSCLib::Data::OSCP::Order const &)*arg2);
  *(OSCLib::Data::OSCP::WorkflowContextState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getOrderDetail_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getOrderDetail();
  *(OSCLib::Data::OSCP::Order **)&jresult = new OSCLib::Data::OSCP::Order((const OSCLib::Data::OSCP::Order &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1getOrderDetail_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Order *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::Order **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::Order & reference is null");
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getOrderDetail(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_WorkflowContextState_1hasOrderDetail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasOrderDetail();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1FutureInvocationState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::FutureInvocationState *)new OSCLib::Data::OSCP::FutureInvocationState();
  *(OSCLib::Data::OSCP::FutureInvocationState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1FutureInvocationState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::FutureInvocationState *arg1 = (OSCLib::Data::OSCP::FutureInvocationState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_FutureInvocationState_1waitReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg1 = (OSCLib::Data::OSCP::FutureInvocationState *) 0 ;
  OSCLib::Data::OSCP::InvocationState arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg1; 
  arg2 = (OSCLib::Data::OSCP::InvocationState)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->waitReceived(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_FutureInvocationState_1getTransactionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg1 = (OSCLib::Data::OSCP::FutureInvocationState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg1; 
  result = (int)((OSCLib::Data::OSCP::FutureInvocationState const *)arg1)->getTransactionId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPCachedProvider(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPCachedProvider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPCachedProvider *)new SwigDirector_OSCPCachedProvider(jenv);
  *(OSCLib::Data::OSCP::OSCPCachedProvider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPCachedProvider(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPCachedProvider *arg1 = (OSCLib::Data::OSCP::OSCPCachedProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPCachedProvider **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPCachedProvider_1getMDDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPCachedProvider *arg1 = (OSCLib::Data::OSCP::OSCPCachedProvider *) 0 ;
  OSCLib::Data::OSCP::MDDescription result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPCachedProvider **)&jarg1; 
  result = (arg1)->getMDDescription();
  *(OSCLib::Data::OSCP::MDDescription **)&jresult = new OSCLib::Data::OSCP::MDDescription((const OSCLib::Data::OSCP::MDDescription &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPCachedProvider_1setMDDescription_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPCachedProvider *arg1 = (OSCLib::Data::OSCP::OSCPCachedProvider *) 0 ;
  OSCLib::Data::OSCP::MDDescription arg2 ;
  OSCLib::Data::OSCP::MDDescription *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPCachedProvider **)&jarg1; 
  argp2 = *(OSCLib::Data::OSCP::MDDescription **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OSCLib::Data::OSCP::MDDescription");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setMDDescription(arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPCachedProvider_1setMDDescription_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Data::OSCP::OSCPCachedProvider *arg1 = (OSCLib::Data::OSCP::OSCPCachedProvider *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPCachedProvider **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMDDescription(arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPCachedProvider_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPCachedProvider *obj = *((OSCLib::Data::OSCP::OSCPCachedProvider **)&objarg);
  (void)jcls;
  SwigDirector_OSCPCachedProvider *director = dynamic_cast<SwigDirector_OSCPCachedProvider *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPCachedProvider_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPCachedProvider *obj = *((OSCLib::Data::OSCP::OSCPCachedProvider **)&objarg);
  SwigDirector_OSCPCachedProvider *director = dynamic_cast<SwigDirector_OSCPCachedProvider *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerEventHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)new SwigDirector_OSCPConsumerEventHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerEventHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerEventHandler_1onOperationInvoked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *) 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg2 = 0 ;
  OSCLib::Data::OSCP::InvocationState arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::InvocationState)jarg3; 
  (arg1)->onOperationInvoked((OSCLib::Data::OSCP::OperationInvocationContext const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerEventHandler_1onOperationInvokedSwigExplicitOSCPConsumerEventHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *) 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg2 = 0 ;
  OSCLib::Data::OSCP::InvocationState arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::InvocationState)jarg3; 
  (arg1)->OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked((OSCLib::Data::OSCP::OperationInvocationContext const &)*arg2,arg3);
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPConsumerEventHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerEventHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPConsumerEventHandler *director = dynamic_cast<SwigDirector_OSCPConsumerEventHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerEventHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&objarg);
  SwigDirector_OSCPConsumerEventHandler *director = dynamic_cast<SwigDirector_OSCPConsumerEventHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerAlertConditionStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *)new SwigDirector_OSCPConsumerAlertConditionStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerAlertConditionStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerAlertConditionStateHandler_1onStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerAlertConditionStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPConsumerAlertConditionStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerAlertConditionStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerAlertConditionStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler **)&objarg);
  SwigDirector_OSCPConsumerAlertConditionStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerAlertConditionStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerAlertSignalStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *)new SwigDirector_OSCPConsumerAlertSignalStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerAlertSignalStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerAlertSignalStateHandler_1onStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerAlertSignalStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPConsumerAlertSignalStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerAlertSignalStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerAlertSignalStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler **)&objarg);
  SwigDirector_OSCPConsumerAlertSignalStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerAlertSignalStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerAlertSystemStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *)new SwigDirector_OSCPConsumerAlertSystemStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerAlertSystemStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerAlertSystemStateHandler_1onStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerAlertSystemStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPConsumerAlertSystemStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerAlertSystemStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerAlertSystemStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler **)&objarg);
  SwigDirector_OSCPConsumerAlertSystemStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerAlertSystemStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerConnectionLostHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerConnectionLostHandler_1onConnectionLost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler **)&jarg1; 
  (arg1)->onConnectionLost();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerConnectionLostHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *)new SwigDirector_OSCPConsumerConnectionLostHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerConnectionLostHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPConsumerConnectionLostHandler *director = dynamic_cast<SwigDirector_OSCPConsumerConnectionLostHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerConnectionLostHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler **)&objarg);
  SwigDirector_OSCPConsumerConnectionLostHandler *director = dynamic_cast<SwigDirector_OSCPConsumerConnectionLostHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerContextStateChangedHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerContextStateChangedHandler_1onContextStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  (arg1)->onContextStateChanged((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerContextStateChangedHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *)new SwigDirector_OSCPConsumerContextStateChangedHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerContextStateChangedHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPConsumerContextStateChangedHandler *director = dynamic_cast<SwigDirector_OSCPConsumerContextStateChangedHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerContextStateChangedHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler **)&objarg);
  SwigDirector_OSCPConsumerContextStateChangedHandler *director = dynamic_cast<SwigDirector_OSCPConsumerContextStateChangedHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerEnumStringMetricStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *)new SwigDirector_OSCPConsumerEnumStringMetricStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerEnumStringMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerEnumStringMetricStateHandler_1onStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState const & reference is null");
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerEnumStringMetricStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPConsumerEnumStringMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerEnumStringMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerEnumStringMetricStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler **)&objarg);
  SwigDirector_OSCPConsumerEnumStringMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerEnumStringMetricStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)((*(std::shared_ptr< const OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1) ? (*(std::shared_ptr< const OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OSCPConsumer const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OSCPConsumer *)new OSCLib::Data::OSCP::OSCPConsumer((OSCLib::Data::OSCP::OSCPConsumer const &)*arg1);
  
  *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jresult = result ? new std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1getMDIB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::MDIBContainer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getMDIB();
  *(OSCLib::Data::OSCP::MDIBContainer **)&jresult = new OSCLib::Data::OSCP::MDIBContainer((const OSCLib::Data::OSCP::MDIBContainer &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1getMDDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::MDDescription result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getMDDescription();
  *(OSCLib::Data::OSCP::MDDescription **)&jresult = new OSCLib::Data::OSCP::MDDescription((const OSCLib::Data::OSCP::MDDescription &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1getMDState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::MDState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getMDState();
  *(OSCLib::Data::OSCP::MDState **)&jresult = new OSCLib::Data::OSCP::MDState((const OSCLib::Data::OSCP::MDState &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1registerStateEventHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *arg2 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&jarg2; 
  result = (bool)(arg1)->registerStateEventHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1unregisterStateEventHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *arg2 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&jarg2; 
  result = (bool)(arg1)->unregisterStateEventHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::ClockState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ClockState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::ComponentState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ComponentState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::OperationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestState_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextState & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::AlertSystemState const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::AlertSignalState const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::AlertConditionState const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::NumericMetricState const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::StringMetricState const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::LocationContextState const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::OperatorContextState const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::PatientContextState const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::LocationContextState const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::OperatorContextState const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::PatientContextState const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1commitState_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextState const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1activate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OSCLib::Data::OSCP::FutureInvocationState **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::FutureInvocationState & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->activate((std::string const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1activate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->activate((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->disconnect();
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1getProviderXAddr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((OSCLib::Data::OSCP::OSCPConsumer const *)arg1)->getProviderXAddr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1setConnectionLostHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *arg2 = (OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler **)&jarg2; 
  (arg1)->setConnectionLostHandler(arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1setContextStateChangedHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *arg2 = (OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler **)&jarg2; 
  (arg1)->setContextStateChangedHandler(arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1setSubscriptionLostHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCPConsumerSubscriptionLostHandler *arg2 = (OSCPConsumerSubscriptionLostHandler *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(OSCPConsumerSubscriptionLostHandler **)&jarg2; 
  (arg1)->setSubscriptionLostHandler(arg2);
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1requestRawMDIB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->requestRawMDIB();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1getEndpointReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getEndpointReference();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_osclib_OSCLibJNI_OSCPConsumer_1getLastKnownMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > **)&jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned long long)(arg1)->getLastKnownMDIBVersion();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerLimitAlertConditionStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *)new SwigDirector_OSCPConsumerLimitAlertConditionStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerLimitAlertConditionStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerLimitAlertConditionStateHandler_1onStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerLimitAlertConditionStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPConsumerLimitAlertConditionStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerLimitAlertConditionStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerLimitAlertConditionStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler **)&objarg);
  SwigDirector_OSCPConsumerLimitAlertConditionStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerLimitAlertConditionStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerNumericMetricStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *)new SwigDirector_OSCPConsumerNumericMetricStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerNumericMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerNumericMetricStateHandler_1onStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerNumericMetricStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPConsumerNumericMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerNumericMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerNumericMetricStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler **)&objarg);
  SwigDirector_OSCPConsumerNumericMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerNumericMetricStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerRealTimeSampleArrayMetricStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *)new SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerRealTimeSampleArrayMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerRealTimeSampleArrayMetricStateHandler_1onStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & reference is null");
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerRealTimeSampleArrayMetricStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerRealTimeSampleArrayMetricStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler **)&objarg);
  SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPConsumerStringMetricStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *)new SwigDirector_OSCPConsumerStringMetricStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerStringMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerStringMetricStateHandler_1onStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerStringMetricStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPConsumerStringMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerStringMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerStringMetricStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler **)&objarg);
  SwigDirector_OSCPConsumerStringMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerStringMetricStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPConsumerSubscriptionLostHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerSubscriptionLostHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerSubscriptionLostHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerSubscriptionLostHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPConsumerSubscriptionLostHandler_1onSubscriptionLost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OSCPConsumerSubscriptionLostHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerSubscriptionLostHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPConsumerSubscriptionLostHandler **)&jarg1; 
  (arg1)->onSubscriptionLost();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderMDStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)new SwigDirector_OSCPProviderMDStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderMDStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderMDStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderMDStateHandler_1notifyOperationInvoked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg2 = 0 ;
  OSCLib::Data::OSCP::InvocationState arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::InvocationState)jarg3; 
  (arg1)->notifyOperationInvoked((OSCLib::Data::OSCP::OperationInvocationContext const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderMDStateHandler_1setAlertConditionPresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return ;
  } 
  (arg1)->setAlertConditionPresence(arg2,arg3,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg4);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderMDStateHandler_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderMDStateHandler_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderMDStateHandler_1getMutex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  Poco::Mutex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&jarg1; 
  result = (Poco::Mutex *) &(arg1)->getMutex();
  *(Poco::Mutex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderMDStateHandler_1getParentProvider(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  OSCLib::Data::OSCP::OSCPProvider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&jarg1; 
  result = (OSCLib::Data::OSCP::OSCPProvider *) &(arg1)->getParentProvider();
  *(OSCLib::Data::OSCP::OSCPProvider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderMDStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderMDStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderMDStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderMDStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&objarg);
  SwigDirector_OSCPProviderMDStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderMDStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderActivateOperationHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)new SwigDirector_OSCPProviderActivateOperationHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderActivateOperationHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderActivateOperationHandler_1onActivateRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::MDIBContainer const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onActivateRequest((OSCLib::Data::OSCP::MDIBContainer const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderActivateOperationHandler_1onActivateRequestSwigExplicitOSCPProviderActivateOperationHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::MDIBContainer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::MDIBContainer const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler::onActivateRequest((OSCLib::Data::OSCP::MDIBContainer const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderActivateOperationHandler_1notifyMDIBObjectChanged_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderActivateOperationHandler_1notifyMDIBObjectChanged_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderActivateOperationHandler_1notifyMDIBObjectChanged_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderActivateOperationHandler_1notifyMDIBObjectChanged_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderActivateOperationHandler_1notifyMDIBObjectChanged_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderActivateOperationHandler_1notifyMDIBObjectChanged_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderActivateOperationHandler_1notifyMDIBObjectChanged_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderActivateOperationHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderActivateOperationHandler *director = dynamic_cast<SwigDirector_OSCPProviderActivateOperationHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderActivateOperationHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&objarg);
  SwigDirector_OSCPProviderActivateOperationHandler *director = dynamic_cast<SwigDirector_OSCPProviderActivateOperationHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderAlertConditionStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *)new SwigDirector_OSCPProviderAlertConditionStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderAlertConditionStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertConditionStateHandler_1onStateChangeRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::AlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertConditionStateHandler_1onStateChangeRequestSwigExplicitOSCPProviderAlertConditionStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::AlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertConditionStateHandler_1sourceHasChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->sourceHasChanged((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertConditionStateHandler_1sourceHasChangedSwigExplicitOSCPProviderAlertConditionStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::sourceHasChanged((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertConditionStateHandler_1notifyMDIBObjectChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertConditionStateHandler_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&jarg1; 
  result = (arg1)->getState();
  *(OSCLib::Data::OSCP::AlertConditionState **)&jresult = new OSCLib::Data::OSCP::AlertConditionState((const OSCLib::Data::OSCP::AlertConditionState &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertConditionStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertConditionStateHandler_1getHandleSwigExplicitOSCPProviderAlertConditionStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertConditionStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderAlertConditionStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderAlertConditionStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertConditionStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&objarg);
  SwigDirector_OSCPProviderAlertConditionStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderAlertConditionStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderAlertSignalStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *)new SwigDirector_OSCPProviderAlertSignalStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderAlertSignalStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSignalStateHandler_1onStateChangeRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::AlertSignalState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSignalStateHandler_1onStateChangeRequestSwigExplicitOSCPProviderAlertSignalStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::AlertSignalState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSignalStateHandler_1notifyMDIBObjectChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSignalStateHandler_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler **)&jarg1; 
  result = (arg1)->getState();
  *(OSCLib::Data::OSCP::AlertSignalState **)&jresult = new OSCLib::Data::OSCP::AlertSignalState((const OSCLib::Data::OSCP::AlertSignalState &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSignalStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSignalStateHandler_1getHandleSwigExplicitOSCPProviderAlertSignalStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSignalStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderAlertSignalStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderAlertSignalStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSignalStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler **)&objarg);
  SwigDirector_OSCPProviderAlertSignalStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderAlertSignalStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderAlertSystemStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *)new SwigDirector_OSCPProviderAlertSystemStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderAlertSystemStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSystemStateHandler_1onStateChangeRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::AlertSystemState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSystemStateHandler_1onStateChangeRequestSwigExplicitOSCPProviderAlertSystemStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::AlertSystemState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSystemStateHandler_1notifyMDIBObjectChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSystemStateHandler_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler **)&jarg1; 
  result = (arg1)->getState();
  *(OSCLib::Data::OSCP::AlertSystemState **)&jresult = new OSCLib::Data::OSCP::AlertSystemState((const OSCLib::Data::OSCP::AlertSystemState &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSystemStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSystemStateHandler_1getHandleSwigExplicitOSCPProviderAlertSystemStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSystemStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderAlertSystemStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderAlertSystemStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSystemStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler **)&objarg);
  SwigDirector_OSCPProviderAlertSystemStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderAlertSystemStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderClockStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *)new SwigDirector_OSCPProviderClockStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderClockStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderClockStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderClockStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderClockStateHandler_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *) 0 ;
  OSCLib::Data::OSCP::ClockState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderClockStateHandler **)&jarg1; 
  result = (arg1)->getState();
  *(OSCLib::Data::OSCP::ClockState **)&jresult = new OSCLib::Data::OSCP::ClockState((const OSCLib::Data::OSCP::ClockState &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderClockStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderClockStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderClockStateHandler_1getHandleSwigExplicitOSCPProviderClockStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderClockStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderClockStateHandler::getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderClockStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderClockStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderClockStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderClockStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderClockStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderClockStateHandler **)&objarg);
  SwigDirector_OSCPProviderClockStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderClockStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderComponentStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *)new SwigDirector_OSCPProviderComponentStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderComponentStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderComponentStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderComponentStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderComponentStateHandler_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *) 0 ;
  OSCLib::Data::OSCP::ComponentState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderComponentStateHandler **)&jarg1; 
  result = (arg1)->getState();
  *(OSCLib::Data::OSCP::ComponentState **)&jresult = new OSCLib::Data::OSCP::ComponentState((const OSCLib::Data::OSCP::ComponentState &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderComponentStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderComponentStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderComponentStateHandler_1getHandleSwigExplicitOSCPProviderComponentStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderComponentStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderComponentStateHandler::getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderComponentStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderComponentStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderComponentStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderComponentStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderComponentStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderComponentStateHandler **)&objarg);
  SwigDirector_OSCPProviderComponentStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderComponentStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderContextStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)new SwigDirector_OSCPProviderContextStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderContextStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1onStateChangeRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg2 = 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg3 = 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg4 = 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg5 = 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg6 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg7 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::EnsembleContextState > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::LocationContextState > const & reference is null");
    return 0;
  } 
  arg4 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::OperatorContextState > const & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::PatientContextState > const & reference is null");
    return 0;
  } 
  arg6 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::WorkflowContextState > const & reference is null");
    return 0;
  } 
  arg7 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &)*arg2,(std::vector< OSCLib::Data::OSCP::LocationContextState > const &)*arg3,(std::vector< OSCLib::Data::OSCP::OperatorContextState > const &)*arg4,(std::vector< OSCLib::Data::OSCP::PatientContextState > const &)*arg5,(std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &)*arg6,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1onStateChangeRequestSwigExplicitOSCPProviderContextStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg2 = 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg3 = 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg4 = 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg5 = 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg6 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg7 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  arg2 = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::EnsembleContextState > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::LocationContextState > const & reference is null");
    return 0;
  } 
  arg4 = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::OperatorContextState > const & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::PatientContextState > const & reference is null");
    return 0;
  } 
  arg6 = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OSCLib::Data::OSCP::WorkflowContextState > const & reference is null");
    return 0;
  } 
  arg7 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::onStateChangeRequest((std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &)*arg2,(std::vector< OSCLib::Data::OSCP::LocationContextState > const &)*arg3,(std::vector< OSCLib::Data::OSCP::OperatorContextState > const &)*arg4,(std::vector< OSCLib::Data::OSCP::PatientContextState > const &)*arg5,(std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &)*arg6,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1getEnsembleContextStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  result = (arg1)->getEnsembleContextStates();
  *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::EnsembleContextState >((const std::vector< OSCLib::Data::OSCP::EnsembleContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1getEnsembleContextStatesSwigExplicitOSCPProviderContextStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getEnsembleContextStates();
  *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::EnsembleContextState >((const std::vector< OSCLib::Data::OSCP::EnsembleContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1getLocationContextStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  result = (arg1)->getLocationContextStates();
  *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocationContextState >((const std::vector< OSCLib::Data::OSCP::LocationContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1getLocationContextStatesSwigExplicitOSCPProviderContextStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getLocationContextStates();
  *(std::vector< OSCLib::Data::OSCP::LocationContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::LocationContextState >((const std::vector< OSCLib::Data::OSCP::LocationContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1getOperatorContextStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  result = (arg1)->getOperatorContextStates();
  *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::OperatorContextState >((const std::vector< OSCLib::Data::OSCP::OperatorContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1getOperatorContextStatesSwigExplicitOSCPProviderContextStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getOperatorContextStates();
  *(std::vector< OSCLib::Data::OSCP::OperatorContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::OperatorContextState >((const std::vector< OSCLib::Data::OSCP::OperatorContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1getPatientContextStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  result = (arg1)->getPatientContextStates();
  *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::PatientContextState >((const std::vector< OSCLib::Data::OSCP::PatientContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1getPatientContextStatesSwigExplicitOSCPProviderContextStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getPatientContextStates();
  *(std::vector< OSCLib::Data::OSCP::PatientContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::PatientContextState >((const std::vector< OSCLib::Data::OSCP::PatientContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1getWorkflowContextStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  result = (arg1)->getWorkflowContextStates();
  *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::WorkflowContextState >((const std::vector< OSCLib::Data::OSCP::WorkflowContextState > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1getWorkflowContextStatesSwigExplicitOSCPProviderContextStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getWorkflowContextStates();
  *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > **)&jresult = new std::vector< OSCLib::Data::OSCP::WorkflowContextState >((const std::vector< OSCLib::Data::OSCP::WorkflowContextState > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1notifyMDIBObjectChanged_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1notifyMDIBObjectChanged_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::LocationContextState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1notifyMDIBObjectChanged_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::OperatorContextState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1notifyMDIBObjectChanged_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::PatientContextState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1notifyMDIBObjectChanged_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1getHandleSwigExplicitOSCPProviderContextStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderContextStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderContextStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&objarg);
  SwigDirector_OSCPProviderContextStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderContextStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderEnumStringMetricStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *)new SwigDirector_OSCPProviderEnumStringMetricStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderEnumStringMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderEnumStringMetricStateHandler_1onStateChangeRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderEnumStringMetricStateHandler_1onStateChangeRequestSwigExplicitOSCPProviderEnumStringMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderEnumStringMetricStateHandler_1notifyMDIBObjectChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderEnumStringMetricStateHandler_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler **)&jarg1; 
  result = (arg1)->getState();
  *(OSCLib::Data::OSCP::EnumStringMetricState **)&jresult = new OSCLib::Data::OSCP::EnumStringMetricState((const OSCLib::Data::OSCP::EnumStringMetricState &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderEnumStringMetricStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderEnumStringMetricStateHandler_1getHandleSwigExplicitOSCPProviderEnumStringMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderEnumStringMetricStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderEnumStringMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderEnumStringMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderEnumStringMetricStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler **)&objarg);
  SwigDirector_OSCPProviderEnumStringMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderEnumStringMetricStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProvider(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProvider *)new SwigDirector_OSCPProvider(jenv);
  *(OSCLib::Data::OSCP::OSCPProvider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProvider(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1getMDIB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::MDIBContainer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  result = (arg1)->getMDIB();
  *(OSCLib::Data::OSCP::MDIBContainer **)&jresult = new OSCLib::Data::OSCP::MDIBContainer((const OSCLib::Data::OSCP::MDIBContainer &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1getMDIBSwigExplicitOSCPProvider(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::MDIBContainer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProvider::getMDIB();
  *(OSCLib::Data::OSCP::MDIBContainer **)&jresult = new OSCLib::Data::OSCP::MDIBContainer((const OSCLib::Data::OSCP::MDIBContainer &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1getMDDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::MDDescription result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  result = (arg1)->getMDDescription();
  *(OSCLib::Data::OSCP::MDDescription **)&jresult = new OSCLib::Data::OSCP::MDDescription((const OSCLib::Data::OSCP::MDDescription &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1getMDState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::MDState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  result = (arg1)->getMDState();
  *(OSCLib::Data::OSCP::MDState **)&jresult = new OSCLib::Data::OSCP::MDState((const OSCLib::Data::OSCP::MDState &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1getMDStateSwigExplicitOSCPProvider(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::MDState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProvider::getMDState();
  *(OSCLib::Data::OSCP::MDState **)&jresult = new OSCLib::Data::OSCP::MDState((const OSCLib::Data::OSCP::MDState &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1addActivateOperationForDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::ActivateOperationDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::ActivateOperationDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->addActivateOperationForDescriptor((OSCLib::Data::OSCP::ActivateOperationDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1createSetOperationForDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1createSetOperationForDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1createSetOperationForDescriptor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1createSetOperationForDescriptor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::EnumStringMetricDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1createSetOperationForDescriptor_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1createSetOperationForDescriptor_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::NumericMetricDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1createSetOperationForDescriptor_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::StringMetricDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1createSetOperationForDescriptor_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PatientContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::PatientContextDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1createSetOperationForDescriptor_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LocationContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::LocationContextDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1createSetOperationForDescriptor_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnsembleContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::EnsembleContextDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1createSetOperationForDescriptor_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperatorContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::OperatorContextDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1createSetOperationForDescriptor_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::WorkflowContextDescriptor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextDescriptor const & reference is null");
    return ;
  } 
  arg3 = *(OSCLib::Data::OSCP::HydraMDSDescriptor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::HydraMDSDescriptor & reference is null");
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::WorkflowContextDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnsembleContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnsembleContextState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LocationContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LocationContextState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::LocationContextState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OperatorContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperatorContextState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::OperatorContextState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::PatientContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::PatientContextState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::PatientContextState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1notifyMDIBObjectChanged_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::WorkflowContextState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::WorkflowContextState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1setAlertConditionPresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return ;
  } 
  (arg1)->setAlertConditionPresence((std::string const &)*arg2,arg3,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg4);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1evaluateAlertConditions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->evaluateAlertConditions((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1startup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  (arg1)->startup();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1shutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  (arg1)->shutdown();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1addMDStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg2 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&jarg2; 
  (arg1)->addMDStateHandler(arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1removeMDStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg2 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&jarg2; 
  (arg1)->removeMDStateHandler(arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1setEndpointReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setEndpointReference((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1getEndpointReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  result = ((OSCLib::Data::OSCP::OSCPProvider const *)arg1)->getEndpointReference();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1getDeviceCharacteristics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Dev::DeviceCharacteristics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  result = (OSCLib::Dev::DeviceCharacteristics *) &((OSCLib::Data::OSCP::OSCPProvider const *)arg1)->getDeviceCharacteristics();
  *(OSCLib::Dev::DeviceCharacteristics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1setDeviceCharacteristics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Dev::DeviceCharacteristics const & reference is null");
    return ;
  } 
  (arg1)->setDeviceCharacteristics((OSCLib::Dev::DeviceCharacteristics const &)*arg2);
}


SWIGEXPORT jobject JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1getMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  result = (unsigned long long)((OSCLib::Data::OSCP::OSCPProvider const *)arg1)->getMDIBVersion();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1incrementMDIBVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  (arg1)->incrementMDIBVersion();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1getMutex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  Poco::Mutex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  result = (Poco::Mutex *) &(arg1)->getMutex();
  *(Poco::Mutex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1setPeriodicEventInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setPeriodicEventInterval(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1getHandlesForPeriodicUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  result = (arg1)->getHandlesForPeriodicUpdate();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1addHandleForPeriodicEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addHandleForPeriodicEvent((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1removeHandleForPeriodicEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeHandleForPeriodicEvent((std::string const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequest_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequestSwigExplicitOSCPProvider_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::EnumStringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::EnumStringMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequest_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::NumericMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequestSwigExplicitOSCPProvider_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::NumericMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequest_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::StringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequestSwigExplicitOSCPProvider_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::StringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequest_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequestSwigExplicitOSCPProvider_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequest_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::AlertSystemState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequestSwigExplicitOSCPProvider_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSystemState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSystemState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::AlertSystemState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequest_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::AlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequestSwigExplicitOSCPProvider_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertConditionState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::AlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequest_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::AlertSignalState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequestSwigExplicitOSCPProvider_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::AlertSignalState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::AlertSignalState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::AlertSignalState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequest_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1onStateChangeRequestSwigExplicitOSCPProvider_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProvider **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProvider *obj = *((OSCLib::Data::OSCP::OSCPProvider **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProvider *director = dynamic_cast<SwigDirector_OSCPProvider *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProvider_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProvider *obj = *((OSCLib::Data::OSCP::OSCPProvider **)&objarg);
  SwigDirector_OSCPProvider *director = dynamic_cast<SwigDirector_OSCPProvider *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderHydraMDSStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *)new SwigDirector_OSCPProviderHydraMDSStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderHydraMDSStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderHydraMDSStateHandler_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *) 0 ;
  OSCLib::Data::OSCP::HydraMDSState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler **)&jarg1; 
  result = (arg1)->getState();
  *(OSCLib::Data::OSCP::HydraMDSState **)&jresult = new OSCLib::Data::OSCP::HydraMDSState((const OSCLib::Data::OSCP::HydraMDSState &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderHydraMDSStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderHydraMDSStateHandler_1getHandleSwigExplicitOSCPProviderHydraMDSStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler::getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderHydraMDSStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderHydraMDSStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderHydraMDSStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderHydraMDSStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler **)&objarg);
  SwigDirector_OSCPProviderHydraMDSStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderHydraMDSStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderLimitAlertConditionStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *)new SwigDirector_OSCPProviderLimitAlertConditionStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderLimitAlertConditionStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderLimitAlertConditionStateHandler_1onStateChangeRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderLimitAlertConditionStateHandler_1onStateChangeRequestSwigExplicitOSCPProviderLimitAlertConditionStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderLimitAlertConditionStateHandler_1sourceHasChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->sourceHasChanged((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderLimitAlertConditionStateHandler_1sourceHasChangedSwigExplicitOSCPProviderLimitAlertConditionStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::sourceHasChanged((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderLimitAlertConditionStateHandler_1notifyMDIBObjectChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::LimitAlertConditionState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderLimitAlertConditionStateHandler_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&jarg1; 
  result = (arg1)->getState();
  *(OSCLib::Data::OSCP::LimitAlertConditionState **)&jresult = new OSCLib::Data::OSCP::LimitAlertConditionState((const OSCLib::Data::OSCP::LimitAlertConditionState &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderLimitAlertConditionStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderLimitAlertConditionStateHandler_1getHandleSwigExplicitOSCPProviderLimitAlertConditionStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderLimitAlertConditionStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderLimitAlertConditionStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderLimitAlertConditionStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderLimitAlertConditionStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&objarg);
  SwigDirector_OSCPProviderLimitAlertConditionStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderLimitAlertConditionStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderNumericMetricStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *)new SwigDirector_OSCPProviderNumericMetricStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderNumericMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderNumericMetricStateHandler_1onStateChangeRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::NumericMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderNumericMetricStateHandler_1onStateChangeRequestSwigExplicitOSCPProviderNumericMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::NumericMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderNumericMetricStateHandler_1notifyMDIBObjectChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::NumericMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::NumericMetricState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderNumericMetricStateHandler_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler **)&jarg1; 
  result = (arg1)->getState();
  *(OSCLib::Data::OSCP::NumericMetricState **)&jresult = new OSCLib::Data::OSCP::NumericMetricState((const OSCLib::Data::OSCP::NumericMetricState &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderNumericMetricStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderNumericMetricStateHandler_1getHandleSwigExplicitOSCPProviderNumericMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderNumericMetricStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderNumericMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderNumericMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderNumericMetricStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler **)&objarg);
  SwigDirector_OSCPProviderNumericMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderNumericMetricStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderRealTimeSampleArrayMetricStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *)new SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderRealTimeSampleArrayMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderRealTimeSampleArrayMetricStateHandler_1onStateChangeRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderRealTimeSampleArrayMetricStateHandler_1onStateChangeRequestSwigExplicitOSCPProviderRealTimeSampleArrayMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderRealTimeSampleArrayMetricStateHandler_1notifyMDIBObjectChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderRealTimeSampleArrayMetricStateHandler_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler **)&jarg1; 
  result = (arg1)->getState();
  *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState **)&jresult = new OSCLib::Data::OSCP::RealTimeSampleArrayMetricState((const OSCLib::Data::OSCP::RealTimeSampleArrayMetricState &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderRealTimeSampleArrayMetricStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderRealTimeSampleArrayMetricStateHandler_1getHandleSwigExplicitOSCPProviderRealTimeSampleArrayMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderRealTimeSampleArrayMetricStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderRealTimeSampleArrayMetricStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler **)&objarg);
  SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPProviderStringMetricStateHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *)new SwigDirector_OSCPProviderStringMetricStateHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPProviderStringMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderStringMetricStateHandler_1onStateChangeRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::StringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_OSCPProviderStringMetricStateHandler_1onStateChangeRequestSwigExplicitOSCPProviderStringMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return 0;
  } 
  arg3 = *(OSCLib::Data::OSCP::OperationInvocationContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::OperationInvocationContext const & reference is null");
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::StringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderStringMetricStateHandler_1notifyMDIBObjectChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::StringMetricState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OSCLib::Data::OSCP::StringMetricState const & reference is null");
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderStringMetricStateHandler_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::StringMetricState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler **)&jarg1; 
  result = (arg1)->getState();
  *(OSCLib::Data::OSCP::StringMetricState **)&jresult = new OSCLib::Data::OSCP::StringMetricState((const OSCLib::Data::OSCP::StringMetricState &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderStringMetricStateHandler_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler **)&jarg1; 
  result = (arg1)->getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_OSCPProviderStringMetricStateHandler_1getHandleSwigExplicitOSCPProviderStringMetricStateHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler **)&jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::getHandle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderStringMetricStateHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPProviderStringMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderStringMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPProviderStringMetricStateHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *obj = *((OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler **)&objarg);
  SwigDirector_OSCPProviderStringMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderStringMetricStateHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPHelloReceivedHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *)new SwigDirector_OSCPHelloReceivedHandler(jenv);
  *(OSCLib::Data::OSCP::OSCPHelloReceivedHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPHelloReceivedHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *arg1 = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPHelloReceivedHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPHelloReceivedHandler_1helloReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *arg1 = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPHelloReceivedHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->helloReceived((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPHelloReceivedHandler_1helloReceivedSwigExplicitOSCPHelloReceivedHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *arg1 = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPHelloReceivedHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->OSCLib::Data::OSCP::OSCPHelloReceivedHandler::helloReceived((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPHelloReceivedHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *obj = *((OSCLib::Data::OSCP::OSCPHelloReceivedHandler **)&objarg);
  (void)jcls;
  SwigDirector_OSCPHelloReceivedHandler *director = dynamic_cast<SwigDirector_OSCPHelloReceivedHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPHelloReceivedHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *obj = *((OSCLib::Data::OSCP::OSCPHelloReceivedHandler **)&objarg);
  SwigDirector_OSCPHelloReceivedHandler *director = dynamic_cast<SwigDirector_OSCPHelloReceivedHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1OSCPServiceManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPServiceManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Data::OSCP::OSCPServiceManager *)new OSCLib::Data::OSCP::OSCPServiceManager();
  *(OSCLib::Data::OSCP::OSCPServiceManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1OSCPServiceManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Data::OSCP::OSCPServiceManager *arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Data::OSCP::OSCPServiceManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPServiceManager_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPServiceManager *arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPServiceManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->connect((std::string const &)*arg2);
  *(std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > **)&jresult = result ? new std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPServiceManager_1discoverEndpointReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPServiceManager *arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPServiceManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->discoverEndpointReference((std::string const &)*arg2);
  *(std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > **)&jresult = result ? new std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPServiceManager_1discoverOSCP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Data::OSCP::OSCPServiceManager *arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *) 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPServiceManager **)&jarg1; 
  result = (arg1)->discoverOSCP();
  *(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > **)&jresult = new std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >((const std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPServiceManager_1setHelloReceivedHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OSCLib::Data::OSCP::OSCPServiceManager *arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *) 0 ;
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *arg2 = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OSCLib::Data::OSCP::OSCPServiceManager **)&jarg1; 
  arg2 = *(OSCLib::Data::OSCP::OSCPHelloReceivedHandler **)&jarg2; 
  (arg1)->setHelloReceivedHandler(arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_OSCPServiceManager_1helloReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Data::OSCP::OSCPServiceManager *arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Data::OSCP::OSCPServiceManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->helloReceived(arg2);
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DeviceCharacteristics(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSCLib::Dev::DeviceCharacteristics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Dev::DeviceCharacteristics *)new OSCLib::Dev::DeviceCharacteristics();
  *(OSCLib::Dev::DeviceCharacteristics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1DeviceCharacteristics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1setManufacturer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setManufacturer((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1setManufacturerUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setManufacturerUrl((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1addModelName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addModelName((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1getManufacturer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getManufacturer();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1getManufacturerUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getManufacturerUrl();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1getModelName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getModelName((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1getModelNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  OSCLib::Dev::LocalizedString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  result = (OSCLib::Dev::LocalizedString *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getModelNames();
  *(OSCLib::Dev::LocalizedString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1getModelNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getModelNumber();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1getModelUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getModelUrl();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1getPresentationUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getPresentationUrl();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1setModelNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setModelNumber((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1setModelUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setModelUrl((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1setPresentationUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setPresentationUrl((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1addFriendlyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addFriendlyName((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1getFriendlyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getFriendlyName((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1getFriendlyNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  OSCLib::Dev::LocalizedString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  result = (OSCLib::Dev::LocalizedString *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getFriendlyNames();
  *(OSCLib::Dev::LocalizedString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1getFirmwareVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getFirmwareVersion();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1getSerialNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getSerialNumber();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1setFirmwareVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setFirmwareVersion((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DeviceCharacteristics_1setSerialNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Dev::DeviceCharacteristics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSerialNumber((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DebugOut_1DEBUG_1LEVEL_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  OSCLib::Util::DebugOut::LogLevel arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Util::DebugOut::LogLevel)jarg1; 
  OSCLib::Util::DebugOut::DEBUG_LEVEL = arg1;
}


SWIGEXPORT jint JNICALL Java_osclib_OSCLibJNI_DebugOut_1DEBUG_1LEVEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OSCLib::Util::DebugOut::LogLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (OSCLib::Util::DebugOut::LogLevel)OSCLib::Util::DebugOut::DEBUG_LEVEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DebugOut_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  OSCLib::Util::DebugOut::LogLevel arg1 ;
  std::ostream *arg2 = 0 ;
  std::string *arg3 = 0 ;
  OSCLib::Util::DebugOut *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Util::DebugOut::LogLevel)jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (OSCLib::Util::DebugOut *)new OSCLib::Util::DebugOut(arg1,*arg2,(std::string const &)*arg3);
  *(OSCLib::Util::DebugOut **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DebugOut_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OSCLib::Util::DebugOut::LogLevel arg1 ;
  std::ostream *arg2 = 0 ;
  OSCLib::Util::DebugOut *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Util::DebugOut::LogLevel)jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  result = (OSCLib::Util::DebugOut *)new OSCLib::Util::DebugOut(arg1,*arg2);
  *(OSCLib::Util::DebugOut **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DebugOut_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Util::DebugOut *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Util::DebugOut *)new OSCLib::Util::DebugOut(*arg1,(std::string const &)*arg2);
  *(OSCLib::Util::DebugOut **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DebugOut_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  OSCLib::Util::DebugOut *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  result = (OSCLib::Util::DebugOut *)new OSCLib::Util::DebugOut(*arg1);
  *(OSCLib::Util::DebugOut **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DebugOut_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OSCLib::Util::DebugOut::LogLevel arg1 ;
  std::string *arg2 = 0 ;
  OSCLib::Util::DebugOut *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Util::DebugOut::LogLevel)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OSCLib::Util::DebugOut *)new OSCLib::Util::DebugOut(arg1,(std::string const &)*arg2);
  *(OSCLib::Util::DebugOut **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_new_1DebugOut_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  OSCLib::Util::DebugOut::LogLevel arg1 ;
  OSCLib::Util::DebugOut *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OSCLib::Util::DebugOut::LogLevel)jarg1; 
  result = (OSCLib::Util::DebugOut *)new OSCLib::Util::DebugOut(arg1);
  *(OSCLib::Util::DebugOut **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_delete_1DebugOut(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSCLib::Util::DebugOut *arg1 = (OSCLib::Util::DebugOut *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSCLib::Util::DebugOut **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DebugOut_1openLogFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (bool)OSCLib::Util::DebugOut::openLogFile((std::string const &)*arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_osclib_OSCLibJNI_DebugOut_1openLogFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)OSCLib::Util::DebugOut::openLogFile((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DebugOut_1closeLogFile(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OSCLib::Util::DebugOut::closeLogFile();
}


SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_DebugOut_1flush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OSCLib::Util::DebugOut *arg1 = (OSCLib::Util::DebugOut *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OSCLib::Util::DebugOut **)&jarg1; 
  (arg1)->flush();
}


SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumerAlertConditionStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumerAlertSignalStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumerAlertSystemStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumerEnumStringMetricStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumerLimitAlertConditionStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumerNumericMetricStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumerRealTimeSampleArrayMetricStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPConsumerStringMetricStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPConsumerEventHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderActivateOperationHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertConditionStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSignalStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderAlertSystemStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderClockStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderClockStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderComponentStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderComponentStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderContextStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderContextStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderEnumStringMetricStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderHydraMDSStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderLimitAlertConditionStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderNumericMetricStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderRealTimeSampleArrayMetricStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_osclib_OSCLibJNI_OSCPProviderStringMetricStateHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OSCLib::Data::OSCP::OSCPProviderMDStateHandler **)&baseptr = *(OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_osclib_OSCLibJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[82] = {
    {
      "SwigDirector_OSCPConsumerEventHandler_onOperationInvoked", "(Losclib/OSCPConsumerEventHandler;JI)V" 
    },
    {
      "SwigDirector_OSCPConsumerEventHandler_getHandle", "(Losclib/OSCPConsumerEventHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPConsumerAlertConditionStateHandler_onOperationInvoked", "(Losclib/OSCPConsumerAlertConditionStateHandler;JI)V" 
    },
    {
      "SwigDirector_OSCPConsumerAlertConditionStateHandler_getHandle", "(Losclib/OSCPConsumerAlertConditionStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPConsumerAlertConditionStateHandler_onStateChanged", "(Losclib/OSCPConsumerAlertConditionStateHandler;J)V" 
    },
    {
      "SwigDirector_OSCPConsumerAlertSignalStateHandler_onOperationInvoked", "(Losclib/OSCPConsumerAlertSignalStateHandler;JI)V" 
    },
    {
      "SwigDirector_OSCPConsumerAlertSignalStateHandler_getHandle", "(Losclib/OSCPConsumerAlertSignalStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPConsumerAlertSignalStateHandler_onStateChanged", "(Losclib/OSCPConsumerAlertSignalStateHandler;J)V" 
    },
    {
      "SwigDirector_OSCPConsumerAlertSystemStateHandler_onOperationInvoked", "(Losclib/OSCPConsumerAlertSystemStateHandler;JI)V" 
    },
    {
      "SwigDirector_OSCPConsumerAlertSystemStateHandler_getHandle", "(Losclib/OSCPConsumerAlertSystemStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPConsumerAlertSystemStateHandler_onStateChanged", "(Losclib/OSCPConsumerAlertSystemStateHandler;J)V" 
    },
    {
      "SwigDirector_OSCPConsumerConnectionLostHandler_onConnectionLost", "(Losclib/OSCPConsumerConnectionLostHandler;)V" 
    },
    {
      "SwigDirector_OSCPConsumerContextStateChangedHandler_onContextStateChanged", "(Losclib/OSCPConsumerContextStateChangedHandler;J)V" 
    },
    {
      "SwigDirector_OSCPConsumerEnumStringMetricStateHandler_onOperationInvoked", "(Losclib/OSCPConsumerEnumStringMetricStateHandler;JI)V" 
    },
    {
      "SwigDirector_OSCPConsumerEnumStringMetricStateHandler_getHandle", "(Losclib/OSCPConsumerEnumStringMetricStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPConsumerEnumStringMetricStateHandler_onStateChanged", "(Losclib/OSCPConsumerEnumStringMetricStateHandler;J)V" 
    },
    {
      "SwigDirector_OSCPConsumerLimitAlertConditionStateHandler_onOperationInvoked", "(Losclib/OSCPConsumerLimitAlertConditionStateHandler;JI)V" 
    },
    {
      "SwigDirector_OSCPConsumerLimitAlertConditionStateHandler_getHandle", "(Losclib/OSCPConsumerLimitAlertConditionStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPConsumerLimitAlertConditionStateHandler_onStateChanged", "(Losclib/OSCPConsumerLimitAlertConditionStateHandler;J)V" 
    },
    {
      "SwigDirector_OSCPConsumerNumericMetricStateHandler_onOperationInvoked", "(Losclib/OSCPConsumerNumericMetricStateHandler;JI)V" 
    },
    {
      "SwigDirector_OSCPConsumerNumericMetricStateHandler_getHandle", "(Losclib/OSCPConsumerNumericMetricStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPConsumerNumericMetricStateHandler_onStateChanged", "(Losclib/OSCPConsumerNumericMetricStateHandler;J)V" 
    },
    {
      "SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler_onOperationInvoked", "(Losclib/OSCPConsumerRealTimeSampleArrayMetricStateHandler;JI)V" 
    },
    {
      "SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler_getHandle", "(Losclib/OSCPConsumerRealTimeSampleArrayMetricStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler_onStateChanged", "(Losclib/OSCPConsumerRealTimeSampleArrayMetricStateHandler;J)V" 
    },
    {
      "SwigDirector_OSCPConsumerStringMetricStateHandler_onOperationInvoked", "(Losclib/OSCPConsumerStringMetricStateHandler;JI)V" 
    },
    {
      "SwigDirector_OSCPConsumerStringMetricStateHandler_getHandle", "(Losclib/OSCPConsumerStringMetricStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPConsumerStringMetricStateHandler_onStateChanged", "(Losclib/OSCPConsumerStringMetricStateHandler;J)V" 
    },
    {
      "SwigDirector_OSCPProviderMDStateHandler_getHandle", "(Losclib/OSCPProviderMDStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderActivateOperationHandler_getHandle", "(Losclib/OSCPProviderActivateOperationHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderActivateOperationHandler_onActivateRequest", "(Losclib/OSCPProviderActivateOperationHandler;JJ)I" 
    },
    {
      "SwigDirector_OSCPProviderAlertConditionStateHandler_getHandle", "(Losclib/OSCPProviderAlertConditionStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderAlertConditionStateHandler_onStateChangeRequest", "(Losclib/OSCPProviderAlertConditionStateHandler;JJ)I" 
    },
    {
      "SwigDirector_OSCPProviderAlertConditionStateHandler_sourceHasChanged", "(Losclib/OSCPProviderAlertConditionStateHandler;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_OSCPProviderAlertConditionStateHandler_getState", "(Losclib/OSCPProviderAlertConditionStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderAlertSignalStateHandler_getHandle", "(Losclib/OSCPProviderAlertSignalStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderAlertSignalStateHandler_onStateChangeRequest", "(Losclib/OSCPProviderAlertSignalStateHandler;JJ)I" 
    },
    {
      "SwigDirector_OSCPProviderAlertSignalStateHandler_getState", "(Losclib/OSCPProviderAlertSignalStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderAlertSystemStateHandler_getHandle", "(Losclib/OSCPProviderAlertSystemStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderAlertSystemStateHandler_onStateChangeRequest", "(Losclib/OSCPProviderAlertSystemStateHandler;JJ)I" 
    },
    {
      "SwigDirector_OSCPProviderAlertSystemStateHandler_getState", "(Losclib/OSCPProviderAlertSystemStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderClockStateHandler_getHandle", "(Losclib/OSCPProviderClockStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderClockStateHandler_getState", "(Losclib/OSCPProviderClockStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderComponentStateHandler_getHandle", "(Losclib/OSCPProviderComponentStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderComponentStateHandler_getState", "(Losclib/OSCPProviderComponentStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderContextStateHandler_getHandle", "(Losclib/OSCPProviderContextStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderContextStateHandler_onStateChangeRequest", "(Losclib/OSCPProviderContextStateHandler;JJJJJJ)I" 
    },
    {
      "SwigDirector_OSCPProviderContextStateHandler_getEnsembleContextStates", "(Losclib/OSCPProviderContextStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderContextStateHandler_getLocationContextStates", "(Losclib/OSCPProviderContextStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderContextStateHandler_getOperatorContextStates", "(Losclib/OSCPProviderContextStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderContextStateHandler_getPatientContextStates", "(Losclib/OSCPProviderContextStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderContextStateHandler_getWorkflowContextStates", "(Losclib/OSCPProviderContextStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderEnumStringMetricStateHandler_getHandle", "(Losclib/OSCPProviderEnumStringMetricStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderEnumStringMetricStateHandler_onStateChangeRequest", "(Losclib/OSCPProviderEnumStringMetricStateHandler;JJ)I" 
    },
    {
      "SwigDirector_OSCPProviderEnumStringMetricStateHandler_getState", "(Losclib/OSCPProviderEnumStringMetricStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProvider_getMDIB", "(Losclib/OSCPProvider;)J" 
    },
    {
      "SwigDirector_OSCPProvider_getMDDescription", "(Losclib/OSCPProvider;)J" 
    },
    {
      "SwigDirector_OSCPProvider_getMDState", "(Losclib/OSCPProvider;)J" 
    },
    {
      "SwigDirector_OSCPProvider_onStateChangeRequest__SWIG_0", "(Losclib/OSCPProvider;JJ)I" 
    },
    {
      "SwigDirector_OSCPProvider_onStateChangeRequest__SWIG_1", "(Losclib/OSCPProvider;JJ)I" 
    },
    {
      "SwigDirector_OSCPProvider_onStateChangeRequest__SWIG_2", "(Losclib/OSCPProvider;JJ)I" 
    },
    {
      "SwigDirector_OSCPProvider_onStateChangeRequest__SWIG_3", "(Losclib/OSCPProvider;JJ)I" 
    },
    {
      "SwigDirector_OSCPProvider_onStateChangeRequest__SWIG_4", "(Losclib/OSCPProvider;JJ)I" 
    },
    {
      "SwigDirector_OSCPProvider_onStateChangeRequest__SWIG_5", "(Losclib/OSCPProvider;JJ)I" 
    },
    {
      "SwigDirector_OSCPProvider_onStateChangeRequest__SWIG_6", "(Losclib/OSCPProvider;JJ)I" 
    },
    {
      "SwigDirector_OSCPProvider_onStateChangeRequest__SWIG_7", "(Losclib/OSCPProvider;JJ)I" 
    },
    {
      "SwigDirector_OSCPProviderHydraMDSStateHandler_getHandle", "(Losclib/OSCPProviderHydraMDSStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderHydraMDSStateHandler_getState", "(Losclib/OSCPProviderHydraMDSStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderLimitAlertConditionStateHandler_getHandle", "(Losclib/OSCPProviderLimitAlertConditionStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderLimitAlertConditionStateHandler_onStateChangeRequest", "(Losclib/OSCPProviderLimitAlertConditionStateHandler;JJ)I" 
    },
    {
      "SwigDirector_OSCPProviderLimitAlertConditionStateHandler_sourceHasChanged", "(Losclib/OSCPProviderLimitAlertConditionStateHandler;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_OSCPProviderLimitAlertConditionStateHandler_getState", "(Losclib/OSCPProviderLimitAlertConditionStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderNumericMetricStateHandler_getHandle", "(Losclib/OSCPProviderNumericMetricStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderNumericMetricStateHandler_onStateChangeRequest", "(Losclib/OSCPProviderNumericMetricStateHandler;JJ)I" 
    },
    {
      "SwigDirector_OSCPProviderNumericMetricStateHandler_getState", "(Losclib/OSCPProviderNumericMetricStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler_getHandle", "(Losclib/OSCPProviderRealTimeSampleArrayMetricStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler_onStateChangeRequest", "(Losclib/OSCPProviderRealTimeSampleArrayMetricStateHandler;JJ)I" 
    },
    {
      "SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler_getState", "(Losclib/OSCPProviderRealTimeSampleArrayMetricStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPProviderStringMetricStateHandler_getHandle", "(Losclib/OSCPProviderStringMetricStateHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OSCPProviderStringMetricStateHandler_onStateChangeRequest", "(Losclib/OSCPProviderStringMetricStateHandler;JJ)I" 
    },
    {
      "SwigDirector_OSCPProviderStringMetricStateHandler_getState", "(Losclib/OSCPProviderStringMetricStateHandler;)J" 
    },
    {
      "SwigDirector_OSCPHelloReceivedHandler_helloReceived", "(Losclib/OSCPHelloReceivedHandler;Ljava/lang/String;)V" 
    }
  };
  Swig::jclass_OSCLibJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_OSCLibJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

