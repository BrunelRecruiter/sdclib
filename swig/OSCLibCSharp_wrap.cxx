/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_OSCLib(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_OSCLib(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_OSCLib(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_OSCLib(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "osdm.hxx"

#include "OSCLib/OSCLibrary.h"
#include "OSCLib/Data/OSCP/MDIB/ActivateOperationDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/AlertConditionDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/AlertConditionReference.h"
#include "OSCLib/Data/OSCP/MDIB/AlertConditionState.h"
#include "OSCLib/Data/OSCP/MDIB/AlertSignalDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/AlertSignalState.h"
#include "OSCLib/Data/OSCP/MDIB/AlertSystemDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/AlertSystemState.h"
#include "OSCLib/Data/OSCP/MDIB/Annotation.h"
#include "OSCLib/Data/OSCP/MDIB/Base64Binary.h"
#include "OSCLib/Data/OSCP/MDIB/BaseDemographics.h"
#include "OSCLib/Data/OSCP/MDIB/CalibrationInfo.h"
#include "OSCLib/Data/OSCP/MDIB/CauseInfo.h"
#include "OSCLib/Data/OSCP/MDIB/ChannelDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/ClinicalInfo.h"
#include "OSCLib/Data/OSCP/MDIB/ClockDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/ClockState.h"
#include "OSCLib/Data/OSCP/MDIB/CodedValue.h"
#include "OSCLib/Data/OSCP/MDIB/ComponentState.h"
#include "OSCLib/Data/OSCP/MDIB/DateTime.h"
#include "OSCLib/Data/OSCP/MDIB/Defaults.h"
#include "OSCLib/Data/OSCP/MDIB/DICOMDeviceDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/DICOMNetworkAE.h"
#include "OSCLib/Data/OSCP/MDIB/DICOMNetworkConnection.h"
#include "OSCLib/Data/OSCP/MDIB/DICOMTransferCapability.h"
#include "OSCLib/Data/OSCP/MDIB/Duration.h"
#include "OSCLib/Data/OSCP/MDIB/EnsembleContextDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/EnsembleContextState.h"
#include "OSCLib/Data/OSCP/MDIB/EnumMappings.h"
#include "OSCLib/Data/OSCP/MDIB/EnumNomenRef.h"
#include "OSCLib/Data/OSCP/MDIB/EnumStringMetricDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/EnumStringMetricState.h"
#include "OSCLib/Data/OSCP/MDIB/HydraMDSDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/HydraMDSState.h"
#include "OSCLib/Data/OSCP/MDIB/ImagingProcedure.h"
#include "OSCLib/Data/OSCP/MDIB/InstanceIdentifier.h"
#include "OSCLib/Data/OSCP/MDIB/Language.h"
#include "OSCLib/Data/OSCP/MDIB/LimitAlertConditionDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/LimitAlertConditionState.h"
#include "OSCLib/Data/OSCP/MDIB/LocalizedText.h"
#include "OSCLib/Data/OSCP/MDIB/LocationContextDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/LocationContextState.h"
#include "OSCLib/Data/OSCP/MDIB/MDDescription.h"
#include "OSCLib/Data/OSCP/MDIB/MDIBContainer.h"
#include "OSCLib/Data/OSCP/MDIB/MDIB-fwd.h"
#include "OSCLib/Data/OSCP/MDIB/MDState.h"
#include "OSCLib/Data/OSCP/MDIB/Measure.h"
#include "OSCLib/Data/OSCP/MDIB/MeasurementState.h"
#include "OSCLib/Data/OSCP/MDIB/NumericMetricDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/NumericMetricState.h"
#include "OSCLib/Data/OSCP/MDIB/NumericMetricValue.h"
#include "OSCLib/Data/OSCP/MDIB/OperationInvocationContext.h"
#include "OSCLib/Data/OSCP/MDIB/OperationState.h"
#include "OSCLib/Data/OSCP/MDIB/OperatorContextDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/OperatorContextState.h"
#include "OSCLib/Data/OSCP/MDIB/OrderDetail.h"
#include "OSCLib/Data/OSCP/MDIB/Order.h"
#include "OSCLib/Data/OSCP/MDIB/PatientContextDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/PatientContextState.h"
#include "OSCLib/Data/OSCP/MDIB/PatientDemographicsCoreData.h"
#include "OSCLib/Data/OSCP/MDIB/PersonParticipation.h"
#include "OSCLib/Data/OSCP/MDIB/PersonReference.h"
#include "OSCLib/Data/OSCP/MDIB/ProductionSpecification.h"
#include "OSCLib/Data/OSCP/MDIB/Range.h"
#include "OSCLib/Data/OSCP/MDIB/RealTimeSampleArrayMetricDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/RealTimeSampleArrayMetricState.h"
#include "OSCLib/Data/OSCP/MDIB/RealTimeSampleArrayValue.h"
#include "OSCLib/Data/OSCP/MDIB/ReferencedVersion.h"
#include "OSCLib/Data/OSCP/MDIB/RemedyInfo.h"
#include "OSCLib/Data/OSCP/MDIB/RTValueType.h"
#include "OSCLib/Data/OSCP/MDIB/SampleIndex.h"
#include "OSCLib/Data/OSCP/MDIB/SCODescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/SetAlertStateOperationDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/SetContextOperationDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/SetRangeOperationDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/SetStringOperationDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/SetValueOperationDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/StringMetricDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/StringMetricState.h"
#include "OSCLib/Data/OSCP/MDIB/StringMetricValue.h"
#include "OSCLib/Data/OSCP/MDIB/SystemContext.h"
#include "OSCLib/Data/OSCP/MDIB/SystemMetaData.h"
#include "OSCLib/Data/OSCP/MDIB/Timestamp.h"
#include "OSCLib/Data/OSCP/MDIB/TimeZone.h"
#include "OSCLib/Data/OSCP/MDIB/VersionCounter.h"
#include "OSCLib/Data/OSCP/MDIB/VMDDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/WorkflowContextDescriptor.h"
#include "OSCLib/Data/OSCP/MDIB/WorkflowContextState.h"
#include "OSCLib/Data/OSCP/FutureInvocationState.h"
#include "OSCLib/Data/OSCP/OSCPCachedProvider.h"
#include "OSCLib/Data/OSCP/OSCPConsumerEventHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerAlertConditionStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerAlertSignalStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerAlertSystemStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerConnectionLostHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerContextStateChangedHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerEnumStringMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumer.h"
#include "OSCLib/Data/OSCP/OSCPConsumerLimitAlertConditionStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerNumericMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerRealTimeSampleArrayMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerStringMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPConsumerSubscriptionLostHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderMDStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderActivateOperationHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderAlertConditionStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderAlertSignalStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderAlertSystemStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderClockStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderComponentStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderContextStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderEnumStringMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProvider.h"
#include "OSCLib/Data/OSCP/OSCPProviderHydraMDSStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderLimitAlertConditionStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderNumericMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderRealTimeSampleArrayMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPProviderStringMetricStateHandler.h"
#include "OSCLib/Data/OSCP/OSCPServiceManager.h"
#include "OSCLib/Dev/DeviceCharacteristics.h"

using namespace std;
using namespace OSCLib;
using namespace OSCLib::Cli;
using namespace OSCLib::Util;
using namespace OSCLib::Data::OSCP;



#include <stdexcept>


#include <deque>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <string>

SWIGINTERN std::vector< char > *new_std_vector_Sl_char_Sg___SWIG_2(int capacity){
        std::vector< char >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< char >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN char std_vector_Sl_char_Sg__getitemcopy(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN char const &std_vector_Sl_char_Sg__getitem(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__setitem(std::vector< char > *self,int index,char const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__AddRange(std::vector< char > *self,std::vector< char > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< char > *std_vector_Sl_char_Sg__GetRange(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< char >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_char_Sg__Insert(std::vector< char > *self,int index,char const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__InsertRange(std::vector< char > *self,int index,std::vector< char > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__RemoveAt(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__RemoveRange(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< char > *std_vector_Sl_char_Sg__Repeat(char const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< char >(count, value);
      }
SWIGINTERN void std_vector_Sl_char_Sg__Reverse__SWIG_0(std::vector< char > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_char_Sg__Reverse__SWIG_1(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_char_Sg__SetRange(std::vector< char > *self,int index,std::vector< char > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_char_Sg__Contains(std::vector< char > *self,char const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_char_Sg__IndexOf(std::vector< char > *self,char const &value){
        int index = -1;
        std::vector< char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_char_Sg__LastIndexOf(std::vector< char > *self,char const &value){
        int index = -1;
        std::vector< char >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_char_Sg__Remove(std::vector< char > *self,char const &value){
        std::vector< char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN double const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::string const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *new_std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__getitemcopy(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > const &std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__getitem(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__setitem(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,int index,std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__AddRange(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__GetRange(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__Insert(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,int index,std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__InsertRange(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,int index,std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__RemoveAt(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__RemoveRange(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__Repeat(std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__Reverse__SWIG_0(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__Reverse__SWIG_1(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__SetRange(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *self,int index,std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::CodedValue > *new_std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::CodedValue >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::CodedValue >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::CodedValue std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::CodedValue > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::CodedValue const &std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__getitem(std::vector< OSCLib::Data::OSCP::CodedValue > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__setitem(std::vector< OSCLib::Data::OSCP::CodedValue > *self,int index,OSCLib::Data::OSCP::CodedValue const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__AddRange(std::vector< OSCLib::Data::OSCP::CodedValue > *self,std::vector< OSCLib::Data::OSCP::CodedValue > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::CodedValue > *std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__GetRange(std::vector< OSCLib::Data::OSCP::CodedValue > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::CodedValue >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__Insert(std::vector< OSCLib::Data::OSCP::CodedValue > *self,int index,OSCLib::Data::OSCP::CodedValue const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::CodedValue > *self,int index,std::vector< OSCLib::Data::OSCP::CodedValue > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::CodedValue > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::CodedValue > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::CodedValue > *std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__Repeat(OSCLib::Data::OSCP::CodedValue const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::CodedValue >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::CodedValue > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::CodedValue > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__SetRange(std::vector< OSCLib::Data::OSCP::CodedValue > *self,int index,std::vector< OSCLib::Data::OSCP::CodedValue > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LocalizedText > *new_std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::LocalizedText >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::LocalizedText >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::LocalizedText std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::LocalizedText const &std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__getitem(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__setitem(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,int index,OSCLib::Data::OSCP::LocalizedText const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__AddRange(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,std::vector< OSCLib::Data::OSCP::LocalizedText > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LocalizedText > *std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__GetRange(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::LocalizedText >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__Insert(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,int index,OSCLib::Data::OSCP::LocalizedText const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,int index,std::vector< OSCLib::Data::OSCP::LocalizedText > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LocalizedText > *std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__Repeat(OSCLib::Data::OSCP::LocalizedText const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::LocalizedText >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::LocalizedText > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__SetRange(std::vector< OSCLib::Data::OSCP::LocalizedText > *self,int index,std::vector< OSCLib::Data::OSCP::LocalizedText > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::ChannelDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::ChannelDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::ChannelDescriptor std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::ChannelDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,int index,OSCLib::Data::OSCP::ChannelDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::ChannelDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,int index,OSCLib::Data::OSCP::ChannelDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__Repeat(OSCLib::Data::OSCP::ChannelDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::ChannelDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::HydraMDSDescriptor std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::HydraMDSDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,int index,OSCLib::Data::OSCP::HydraMDSDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,int index,OSCLib::Data::OSCP::HydraMDSDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__Repeat(OSCLib::Data::OSCP::HydraMDSDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::VMDDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::VMDDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::VMDDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::VMDDescriptor std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::VMDDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,int index,OSCLib::Data::OSCP::VMDDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,std::vector< OSCLib::Data::OSCP::VMDDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::VMDDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::VMDDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,int index,OSCLib::Data::OSCP::VMDDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::VMDDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::VMDDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__Repeat(OSCLib::Data::OSCP::VMDDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::VMDDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::VMDDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::VMDDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::ActivateOperationDescriptor std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::ActivateOperationDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,int index,OSCLib::Data::OSCP::ActivateOperationDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,int index,OSCLib::Data::OSCP::ActivateOperationDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__Repeat(OSCLib::Data::OSCP::ActivateOperationDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::AlertConditionDescriptor std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::AlertConditionDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,int index,OSCLib::Data::OSCP::AlertConditionDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,int index,OSCLib::Data::OSCP::AlertConditionDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__Repeat(OSCLib::Data::OSCP::AlertConditionDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertConditionState > *new_std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::AlertConditionState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::AlertConditionState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::AlertConditionState std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::AlertConditionState const &std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__getitem(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__setitem(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,int index,OSCLib::Data::OSCP::AlertConditionState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,std::vector< OSCLib::Data::OSCP::AlertConditionState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertConditionState > *std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::AlertConditionState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__Insert(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,int index,OSCLib::Data::OSCP::AlertConditionState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,int index,std::vector< OSCLib::Data::OSCP::AlertConditionState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertConditionState > *std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__Repeat(OSCLib::Data::OSCP::AlertConditionState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::AlertConditionState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::AlertConditionState > *self,int index,std::vector< OSCLib::Data::OSCP::AlertConditionState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::AlertSignalDescriptor std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::AlertSignalDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,int index,OSCLib::Data::OSCP::AlertSignalDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,int index,OSCLib::Data::OSCP::AlertSignalDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__Repeat(OSCLib::Data::OSCP::AlertSignalDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSignalState > *new_std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::AlertSignalState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::AlertSignalState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::AlertSignalState std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::AlertSignalState const &std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__getitem(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__setitem(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,int index,OSCLib::Data::OSCP::AlertSignalState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,std::vector< OSCLib::Data::OSCP::AlertSignalState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSignalState > *std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::AlertSignalState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__Insert(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,int index,OSCLib::Data::OSCP::AlertSignalState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,int index,std::vector< OSCLib::Data::OSCP::AlertSignalState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSignalState > *std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__Repeat(OSCLib::Data::OSCP::AlertSignalState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::AlertSignalState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::AlertSignalState > *self,int index,std::vector< OSCLib::Data::OSCP::AlertSignalState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::AlertSystemDescriptor std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::AlertSystemDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,int index,OSCLib::Data::OSCP::AlertSystemDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,int index,OSCLib::Data::OSCP::AlertSystemDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__Repeat(OSCLib::Data::OSCP::AlertSystemDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSystemState > *new_std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::AlertSystemState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::AlertSystemState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::AlertSystemState std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::AlertSystemState const &std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__getitem(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__setitem(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,int index,OSCLib::Data::OSCP::AlertSystemState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,std::vector< OSCLib::Data::OSCP::AlertSystemState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSystemState > *std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::AlertSystemState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__Insert(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,int index,OSCLib::Data::OSCP::AlertSystemState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,int index,std::vector< OSCLib::Data::OSCP::AlertSystemState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::AlertSystemState > *std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__Repeat(OSCLib::Data::OSCP::AlertSystemState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::AlertSystemState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::AlertSystemState > *self,int index,std::vector< OSCLib::Data::OSCP::AlertSystemState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Annotation > *new_std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::Annotation >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::Annotation >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::Annotation std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::Annotation > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::Annotation const &std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__getitem(std::vector< OSCLib::Data::OSCP::Annotation > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__setitem(std::vector< OSCLib::Data::OSCP::Annotation > *self,int index,OSCLib::Data::OSCP::Annotation const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__AddRange(std::vector< OSCLib::Data::OSCP::Annotation > *self,std::vector< OSCLib::Data::OSCP::Annotation > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Annotation > *std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__GetRange(std::vector< OSCLib::Data::OSCP::Annotation > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::Annotation >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__Insert(std::vector< OSCLib::Data::OSCP::Annotation > *self,int index,OSCLib::Data::OSCP::Annotation const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::Annotation > *self,int index,std::vector< OSCLib::Data::OSCP::Annotation > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::Annotation > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::Annotation > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Annotation > *std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__Repeat(OSCLib::Data::OSCP::Annotation const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::Annotation >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::Annotation > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::Annotation > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__SetRange(std::vector< OSCLib::Data::OSCP::Annotation > *self,int index,std::vector< OSCLib::Data::OSCP::Annotation > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Base64Binary > *new_std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::Base64Binary >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::Base64Binary >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::Base64Binary std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::Base64Binary const &std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__getitem(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__setitem(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,int index,OSCLib::Data::OSCP::Base64Binary const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__AddRange(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,std::vector< OSCLib::Data::OSCP::Base64Binary > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Base64Binary > *std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__GetRange(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::Base64Binary >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__Insert(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,int index,OSCLib::Data::OSCP::Base64Binary const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,int index,std::vector< OSCLib::Data::OSCP::Base64Binary > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Base64Binary > *std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__Repeat(OSCLib::Data::OSCP::Base64Binary const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::Base64Binary >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::Base64Binary > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__SetRange(std::vector< OSCLib::Data::OSCP::Base64Binary > *self,int index,std::vector< OSCLib::Data::OSCP::Base64Binary > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::BaseDemographics > *new_std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::BaseDemographics >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::BaseDemographics >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::BaseDemographics std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::BaseDemographics const &std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__getitem(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__setitem(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,int index,OSCLib::Data::OSCP::BaseDemographics const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__AddRange(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,std::vector< OSCLib::Data::OSCP::BaseDemographics > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::BaseDemographics > *std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__GetRange(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::BaseDemographics >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__Insert(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,int index,OSCLib::Data::OSCP::BaseDemographics const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,int index,std::vector< OSCLib::Data::OSCP::BaseDemographics > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::BaseDemographics > *std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__Repeat(OSCLib::Data::OSCP::BaseDemographics const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::BaseDemographics >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__SetRange(std::vector< OSCLib::Data::OSCP::BaseDemographics > *self,int index,std::vector< OSCLib::Data::OSCP::BaseDemographics > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::CauseInfo > *new_std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::CauseInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::CauseInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::CauseInfo std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::CauseInfo const &std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__getitem(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__setitem(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,int index,OSCLib::Data::OSCP::CauseInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__AddRange(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,std::vector< OSCLib::Data::OSCP::CauseInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::CauseInfo > *std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__GetRange(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::CauseInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__Insert(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,int index,OSCLib::Data::OSCP::CauseInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,int index,std::vector< OSCLib::Data::OSCP::CauseInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::CauseInfo > *std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__Repeat(OSCLib::Data::OSCP::CauseInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::CauseInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::CauseInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__SetRange(std::vector< OSCLib::Data::OSCP::CauseInfo > *self,int index,std::vector< OSCLib::Data::OSCP::CauseInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ClinicalInfo > *new_std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::ClinicalInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::ClinicalInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::ClinicalInfo std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::ClinicalInfo const &std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__getitem(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__setitem(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,int index,OSCLib::Data::OSCP::ClinicalInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__AddRange(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,std::vector< OSCLib::Data::OSCP::ClinicalInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ClinicalInfo > *std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__GetRange(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::ClinicalInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__Insert(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,int index,OSCLib::Data::OSCP::ClinicalInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,int index,std::vector< OSCLib::Data::OSCP::ClinicalInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ClinicalInfo > *std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__Repeat(OSCLib::Data::OSCP::ClinicalInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::ClinicalInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__SetRange(std::vector< OSCLib::Data::OSCP::ClinicalInfo > *self,int index,std::vector< OSCLib::Data::OSCP::ClinicalInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ClockDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::ClockDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::ClockDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::ClockDescriptor std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::ClockDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,int index,OSCLib::Data::OSCP::ClockDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,std::vector< OSCLib::Data::OSCP::ClockDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ClockDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::ClockDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,int index,OSCLib::Data::OSCP::ClockDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::ClockDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ClockDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__Repeat(OSCLib::Data::OSCP::ClockDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::ClockDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::ClockDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::ClockDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ClockState > *new_std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::ClockState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::ClockState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::ClockState std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::ClockState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::ClockState const &std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__getitem(std::vector< OSCLib::Data::OSCP::ClockState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__setitem(std::vector< OSCLib::Data::OSCP::ClockState > *self,int index,OSCLib::Data::OSCP::ClockState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::ClockState > *self,std::vector< OSCLib::Data::OSCP::ClockState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ClockState > *std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::ClockState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::ClockState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__Insert(std::vector< OSCLib::Data::OSCP::ClockState > *self,int index,OSCLib::Data::OSCP::ClockState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::ClockState > *self,int index,std::vector< OSCLib::Data::OSCP::ClockState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::ClockState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::ClockState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ClockState > *std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__Repeat(OSCLib::Data::OSCP::ClockState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::ClockState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::ClockState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::ClockState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::ClockState > *self,int index,std::vector< OSCLib::Data::OSCP::ClockState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ComponentState > *new_std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::ComponentState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::ComponentState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::ComponentState std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::ComponentState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::ComponentState const &std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__getitem(std::vector< OSCLib::Data::OSCP::ComponentState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__setitem(std::vector< OSCLib::Data::OSCP::ComponentState > *self,int index,OSCLib::Data::OSCP::ComponentState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::ComponentState > *self,std::vector< OSCLib::Data::OSCP::ComponentState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ComponentState > *std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::ComponentState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::ComponentState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__Insert(std::vector< OSCLib::Data::OSCP::ComponentState > *self,int index,OSCLib::Data::OSCP::ComponentState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::ComponentState > *self,int index,std::vector< OSCLib::Data::OSCP::ComponentState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::ComponentState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::ComponentState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ComponentState > *std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__Repeat(OSCLib::Data::OSCP::ComponentState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::ComponentState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::ComponentState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::ComponentState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::ComponentState > *self,int index,std::vector< OSCLib::Data::OSCP::ComponentState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::DICOMDeviceDescriptor std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::DICOMDeviceDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,int index,OSCLib::Data::OSCP::DICOMDeviceDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,int index,OSCLib::Data::OSCP::DICOMDeviceDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__Repeat(OSCLib::Data::OSCP::DICOMDeviceDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *new_std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::DICOMNetworkAE std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::DICOMNetworkAE const &std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__getitem(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__setitem(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,int index,OSCLib::Data::OSCP::DICOMNetworkAE const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__AddRange(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__GetRange(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__Insert(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,int index,OSCLib::Data::OSCP::DICOMNetworkAE const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,int index,std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__Repeat(OSCLib::Data::OSCP::DICOMNetworkAE const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__SetRange(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *self,int index,std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *new_std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::DICOMNetworkConnection std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::DICOMNetworkConnection const &std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__getitem(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__setitem(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,int index,OSCLib::Data::OSCP::DICOMNetworkConnection const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__AddRange(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__GetRange(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__Insert(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,int index,OSCLib::Data::OSCP::DICOMNetworkConnection const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,int index,std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__Repeat(OSCLib::Data::OSCP::DICOMNetworkConnection const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__SetRange(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *self,int index,std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *new_std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::DICOMTransferCapability std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::DICOMTransferCapability const &std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__getitem(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__setitem(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,int index,OSCLib::Data::OSCP::DICOMTransferCapability const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__AddRange(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__GetRange(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__Insert(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,int index,OSCLib::Data::OSCP::DICOMTransferCapability const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,int index,std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__Repeat(OSCLib::Data::OSCP::DICOMTransferCapability const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__SetRange(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *self,int index,std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnsembleContextState > *new_std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::EnsembleContextState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::EnsembleContextState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::EnsembleContextState std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::EnsembleContextState const &std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__getitem(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__setitem(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,int index,OSCLib::Data::OSCP::EnsembleContextState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnsembleContextState > *std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::EnsembleContextState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__Insert(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,int index,OSCLib::Data::OSCP::EnsembleContextState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,int index,std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnsembleContextState > *std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__Repeat(OSCLib::Data::OSCP::EnsembleContextState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::EnsembleContextState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *self,int index,std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnumNomenRef > *new_std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::EnumNomenRef >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::EnumNomenRef >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::EnumNomenRef std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::EnumNomenRef const &std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__getitem(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__setitem(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,int index,OSCLib::Data::OSCP::EnumNomenRef const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__AddRange(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,std::vector< OSCLib::Data::OSCP::EnumNomenRef > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnumNomenRef > *std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__GetRange(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::EnumNomenRef >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__Insert(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,int index,OSCLib::Data::OSCP::EnumNomenRef const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,int index,std::vector< OSCLib::Data::OSCP::EnumNomenRef > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnumNomenRef > *std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__Repeat(OSCLib::Data::OSCP::EnumNomenRef const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::EnumNomenRef >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__SetRange(std::vector< OSCLib::Data::OSCP::EnumNomenRef > *self,int index,std::vector< OSCLib::Data::OSCP::EnumNomenRef > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::EnumStringMetricDescriptor std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::EnumStringMetricDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,int index,OSCLib::Data::OSCP::EnumStringMetricDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,int index,OSCLib::Data::OSCP::EnumStringMetricDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__Repeat(OSCLib::Data::OSCP::EnumStringMetricDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *new_std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::EnumStringMetricState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::EnumStringMetricState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::EnumStringMetricState std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::EnumStringMetricState const &std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__getitem(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__setitem(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,int index,OSCLib::Data::OSCP::EnumStringMetricState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::EnumStringMetricState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__Insert(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,int index,OSCLib::Data::OSCP::EnumStringMetricState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,int index,std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__Repeat(OSCLib::Data::OSCP::EnumStringMetricState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::EnumStringMetricState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *self,int index,std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::HydraMDSState > *new_std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::HydraMDSState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::HydraMDSState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::HydraMDSState std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::HydraMDSState const &std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__getitem(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__setitem(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,int index,OSCLib::Data::OSCP::HydraMDSState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,std::vector< OSCLib::Data::OSCP::HydraMDSState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::HydraMDSState > *std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::HydraMDSState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__Insert(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,int index,OSCLib::Data::OSCP::HydraMDSState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,int index,std::vector< OSCLib::Data::OSCP::HydraMDSState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::HydraMDSState > *std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__Repeat(OSCLib::Data::OSCP::HydraMDSState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::HydraMDSState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::HydraMDSState > *self,int index,std::vector< OSCLib::Data::OSCP::HydraMDSState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ImagingProcedure > *new_std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::ImagingProcedure >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::ImagingProcedure >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::ImagingProcedure std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::ImagingProcedure const &std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__getitem(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__setitem(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,int index,OSCLib::Data::OSCP::ImagingProcedure const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__AddRange(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,std::vector< OSCLib::Data::OSCP::ImagingProcedure > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ImagingProcedure > *std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__GetRange(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::ImagingProcedure >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__Insert(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,int index,OSCLib::Data::OSCP::ImagingProcedure const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,int index,std::vector< OSCLib::Data::OSCP::ImagingProcedure > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ImagingProcedure > *std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__Repeat(OSCLib::Data::OSCP::ImagingProcedure const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::ImagingProcedure >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__SetRange(std::vector< OSCLib::Data::OSCP::ImagingProcedure > *self,int index,std::vector< OSCLib::Data::OSCP::ImagingProcedure > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *new_std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::InstanceIdentifier >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::InstanceIdentifier std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::InstanceIdentifier const &std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__getitem(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__setitem(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,int index,OSCLib::Data::OSCP::InstanceIdentifier const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__AddRange(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__GetRange(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__Insert(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,int index,OSCLib::Data::OSCP::InstanceIdentifier const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,int index,std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__Repeat(OSCLib::Data::OSCP::InstanceIdentifier const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__SetRange(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *self,int index,std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::LimitAlertConditionDescriptor std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,int index,OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,int index,OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__Repeat(OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *new_std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::LimitAlertConditionState std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::LimitAlertConditionState const &std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__getitem(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__setitem(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,int index,OSCLib::Data::OSCP::LimitAlertConditionState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__Insert(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,int index,OSCLib::Data::OSCP::LimitAlertConditionState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,int index,std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__Repeat(OSCLib::Data::OSCP::LimitAlertConditionState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *self,int index,std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LocationContextState > *new_std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::LocationContextState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::LocationContextState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::LocationContextState std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::LocationContextState const &std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__getitem(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__setitem(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,int index,OSCLib::Data::OSCP::LocationContextState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,std::vector< OSCLib::Data::OSCP::LocationContextState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LocationContextState > *std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::LocationContextState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__Insert(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,int index,OSCLib::Data::OSCP::LocationContextState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,int index,std::vector< OSCLib::Data::OSCP::LocationContextState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::LocationContextState > *std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__Repeat(OSCLib::Data::OSCP::LocationContextState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::LocationContextState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::LocationContextState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::LocationContextState > *self,int index,std::vector< OSCLib::Data::OSCP::LocationContextState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Measure > *new_std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::Measure >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::Measure >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::Measure std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::Measure > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::Measure const &std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__getitem(std::vector< OSCLib::Data::OSCP::Measure > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__setitem(std::vector< OSCLib::Data::OSCP::Measure > *self,int index,OSCLib::Data::OSCP::Measure const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__AddRange(std::vector< OSCLib::Data::OSCP::Measure > *self,std::vector< OSCLib::Data::OSCP::Measure > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Measure > *std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__GetRange(std::vector< OSCLib::Data::OSCP::Measure > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::Measure >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__Insert(std::vector< OSCLib::Data::OSCP::Measure > *self,int index,OSCLib::Data::OSCP::Measure const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::Measure > *self,int index,std::vector< OSCLib::Data::OSCP::Measure > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::Measure > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::Measure > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Measure > *std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__Repeat(OSCLib::Data::OSCP::Measure const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::Measure >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::Measure > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::Measure > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__SetRange(std::vector< OSCLib::Data::OSCP::Measure > *self,int index,std::vector< OSCLib::Data::OSCP::Measure > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::NumericMetricDescriptor std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::NumericMetricDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,int index,OSCLib::Data::OSCP::NumericMetricDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,int index,OSCLib::Data::OSCP::NumericMetricDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__Repeat(OSCLib::Data::OSCP::NumericMetricDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::NumericMetricState > *new_std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::NumericMetricState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::NumericMetricState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::NumericMetricState std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::NumericMetricState const &std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__getitem(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__setitem(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,int index,OSCLib::Data::OSCP::NumericMetricState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,std::vector< OSCLib::Data::OSCP::NumericMetricState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::NumericMetricState > *std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::NumericMetricState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__Insert(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,int index,OSCLib::Data::OSCP::NumericMetricState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,int index,std::vector< OSCLib::Data::OSCP::NumericMetricState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::NumericMetricState > *std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__Repeat(OSCLib::Data::OSCP::NumericMetricState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::NumericMetricState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::NumericMetricState > *self,int index,std::vector< OSCLib::Data::OSCP::NumericMetricState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::OperatorContextState > *new_std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::OperatorContextState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::OperatorContextState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::OperatorContextState std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::OperatorContextState const &std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__getitem(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__setitem(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,int index,OSCLib::Data::OSCP::OperatorContextState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,std::vector< OSCLib::Data::OSCP::OperatorContextState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::OperatorContextState > *std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::OperatorContextState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__Insert(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,int index,OSCLib::Data::OSCP::OperatorContextState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,int index,std::vector< OSCLib::Data::OSCP::OperatorContextState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::OperatorContextState > *std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__Repeat(OSCLib::Data::OSCP::OperatorContextState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::OperatorContextState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::OperatorContextState > *self,int index,std::vector< OSCLib::Data::OSCP::OperatorContextState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::PatientContextState > *new_std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::PatientContextState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::PatientContextState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::PatientContextState std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::PatientContextState const &std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__getitem(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__setitem(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,int index,OSCLib::Data::OSCP::PatientContextState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,std::vector< OSCLib::Data::OSCP::PatientContextState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::PatientContextState > *std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::PatientContextState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__Insert(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,int index,OSCLib::Data::OSCP::PatientContextState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,int index,std::vector< OSCLib::Data::OSCP::PatientContextState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::PatientContextState > *std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__Repeat(OSCLib::Data::OSCP::PatientContextState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::PatientContextState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::PatientContextState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::PatientContextState > *self,int index,std::vector< OSCLib::Data::OSCP::PatientContextState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::PersonParticipation > *new_std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::PersonParticipation >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::PersonParticipation >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::PersonParticipation std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::PersonParticipation const &std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__getitem(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__setitem(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,int index,OSCLib::Data::OSCP::PersonParticipation const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__AddRange(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,std::vector< OSCLib::Data::OSCP::PersonParticipation > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::PersonParticipation > *std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__GetRange(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::PersonParticipation >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__Insert(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,int index,OSCLib::Data::OSCP::PersonParticipation const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,int index,std::vector< OSCLib::Data::OSCP::PersonParticipation > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::PersonParticipation > *std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__Repeat(OSCLib::Data::OSCP::PersonParticipation const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::PersonParticipation >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__SetRange(std::vector< OSCLib::Data::OSCP::PersonParticipation > *self,int index,std::vector< OSCLib::Data::OSCP::PersonParticipation > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ProductionSpecification > *new_std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::ProductionSpecification >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::ProductionSpecification >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::ProductionSpecification std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::ProductionSpecification const &std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__getitem(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__setitem(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,int index,OSCLib::Data::OSCP::ProductionSpecification const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__AddRange(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,std::vector< OSCLib::Data::OSCP::ProductionSpecification > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ProductionSpecification > *std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__GetRange(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::ProductionSpecification >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__Insert(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,int index,OSCLib::Data::OSCP::ProductionSpecification const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,int index,std::vector< OSCLib::Data::OSCP::ProductionSpecification > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::ProductionSpecification > *std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__Repeat(OSCLib::Data::OSCP::ProductionSpecification const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::ProductionSpecification >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__SetRange(std::vector< OSCLib::Data::OSCP::ProductionSpecification > *self,int index,std::vector< OSCLib::Data::OSCP::ProductionSpecification > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Range > *new_std_vector_Sl_OSCLib_Data_OSCP_Range_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::Range >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::Range >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::Range std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::Range > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::Range const &std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__getitem(std::vector< OSCLib::Data::OSCP::Range > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__setitem(std::vector< OSCLib::Data::OSCP::Range > *self,int index,OSCLib::Data::OSCP::Range const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__AddRange(std::vector< OSCLib::Data::OSCP::Range > *self,std::vector< OSCLib::Data::OSCP::Range > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Range > *std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__GetRange(std::vector< OSCLib::Data::OSCP::Range > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::Range >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__Insert(std::vector< OSCLib::Data::OSCP::Range > *self,int index,OSCLib::Data::OSCP::Range const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::Range > *self,int index,std::vector< OSCLib::Data::OSCP::Range > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::Range > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::Range > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::Range > *std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__Repeat(OSCLib::Data::OSCP::Range const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::Range >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::Range > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::Range > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__SetRange(std::vector< OSCLib::Data::OSCP::Range > *self,int index,std::vector< OSCLib::Data::OSCP::Range > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,int index,OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,int index,OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__Repeat(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *new_std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::RealTimeSampleArrayMetricState std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__getitem(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__setitem(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,int index,OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__Insert(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,int index,OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,int index,std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__Repeat(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *self,int index,std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::SetAlertStateOperationDescriptor std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,int index,OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,int index,OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__Repeat(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::SetContextOperationDescriptor std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::SetContextOperationDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,int index,OSCLib::Data::OSCP::SetContextOperationDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,int index,OSCLib::Data::OSCP::SetContextOperationDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__Repeat(OSCLib::Data::OSCP::SetContextOperationDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::SetRangeOperationDescriptor std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::SetRangeOperationDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,int index,OSCLib::Data::OSCP::SetRangeOperationDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,int index,OSCLib::Data::OSCP::SetRangeOperationDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__Repeat(OSCLib::Data::OSCP::SetRangeOperationDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::SetStringOperationDescriptor std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::SetStringOperationDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,int index,OSCLib::Data::OSCP::SetStringOperationDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,int index,OSCLib::Data::OSCP::SetStringOperationDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__Repeat(OSCLib::Data::OSCP::SetStringOperationDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::SetValueOperationDescriptor std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::SetValueOperationDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,int index,OSCLib::Data::OSCP::SetValueOperationDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,int index,OSCLib::Data::OSCP::SetValueOperationDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__Repeat(OSCLib::Data::OSCP::SetValueOperationDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *new_std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::StringMetricDescriptor std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::StringMetricDescriptor const &std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__getitem(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__setitem(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,int index,OSCLib::Data::OSCP::StringMetricDescriptor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__AddRange(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__GetRange(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__Insert(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,int index,OSCLib::Data::OSCP::StringMetricDescriptor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__Repeat(OSCLib::Data::OSCP::StringMetricDescriptor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__SetRange(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *self,int index,std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::StringMetricState > *new_std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::StringMetricState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::StringMetricState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::StringMetricState std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::StringMetricState const &std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__getitem(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__setitem(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,int index,OSCLib::Data::OSCP::StringMetricState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,std::vector< OSCLib::Data::OSCP::StringMetricState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::StringMetricState > *std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::StringMetricState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__Insert(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,int index,OSCLib::Data::OSCP::StringMetricState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,int index,std::vector< OSCLib::Data::OSCP::StringMetricState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::StringMetricState > *std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__Repeat(OSCLib::Data::OSCP::StringMetricState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::StringMetricState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::StringMetricState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::StringMetricState > *self,int index,std::vector< OSCLib::Data::OSCP::StringMetricState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::WorkflowContextState > *new_std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg___SWIG_2(int capacity){
        std::vector< OSCLib::Data::OSCP::WorkflowContextState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< OSCLib::Data::OSCP::WorkflowContextState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN OSCLib::Data::OSCP::WorkflowContextState std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__getitemcopy(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN OSCLib::Data::OSCP::WorkflowContextState const &std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__getitem(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__setitem(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,int index,OSCLib::Data::OSCP::WorkflowContextState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__AddRange(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::WorkflowContextState > *std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__GetRange(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< OSCLib::Data::OSCP::WorkflowContextState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__Insert(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,int index,OSCLib::Data::OSCP::WorkflowContextState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__InsertRange(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,int index,std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__RemoveAt(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__RemoveRange(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< OSCLib::Data::OSCP::WorkflowContextState > *std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__Repeat(OSCLib::Data::OSCP::WorkflowContextState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< OSCLib::Data::OSCP::WorkflowContextState >(count, value);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__Reverse__SWIG_0(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__Reverse__SWIG_1(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__SetRange(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *self,int index,std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "OSCLibCSharp_wrap.h"

SwigDirector_OSCPCachedProvider::SwigDirector_OSCPCachedProvider() : OSCLib::Data::OSCP::OSCPCachedProvider(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPCachedProvider::~SwigDirector_OSCPCachedProvider() {
  
}


void SwigDirector_OSCPCachedProvider::swig_connect_director() {
  
}

void SwigDirector_OSCPCachedProvider::swig_init_callbacks() {
  
}

SwigDirector_OSCPConsumerEventHandler::SwigDirector_OSCPConsumerEventHandler() : OSCLib::Data::OSCP::OSCPConsumerEventHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPConsumerEventHandler::~SwigDirector_OSCPConsumerEventHandler() {
  
}


void SwigDirector_OSCPConsumerEventHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  void * joic = 0 ;
  int jarg1  ;
  
  if (!swig_callbackonOperationInvoked) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  } else {
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jarg1 = (int)is;
    swig_callbackonOperationInvoked(joic, jarg1);
  }
}

std::string SwigDirector_OSCPConsumerEventHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerEventHandler::getHandle");
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

void SwigDirector_OSCPConsumerEventHandler::swig_connect_director(SWIG_Callback0_t callbackonOperationInvoked, SWIG_Callback1_t callbackgetHandle) {
  swig_callbackonOperationInvoked = callbackonOperationInvoked;
  swig_callbackgetHandle = callbackgetHandle;
}

void SwigDirector_OSCPConsumerEventHandler::swig_init_callbacks() {
  swig_callbackonOperationInvoked = 0;
  swig_callbackgetHandle = 0;
}

SwigDirector_OSCPConsumerAlertConditionStateHandler::SwigDirector_OSCPConsumerAlertConditionStateHandler() : OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPConsumerAlertConditionStateHandler::~SwigDirector_OSCPConsumerAlertConditionStateHandler() {
  
}


void SwigDirector_OSCPConsumerAlertConditionStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  void * joic = 0 ;
  int jarg1  ;
  
  if (!swig_callbackonOperationInvoked) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  } else {
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jarg1 = (int)is;
    swig_callbackonOperationInvoked(joic, jarg1);
  }
}

std::string SwigDirector_OSCPConsumerAlertConditionStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler::getHandle");
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

void SwigDirector_OSCPConsumerAlertConditionStateHandler::onStateChanged(OSCLib::Data::OSCP::AlertConditionState const &state) {
  void * jstate = 0 ;
  
  if (!swig_callbackonStateChanged) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler::onStateChanged");
  } else {
    jstate = (OSCLib::Data::OSCP::AlertConditionState *) &state; 
    swig_callbackonStateChanged(jstate);
  }
}

void SwigDirector_OSCPConsumerAlertConditionStateHandler::swig_connect_director(SWIG_Callback0_t callbackonOperationInvoked, SWIG_Callback1_t callbackgetHandle, SWIG_Callback2_t callbackonStateChanged) {
  swig_callbackonOperationInvoked = callbackonOperationInvoked;
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChanged = callbackonStateChanged;
}

void SwigDirector_OSCPConsumerAlertConditionStateHandler::swig_init_callbacks() {
  swig_callbackonOperationInvoked = 0;
  swig_callbackgetHandle = 0;
  swig_callbackonStateChanged = 0;
}

SwigDirector_OSCPConsumerAlertSignalStateHandler::SwigDirector_OSCPConsumerAlertSignalStateHandler() : OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPConsumerAlertSignalStateHandler::~SwigDirector_OSCPConsumerAlertSignalStateHandler() {
  
}


void SwigDirector_OSCPConsumerAlertSignalStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  void * joic = 0 ;
  int jarg1  ;
  
  if (!swig_callbackonOperationInvoked) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  } else {
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jarg1 = (int)is;
    swig_callbackonOperationInvoked(joic, jarg1);
  }
}

std::string SwigDirector_OSCPConsumerAlertSignalStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler::getHandle");
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

void SwigDirector_OSCPConsumerAlertSignalStateHandler::onStateChanged(OSCLib::Data::OSCP::AlertSignalState const &state) {
  void * jstate = 0 ;
  
  if (!swig_callbackonStateChanged) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler::onStateChanged");
  } else {
    jstate = (OSCLib::Data::OSCP::AlertSignalState *) &state; 
    swig_callbackonStateChanged(jstate);
  }
}

void SwigDirector_OSCPConsumerAlertSignalStateHandler::swig_connect_director(SWIG_Callback0_t callbackonOperationInvoked, SWIG_Callback1_t callbackgetHandle, SWIG_Callback2_t callbackonStateChanged) {
  swig_callbackonOperationInvoked = callbackonOperationInvoked;
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChanged = callbackonStateChanged;
}

void SwigDirector_OSCPConsumerAlertSignalStateHandler::swig_init_callbacks() {
  swig_callbackonOperationInvoked = 0;
  swig_callbackgetHandle = 0;
  swig_callbackonStateChanged = 0;
}

SwigDirector_OSCPConsumerAlertSystemStateHandler::SwigDirector_OSCPConsumerAlertSystemStateHandler() : OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPConsumerAlertSystemStateHandler::~SwigDirector_OSCPConsumerAlertSystemStateHandler() {
  
}


void SwigDirector_OSCPConsumerAlertSystemStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  void * joic = 0 ;
  int jarg1  ;
  
  if (!swig_callbackonOperationInvoked) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  } else {
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jarg1 = (int)is;
    swig_callbackonOperationInvoked(joic, jarg1);
  }
}

std::string SwigDirector_OSCPConsumerAlertSystemStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler::getHandle");
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

void SwigDirector_OSCPConsumerAlertSystemStateHandler::onStateChanged(OSCLib::Data::OSCP::AlertSystemState const &state) {
  void * jstate = 0 ;
  
  if (!swig_callbackonStateChanged) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler::onStateChanged");
  } else {
    jstate = (OSCLib::Data::OSCP::AlertSystemState *) &state; 
    swig_callbackonStateChanged(jstate);
  }
}

void SwigDirector_OSCPConsumerAlertSystemStateHandler::swig_connect_director(SWIG_Callback0_t callbackonOperationInvoked, SWIG_Callback1_t callbackgetHandle, SWIG_Callback2_t callbackonStateChanged) {
  swig_callbackonOperationInvoked = callbackonOperationInvoked;
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChanged = callbackonStateChanged;
}

void SwigDirector_OSCPConsumerAlertSystemStateHandler::swig_init_callbacks() {
  swig_callbackonOperationInvoked = 0;
  swig_callbackgetHandle = 0;
  swig_callbackonStateChanged = 0;
}

SwigDirector_OSCPConsumerConnectionLostHandler::SwigDirector_OSCPConsumerConnectionLostHandler() : OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPConsumerConnectionLostHandler::~SwigDirector_OSCPConsumerConnectionLostHandler() {
  
}


void SwigDirector_OSCPConsumerConnectionLostHandler::onConnectionLost() {
  if (!swig_callbackonConnectionLost) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler::onConnectionLost");
  } else {
    swig_callbackonConnectionLost();
  }
}

void SwigDirector_OSCPConsumerConnectionLostHandler::swig_connect_director(SWIG_Callback0_t callbackonConnectionLost) {
  swig_callbackonConnectionLost = callbackonConnectionLost;
}

void SwigDirector_OSCPConsumerConnectionLostHandler::swig_init_callbacks() {
  swig_callbackonConnectionLost = 0;
}

SwigDirector_OSCPConsumerContextStateChangedHandler::SwigDirector_OSCPConsumerContextStateChangedHandler() : OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPConsumerContextStateChangedHandler::~SwigDirector_OSCPConsumerContextStateChangedHandler() {
  
}


void SwigDirector_OSCPConsumerContextStateChangedHandler::onContextStateChanged(std::vector< std::string > const &handles) {
  void * jhandles = 0 ;
  
  if (!swig_callbackonContextStateChanged) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler::onContextStateChanged");
  } else {
    jhandles = (std::vector< std::string > *) &handles; 
    swig_callbackonContextStateChanged(jhandles);
  }
}

void SwigDirector_OSCPConsumerContextStateChangedHandler::swig_connect_director(SWIG_Callback0_t callbackonContextStateChanged) {
  swig_callbackonContextStateChanged = callbackonContextStateChanged;
}

void SwigDirector_OSCPConsumerContextStateChangedHandler::swig_init_callbacks() {
  swig_callbackonContextStateChanged = 0;
}

SwigDirector_OSCPConsumerEnumStringMetricStateHandler::SwigDirector_OSCPConsumerEnumStringMetricStateHandler() : OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPConsumerEnumStringMetricStateHandler::~SwigDirector_OSCPConsumerEnumStringMetricStateHandler() {
  
}


void SwigDirector_OSCPConsumerEnumStringMetricStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  void * joic = 0 ;
  int jarg1  ;
  
  if (!swig_callbackonOperationInvoked) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  } else {
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jarg1 = (int)is;
    swig_callbackonOperationInvoked(joic, jarg1);
  }
}

std::string SwigDirector_OSCPConsumerEnumStringMetricStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler::getHandle");
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

void SwigDirector_OSCPConsumerEnumStringMetricStateHandler::onStateChanged(OSCLib::Data::OSCP::EnumStringMetricState const &state) {
  void * jstate = 0 ;
  
  if (!swig_callbackonStateChanged) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler::onStateChanged");
  } else {
    jstate = (OSCLib::Data::OSCP::EnumStringMetricState *) &state; 
    swig_callbackonStateChanged(jstate);
  }
}

void SwigDirector_OSCPConsumerEnumStringMetricStateHandler::swig_connect_director(SWIG_Callback0_t callbackonOperationInvoked, SWIG_Callback1_t callbackgetHandle, SWIG_Callback2_t callbackonStateChanged) {
  swig_callbackonOperationInvoked = callbackonOperationInvoked;
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChanged = callbackonStateChanged;
}

void SwigDirector_OSCPConsumerEnumStringMetricStateHandler::swig_init_callbacks() {
  swig_callbackonOperationInvoked = 0;
  swig_callbackgetHandle = 0;
  swig_callbackonStateChanged = 0;
}

SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::SwigDirector_OSCPConsumerLimitAlertConditionStateHandler() : OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::~SwigDirector_OSCPConsumerLimitAlertConditionStateHandler() {
  
}


void SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  void * joic = 0 ;
  int jarg1  ;
  
  if (!swig_callbackonOperationInvoked) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  } else {
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jarg1 = (int)is;
    swig_callbackonOperationInvoked(joic, jarg1);
  }
}

std::string SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler::getHandle");
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

void SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::onStateChanged(OSCLib::Data::OSCP::LimitAlertConditionState const &state) {
  void * jstate = 0 ;
  
  if (!swig_callbackonStateChanged) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler::onStateChanged");
  } else {
    jstate = (OSCLib::Data::OSCP::LimitAlertConditionState *) &state; 
    swig_callbackonStateChanged(jstate);
  }
}

void SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::swig_connect_director(SWIG_Callback0_t callbackonOperationInvoked, SWIG_Callback1_t callbackgetHandle, SWIG_Callback2_t callbackonStateChanged) {
  swig_callbackonOperationInvoked = callbackonOperationInvoked;
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChanged = callbackonStateChanged;
}

void SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::swig_init_callbacks() {
  swig_callbackonOperationInvoked = 0;
  swig_callbackgetHandle = 0;
  swig_callbackonStateChanged = 0;
}

SwigDirector_OSCPConsumerNumericMetricStateHandler::SwigDirector_OSCPConsumerNumericMetricStateHandler() : OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPConsumerNumericMetricStateHandler::~SwigDirector_OSCPConsumerNumericMetricStateHandler() {
  
}


void SwigDirector_OSCPConsumerNumericMetricStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  void * joic = 0 ;
  int jarg1  ;
  
  if (!swig_callbackonOperationInvoked) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  } else {
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jarg1 = (int)is;
    swig_callbackonOperationInvoked(joic, jarg1);
  }
}

std::string SwigDirector_OSCPConsumerNumericMetricStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler::getHandle");
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

void SwigDirector_OSCPConsumerNumericMetricStateHandler::onStateChanged(OSCLib::Data::OSCP::NumericMetricState const &state) {
  void * jstate = 0 ;
  
  if (!swig_callbackonStateChanged) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler::onStateChanged");
  } else {
    jstate = (OSCLib::Data::OSCP::NumericMetricState *) &state; 
    swig_callbackonStateChanged(jstate);
  }
}

void SwigDirector_OSCPConsumerNumericMetricStateHandler::swig_connect_director(SWIG_Callback0_t callbackonOperationInvoked, SWIG_Callback1_t callbackgetHandle, SWIG_Callback2_t callbackonStateChanged) {
  swig_callbackonOperationInvoked = callbackonOperationInvoked;
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChanged = callbackonStateChanged;
}

void SwigDirector_OSCPConsumerNumericMetricStateHandler::swig_init_callbacks() {
  swig_callbackonOperationInvoked = 0;
  swig_callbackgetHandle = 0;
  swig_callbackonStateChanged = 0;
}

SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler() : OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::~SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler() {
  
}


void SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  void * joic = 0 ;
  int jarg1  ;
  
  if (!swig_callbackonOperationInvoked) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  } else {
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jarg1 = (int)is;
    swig_callbackonOperationInvoked(joic, jarg1);
  }
}

std::string SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler::getHandle");
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

void SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::onStateChanged(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &state) {
  void * jstate = 0 ;
  
  if (!swig_callbackonStateChanged) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler::onStateChanged");
  } else {
    jstate = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &state; 
    swig_callbackonStateChanged(jstate);
  }
}

void SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::swig_connect_director(SWIG_Callback0_t callbackonOperationInvoked, SWIG_Callback1_t callbackgetHandle, SWIG_Callback2_t callbackonStateChanged) {
  swig_callbackonOperationInvoked = callbackonOperationInvoked;
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChanged = callbackonStateChanged;
}

void SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::swig_init_callbacks() {
  swig_callbackonOperationInvoked = 0;
  swig_callbackgetHandle = 0;
  swig_callbackonStateChanged = 0;
}

SwigDirector_OSCPConsumerStringMetricStateHandler::SwigDirector_OSCPConsumerStringMetricStateHandler() : OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPConsumerStringMetricStateHandler::~SwigDirector_OSCPConsumerStringMetricStateHandler() {
  
}


void SwigDirector_OSCPConsumerStringMetricStateHandler::onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is) {
  void * joic = 0 ;
  int jarg1  ;
  
  if (!swig_callbackonOperationInvoked) {
    OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked(oic,is);
    return;
  } else {
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jarg1 = (int)is;
    swig_callbackonOperationInvoked(joic, jarg1);
  }
}

std::string SwigDirector_OSCPConsumerStringMetricStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler::getHandle");
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

void SwigDirector_OSCPConsumerStringMetricStateHandler::onStateChanged(OSCLib::Data::OSCP::StringMetricState const &state) {
  void * jstate = 0 ;
  
  if (!swig_callbackonStateChanged) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler::onStateChanged");
  } else {
    jstate = (OSCLib::Data::OSCP::StringMetricState *) &state; 
    swig_callbackonStateChanged(jstate);
  }
}

void SwigDirector_OSCPConsumerStringMetricStateHandler::swig_connect_director(SWIG_Callback0_t callbackonOperationInvoked, SWIG_Callback1_t callbackgetHandle, SWIG_Callback2_t callbackonStateChanged) {
  swig_callbackonOperationInvoked = callbackonOperationInvoked;
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChanged = callbackonStateChanged;
}

void SwigDirector_OSCPConsumerStringMetricStateHandler::swig_init_callbacks() {
  swig_callbackonOperationInvoked = 0;
  swig_callbackgetHandle = 0;
  swig_callbackonStateChanged = 0;
}

SwigDirector_OSCPProviderMDStateHandler::SwigDirector_OSCPProviderMDStateHandler() : OSCLib::Data::OSCP::OSCPProviderMDStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderMDStateHandler::~SwigDirector_OSCPProviderMDStateHandler() {
  
}


std::string SwigDirector_OSCPProviderMDStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderMDStateHandler::getHandle");
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

void SwigDirector_OSCPProviderMDStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle) {
  swig_callbackgetHandle = callbackgetHandle;
}

void SwigDirector_OSCPProviderMDStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
}

SwigDirector_OSCPProviderActivateOperationHandler::SwigDirector_OSCPProviderActivateOperationHandler() : OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderActivateOperationHandler::~SwigDirector_OSCPProviderActivateOperationHandler() {
  
}


std::string SwigDirector_OSCPProviderActivateOperationHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler::getHandle");
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderActivateOperationHandler::onActivateRequest(OSCLib::Data::OSCP::MDIBContainer const &mdib, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jmdib = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonActivateRequest) {
    return OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler::onActivateRequest(mdib,oic);
  } else {
    jmdib = (OSCLib::Data::OSCP::MDIBContainer *) &mdib; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonActivateRequest(jmdib, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderActivateOperationHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackonActivateRequest) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonActivateRequest = callbackonActivateRequest;
}

void SwigDirector_OSCPProviderActivateOperationHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackonActivateRequest = 0;
}

SwigDirector_OSCPProviderAlertConditionStateHandler::SwigDirector_OSCPProviderAlertConditionStateHandler() : OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderAlertConditionStateHandler::~SwigDirector_OSCPProviderAlertConditionStateHandler() {
  
}


std::string SwigDirector_OSCPProviderAlertConditionStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    return OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::getHandle();
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderAlertConditionStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::AlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest) {
    return OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::AlertConditionState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderAlertConditionStateHandler::sourceHasChanged(std::string const &sourceHandle) {
  char * jsourceHandle = 0 ;
  
  if (!swig_callbacksourceHasChanged) {
    OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::sourceHasChanged(sourceHandle);
    return;
  } else {
    jsourceHandle = SWIG_csharp_string_callback((&sourceHandle)->c_str()); 
    swig_callbacksourceHasChanged(jsourceHandle);
  }
}

OSCLib::Data::OSCP::AlertConditionState SwigDirector_OSCPProviderAlertConditionStateHandler::getState() {
  OSCLib::Data::OSCP::AlertConditionState c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetState) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::getState");
  } else {
    jresult = (void *) swig_callbackgetState();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::AlertConditionState", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::AlertConditionState *)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderAlertConditionStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackonStateChangeRequest, SWIG_Callback2_t callbacksourceHasChanged, SWIG_Callback3_t callbackgetState) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChangeRequest = callbackonStateChangeRequest;
  swig_callbacksourceHasChanged = callbacksourceHasChanged;
  swig_callbackgetState = callbackgetState;
}

void SwigDirector_OSCPProviderAlertConditionStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackonStateChangeRequest = 0;
  swig_callbacksourceHasChanged = 0;
  swig_callbackgetState = 0;
}

SwigDirector_OSCPProviderAlertSignalStateHandler::SwigDirector_OSCPProviderAlertSignalStateHandler() : OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderAlertSignalStateHandler::~SwigDirector_OSCPProviderAlertSignalStateHandler() {
  
}


std::string SwigDirector_OSCPProviderAlertSignalStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    return OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::getHandle();
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderAlertSignalStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::AlertSignalState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest) {
    return OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::AlertSignalState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::AlertSignalState SwigDirector_OSCPProviderAlertSignalStateHandler::getState() {
  OSCLib::Data::OSCP::AlertSignalState c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetState) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::getState");
  } else {
    jresult = (void *) swig_callbackgetState();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::AlertSignalState", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::AlertSignalState *)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderAlertSignalStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackonStateChangeRequest, SWIG_Callback2_t callbackgetState) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChangeRequest = callbackonStateChangeRequest;
  swig_callbackgetState = callbackgetState;
}

void SwigDirector_OSCPProviderAlertSignalStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackonStateChangeRequest = 0;
  swig_callbackgetState = 0;
}

SwigDirector_OSCPProviderAlertSystemStateHandler::SwigDirector_OSCPProviderAlertSystemStateHandler() : OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderAlertSystemStateHandler::~SwigDirector_OSCPProviderAlertSystemStateHandler() {
  
}


std::string SwigDirector_OSCPProviderAlertSystemStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    return OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::getHandle();
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderAlertSystemStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::AlertSystemState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest) {
    return OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::AlertSystemState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::AlertSystemState SwigDirector_OSCPProviderAlertSystemStateHandler::getState() {
  OSCLib::Data::OSCP::AlertSystemState c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetState) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::getState");
  } else {
    jresult = (void *) swig_callbackgetState();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::AlertSystemState", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::AlertSystemState *)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderAlertSystemStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackonStateChangeRequest, SWIG_Callback2_t callbackgetState) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChangeRequest = callbackonStateChangeRequest;
  swig_callbackgetState = callbackgetState;
}

void SwigDirector_OSCPProviderAlertSystemStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackonStateChangeRequest = 0;
  swig_callbackgetState = 0;
}

SwigDirector_OSCPProviderClockStateHandler::SwigDirector_OSCPProviderClockStateHandler() : OSCLib::Data::OSCP::OSCPProviderClockStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderClockStateHandler::~SwigDirector_OSCPProviderClockStateHandler() {
  
}


std::string SwigDirector_OSCPProviderClockStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    return OSCLib::Data::OSCP::OSCPProviderClockStateHandler::getHandle();
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::ClockState SwigDirector_OSCPProviderClockStateHandler::getState() {
  OSCLib::Data::OSCP::ClockState c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetState) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderClockStateHandler::getState");
  } else {
    jresult = (void *) swig_callbackgetState();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::ClockState", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::ClockState *)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderClockStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackgetState) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackgetState = callbackgetState;
}

void SwigDirector_OSCPProviderClockStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackgetState = 0;
}

SwigDirector_OSCPProviderComponentStateHandler::SwigDirector_OSCPProviderComponentStateHandler() : OSCLib::Data::OSCP::OSCPProviderComponentStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderComponentStateHandler::~SwigDirector_OSCPProviderComponentStateHandler() {
  
}


std::string SwigDirector_OSCPProviderComponentStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    return OSCLib::Data::OSCP::OSCPProviderComponentStateHandler::getHandle();
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::ComponentState SwigDirector_OSCPProviderComponentStateHandler::getState() {
  OSCLib::Data::OSCP::ComponentState c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetState) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderComponentStateHandler::getState");
  } else {
    jresult = (void *) swig_callbackgetState();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::ComponentState", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::ComponentState *)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderComponentStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackgetState) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackgetState = callbackgetState;
}

void SwigDirector_OSCPProviderComponentStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackgetState = 0;
}

SwigDirector_OSCPProviderContextStateHandler::SwigDirector_OSCPProviderContextStateHandler() : OSCLib::Data::OSCP::OSCPProviderContextStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderContextStateHandler::~SwigDirector_OSCPProviderContextStateHandler() {
  
}


std::string SwigDirector_OSCPProviderContextStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getHandle();
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderContextStateHandler::onStateChangeRequest(std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &ecStates, std::vector< OSCLib::Data::OSCP::LocationContextState > const &lcStates, std::vector< OSCLib::Data::OSCP::OperatorContextState > const &ocStates, std::vector< OSCLib::Data::OSCP::PatientContextState > const &pcStates, std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &wcStates, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jecStates = 0 ;
  void * jlcStates = 0 ;
  void * jocStates = 0 ;
  void * jpcStates = 0 ;
  void * jwcStates = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::onStateChangeRequest(ecStates,lcStates,ocStates,pcStates,wcStates,oic);
  } else {
    jecStates = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) &ecStates; 
    jlcStates = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) &lcStates; 
    jocStates = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) &ocStates; 
    jpcStates = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) &pcStates; 
    jwcStates = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) &wcStates; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest(jecStates, jlcStates, jocStates, jpcStates, jwcStates, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

std::vector< OSCLib::Data::OSCP::EnsembleContextState > SwigDirector_OSCPProviderContextStateHandler::getEnsembleContextStates() {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetEnsembleContextStates) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getEnsembleContextStates();
  } else {
    jresult = (void *) swig_callbackgetEnsembleContextStates();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type std::vector< OSCLib::Data::OSCP::EnsembleContextState >", 0);
      return c_result;
    }
    c_result = *(std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jresult; 
  }
  return c_result;
}

std::vector< OSCLib::Data::OSCP::LocationContextState > SwigDirector_OSCPProviderContextStateHandler::getLocationContextStates() {
  std::vector< OSCLib::Data::OSCP::LocationContextState > c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetLocationContextStates) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getLocationContextStates();
  } else {
    jresult = (void *) swig_callbackgetLocationContextStates();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type std::vector< OSCLib::Data::OSCP::LocationContextState >", 0);
      return c_result;
    }
    c_result = *(std::vector< OSCLib::Data::OSCP::LocationContextState > *)jresult; 
  }
  return c_result;
}

std::vector< OSCLib::Data::OSCP::OperatorContextState > SwigDirector_OSCPProviderContextStateHandler::getOperatorContextStates() {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetOperatorContextStates) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getOperatorContextStates();
  } else {
    jresult = (void *) swig_callbackgetOperatorContextStates();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type std::vector< OSCLib::Data::OSCP::OperatorContextState >", 0);
      return c_result;
    }
    c_result = *(std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jresult; 
  }
  return c_result;
}

std::vector< OSCLib::Data::OSCP::PatientContextState > SwigDirector_OSCPProviderContextStateHandler::getPatientContextStates() {
  std::vector< OSCLib::Data::OSCP::PatientContextState > c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetPatientContextStates) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getPatientContextStates();
  } else {
    jresult = (void *) swig_callbackgetPatientContextStates();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type std::vector< OSCLib::Data::OSCP::PatientContextState >", 0);
      return c_result;
    }
    c_result = *(std::vector< OSCLib::Data::OSCP::PatientContextState > *)jresult; 
  }
  return c_result;
}

std::vector< OSCLib::Data::OSCP::WorkflowContextState > SwigDirector_OSCPProviderContextStateHandler::getWorkflowContextStates() {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetWorkflowContextStates) {
    return OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getWorkflowContextStates();
  } else {
    jresult = (void *) swig_callbackgetWorkflowContextStates();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type std::vector< OSCLib::Data::OSCP::WorkflowContextState >", 0);
      return c_result;
    }
    c_result = *(std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderContextStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackonStateChangeRequest, SWIG_Callback2_t callbackgetEnsembleContextStates, SWIG_Callback3_t callbackgetLocationContextStates, SWIG_Callback4_t callbackgetOperatorContextStates, SWIG_Callback5_t callbackgetPatientContextStates, SWIG_Callback6_t callbackgetWorkflowContextStates) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChangeRequest = callbackonStateChangeRequest;
  swig_callbackgetEnsembleContextStates = callbackgetEnsembleContextStates;
  swig_callbackgetLocationContextStates = callbackgetLocationContextStates;
  swig_callbackgetOperatorContextStates = callbackgetOperatorContextStates;
  swig_callbackgetPatientContextStates = callbackgetPatientContextStates;
  swig_callbackgetWorkflowContextStates = callbackgetWorkflowContextStates;
}

void SwigDirector_OSCPProviderContextStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackonStateChangeRequest = 0;
  swig_callbackgetEnsembleContextStates = 0;
  swig_callbackgetLocationContextStates = 0;
  swig_callbackgetOperatorContextStates = 0;
  swig_callbackgetPatientContextStates = 0;
  swig_callbackgetWorkflowContextStates = 0;
}

SwigDirector_OSCPProviderEnumStringMetricStateHandler::SwigDirector_OSCPProviderEnumStringMetricStateHandler() : OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderEnumStringMetricStateHandler::~SwigDirector_OSCPProviderEnumStringMetricStateHandler() {
  
}


std::string SwigDirector_OSCPProviderEnumStringMetricStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    return OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::getHandle();
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderEnumStringMetricStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::EnumStringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest) {
    return OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::EnumStringMetricState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::EnumStringMetricState SwigDirector_OSCPProviderEnumStringMetricStateHandler::getState() {
  OSCLib::Data::OSCP::EnumStringMetricState c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetState) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::getState");
  } else {
    jresult = (void *) swig_callbackgetState();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::EnumStringMetricState", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::EnumStringMetricState *)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderEnumStringMetricStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackonStateChangeRequest, SWIG_Callback2_t callbackgetState) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChangeRequest = callbackonStateChangeRequest;
  swig_callbackgetState = callbackgetState;
}

void SwigDirector_OSCPProviderEnumStringMetricStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackonStateChangeRequest = 0;
  swig_callbackgetState = 0;
}

SwigDirector_OSCPProvider::SwigDirector_OSCPProvider() : OSCLib::Data::OSCP::OSCPProvider(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProvider::~SwigDirector_OSCPProvider() {
  
}


OSCLib::Data::OSCP::MDIBContainer SwigDirector_OSCPProvider::getMDIB() {
  OSCLib::Data::OSCP::MDIBContainer c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetMDIB) {
    return OSCLib::Data::OSCP::OSCPProvider::getMDIB();
  } else {
    jresult = (void *) swig_callbackgetMDIB();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::MDIBContainer", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::MDIBContainer *)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::MDDescription SwigDirector_OSCPProvider::getMDDescription() {
  OSCLib::Data::OSCP::MDDescription c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetMDDescription) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProvider::getMDDescription");
  } else {
    jresult = (void *) swig_callbackgetMDDescription();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::MDDescription", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::MDDescription *)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::MDState SwigDirector_OSCPProvider::getMDState() {
  OSCLib::Data::OSCP::MDState c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetMDState) {
    return OSCLib::Data::OSCP::OSCPProvider::getMDState();
  } else {
    jresult = (void *) swig_callbackgetMDState();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::MDState", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::MDState *)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::EnumStringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest__SWIG_0) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::EnumStringMetricState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest__SWIG_0(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::NumericMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest__SWIG_1) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::NumericMetricState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest__SWIG_1(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::StringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest__SWIG_2) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::StringMetricState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest__SWIG_2(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest__SWIG_3) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest__SWIG_3(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::AlertSystemState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest__SWIG_4) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::AlertSystemState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest__SWIG_4(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::AlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest__SWIG_5) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::AlertConditionState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest__SWIG_5(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::AlertSignalState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest__SWIG_6) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::AlertSignalState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest__SWIG_6(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProvider::onStateChangeRequest(OSCLib::Data::OSCP::LimitAlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest__SWIG_7) {
    return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::LimitAlertConditionState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest__SWIG_7(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProvider::swig_connect_director(SWIG_Callback0_t callbackgetMDIB, SWIG_Callback1_t callbackgetMDDescription, SWIG_Callback2_t callbackgetMDState, SWIG_Callback3_t callbackonStateChangeRequest__SWIG_0, SWIG_Callback4_t callbackonStateChangeRequest__SWIG_1, SWIG_Callback5_t callbackonStateChangeRequest__SWIG_2, SWIG_Callback6_t callbackonStateChangeRequest__SWIG_3, SWIG_Callback7_t callbackonStateChangeRequest__SWIG_4, SWIG_Callback8_t callbackonStateChangeRequest__SWIG_5, SWIG_Callback9_t callbackonStateChangeRequest__SWIG_6, SWIG_Callback10_t callbackonStateChangeRequest__SWIG_7) {
  swig_callbackgetMDIB = callbackgetMDIB;
  swig_callbackgetMDDescription = callbackgetMDDescription;
  swig_callbackgetMDState = callbackgetMDState;
  swig_callbackonStateChangeRequest__SWIG_0 = callbackonStateChangeRequest__SWIG_0;
  swig_callbackonStateChangeRequest__SWIG_1 = callbackonStateChangeRequest__SWIG_1;
  swig_callbackonStateChangeRequest__SWIG_2 = callbackonStateChangeRequest__SWIG_2;
  swig_callbackonStateChangeRequest__SWIG_3 = callbackonStateChangeRequest__SWIG_3;
  swig_callbackonStateChangeRequest__SWIG_4 = callbackonStateChangeRequest__SWIG_4;
  swig_callbackonStateChangeRequest__SWIG_5 = callbackonStateChangeRequest__SWIG_5;
  swig_callbackonStateChangeRequest__SWIG_6 = callbackonStateChangeRequest__SWIG_6;
  swig_callbackonStateChangeRequest__SWIG_7 = callbackonStateChangeRequest__SWIG_7;
}

void SwigDirector_OSCPProvider::swig_init_callbacks() {
  swig_callbackgetMDIB = 0;
  swig_callbackgetMDDescription = 0;
  swig_callbackgetMDState = 0;
  swig_callbackonStateChangeRequest__SWIG_0 = 0;
  swig_callbackonStateChangeRequest__SWIG_1 = 0;
  swig_callbackonStateChangeRequest__SWIG_2 = 0;
  swig_callbackonStateChangeRequest__SWIG_3 = 0;
  swig_callbackonStateChangeRequest__SWIG_4 = 0;
  swig_callbackonStateChangeRequest__SWIG_5 = 0;
  swig_callbackonStateChangeRequest__SWIG_6 = 0;
  swig_callbackonStateChangeRequest__SWIG_7 = 0;
}

SwigDirector_OSCPProviderHydraMDSStateHandler::SwigDirector_OSCPProviderHydraMDSStateHandler() : OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderHydraMDSStateHandler::~SwigDirector_OSCPProviderHydraMDSStateHandler() {
  
}


std::string SwigDirector_OSCPProviderHydraMDSStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    return OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler::getHandle();
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::HydraMDSState SwigDirector_OSCPProviderHydraMDSStateHandler::getState() {
  OSCLib::Data::OSCP::HydraMDSState c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetState) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler::getState");
  } else {
    jresult = (void *) swig_callbackgetState();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::HydraMDSState", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::HydraMDSState *)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderHydraMDSStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackgetState) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackgetState = callbackgetState;
}

void SwigDirector_OSCPProviderHydraMDSStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackgetState = 0;
}

SwigDirector_OSCPProviderLimitAlertConditionStateHandler::SwigDirector_OSCPProviderLimitAlertConditionStateHandler() : OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderLimitAlertConditionStateHandler::~SwigDirector_OSCPProviderLimitAlertConditionStateHandler() {
  
}


std::string SwigDirector_OSCPProviderLimitAlertConditionStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    return OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::getHandle();
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderLimitAlertConditionStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::LimitAlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest) {
    return OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::LimitAlertConditionState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderLimitAlertConditionStateHandler::sourceHasChanged(std::string const &sourceHandle) {
  char * jsourceHandle = 0 ;
  
  if (!swig_callbacksourceHasChanged) {
    OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::sourceHasChanged(sourceHandle);
    return;
  } else {
    jsourceHandle = SWIG_csharp_string_callback((&sourceHandle)->c_str()); 
    swig_callbacksourceHasChanged(jsourceHandle);
  }
}

OSCLib::Data::OSCP::LimitAlertConditionState SwigDirector_OSCPProviderLimitAlertConditionStateHandler::getState() {
  OSCLib::Data::OSCP::LimitAlertConditionState c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetState) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::getState");
  } else {
    jresult = (void *) swig_callbackgetState();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::LimitAlertConditionState", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::LimitAlertConditionState *)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderLimitAlertConditionStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackonStateChangeRequest, SWIG_Callback2_t callbacksourceHasChanged, SWIG_Callback3_t callbackgetState) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChangeRequest = callbackonStateChangeRequest;
  swig_callbacksourceHasChanged = callbacksourceHasChanged;
  swig_callbackgetState = callbackgetState;
}

void SwigDirector_OSCPProviderLimitAlertConditionStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackonStateChangeRequest = 0;
  swig_callbacksourceHasChanged = 0;
  swig_callbackgetState = 0;
}

SwigDirector_OSCPProviderNumericMetricStateHandler::SwigDirector_OSCPProviderNumericMetricStateHandler() : OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderNumericMetricStateHandler::~SwigDirector_OSCPProviderNumericMetricStateHandler() {
  
}


std::string SwigDirector_OSCPProviderNumericMetricStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    return OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::getHandle();
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderNumericMetricStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::NumericMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest) {
    return OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::NumericMetricState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::NumericMetricState SwigDirector_OSCPProviderNumericMetricStateHandler::getState() {
  OSCLib::Data::OSCP::NumericMetricState c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetState) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::getState");
  } else {
    jresult = (void *) swig_callbackgetState();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::NumericMetricState", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::NumericMetricState *)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderNumericMetricStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackonStateChangeRequest, SWIG_Callback2_t callbackgetState) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChangeRequest = callbackonStateChangeRequest;
  swig_callbackgetState = callbackgetState;
}

void SwigDirector_OSCPProviderNumericMetricStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackonStateChangeRequest = 0;
  swig_callbackgetState = 0;
}

SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler() : OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::~SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler() {
  
}


std::string SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    return OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::getHandle();
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest) {
    return OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::RealTimeSampleArrayMetricState SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::getState() {
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetState) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::getState");
  } else {
    jresult = (void *) swig_callbackgetState();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::RealTimeSampleArrayMetricState", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackonStateChangeRequest, SWIG_Callback2_t callbackgetState) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChangeRequest = callbackonStateChangeRequest;
  swig_callbackgetState = callbackgetState;
}

void SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackonStateChangeRequest = 0;
  swig_callbackgetState = 0;
}

SwigDirector_OSCPProviderStringMetricStateHandler::SwigDirector_OSCPProviderStringMetricStateHandler() : OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPProviderStringMetricStateHandler::~SwigDirector_OSCPProviderStringMetricStateHandler() {
  
}


std::string SwigDirector_OSCPProviderStringMetricStateHandler::getHandle() {
  std::string c_result ;
  char * jresult = 0 ;
  
  if (!swig_callbackgetHandle) {
    return OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::getHandle();
  } else {
    jresult = (char *) swig_callbackgetHandle();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

OSCLib::Data::OSCP::InvocationState SwigDirector_OSCPProviderStringMetricStateHandler::onStateChangeRequest(OSCLib::Data::OSCP::StringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
  OSCLib::Data::OSCP::InvocationState c_result = SwigValueInit< OSCLib::Data::OSCP::InvocationState >() ;
  int jresult = 0 ;
  void * jstate = 0 ;
  void * joic = 0 ;
  
  if (!swig_callbackonStateChangeRequest) {
    return OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::onStateChangeRequest(state,oic);
  } else {
    jstate = (OSCLib::Data::OSCP::StringMetricState *) &state; 
    joic = (OSCLib::Data::OSCP::OperationInvocationContext *) &oic; 
    jresult = (int) swig_callbackonStateChangeRequest(jstate, joic);
    c_result = (OSCLib::Data::OSCP::InvocationState)jresult; 
  }
  return c_result;
}

OSCLib::Data::OSCP::StringMetricState SwigDirector_OSCPProviderStringMetricStateHandler::getState() {
  OSCLib::Data::OSCP::StringMetricState c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetState) {
    throw Swig::DirectorPureVirtualException("OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::getState");
  } else {
    jresult = (void *) swig_callbackgetState();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type OSCLib::Data::OSCP::StringMetricState", 0);
      return c_result;
    }
    c_result = *(OSCLib::Data::OSCP::StringMetricState *)jresult; 
  }
  return c_result;
}

void SwigDirector_OSCPProviderStringMetricStateHandler::swig_connect_director(SWIG_Callback0_t callbackgetHandle, SWIG_Callback1_t callbackonStateChangeRequest, SWIG_Callback2_t callbackgetState) {
  swig_callbackgetHandle = callbackgetHandle;
  swig_callbackonStateChangeRequest = callbackonStateChangeRequest;
  swig_callbackgetState = callbackgetState;
}

void SwigDirector_OSCPProviderStringMetricStateHandler::swig_init_callbacks() {
  swig_callbackgetHandle = 0;
  swig_callbackonStateChangeRequest = 0;
  swig_callbackgetState = 0;
}

SwigDirector_OSCPHelloReceivedHandler::SwigDirector_OSCPHelloReceivedHandler() : OSCLib::Data::OSCP::OSCPHelloReceivedHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OSCPHelloReceivedHandler::~SwigDirector_OSCPHelloReceivedHandler() {
  
}


void SwigDirector_OSCPHelloReceivedHandler::helloReceived(std::string epr) {
  char * jepr  ;
  
  if (!swig_callbackhelloReceived) {
    OSCLib::Data::OSCP::OSCPHelloReceivedHandler::helloReceived(epr);
    return;
  } else {
    jepr = SWIG_csharp_string_callback((&epr)->c_str()); 
    swig_callbackhelloReceived(jepr);
  }
}

void SwigDirector_OSCPHelloReceivedHandler::swig_connect_director(SWIG_Callback0_t callbackhelloReceived) {
  swig_callbackhelloReceived = callbackhelloReceived;
}

void SwigDirector_OSCPHelloReceivedHandler::swig_init_callbacks() {
  swig_callbackhelloReceived = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_Clear(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_Add(void * jarg1, char jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((char const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CharVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  arg1 = (std::vector< char > *)jarg1; 
  result = ((std::vector< char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CharVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  arg1 = (std::vector< char > *)jarg1; 
  result = ((std::vector< char > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CharVector__SWIG_0() {
  void * jresult ;
  std::vector< char > *result = 0 ;
  
  result = (std::vector< char > *)new std::vector< char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CharVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CharVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< char > *)new_std_vector_Sl_char_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CharVector_getitemcopy(void * jarg1, int jarg2) {
  char jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char result;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (char)std_vector_Sl_char_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CharVector_getitem(void * jarg1, int jarg2) {
  char jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (char *) &std_vector_Sl_char_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_setitem(void * jarg1, int jarg2, char jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char *arg3 = 0 ;
  char temp3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__setitem(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (std::vector< char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_char_Sg__AddRange(arg1,(std::vector< char > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CharVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< char > *)std_vector_Sl_char_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_Insert(void * jarg1, int jarg2, char jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char *arg3 = 0 ;
  char temp3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__Insert(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char > *arg3 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_char_Sg__InsertRange(arg1,arg2,(std::vector< char > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_char_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_char_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CharVector_Repeat(char jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = 0 ;
  int arg2 ;
  char temp1 ;
  std::vector< char > *result = 0 ;
  
  temp1 = (char)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char > *)std_vector_Sl_char_Sg__Repeat((char const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  std_vector_Sl_char_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_char_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char > *arg3 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_char_Sg__SetRange(arg1,arg2,(std::vector< char > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharVector_Contains(void * jarg1, char jarg2) {
  unsigned int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  bool result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_char_Sg__Contains(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharVector_IndexOf(void * jarg1, char jarg2) {
  int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  int result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_char_Sg__IndexOf(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharVector_LastIndexOf(void * jarg1, char jarg2) {
  int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  int result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_char_Sg__LastIndexOf(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharVector_Remove(void * jarg1, char jarg2) {
  unsigned int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  bool result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_char_Sg__Remove(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CharVector(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Clear(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Add(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DoubleVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DoubleVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleVector__SWIG_0() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleVector_getitemcopy(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleVector_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_setitem(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Insert(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleVector_Repeat(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DoubleVector_Contains(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DoubleVector_IndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DoubleVector_LastIndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DoubleVector_Remove(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DoubleVector(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Add(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::string *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringVector(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerVector_Clear(void * jarg1) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerVector_Add(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > tempnull2 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *)jarg2 : &tempnull2; 
  (arg1)->push_back((std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OSCPConsumerVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  result = ((std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OSCPConsumerVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  result = ((std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::size_type arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerVector__SWIG_0() {
  void * jresult ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *result = 0 ;
  
  result = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)new std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)new std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >((std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)new_std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPConsumerVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  int arg2 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > result;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result ? new std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPConsumerVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  int arg2 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *) &std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result ? new std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  int arg2 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > tempnull3 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *)jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__setitem(arg1,arg2,(std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__AddRange(arg1,(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPConsumerVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  int arg2 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > tempnull3 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *)jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__Insert(arg1,arg2,(std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPConsumerVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *arg1 = 0 ;
  int arg2 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > tempnull1 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *)jarg1 : &tempnull1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__Repeat((std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_shared_ptr_Sl_OSCLib_Data_OSCP_OSCPConsumer_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerVector(void * jarg1) {
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValueVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValueVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::CodedValue const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CodedValueVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::CodedValue > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CodedValueVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::CodedValue > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValueVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::CodedValue >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodedValueVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::CodedValue > *)new std::vector< OSCLib::Data::OSCP::CodedValue >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodedValueVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::CodedValue > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::CodedValue > *)new std::vector< OSCLib::Data::OSCP::CodedValue >((std::vector< OSCLib::Data::OSCP::CodedValue > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodedValueVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::CodedValue > *)new_std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodedValueVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodedValueVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::CodedValue *) &std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValueVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::CodedValue *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::CodedValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::CodedValue const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValueVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::CodedValue > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::CodedValue > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodedValueVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::CodedValue > *)std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValueVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::CodedValue *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::CodedValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::CodedValue const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValueVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::CodedValue > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::CodedValue > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValueVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValueVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodedValueVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::CodedValue > *)std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__Repeat((OSCLib::Data::OSCP::CodedValue const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValueVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValueVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValueVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::CodedValue > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CodedValue_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::CodedValue > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CodedValueVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::CodedValue > *arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CodedValue > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedTextVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedTextVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocalizedText const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::LocalizedText const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LocalizedTextVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LocalizedText > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LocalizedTextVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LocalizedText > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedTextVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::LocalizedText >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalizedTextVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)new std::vector< OSCLib::Data::OSCP::LocalizedText >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalizedTextVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LocalizedText > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)new std::vector< OSCLib::Data::OSCP::LocalizedText >((std::vector< OSCLib::Data::OSCP::LocalizedText > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalizedTextVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)new_std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalizedTextVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LocalizedText result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::LocalizedText((const OSCLib::Data::OSCP::LocalizedText &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalizedTextVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LocalizedText *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::LocalizedText *) &std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedTextVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LocalizedText *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::LocalizedText *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocalizedText const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::LocalizedText const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedTextVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LocalizedText > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::LocalizedText > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalizedTextVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedTextVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LocalizedText *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::LocalizedText *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocalizedText const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::LocalizedText const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedTextVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LocalizedText > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::LocalizedText > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedTextVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedTextVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalizedTextVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocalizedText *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocalizedText const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__Repeat((OSCLib::Data::OSCP::LocalizedText const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedTextVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedTextVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedTextVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LocalizedText > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocalizedText_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::LocalizedText > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LocalizedTextVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::LocalizedText > *arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocalizedText > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ChannelDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::ChannelDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChannelDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChannelDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChannelDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)new std::vector< OSCLib::Data::OSCP::ChannelDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChannelDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)new std::vector< OSCLib::Data::OSCP::ChannelDescriptor >((std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChannelDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ChannelDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::ChannelDescriptor((const OSCLib::Data::OSCP::ChannelDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::ChannelDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ChannelDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::ChannelDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ChannelDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::ChannelDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ChannelDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__Repeat((OSCLib::Data::OSCP::ChannelDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ChannelDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ChannelDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChannelDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ChannelDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::HydraMDSDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HydraMDSDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HydraMDSDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HydraMDSDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)new std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HydraMDSDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)new std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >((std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HydraMDSDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::HydraMDSDescriptor((const OSCLib::Data::OSCP::HydraMDSDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::HydraMDSDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::HydraMDSDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__Repeat((OSCLib::Data::OSCP::HydraMDSDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HydraMDSDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VMDDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::VMDDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VMDDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::VMDDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VMDDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::VMDDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VMDDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)new std::vector< OSCLib::Data::OSCP::VMDDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VMDDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::VMDDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)new std::vector< OSCLib::Data::OSCP::VMDDescriptor >((std::vector< OSCLib::Data::OSCP::VMDDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VMDDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::VMDDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::VMDDescriptor((const OSCLib::Data::OSCP::VMDDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::VMDDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VMDDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::VMDDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::VMDDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::VMDDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VMDDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::VMDDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::VMDDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::VMDDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VMDDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__Repeat((OSCLib::Data::OSCP::VMDDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::VMDDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_VMDDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::VMDDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VMDDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::VMDDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ActivateOperationDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::ActivateOperationDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ActivateOperationDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ActivateOperationDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >((std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ActivateOperationDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::ActivateOperationDescriptor((const OSCLib::Data::OSCP::ActivateOperationDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ActivateOperationDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::ActivateOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ActivateOperationDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::ActivateOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ActivateOperationDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__Repeat((OSCLib::Data::OSCP::ActivateOperationDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ActivateOperationDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ActivateOperationDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AlertConditionDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AlertConditionDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertConditionDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)new std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertConditionDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)new std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >((std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertConditionDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::AlertConditionDescriptor((const OSCLib::Data::OSCP::AlertConditionDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__Repeat((OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertConditionDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AlertConditionStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertConditionState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AlertConditionStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertConditionState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertConditionState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertConditionStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)new std::vector< OSCLib::Data::OSCP::AlertConditionState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertConditionStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertConditionState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)new std::vector< OSCLib::Data::OSCP::AlertConditionState >((std::vector< OSCLib::Data::OSCP::AlertConditionState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertConditionStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)new_std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertConditionState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::AlertConditionState((const OSCLib::Data::OSCP::AlertConditionState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::AlertConditionState *) &std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertConditionState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::AlertConditionState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::AlertConditionState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertConditionState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::AlertConditionState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertConditionState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::AlertConditionState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::AlertConditionState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertConditionState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::AlertConditionState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__Repeat((OSCLib::Data::OSCP::AlertConditionState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertConditionState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertConditionState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::AlertConditionState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertConditionStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertConditionState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AlertSignalDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AlertSignalDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSignalDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)new std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSignalDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)new std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >((std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSignalDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::AlertSignalDescriptor((const OSCLib::Data::OSCP::AlertSignalDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__Repeat((OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertSignalDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AlertSignalStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSignalState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AlertSignalStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSignalState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertSignalState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSignalStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)new std::vector< OSCLib::Data::OSCP::AlertSignalState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSignalStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSignalState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)new std::vector< OSCLib::Data::OSCP::AlertSignalState >((std::vector< OSCLib::Data::OSCP::AlertSignalState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSignalStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)new_std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSignalState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::AlertSignalState((const OSCLib::Data::OSCP::AlertSignalState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::AlertSignalState *) &std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSignalState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::AlertSignalState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::AlertSignalState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSignalState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::AlertSignalState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSignalState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::AlertSignalState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::AlertSignalState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSignalState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::AlertSignalState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__Repeat((OSCLib::Data::OSCP::AlertSignalState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSignalState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSignalState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::AlertSignalState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertSignalStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSignalState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSignalState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AlertSystemDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AlertSystemDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSystemDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)new std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSystemDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)new std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >((std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSystemDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::AlertSystemDescriptor((const OSCLib::Data::OSCP::AlertSystemDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__Repeat((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertSystemDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AlertSystemStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSystemState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AlertSystemStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::AlertSystemState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertSystemState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSystemStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)new std::vector< OSCLib::Data::OSCP::AlertSystemState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSystemStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSystemState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)new std::vector< OSCLib::Data::OSCP::AlertSystemState >((std::vector< OSCLib::Data::OSCP::AlertSystemState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSystemStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)new_std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSystemState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::AlertSystemState((const OSCLib::Data::OSCP::AlertSystemState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::AlertSystemState *) &std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSystemState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::AlertSystemState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::AlertSystemState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSystemState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::AlertSystemState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::AlertSystemState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::AlertSystemState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::AlertSystemState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSystemState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::AlertSystemState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__Repeat((OSCLib::Data::OSCP::AlertSystemState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::AlertSystemState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_AlertSystemState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::AlertSystemState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertSystemStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::AlertSystemState > *arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::AlertSystemState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  OSCLib::Data::OSCP::Annotation *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Annotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Annotation const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::Annotation const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AnnotationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Annotation > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AnnotationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Annotation > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::Annotation >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnnotationVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Annotation > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::Annotation > *)new std::vector< OSCLib::Data::OSCP::Annotation >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnnotationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Annotation > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::Annotation > *)new std::vector< OSCLib::Data::OSCP::Annotation >((std::vector< OSCLib::Data::OSCP::Annotation > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnnotationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Annotation > *)new_std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Annotation result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::Annotation((const OSCLib::Data::OSCP::Annotation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Annotation *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::Annotation *) &std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Annotation *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::Annotation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Annotation const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::Annotation const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Annotation > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::Annotation > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Annotation > *)std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Annotation *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::Annotation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Annotation const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::Annotation const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Annotation > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::Annotation > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnnotationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Annotation *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Annotation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Annotation const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Annotation > *)std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__Repeat((OSCLib::Data::OSCP::Annotation const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnnotationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Annotation > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Annotation > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Annotation_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::Annotation > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AnnotationVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::Annotation > *arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Annotation > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64BinaryVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64BinaryVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  OSCLib::Data::OSCP::Base64Binary *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Base64Binary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Base64Binary const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::Base64Binary const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Base64BinaryVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Base64Binary > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Base64BinaryVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Base64Binary > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64BinaryVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::Base64Binary >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Base64BinaryVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)new std::vector< OSCLib::Data::OSCP::Base64Binary >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Base64BinaryVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Base64Binary > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)new std::vector< OSCLib::Data::OSCP::Base64Binary >((std::vector< OSCLib::Data::OSCP::Base64Binary > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Base64BinaryVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)new_std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Base64BinaryVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Base64Binary result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::Base64Binary((const OSCLib::Data::OSCP::Base64Binary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Base64BinaryVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Base64Binary *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::Base64Binary *) &std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64BinaryVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Base64Binary *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::Base64Binary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Base64Binary const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::Base64Binary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64BinaryVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Base64Binary > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::Base64Binary > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Base64BinaryVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64BinaryVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Base64Binary *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::Base64Binary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Base64Binary const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::Base64Binary const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64BinaryVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Base64Binary > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::Base64Binary > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64BinaryVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64BinaryVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Base64BinaryVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Base64Binary *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Base64Binary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Base64Binary const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__Repeat((OSCLib::Data::OSCP::Base64Binary const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64BinaryVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64BinaryVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64BinaryVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Base64Binary > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Base64Binary_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::Base64Binary > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Base64BinaryVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::Base64Binary > *arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Base64Binary > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographicsVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographicsVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::BaseDemographics *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::BaseDemographics const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::BaseDemographics const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BaseDemographicsVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::BaseDemographics > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BaseDemographicsVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::BaseDemographics > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographicsVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::BaseDemographics >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseDemographicsVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)new std::vector< OSCLib::Data::OSCP::BaseDemographics >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseDemographicsVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::BaseDemographics > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)new std::vector< OSCLib::Data::OSCP::BaseDemographics >((std::vector< OSCLib::Data::OSCP::BaseDemographics > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseDemographicsVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)new_std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDemographicsVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::BaseDemographics result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::BaseDemographics((const OSCLib::Data::OSCP::BaseDemographics &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDemographicsVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::BaseDemographics *) &std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographicsVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::BaseDemographics *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::BaseDemographics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::BaseDemographics const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::BaseDemographics const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographicsVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::BaseDemographics > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::BaseDemographics > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDemographicsVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographicsVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::BaseDemographics *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::BaseDemographics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::BaseDemographics const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::BaseDemographics const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographicsVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::BaseDemographics > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::BaseDemographics > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographicsVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographicsVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDemographicsVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::BaseDemographics const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__Repeat((OSCLib::Data::OSCP::BaseDemographics const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographicsVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographicsVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographicsVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::BaseDemographics > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_BaseDemographics_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::BaseDemographics > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BaseDemographicsVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::BaseDemographics > *arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::BaseDemographics > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfoVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfoVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  OSCLib::Data::OSCP::CauseInfo *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CauseInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CauseInfo const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::CauseInfo const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CauseInfoVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::CauseInfo > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CauseInfoVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::CauseInfo > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfoVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::CauseInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CauseInfoVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)new std::vector< OSCLib::Data::OSCP::CauseInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CauseInfoVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::CauseInfo > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)new std::vector< OSCLib::Data::OSCP::CauseInfo >((std::vector< OSCLib::Data::OSCP::CauseInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CauseInfoVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)new_std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CauseInfoVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::CauseInfo result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::CauseInfo((const OSCLib::Data::OSCP::CauseInfo &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CauseInfoVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::CauseInfo *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::CauseInfo *) &std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfoVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::CauseInfo *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::CauseInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CauseInfo const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::CauseInfo const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfoVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::CauseInfo > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::CauseInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CauseInfoVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfoVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::CauseInfo *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::CauseInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CauseInfo const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::CauseInfo const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfoVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::CauseInfo > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::CauseInfo > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfoVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfoVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CauseInfoVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CauseInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CauseInfo const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__Repeat((OSCLib::Data::OSCP::CauseInfo const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfoVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfoVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfoVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::CauseInfo > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_CauseInfo_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::CauseInfo > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CauseInfoVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::CauseInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::CauseInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfoVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfoVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClinicalInfo const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::ClinicalInfo const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ClinicalInfoVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ClinicalInfo > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ClinicalInfoVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ClinicalInfo > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfoVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClinicalInfoVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)new std::vector< OSCLib::Data::OSCP::ClinicalInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClinicalInfoVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ClinicalInfo > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)new std::vector< OSCLib::Data::OSCP::ClinicalInfo >((std::vector< OSCLib::Data::OSCP::ClinicalInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClinicalInfoVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)new_std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClinicalInfoVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ClinicalInfo result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::ClinicalInfo((const OSCLib::Data::OSCP::ClinicalInfo &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClinicalInfoVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ClinicalInfo *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::ClinicalInfo *) &std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfoVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClinicalInfo const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::ClinicalInfo const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfoVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ClinicalInfo > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::ClinicalInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClinicalInfoVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfoVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClinicalInfo const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::ClinicalInfo const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfoVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ClinicalInfo > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ClinicalInfo > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfoVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfoVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClinicalInfoVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClinicalInfo const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__Repeat((OSCLib::Data::OSCP::ClinicalInfo const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfoVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfoVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfoVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ClinicalInfo > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClinicalInfo_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ClinicalInfo > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClinicalInfoVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > *arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClinicalInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::ClockDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ClockDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ClockDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ClockDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ClockDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClockDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)new std::vector< OSCLib::Data::OSCP::ClockDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClockDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ClockDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)new std::vector< OSCLib::Data::OSCP::ClockDescriptor >((std::vector< OSCLib::Data::OSCP::ClockDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClockDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ClockDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::ClockDescriptor((const OSCLib::Data::OSCP::ClockDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::ClockDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::ClockDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ClockDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::ClockDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::ClockDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ClockDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ClockDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__Repeat((OSCLib::Data::OSCP::ClockDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ClockDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ClockDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClockDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  OSCLib::Data::OSCP::ClockState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ClockState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::ClockState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ClockStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ClockState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ClockStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ClockState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ClockState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClockStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClockState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::ClockState > *)new std::vector< OSCLib::Data::OSCP::ClockState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClockStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ClockState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::ClockState > *)new std::vector< OSCLib::Data::OSCP::ClockState >((std::vector< OSCLib::Data::OSCP::ClockState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClockStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ClockState > *)new_std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ClockState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::ClockState((const OSCLib::Data::OSCP::ClockState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::ClockState *) &std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ClockState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ClockState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::ClockState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ClockState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::ClockState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ClockState > *)std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ClockState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ClockState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::ClockState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ClockState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ClockState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ClockState > *)std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__Repeat((OSCLib::Data::OSCP::ClockState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ClockState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ClockState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ClockState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ClockState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClockStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ClockState > *arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ClockState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  OSCLib::Data::OSCP::ComponentState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ComponentState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ComponentState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::ComponentState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ComponentStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ComponentState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ComponentStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ComponentState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ComponentState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ComponentStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::ComponentState > *)new std::vector< OSCLib::Data::OSCP::ComponentState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ComponentStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ComponentState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::ComponentState > *)new std::vector< OSCLib::Data::OSCP::ComponentState >((std::vector< OSCLib::Data::OSCP::ComponentState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ComponentStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ComponentState > *)new_std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ComponentState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::ComponentState((const OSCLib::Data::OSCP::ComponentState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::ComponentState *) &std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ComponentState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ComponentState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ComponentState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::ComponentState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ComponentState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::ComponentState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ComponentState > *)std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ComponentState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ComponentState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ComponentState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::ComponentState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ComponentState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ComponentState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ComponentState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ComponentState > *)std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__Repeat((OSCLib::Data::OSCP::ComponentState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ComponentState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ComponentState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ComponentState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ComponentStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ComponentState > *arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ComponentState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMDeviceDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::DICOMDeviceDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMDeviceDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)new std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMDeviceDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)new std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >((std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMDeviceDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::DICOMDeviceDescriptor((const OSCLib::Data::OSCP::DICOMDeviceDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMDeviceDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::DICOMDeviceDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMDeviceDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::DICOMDeviceDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMDeviceDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__Repeat((OSCLib::Data::OSCP::DICOMDeviceDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMDeviceDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DICOMDeviceDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAEVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAEVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMNetworkAE const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::DICOMNetworkAE const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DICOMNetworkAEVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DICOMNetworkAEVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAEVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMNetworkAEVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)new std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMNetworkAEVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)new std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >((std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMNetworkAEVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)new_std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAEVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMNetworkAE result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::DICOMNetworkAE((const OSCLib::Data::OSCP::DICOMNetworkAE &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAEVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAEVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMNetworkAE const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::DICOMNetworkAE const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAEVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAEVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAEVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMNetworkAE const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::DICOMNetworkAE const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAEVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAEVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAEVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAEVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMNetworkAE const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__Repeat((OSCLib::Data::OSCP::DICOMNetworkAE const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAEVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAEVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAEVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkAE_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DICOMNetworkAEVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMNetworkConnection const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::DICOMNetworkConnection const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMNetworkConnectionVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)new std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMNetworkConnectionVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)new std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >((std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMNetworkConnectionVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)new_std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::DICOMNetworkConnection((const OSCLib::Data::OSCP::DICOMNetworkConnection &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::DICOMNetworkConnection *) &std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMNetworkConnection const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::DICOMNetworkConnection const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMNetworkConnection const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::DICOMNetworkConnection const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMNetworkConnection const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__Repeat((OSCLib::Data::OSCP::DICOMNetworkConnection const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnectionVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMNetworkConnection_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DICOMNetworkConnectionVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMTransferCapability const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::DICOMTransferCapability const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMTransferCapabilityVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)new std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMTransferCapabilityVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)new std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >((std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMTransferCapabilityVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)new_std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMTransferCapability result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::DICOMTransferCapability((const OSCLib::Data::OSCP::DICOMTransferCapability &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::DICOMTransferCapability *) &std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMTransferCapability const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::DICOMTransferCapability const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMTransferCapability const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::DICOMTransferCapability const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMTransferCapability const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__Repeat((OSCLib::Data::OSCP::DICOMTransferCapability const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapabilityVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_DICOMTransferCapability_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DICOMTransferCapabilityVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EnsembleContextStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnsembleContextState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EnsembleContextStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnsembleContextState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnsembleContextStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)new std::vector< OSCLib::Data::OSCP::EnsembleContextState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnsembleContextStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnsembleContextState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)new std::vector< OSCLib::Data::OSCP::EnsembleContextState >((std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnsembleContextStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)new_std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnsembleContextState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::EnsembleContextState((const OSCLib::Data::OSCP::EnsembleContextState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::EnsembleContextState *) &std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::EnsembleContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnsembleContextState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::EnsembleContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnsembleContextState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__Repeat((OSCLib::Data::OSCP::EnsembleContextState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnsembleContextState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnsembleContextState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnsembleContextStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRefVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRefVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumNomenRef const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::EnumNomenRef const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EnumNomenRefVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnumNomenRef > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EnumNomenRefVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnumNomenRef > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRefVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumNomenRefVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)new std::vector< OSCLib::Data::OSCP::EnumNomenRef >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumNomenRefVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnumNomenRef > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)new std::vector< OSCLib::Data::OSCP::EnumNomenRef >((std::vector< OSCLib::Data::OSCP::EnumNomenRef > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumNomenRefVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)new_std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumNomenRefVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnumNomenRef result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::EnumNomenRef((const OSCLib::Data::OSCP::EnumNomenRef &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumNomenRefVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnumNomenRef *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::EnumNomenRef *) &std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRefVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumNomenRef const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::EnumNomenRef const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRefVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnumNomenRef > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::EnumNomenRef > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumNomenRefVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRefVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumNomenRef const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::EnumNomenRef const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRefVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnumNomenRef > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::EnumNomenRef > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRefVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRefVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumNomenRefVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumNomenRef const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__Repeat((OSCLib::Data::OSCP::EnumNomenRef const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRefVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRefVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRefVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnumNomenRef > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumNomenRef_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::EnumNomenRef > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnumNomenRefVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumNomenRef > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::EnumStringMetricDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumStringMetricDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumStringMetricDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >((std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumStringMetricDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::EnumStringMetricDescriptor((const OSCLib::Data::OSCP::EnumStringMetricDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::EnumStringMetricDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::EnumStringMetricDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__Repeat((OSCLib::Data::OSCP::EnumStringMetricDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnumStringMetricDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EnumStringMetricStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EnumStringMetricStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumStringMetricStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)new std::vector< OSCLib::Data::OSCP::EnumStringMetricState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumStringMetricStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)new std::vector< OSCLib::Data::OSCP::EnumStringMetricState >((std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumStringMetricStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)new_std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnumStringMetricState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::EnumStringMetricState((const OSCLib::Data::OSCP::EnumStringMetricState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::EnumStringMetricState *) &std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::EnumStringMetricState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::EnumStringMetricState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__Repeat((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_EnumStringMetricState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::EnumStringMetricState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnumStringMetricStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::EnumStringMetricState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::HydraMDSState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::HydraMDSState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HydraMDSStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::HydraMDSState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HydraMDSStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::HydraMDSState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::HydraMDSState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HydraMDSStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)new std::vector< OSCLib::Data::OSCP::HydraMDSState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HydraMDSStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::HydraMDSState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)new std::vector< OSCLib::Data::OSCP::HydraMDSState >((std::vector< OSCLib::Data::OSCP::HydraMDSState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HydraMDSStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)new_std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::HydraMDSState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::HydraMDSState((const OSCLib::Data::OSCP::HydraMDSState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::HydraMDSState *) &std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::HydraMDSState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::HydraMDSState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::HydraMDSState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::HydraMDSState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::HydraMDSState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::HydraMDSState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::HydraMDSState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::HydraMDSState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::HydraMDSState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::HydraMDSState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__Repeat((OSCLib::Data::OSCP::HydraMDSState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::HydraMDSState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_HydraMDSState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::HydraMDSState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HydraMDSStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::HydraMDSState > *arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::HydraMDSState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedureVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedureVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ImagingProcedure const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::ImagingProcedure const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ImagingProcedureVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ImagingProcedure > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ImagingProcedureVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ImagingProcedure > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedureVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImagingProcedureVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)new std::vector< OSCLib::Data::OSCP::ImagingProcedure >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImagingProcedureVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ImagingProcedure > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)new std::vector< OSCLib::Data::OSCP::ImagingProcedure >((std::vector< OSCLib::Data::OSCP::ImagingProcedure > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImagingProcedureVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)new_std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedureVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ImagingProcedure result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::ImagingProcedure((const OSCLib::Data::OSCP::ImagingProcedure &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedureVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::ImagingProcedure *) &std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedureVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ImagingProcedure const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::ImagingProcedure const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedureVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ImagingProcedure > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::ImagingProcedure > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedureVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedureVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ImagingProcedure const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::ImagingProcedure const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedureVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ImagingProcedure > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ImagingProcedure > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedureVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedureVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedureVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ImagingProcedure const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__Repeat((OSCLib::Data::OSCP::ImagingProcedure const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedureVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedureVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedureVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ImagingProcedure > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ImagingProcedure_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ImagingProcedure > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImagingProcedureVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > *arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ImagingProcedure > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifierVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifierVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_InstanceIdentifierVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_InstanceIdentifierVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifierVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InstanceIdentifierVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InstanceIdentifierVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InstanceIdentifierVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)new_std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InstanceIdentifierVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::InstanceIdentifier result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::InstanceIdentifier((const OSCLib::Data::OSCP::InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InstanceIdentifierVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::InstanceIdentifier *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::InstanceIdentifier *) &std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifierVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::InstanceIdentifier const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifierVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InstanceIdentifierVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifierVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::InstanceIdentifier const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifierVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifierVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifierVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InstanceIdentifierVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__Repeat((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifierVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifierVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifierVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_InstanceIdentifier_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::InstanceIdentifier > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_InstanceIdentifierVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::InstanceIdentifier > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LimitAlertConditionDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)new std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LimitAlertConditionDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)new std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >((std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LimitAlertConditionDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::LimitAlertConditionDescriptor((const OSCLib::Data::OSCP::LimitAlertConditionDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__Repeat((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LimitAlertConditionDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LimitAlertConditionStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LimitAlertConditionStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LimitAlertConditionStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)new std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LimitAlertConditionStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)new std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >((std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LimitAlertConditionStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)new_std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::LimitAlertConditionState((const OSCLib::Data::OSCP::LimitAlertConditionState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__Repeat((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LimitAlertConditionState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LimitAlertConditionStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocationContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::LocationContextState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LocationContextStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LocationContextState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LocationContextStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::LocationContextState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::LocationContextState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocationContextStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)new std::vector< OSCLib::Data::OSCP::LocationContextState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocationContextStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LocationContextState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)new std::vector< OSCLib::Data::OSCP::LocationContextState >((std::vector< OSCLib::Data::OSCP::LocationContextState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocationContextStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)new_std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LocationContextState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::LocationContextState((const OSCLib::Data::OSCP::LocationContextState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::LocationContextState *) &std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LocationContextState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::LocationContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::LocationContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LocationContextState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::LocationContextState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::LocationContextState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::LocationContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::LocationContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LocationContextState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::LocationContextState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__Repeat((OSCLib::Data::OSCP::LocationContextState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LocationContextState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_LocationContextState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::LocationContextState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LocationContextStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasureVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasureVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  OSCLib::Data::OSCP::Measure *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Measure *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Measure const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::Measure const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MeasureVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Measure >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Measure > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MeasureVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Measure >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Measure > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasureVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Measure >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::Measure >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeasureVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Measure > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::Measure > *)new std::vector< OSCLib::Data::OSCP::Measure >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeasureVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::Measure > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Measure > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::Measure > *)new std::vector< OSCLib::Data::OSCP::Measure >((std::vector< OSCLib::Data::OSCP::Measure > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeasureVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::Measure > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Measure > *)new_std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeasureVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Measure result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::Measure((const OSCLib::Data::OSCP::Measure &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeasureVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Measure *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::Measure *) &std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasureVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Measure *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::Measure *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Measure const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::Measure const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasureVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Measure > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::Measure > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeasureVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::Measure > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Measure > *)std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasureVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Measure *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::Measure *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Measure const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::Measure const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasureVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Measure > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::Measure > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasureVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasureVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeasureVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Measure *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Measure > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Measure *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Measure const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Measure > *)std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__Repeat((OSCLib::Data::OSCP::Measure const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasureVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasureVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasureVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Measure > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Measure > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Measure_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::Measure > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeasureVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::Measure > *arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Measure > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::NumericMetricDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_NumericMetricDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_NumericMetricDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NumericMetricDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NumericMetricDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >((std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NumericMetricDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::NumericMetricDescriptor((const OSCLib::Data::OSCP::NumericMetricDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::NumericMetricDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::NumericMetricDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__Repeat((OSCLib::Data::OSCP::NumericMetricDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NumericMetricDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_NumericMetricStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::NumericMetricState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_NumericMetricStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::NumericMetricState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::NumericMetricState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NumericMetricStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)new std::vector< OSCLib::Data::OSCP::NumericMetricState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NumericMetricStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::NumericMetricState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)new std::vector< OSCLib::Data::OSCP::NumericMetricState >((std::vector< OSCLib::Data::OSCP::NumericMetricState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NumericMetricStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)new_std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::NumericMetricState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::NumericMetricState((const OSCLib::Data::OSCP::NumericMetricState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::NumericMetricState *) &std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::NumericMetricState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::NumericMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::NumericMetricState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::NumericMetricState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::NumericMetricState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::NumericMetricState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::NumericMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::NumericMetricState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::NumericMetricState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::NumericMetricState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__Repeat((OSCLib::Data::OSCP::NumericMetricState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::NumericMetricState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_NumericMetricState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::NumericMetricState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NumericMetricStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::NumericMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::NumericMetricState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperatorContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::OperatorContextState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OperatorContextStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::OperatorContextState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OperatorContextStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::OperatorContextState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::OperatorContextState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OperatorContextStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)new std::vector< OSCLib::Data::OSCP::OperatorContextState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OperatorContextStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::OperatorContextState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)new std::vector< OSCLib::Data::OSCP::OperatorContextState >((std::vector< OSCLib::Data::OSCP::OperatorContextState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OperatorContextStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)new_std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::OperatorContextState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::OperatorContextState((const OSCLib::Data::OSCP::OperatorContextState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::OperatorContextState *) &std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::OperatorContextState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::OperatorContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::OperatorContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::OperatorContextState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::OperatorContextState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::OperatorContextState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::OperatorContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::OperatorContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::OperatorContextState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::OperatorContextState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__Repeat((OSCLib::Data::OSCP::OperatorContextState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::OperatorContextState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_OperatorContextState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::OperatorContextState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OperatorContextStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PatientContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::PatientContextState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PatientContextStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::PatientContextState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PatientContextStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::PatientContextState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::PatientContextState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PatientContextStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)new std::vector< OSCLib::Data::OSCP::PatientContextState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PatientContextStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::PatientContextState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)new std::vector< OSCLib::Data::OSCP::PatientContextState >((std::vector< OSCLib::Data::OSCP::PatientContextState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PatientContextStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)new_std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::PatientContextState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::PatientContextState((const OSCLib::Data::OSCP::PatientContextState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::PatientContextState *) &std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::PatientContextState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::PatientContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::PatientContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::PatientContextState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::PatientContextState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::PatientContextState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::PatientContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::PatientContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::PatientContextState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::PatientContextState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__Repeat((OSCLib::Data::OSCP::PatientContextState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::PatientContextState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PatientContextState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::PatientContextState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PatientContextStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipationVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipationVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  OSCLib::Data::OSCP::PersonParticipation *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PersonParticipation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PersonParticipation const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::PersonParticipation const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PersonParticipationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::PersonParticipation > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PersonParticipationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::PersonParticipation > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::PersonParticipation >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PersonParticipationVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)new std::vector< OSCLib::Data::OSCP::PersonParticipation >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PersonParticipationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::PersonParticipation > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)new std::vector< OSCLib::Data::OSCP::PersonParticipation >((std::vector< OSCLib::Data::OSCP::PersonParticipation > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PersonParticipationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)new_std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonParticipationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::PersonParticipation result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::PersonParticipation((const OSCLib::Data::OSCP::PersonParticipation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonParticipationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::PersonParticipation *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::PersonParticipation *) &std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::PersonParticipation *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::PersonParticipation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PersonParticipation const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::PersonParticipation const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::PersonParticipation > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::PersonParticipation > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonParticipationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::PersonParticipation *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::PersonParticipation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PersonParticipation const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::PersonParticipation const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::PersonParticipation > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::PersonParticipation > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonParticipationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PersonParticipation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PersonParticipation const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__Repeat((OSCLib::Data::OSCP::PersonParticipation const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::PersonParticipation > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_PersonParticipation_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::PersonParticipation > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PersonParticipationVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::PersonParticipation > *arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::PersonParticipation > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecificationVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecificationVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ProductionSpecification const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::ProductionSpecification const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ProductionSpecificationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ProductionSpecification > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ProductionSpecificationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::ProductionSpecification > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecificationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProductionSpecificationVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)new std::vector< OSCLib::Data::OSCP::ProductionSpecification >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProductionSpecificationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ProductionSpecification > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)new std::vector< OSCLib::Data::OSCP::ProductionSpecification >((std::vector< OSCLib::Data::OSCP::ProductionSpecification > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProductionSpecificationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)new_std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProductionSpecificationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ProductionSpecification result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::ProductionSpecification((const OSCLib::Data::OSCP::ProductionSpecification &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProductionSpecificationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ProductionSpecification *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::ProductionSpecification *) &std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecificationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ProductionSpecification const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::ProductionSpecification const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecificationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ProductionSpecification > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::ProductionSpecification > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProductionSpecificationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecificationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ProductionSpecification const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::ProductionSpecification const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecificationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ProductionSpecification > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ProductionSpecification > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecificationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecificationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProductionSpecificationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ProductionSpecification const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__Repeat((OSCLib::Data::OSCP::ProductionSpecification const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecificationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecificationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecificationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::ProductionSpecification > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_ProductionSpecification_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::ProductionSpecification > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProductionSpecificationVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > *arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::ProductionSpecification > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RangeVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RangeVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  OSCLib::Data::OSCP::Range *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Range const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::Range const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RangeVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Range > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RangeVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::Range > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RangeVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::Range >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RangeVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Range > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::Range > *)new std::vector< OSCLib::Data::OSCP::Range >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RangeVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::Range > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Range > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::Range > *)new std::vector< OSCLib::Data::OSCP::Range >((std::vector< OSCLib::Data::OSCP::Range > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RangeVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::Range > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Range > *)new_std_vector_Sl_OSCLib_Data_OSCP_Range_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RangeVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Range result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::Range((const OSCLib::Data::OSCP::Range &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RangeVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Range *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::Range *) &std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RangeVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Range *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::Range *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Range const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::Range const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RangeVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Range > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::Range > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RangeVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::Range > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Range > *)std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RangeVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::Range *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::Range *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Range const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::Range const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RangeVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Range > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Range > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::Range > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RangeVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RangeVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RangeVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Range *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Range > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Range const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::Range > *)std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__Repeat((OSCLib::Data::OSCP::Range const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RangeVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RangeVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RangeVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::Range > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::Range > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_Range_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::Range > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RangeVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::Range > *arg1 = (std::vector< OSCLib::Data::OSCP::Range > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::Range > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealTimeSampleArrayMetricDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealTimeSampleArrayMetricDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealTimeSampleArrayMetricDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor((const OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__Repeat((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RealTimeSampleArrayMetricDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealTimeSampleArrayMetricStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealTimeSampleArrayMetricStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >((std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealTimeSampleArrayMetricStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)new_std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::RealTimeSampleArrayMetricState((const OSCLib::Data::OSCP::RealTimeSampleArrayMetricState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__Repeat((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_RealTimeSampleArrayMetricState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RealTimeSampleArrayMetricStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetAlertStateOperationDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetAlertStateOperationDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >((std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetAlertStateOperationDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::SetAlertStateOperationDescriptor((const OSCLib::Data::OSCP::SetAlertStateOperationDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__Repeat((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetAlertStateOperationDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SetAlertStateOperationDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetContextOperationDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::SetContextOperationDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetContextOperationDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetContextOperationDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >((std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetContextOperationDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::SetContextOperationDescriptor((const OSCLib::Data::OSCP::SetContextOperationDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetContextOperationDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::SetContextOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetContextOperationDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::SetContextOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetContextOperationDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__Repeat((OSCLib::Data::OSCP::SetContextOperationDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetContextOperationDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SetContextOperationDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetRangeOperationDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::SetRangeOperationDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetRangeOperationDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetRangeOperationDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >((std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetRangeOperationDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::SetRangeOperationDescriptor((const OSCLib::Data::OSCP::SetRangeOperationDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetRangeOperationDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::SetRangeOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetRangeOperationDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::SetRangeOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetRangeOperationDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__Repeat((OSCLib::Data::OSCP::SetRangeOperationDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetRangeOperationDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SetRangeOperationDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetStringOperationDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::SetStringOperationDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetStringOperationDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetStringOperationDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >((std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetStringOperationDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::SetStringOperationDescriptor((const OSCLib::Data::OSCP::SetStringOperationDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetStringOperationDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::SetStringOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetStringOperationDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::SetStringOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetStringOperationDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__Repeat((OSCLib::Data::OSCP::SetStringOperationDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetStringOperationDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SetStringOperationDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetValueOperationDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::SetValueOperationDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetValueOperationDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetValueOperationDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)new std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >((std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetValueOperationDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::SetValueOperationDescriptor((const OSCLib::Data::OSCP::SetValueOperationDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetValueOperationDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::SetValueOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetValueOperationDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::SetValueOperationDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetValueOperationDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__Repeat((OSCLib::Data::OSCP::SetValueOperationDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_SetValueOperationDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SetValueOperationDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptorVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptorVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::StringMetricDescriptor const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringMetricDescriptorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringMetricDescriptorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMetricDescriptorVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMetricDescriptorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)new std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >((std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMetricDescriptorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)new_std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::StringMetricDescriptor result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::StringMetricDescriptor((const OSCLib::Data::OSCP::StringMetricDescriptor &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::StringMetricDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricDescriptor const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::StringMetricDescriptor const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricDescriptor const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__Repeat((OSCLib::Data::OSCP::StringMetricDescriptor const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricDescriptor_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringMetricDescriptorVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringMetricStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::StringMetricState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringMetricStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::StringMetricState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::StringMetricState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMetricStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)new std::vector< OSCLib::Data::OSCP::StringMetricState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMetricStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::StringMetricState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)new std::vector< OSCLib::Data::OSCP::StringMetricState >((std::vector< OSCLib::Data::OSCP::StringMetricState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMetricStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)new_std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::StringMetricState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::StringMetricState((const OSCLib::Data::OSCP::StringMetricState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::StringMetricState *) &std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::StringMetricState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::StringMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::StringMetricState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::StringMetricState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::StringMetricState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::StringMetricState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::StringMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::StringMetricState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::StringMetricState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::StringMetricState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__Repeat((OSCLib::Data::OSCP::StringMetricState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::StringMetricState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_StringMetricState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::StringMetricState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringMetricStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::StringMetricState > *arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::StringMetricState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextStateVector_Clear(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WorkflowContextStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::WorkflowContextState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WorkflowContextStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState >::size_type result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  result = ((std::vector< OSCLib::Data::OSCP::WorkflowContextState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState >::size_type arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WorkflowContextStateVector__SWIG_0() {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *result = 0 ;
  
  result = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)new std::vector< OSCLib::Data::OSCP::WorkflowContextState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WorkflowContextStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::WorkflowContextState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)new std::vector< OSCLib::Data::OSCP::WorkflowContextState >((std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WorkflowContextStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)new_std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::WorkflowContextState result;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new OSCLib::Data::OSCP::WorkflowContextState((const OSCLib::Data::OSCP::WorkflowContextState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OSCLib::Data::OSCP::WorkflowContextState *) &std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__setitem(arg1,arg2,(OSCLib::Data::OSCP::WorkflowContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg2 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::WorkflowContextState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__AddRange(arg1,(std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *result = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  int arg2 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__Insert(arg1,arg2,(OSCLib::Data::OSCP::WorkflowContextState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::WorkflowContextState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__InsertRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__Repeat((OSCLib::Data::OSCP::WorkflowContextState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  int arg2 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg3 = 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::WorkflowContextState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_OSCLib_Data_OSCP_WorkflowContextState_Sg__SetRange(arg1,arg2,(std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WorkflowContextStateVector(void * jarg1) {
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *) 0 ;
  
  arg1 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCLibrary() {
  void * jresult ;
  OSCLib::OSCLibrary *result = 0 ;
  
  result = (OSCLib::OSCLibrary *)new OSCLib::OSCLibrary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCLibrary(void * jarg1) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCLibrary_scheduleManagerForShutdown(void * jarg1, void * jarg2) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  OSCLib::Comm::CommunicationManager *arg2 = (OSCLib::Comm::CommunicationManager *) 0 ;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  arg2 = (OSCLib::Comm::CommunicationManager *)jarg2; 
  (arg1)->scheduleManagerForShutdown(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCLibrary_scheduleTaskForShutdown(void * jarg1, void * jarg2) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  SwigValueWrapper< std::shared_ptr< OSCLib::Util::Task > > arg2 ;
  std::shared_ptr< OSCLib::Util::Task > *argp2 ;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  argp2 = (std::shared_ptr< OSCLib::Util::Task > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< OSCLib::Util::Task >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->scheduleTaskForShutdown(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCLibrary_processAllScheduledForShutdown(void * jarg1) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  (arg1)->processAllScheduledForShutdown();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCLibrary_existsManagerScheduledForShutdown(void * jarg1) {
  unsigned int jresult ;
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  bool result;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  result = (bool)(arg1)->existsManagerScheduledForShutdown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCLibrary_getInstance() {
  void * jresult ;
  OSCLib::OSCLibrary *result = 0 ;
  
  result = (OSCLib::OSCLibrary *)OSCLib::OSCLibrary::getInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCLibrary_startup__SWIG_0(void * jarg1, int jarg2) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  Util::DebugOut::LogLevel arg2 ;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  arg2 = (Util::DebugOut::LogLevel)jarg2; 
  (arg1)->startup(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCLibrary_startup__SWIG_1(void * jarg1) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  (arg1)->startup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCLibrary_shutdown(void * jarg1) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  (arg1)->shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCLibrary_setBindInterface(void * jarg1, char * jarg2) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setBindInterface((std::string const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCLibrary_getBindInterface(void * jarg1) {
  char * jresult ;
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  result = (arg1)->getBindInterface();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCLibrary_setPortStart(void * jarg1, int jarg2) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  int arg2 ;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPortStart(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCLibrary_extractNextPort(void * jarg1) {
  int jresult ;
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  int result;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  result = (int)(arg1)->extractNextPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCLibrary_readMessages(void * jarg1) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  (arg1)->readMessages();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCLibrary_getNetInterface(void * jarg1) {
  void * jresult ;
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  OSCLib::Comm::NetworkInterface *result = 0 ;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  result = (OSCLib::Comm::NetworkInterface *)(arg1)->getNetInterface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCLibrary_isInitialized(void * jarg1) {
  unsigned int jresult ;
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  bool result;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  result = (bool)(arg1)->isInitialized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCLibrary_bindToAll(void * jarg1) {
  OSCLib::OSCLibrary *arg1 = (OSCLib::OSCLibrary *) 0 ;
  
  arg1 = (OSCLib::OSCLibrary *)jarg1; 
  (arg1)->bindToAll();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ReaderThread() {
  void * jresult ;
  OSCLib::ReaderThread *result = 0 ;
  
  result = (OSCLib::ReaderThread *)new OSCLib::ReaderThread();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReaderThread_runImpl(void * jarg1) {
  OSCLib::ReaderThread *arg1 = (OSCLib::ReaderThread *) 0 ;
  
  arg1 = (OSCLib::ReaderThread *)jarg1; 
  (arg1)->runImpl();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ReaderThread(void * jarg1) {
  OSCLib::ReaderThread *arg1 = (OSCLib::ReaderThread *) 0 ;
  
  arg1 = (OSCLib::ReaderThread *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ActivateOperationDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)new OSCLib::Data::OSCP::ActivateOperationDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ActivateOperationDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ActivateOperationDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)new OSCLib::Data::OSCP::ActivateOperationDescriptor((OSCLib::Data::OSCP::ActivateOperationDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ActivateOperationDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivateOperationDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ActivateOperationDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ActivateOperationDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  arg2 = (CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->setType((CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getType();
  jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActivateOperationDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ActivateOperationDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActivateOperationDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ActivateOperationDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActivateOperationDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptor_setOperationTarget(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->setOperationTarget((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ActivateOperationDescriptor_getOperationTarget(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getOperationTarget();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptor_addModifiableElement(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  arg2 = (CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->addModifiableElement((CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptor_getModifiableElements(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getModifiableElements();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptor_setActivationDuration(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  arg2 = (Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) &(arg1)->setActivationDuration((Duration const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivateOperationDescriptor_getActivationDuration(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  Duration result;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->getActivationDuration();
  jresult = new Duration((const Duration &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActivateOperationDescriptor_hasActivationDuration(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ActivateOperationDescriptor const *)arg1)->hasActivationDuration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertConditionDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *)new OSCLib::Data::OSCP::AlertConditionDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertConditionDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *)new OSCLib::Data::OSCP::AlertConditionDescriptor((OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertConditionDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  arg2 = (CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->setType((CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getType();
  jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertConditionDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AlertConditionDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertConditionDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertConditionDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertConditionDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptor_setKind(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  AlertConditionKind *arg2 = 0 ;
  AlertConditionKind temp2 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  temp2 = (AlertConditionKind)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->setKind((AlertConditionKind const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertConditionDescriptor_getKind(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  AlertConditionKind result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  result = (AlertConditionKind)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getKind();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptor_setPriority(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  AlertConditionPriority *arg2 = 0 ;
  AlertConditionPriority temp2 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  temp2 = (AlertConditionPriority)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->setPriority((AlertConditionPriority const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertConditionDescriptor_getPriority(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  AlertConditionPriority result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  result = (AlertConditionPriority)((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getPriority();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptor_addSource(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->addSource((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptor_getSources(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getSources();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptor_addCauseInfo(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  CauseInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  arg2 = (CauseInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CauseInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionDescriptor *) &(arg1)->addCauseInfo((CauseInfo const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionDescriptor_getCauseInfo(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionDescriptor const *)arg1)->getCauseInfo();
  jresult = new std::vector< OSCLib::Data::OSCP::CauseInfo >((const std::vector< OSCLib::Data::OSCP::CauseInfo > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertConditionReference__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionReference *result = 0 ;
  
  result = (OSCLib::Data::OSCP::AlertConditionReference *)new OSCLib::Data::OSCP::AlertConditionReference();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertConditionReference__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionReference *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionReference *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionReference const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionReference *)new OSCLib::Data::OSCP::AlertConditionReference((OSCLib::Data::OSCP::AlertConditionReference const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertConditionReference(void * jarg1) {
  OSCLib::Data::OSCP::AlertConditionReference *arg1 = (OSCLib::Data::OSCP::AlertConditionReference *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionReference *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionReference_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::AlertConditionReference *arg1 = (OSCLib::Data::OSCP::AlertConditionReference *) 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionReference *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionReference const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertConditionReference const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionReference_addHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionReference *arg1 = (OSCLib::Data::OSCP::AlertConditionReference *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionReference *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::AlertConditionReference *) &(arg1)->addHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionReference_getHandles(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionReference *arg1 = (OSCLib::Data::OSCP::AlertConditionReference *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionReference *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionReference const *)arg1)->getHandles();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertConditionState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::AlertConditionState *)new OSCLib::Data::OSCP::AlertConditionState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertConditionState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionState *)new OSCLib::Data::OSCP::AlertConditionState((OSCLib::Data::OSCP::AlertConditionState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertConditionState(void * jarg1) {
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertConditionState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AlertConditionState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertConditionState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AlertConditionState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getStateVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertConditionState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionState_setActivationState(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  PausableActivation *arg2 = 0 ;
  PausableActivation temp2 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  temp2 = (PausableActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setActivationState((PausableActivation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertConditionState_getActivationState(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  PausableActivation result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  result = (PausableActivation)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getActivationState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionState_setRank(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setRank((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertConditionState_getRank(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getRank();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertConditionState_hasRank(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->hasRank();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionState_setPresence(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setPresence((bool const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertConditionState_getPresence(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getPresence();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionState_setObservationTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  arg2 = (Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertConditionState *) &(arg1)->setObservationTime((Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertConditionState_getObservationTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->getObservationTime();
  jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertConditionState_hasObservationTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertConditionState *arg1 = (OSCLib::Data::OSCP::AlertConditionState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertConditionState const *)arg1)->hasObservationTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSignalDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *)new OSCLib::Data::OSCP::AlertSignalDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSignalDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *)new OSCLib::Data::OSCP::AlertSignalDescriptor((OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertSignalDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  arg2 = (CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setType((CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getType();
  jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AlertSignalDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertSignalDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_setConditionSignaled(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setConditionSignaled((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AlertSignalDescriptor_getConditionSignaled(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getConditionSignaled();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_setManifestation(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  AlertSignalManifestation *arg2 = 0 ;
  AlertSignalManifestation temp2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  temp2 = (AlertSignalManifestation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setManifestation((AlertSignalManifestation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertSignalDescriptor_getManifestation(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  AlertSignalManifestation result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = (AlertSignalManifestation)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getManifestation();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_setLatching(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setLatching((bool const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalDescriptor_getLatching(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getLatching();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_setDefaultSignalGenerationDelay(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  arg2 = (Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setDefaultSignalGenerationDelay((Duration const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_getDefaultSignalGenerationDelay(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  Duration result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getDefaultSignalGenerationDelay();
  jresult = new Duration((const Duration &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalDescriptor_hasDefaultSignalGenerationDelay(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasDefaultSignalGenerationDelay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_setSignalDelegationSupported(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setSignalDelegationSupported((bool const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalDescriptor_getSignalDelegationSupported(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getSignalDelegationSupported();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalDescriptor_hasSignalDelegationSupported(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasSignalDelegationSupported();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_setAcknowledgementSupported(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setAcknowledgementSupported((bool const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalDescriptor_getAcknowledgementSupported(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getAcknowledgementSupported();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalDescriptor_hasAcknowledgementSupported(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasAcknowledgementSupported();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_setAcknowledgeTimeout(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  arg2 = (Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalDescriptor *) &(arg1)->setAcknowledgeTimeout((Duration const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalDescriptor_getAcknowledgeTimeout(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  Duration result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->getAcknowledgeTimeout();
  jresult = new Duration((const Duration &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalDescriptor_hasAcknowledgeTimeout(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalDescriptor const *)arg1)->hasAcknowledgeTimeout();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSignalState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::AlertSignalState *)new OSCLib::Data::OSCP::AlertSignalState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSignalState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalState *)new OSCLib::Data::OSCP::AlertSignalState((OSCLib::Data::OSCP::AlertSignalState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertSignalState(void * jarg1) {
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSignalState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AlertSignalState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AlertSignalState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getStateVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalState_setLocation(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  PrimaryAlertSignalLocation *arg2 = 0 ;
  PrimaryAlertSignalLocation temp2 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  temp2 = (PrimaryAlertSignalLocation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setLocation((PrimaryAlertSignalLocation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertSignalState_getLocation(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  PrimaryAlertSignalLocation result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  result = (PrimaryAlertSignalLocation)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getLocation();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalState_hasLocation(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->hasLocation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalState_setSlot(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setSlot((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertSignalState_getSlot(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalState_hasSlot(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->hasSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalState_setActivationState(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  PausableActivation *arg2 = 0 ;
  PausableActivation temp2 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  temp2 = (PausableActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setActivationState((PausableActivation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertSignalState_getActivationState(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  PausableActivation result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  result = (PausableActivation)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getActivationState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSignalState_setPresence(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  SignalPresence *arg2 = 0 ;
  SignalPresence temp2 ;
  OSCLib::Data::OSCP::AlertSignalState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  temp2 = (SignalPresence)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSignalState *) &(arg1)->setPresence((SignalPresence const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertSignalState_getPresence(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  SignalPresence result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  result = (SignalPresence)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->getPresence();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSignalState_hasPresence(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSignalState *arg1 = (OSCLib::Data::OSCP::AlertSignalState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSignalState const *)arg1)->hasPresence();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSystemDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *)new OSCLib::Data::OSCP::AlertSystemDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSystemDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *)new OSCLib::Data::OSCP::AlertSystemDescriptor((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertSystemDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  arg2 = (CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setType((CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getType();
  jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSystemDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AlertSystemDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSystemDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertSystemDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSystemDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_setMaxPhysiologicalAlarmListEntries(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setMaxPhysiologicalAlarmListEntries((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertSystemDescriptor_getMaxPhysiologicalAlarmListEntries(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getMaxPhysiologicalAlarmListEntries();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSystemDescriptor_hasMaxPhysiologicalAlarmListEntries(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->hasMaxPhysiologicalAlarmListEntries();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_setMaxTechnicalAlarmListEntries(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setMaxTechnicalAlarmListEntries((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertSystemDescriptor_getMaxTechnicalAlarmListEntries(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getMaxTechnicalAlarmListEntries();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSystemDescriptor_hasMaxTechnicalAlarmListEntries(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->hasMaxTechnicalAlarmListEntries();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_setSelfCheckPeriod(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  arg2 = (Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->setSelfCheckPeriod((Duration const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_getSelfCheckPeriod(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  Duration result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getSelfCheckPeriod();
  jresult = new Duration((const Duration &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSystemDescriptor_hasSelfCheckPeriod(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->hasSelfCheckPeriod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_addAlertSignal(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->addAlertSignal((OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_getAlertSignals(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getAlertSignals();
  jresult = new std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >((const std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_addAlertCondition(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->addAlertCondition((OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_getAlertConditions(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getAlertConditions();
  jresult = new std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >((const std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_addLimitAlertCondition(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  LimitAlertConditionDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  arg2 = (LimitAlertConditionDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LimitAlertConditionDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemDescriptor *) &(arg1)->addLimitAlertCondition((LimitAlertConditionDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemDescriptor_getLimitAlertConditions(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemDescriptor const *)arg1)->getLimitAlertConditions();
  jresult = new std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >((const std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSystemState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::AlertSystemState *)new OSCLib::Data::OSCP::AlertSystemState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AlertSystemState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemState *)new OSCLib::Data::OSCP::AlertSystemState((OSCLib::Data::OSCP::AlertSystemState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AlertSystemState(void * jarg1) {
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlertSystemState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::AlertSystemState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AlertSystemState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSystemState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::AlertSystemState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AlertSystemState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getStateVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSystemState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemState_setActivationState(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  PausableActivation *arg2 = 0 ;
  PausableActivation temp2 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  temp2 = (PausableActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::AlertSystemState *) &(arg1)->setActivationState((PausableActivation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AlertSystemState_getActivationState(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  PausableActivation result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  result = (PausableActivation)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getActivationState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemState_setPresentPhysiologicalAlarmConditions(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionReference const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemState *) &(arg1)->setPresentPhysiologicalAlarmConditions((OSCLib::Data::OSCP::AlertConditionReference const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemState_getPresentPhysiologicalAlarmConditions(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionReference result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getPresentPhysiologicalAlarmConditions();
  jresult = new OSCLib::Data::OSCP::AlertConditionReference((const OSCLib::Data::OSCP::AlertConditionReference &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSystemState_hasPresentPhysiologicalAlarmConditions(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->hasPresentPhysiologicalAlarmConditions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemState_setPresentTechnicalAlarmConditions(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionReference *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionReference const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::AlertSystemState *) &(arg1)->setPresentTechnicalAlarmConditions((OSCLib::Data::OSCP::AlertConditionReference const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AlertSystemState_getPresentTechnicalAlarmConditions(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionReference result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  result = ((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->getPresentTechnicalAlarmConditions();
  jresult = new OSCLib::Data::OSCP::AlertConditionReference((const OSCLib::Data::OSCP::AlertConditionReference &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AlertSystemState_hasPresentTechnicalAlarmConditions(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::AlertSystemState *arg1 = (OSCLib::Data::OSCP::AlertSystemState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSystemState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::AlertSystemState const *)arg1)->hasPresentTechnicalAlarmConditions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Annotation__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::Annotation *result = 0 ;
  
  result = (OSCLib::Data::OSCP::Annotation *)new OSCLib::Data::OSCP::Annotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Annotation__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Annotation *arg1 = 0 ;
  OSCLib::Data::OSCP::Annotation *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Annotation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Annotation const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Annotation *)new OSCLib::Data::OSCP::Annotation((OSCLib::Data::OSCP::Annotation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Annotation(void * jarg1) {
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Annotation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Annotation_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  OSCLib::Data::OSCP::Annotation *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Annotation *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Annotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Annotation const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Annotation const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Annotation_setCode(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::Annotation *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Annotation *)jarg1; 
  arg2 = (CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Annotation *) &(arg1)->setCode((CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Annotation_getCode(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::Annotation *)jarg1; 
  result = ((OSCLib::Data::OSCP::Annotation const *)arg1)->getCode();
  jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Annotation_setSampleIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  SampleIndex *arg2 = 0 ;
  OSCLib::Data::OSCP::Annotation *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Annotation *)jarg1; 
  arg2 = (SampleIndex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SampleIndex const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Annotation *) &(arg1)->setSampleIndex((SampleIndex const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Annotation_getSampleIndex(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  SampleIndex result;
  
  arg1 = (OSCLib::Data::OSCP::Annotation *)jarg1; 
  result = ((OSCLib::Data::OSCP::Annotation const *)arg1)->getSampleIndex();
  jresult = new SampleIndex((const SampleIndex &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Annotation_hasSampleIndex(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Annotation *arg1 = (OSCLib::Data::OSCP::Annotation *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::Annotation *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Annotation const *)arg1)->hasSampleIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Base64Binary__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::Base64Binary *result = 0 ;
  
  result = (OSCLib::Data::OSCP::Base64Binary *)new OSCLib::Data::OSCP::Base64Binary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Base64Binary__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Base64Binary *arg1 = 0 ;
  OSCLib::Data::OSCP::Base64Binary *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Base64Binary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Base64Binary const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Base64Binary *)new OSCLib::Data::OSCP::Base64Binary((OSCLib::Data::OSCP::Base64Binary const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Base64Binary(void * jarg1) {
  OSCLib::Data::OSCP::Base64Binary *arg1 = (OSCLib::Data::OSCP::Base64Binary *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Base64Binary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Base64Binary_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::Base64Binary *arg1 = (OSCLib::Data::OSCP::Base64Binary *) 0 ;
  OSCLib::Data::OSCP::Base64Binary *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Base64Binary *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Base64Binary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Base64Binary const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Base64Binary const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Base64Binary_getData(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Base64Binary *arg1 = (OSCLib::Data::OSCP::Base64Binary *) 0 ;
  std::vector< char > result;
  
  arg1 = (OSCLib::Data::OSCP::Base64Binary *)jarg1; 
  result = ((OSCLib::Data::OSCP::Base64Binary const *)arg1)->getData();
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Base64Binary_setData(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Base64Binary *arg1 = (OSCLib::Data::OSCP::Base64Binary *) 0 ;
  std::vector< char > *arg2 = 0 ;
  OSCLib::Data::OSCP::Base64Binary *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Base64Binary *)jarg1; 
  arg2 = (std::vector< char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Base64Binary *) &(arg1)->setData((std::vector< char > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseDemographics__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  result = (OSCLib::Data::OSCP::BaseDemographics *)new OSCLib::Data::OSCP::BaseDemographics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseDemographics__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::BaseDemographics const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::BaseDemographics *)new OSCLib::Data::OSCP::BaseDemographics((OSCLib::Data::OSCP::BaseDemographics const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BaseDemographics(void * jarg1) {
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDemographics_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::BaseDemographics *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::BaseDemographics const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::BaseDemographics const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDemographics_setGivenname(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::BaseDemographics *) &(arg1)->setGivenname((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BaseDemographics_getGivenname(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  result = ((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getGivenname();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDemographics_hasGivenname(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->hasGivenname();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDemographics_setFamilyname(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::BaseDemographics *) &(arg1)->setFamilyname((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BaseDemographics_getFamilyname(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  result = ((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getFamilyname();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDemographics_hasFamilyname(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->hasFamilyname();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDemographics_setBirthname(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::BaseDemographics *) &(arg1)->setBirthname((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BaseDemographics_getBirthname(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  result = ((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getBirthname();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDemographics_hasBirthname(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->hasBirthname();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDemographics_setTitle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::BaseDemographics *) &(arg1)->setTitle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BaseDemographics_getTitle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  result = ((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getTitle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDemographics_hasTitle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->hasTitle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDemographics_addMiddlename(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::BaseDemographics *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::BaseDemographics *) &(arg1)->addMiddlename((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDemographics_getMiddlenames(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::BaseDemographics *arg1 = (OSCLib::Data::OSCP::BaseDemographics *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::BaseDemographics *)jarg1; 
  result = ((OSCLib::Data::OSCP::BaseDemographics const *)arg1)->getMiddlenames();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CalibrationInfo__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::CalibrationInfo *result = 0 ;
  
  result = (OSCLib::Data::OSCP::CalibrationInfo *)new OSCLib::Data::OSCP::CalibrationInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CalibrationInfo__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CalibrationInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CalibrationInfo *)new OSCLib::Data::OSCP::CalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CalibrationInfo(void * jarg1) {
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = (OSCLib::Data::OSCP::CalibrationInfo *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalibrationInfo_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = (OSCLib::Data::OSCP::CalibrationInfo *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CalibrationInfo const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CalibrationInfo_setComponentCalibrationState(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = (OSCLib::Data::OSCP::CalibrationInfo *) 0 ;
  CalibrationState *arg2 = 0 ;
  CalibrationState temp2 ;
  OSCLib::Data::OSCP::CalibrationInfo *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg1; 
  temp2 = (CalibrationState)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::CalibrationInfo *) &(arg1)->setComponentCalibrationState((CalibrationState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CalibrationInfo_getComponentCalibrationState(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = (OSCLib::Data::OSCP::CalibrationInfo *) 0 ;
  CalibrationState result;
  
  arg1 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg1; 
  result = (CalibrationState)((OSCLib::Data::OSCP::CalibrationInfo const *)arg1)->getComponentCalibrationState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CalibrationInfo_hasComponentCalibrationState(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::CalibrationInfo *arg1 = (OSCLib::Data::OSCP::CalibrationInfo *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::CalibrationInfo const *)arg1)->hasComponentCalibrationState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CauseInfo__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::CauseInfo *result = 0 ;
  
  result = (OSCLib::Data::OSCP::CauseInfo *)new OSCLib::Data::OSCP::CauseInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CauseInfo__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = 0 ;
  OSCLib::Data::OSCP::CauseInfo *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CauseInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CauseInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CauseInfo *)new OSCLib::Data::OSCP::CauseInfo((OSCLib::Data::OSCP::CauseInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CauseInfo(void * jarg1) {
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CauseInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CauseInfo_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  OSCLib::Data::OSCP::CauseInfo *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CauseInfo *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CauseInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CauseInfo const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::CauseInfo const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CauseInfo_setRemedy(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  RemedyInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::CauseInfo *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CauseInfo *)jarg1; 
  arg2 = (RemedyInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RemedyInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CauseInfo *) &(arg1)->setRemedy((RemedyInfo const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CauseInfo_getRemedy(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  RemedyInfo result;
  
  arg1 = (OSCLib::Data::OSCP::CauseInfo *)jarg1; 
  result = ((OSCLib::Data::OSCP::CauseInfo const *)arg1)->getRemedy();
  jresult = new RemedyInfo((const RemedyInfo &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CauseInfo_hasRemedy(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::CauseInfo *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::CauseInfo const *)arg1)->hasRemedy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CauseInfo_addDescription(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::CauseInfo *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CauseInfo *)jarg1; 
  arg2 = (LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CauseInfo *) &(arg1)->addDescription((LocalizedText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CauseInfo_getDescriptions(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::CauseInfo *arg1 = (OSCLib::Data::OSCP::CauseInfo *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  arg1 = (OSCLib::Data::OSCP::CauseInfo *)jarg1; 
  result = ((OSCLib::Data::OSCP::CauseInfo const *)arg1)->getDescriptions();
  jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChannelDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::ChannelDescriptor *)new OSCLib::Data::OSCP::ChannelDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChannelDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ChannelDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *)new OSCLib::Data::OSCP::ChannelDescriptor((OSCLib::Data::OSCP::ChannelDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChannelDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChannelDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ChannelDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ChannelDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  arg2 = (CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->setType((CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getType();
  jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChannelDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ChannelDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChannelDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChannelDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChannelDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_addProductionSpecification(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  ProductionSpecification *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  arg2 = (ProductionSpecification *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ProductionSpecification const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->addProductionSpecification((ProductionSpecification const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_getProductionSpecifications(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getProductionSpecifications();
  jresult = new std::vector< OSCLib::Data::OSCP::ProductionSpecification >((const std::vector< OSCLib::Data::OSCP::ProductionSpecification > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_setAlertSystem(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->setAlertSystem((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_getAlertSystem(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getAlertSystem();
  jresult = new OSCLib::Data::OSCP::AlertSystemDescriptor((const OSCLib::Data::OSCP::AlertSystemDescriptor &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChannelDescriptor_hasAlertSystem(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->hasAlertSystem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_getEnumStringMetricDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getEnumStringMetricDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_getNumericMetricDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getNumericMetricDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_getStringMetricDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getStringMetricDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_getRealTimeSampleArrayMetricDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ChannelDescriptor const *)arg1)->getRealTimeSampleArrayMetricDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_addMetric__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  EnumStringMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  arg2 = (EnumStringMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EnumStringMetricDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->addMetric((EnumStringMetricDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_addMetric__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  NumericMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  arg2 = (NumericMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NumericMetricDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->addMetric((NumericMetricDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_addMetric__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  StringMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  arg2 = (StringMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringMetricDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->addMetric((StringMetricDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChannelDescriptor_addMetric__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *) 0 ;
  RealTimeSampleArrayMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg1; 
  arg2 = (RealTimeSampleArrayMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealTimeSampleArrayMetricDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ChannelDescriptor *) &(arg1)->addMetric((RealTimeSampleArrayMetricDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClinicalInfo__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::ClinicalInfo *result = 0 ;
  
  result = (OSCLib::Data::OSCP::ClinicalInfo *)new OSCLib::Data::OSCP::ClinicalInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClinicalInfo__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClinicalInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClinicalInfo *)new OSCLib::Data::OSCP::ClinicalInfo((OSCLib::Data::OSCP::ClinicalInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClinicalInfo(void * jarg1) {
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClinicalInfo_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClinicalInfo const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ClinicalInfo const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClinicalInfo_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg1; 
  arg2 = (CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClinicalInfo *) &(arg1)->setType((CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClinicalInfo_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClinicalInfo const *)arg1)->getType();
  jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClinicalInfo_setMeasuredValue(void * jarg1, double jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::ClinicalInfo *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ClinicalInfo *) &(arg1)->setMeasuredValue((double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ClinicalInfo_getMeasuredValue(void * jarg1) {
  double jresult ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  double result;
  
  arg1 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg1; 
  result = (double)((OSCLib::Data::OSCP::ClinicalInfo const *)arg1)->getMeasuredValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClinicalInfo_addRelatedMeasurement(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  Measure *arg2 = 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg1; 
  arg2 = (Measure *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Measure const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClinicalInfo *) &(arg1)->addRelatedMeasurement((Measure const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClinicalInfo_getRelatedMeasurements(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClinicalInfo *arg1 = (OSCLib::Data::OSCP::ClinicalInfo *) 0 ;
  std::vector< OSCLib::Data::OSCP::Measure > result;
  
  arg1 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClinicalInfo const *)arg1)->getRelatedMeasurements();
  jresult = new std::vector< OSCLib::Data::OSCP::Measure >((const std::vector< OSCLib::Data::OSCP::Measure > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClockDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::ClockDescriptor *)new OSCLib::Data::OSCP::ClockDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClockDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockDescriptor *)new OSCLib::Data::OSCP::ClockDescriptor((OSCLib::Data::OSCP::ClockDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClockDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ClockDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  arg2 = (CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockDescriptor *) &(arg1)->setType((CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getType();
  jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::ClockDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ClockDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ClockDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClockDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptor_setResolution(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  arg2 = (Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockDescriptor *) &(arg1)->setResolution((Duration const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptor_getResolution(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  Duration result;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getResolution();
  jresult = new Duration((const Duration &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockDescriptor_hasResolution(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->hasResolution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptor_addTimeProtocol(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  arg2 = (CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockDescriptor *) &(arg1)->addTimeProtocol((CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockDescriptor_getTimeProtocols(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockDescriptor *arg1 = (OSCLib::Data::OSCP::ClockDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockDescriptor const *)arg1)->getTimeProtocols();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClockState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::ClockState *)new OSCLib::Data::OSCP::ClockState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClockState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockState *)new OSCLib::Data::OSCP::ClockState((OSCLib::Data::OSCP::ClockState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClockState(void * jarg1) {
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClockState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  OSCLib::Data::OSCP::ClockState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ClockState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ClockState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ClockState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ClockState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getStateVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_setActiveSyncProtocol(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  arg2 = (CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setActiveSyncProtocol((CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_getActiveSyncProtocol(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getActiveSyncProtocol();
  jresult = new CodedValue((const CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockState_hasActiveSyncProtocol(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasActiveSyncProtocol();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_setDateAndTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  arg2 = (Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setDateAndTime((Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_getDateAndTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getDateAndTime();
  jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockState_hasDateAndTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasDateAndTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_setRemoteSync(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setRemoteSync((bool const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockState_getRemoteSync(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getRemoteSync();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_setReferenceSource(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setReferenceSource((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ClockState_getReferenceSource(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getReferenceSource();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockState_hasReferenceSource(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasReferenceSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_setAccuracy(void * jarg1, double jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setAccuracy((double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ClockState_getAccuracy(void * jarg1) {
  double jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  double result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = (double)((OSCLib::Data::OSCP::ClockState const *)arg1)->getAccuracy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockState_hasAccuracy(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasAccuracy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_setLastSet(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  arg2 = (Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setLastSet((Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_getLastSet(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getLastSet();
  jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockState_hasLastSet(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasLastSet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_setTimeZone(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  TimeZone *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  arg2 = (TimeZone *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TimeZone const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setTimeZone((TimeZone const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_getTimeZone(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  TimeZone result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = ((OSCLib::Data::OSCP::ClockState const *)arg1)->getTimeZone();
  jresult = new TimeZone((const TimeZone &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockState_hasTimeZone(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasTimeZone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClockState_setCriticalUse(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::ClockState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ClockState *) &(arg1)->setCriticalUse((bool const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockState_getCriticalUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->getCriticalUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClockState_hasCriticalUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ClockState *arg1 = (OSCLib::Data::OSCP::ClockState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ClockState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ClockState const *)arg1)->hasCriticalUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodedValue__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  result = (OSCLib::Data::OSCP::CodedValue *)new OSCLib::Data::OSCP::CodedValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodedValue__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CodedValue *)new OSCLib::Data::OSCP::CodedValue((OSCLib::Data::OSCP::CodedValue const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CodedValue(void * jarg1) {
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodedValue_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::CodedValue const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodedValue_setCodingSystemId(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::CodedValue *) &(arg1)->setCodingSystemId((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CodedValue_getCodingSystemId(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::CodedValue const *)arg1)->getCodingSystemId();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodedValue_hasCodingSystemId(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::CodedValue const *)arg1)->hasCodingSystemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodedValue_setVersionId(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::CodedValue *) &(arg1)->setVersionId((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CodedValue_getVersionId(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::CodedValue const *)arg1)->getVersionId();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodedValue_hasVersionId(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::CodedValue const *)arg1)->hasVersionId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodedValue_setCodeId(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::CodedValue *) &(arg1)->setCodeId((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CodedValue_getCodeId(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::CodedValue const *)arg1)->getCodeId();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodedValue_addCodingSystemName(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  arg2 = (LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CodedValue *) &(arg1)->addCodingSystemName((LocalizedText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodedValue_getCodingSystemNames(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::CodedValue const *)arg1)->getCodingSystemNames();
  jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodedValue_addConceptDescription(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::CodedValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  arg2 = (LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::CodedValue *) &(arg1)->addConceptDescription((LocalizedText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodedValue_getConceptDescriptions(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::CodedValue *arg1 = (OSCLib::Data::OSCP::CodedValue *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  arg1 = (OSCLib::Data::OSCP::CodedValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::CodedValue const *)arg1)->getConceptDescriptions();
  jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ComponentState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::ComponentState *)new OSCLib::Data::OSCP::ComponentState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ComponentState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = 0 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ComponentState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ComponentState *)new OSCLib::Data::OSCP::ComponentState((OSCLib::Data::OSCP::ComponentState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ComponentState(void * jarg1) {
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  OSCLib::Data::OSCP::ComponentState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ComponentState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ComponentState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ComponentState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ComponentState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = ((OSCLib::Data::OSCP::ComponentState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ComponentState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ComponentState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = ((OSCLib::Data::OSCP::ComponentState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = ((OSCLib::Data::OSCP::ComponentState const *)arg1)->getStateVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ComponentState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentState_setComponentActivationState(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  ComponentActivation *arg2 = 0 ;
  ComponentActivation temp2 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  temp2 = (ComponentActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setComponentActivationState((ComponentActivation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ComponentState_getComponentActivationState(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  ComponentActivation result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = (ComponentActivation)((OSCLib::Data::OSCP::ComponentState const *)arg1)->getComponentActivationState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ComponentState_hasComponentActivationState(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->hasComponentActivationState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentState_setCalibrationInfo(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CalibrationInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setCalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentState_getCalibrationInfo(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = ((OSCLib::Data::OSCP::ComponentState const *)arg1)->getCalibrationInfo();
  jresult = new OSCLib::Data::OSCP::CalibrationInfo((const OSCLib::Data::OSCP::CalibrationInfo &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ComponentState_hasCalibrationInfo(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->hasCalibrationInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentState_setOperatingHours(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setOperatingHours((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ComponentState_getOperatingHours(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::ComponentState const *)arg1)->getOperatingHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ComponentState_hasOperatingHours(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->hasOperatingHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentState_setOperatingCycles(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::ComponentState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ComponentState *) &(arg1)->setOperatingCycles((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ComponentState_getOperatingCycles(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::ComponentState const *)arg1)->getOperatingCycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ComponentState_hasOperatingCycles(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ComponentState *arg1 = (OSCLib::Data::OSCP::ComponentState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ComponentState const *)arg1)->hasOperatingCycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DateTime__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  result = (OSCLib::Data::OSCP::DateTime *)new OSCLib::Data::OSCP::DateTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DateTime__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = 0 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DateTime const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DateTime *)new OSCLib::Data::OSCP::DateTime((OSCLib::Data::OSCP::DateTime const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DateTime(void * jarg1) {
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DateTime_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  OSCLib::Data::OSCP::DateTime *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DateTime const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::DateTime const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DateTime_setyear(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DateTime *) &(arg1)->setyear((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DateTime_getyear(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::DateTime const *)arg1)->getyear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DateTime_setmonth(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DateTime *) &(arg1)->setmonth((unsigned short const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DateTime_getmonth(void * jarg1) {
  unsigned short jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short result;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  result = (unsigned short)((OSCLib::Data::OSCP::DateTime const *)arg1)->getmonth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DateTime_setday(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DateTime *) &(arg1)->setday((unsigned short const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DateTime_getday(void * jarg1) {
  unsigned short jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short result;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  result = (unsigned short)((OSCLib::Data::OSCP::DateTime const *)arg1)->getday();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DateTime_sethours(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DateTime *) &(arg1)->sethours((unsigned short const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DateTime_gethours(void * jarg1) {
  unsigned short jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short result;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  result = (unsigned short)((OSCLib::Data::OSCP::DateTime const *)arg1)->gethours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DateTime_setminutes(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DateTime *) &(arg1)->setminutes((unsigned short const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DateTime_getminutes(void * jarg1) {
  unsigned short jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  unsigned short result;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  result = (unsigned short)((OSCLib::Data::OSCP::DateTime const *)arg1)->getminutes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DateTime_setseconds(void * jarg1, double jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::DateTime *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DateTime *) &(arg1)->setseconds((double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DateTime_getseconds(void * jarg1) {
  double jresult ;
  OSCLib::Data::OSCP::DateTime *arg1 = (OSCLib::Data::OSCP::DateTime *) 0 ;
  double result;
  
  arg1 = (OSCLib::Data::OSCP::DateTime *)jarg1; 
  result = (double)((OSCLib::Data::OSCP::DateTime const *)arg1)->getseconds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NOT_ASSIGNED_get() {
  char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &OSCLib::Data::OSCP::NOT_ASSIGNED;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Defaults() {
  void * jresult ;
  OSCLib::Data::OSCP::Defaults *result = 0 ;
  
  result = (OSCLib::Data::OSCP::Defaults *)new OSCLib::Data::OSCP::Defaults();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Defaults(void * jarg1) {
  OSCLib::Data::OSCP::Defaults *arg1 = (OSCLib::Data::OSCP::Defaults *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Defaults *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_ActivateOperationDescriptor() {
  void * jresult ;
  CDM::ActivateOperationDescriptor *result = 0 ;
  
  result = (CDM::ActivateOperationDescriptor *)OSCLib::Data::OSCP::Defaults::ActivateOperationDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_AlertConditionDescriptor() {
  void * jresult ;
  CDM::AlertConditionDescriptor *result = 0 ;
  
  result = (CDM::AlertConditionDescriptor *)OSCLib::Data::OSCP::Defaults::AlertConditionDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_AlertConditionReference() {
  void * jresult ;
  CDM::AlertConditionReference *result = 0 ;
  
  result = (CDM::AlertConditionReference *)OSCLib::Data::OSCP::Defaults::AlertConditionReference();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_AlertConditionState() {
  void * jresult ;
  CDM::AlertConditionState *result = 0 ;
  
  result = (CDM::AlertConditionState *)OSCLib::Data::OSCP::Defaults::AlertConditionState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_AlertSignalDescriptor() {
  void * jresult ;
  CDM::AlertSignalDescriptor *result = 0 ;
  
  result = (CDM::AlertSignalDescriptor *)OSCLib::Data::OSCP::Defaults::AlertSignalDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_AlertSignalState() {
  void * jresult ;
  CDM::AlertSignalState *result = 0 ;
  
  result = (CDM::AlertSignalState *)OSCLib::Data::OSCP::Defaults::AlertSignalState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_AlertSystemDescriptor() {
  void * jresult ;
  CDM::AlertSystemDescriptor *result = 0 ;
  
  result = (CDM::AlertSystemDescriptor *)OSCLib::Data::OSCP::Defaults::AlertSystemDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_AlertSystemState() {
  void * jresult ;
  CDM::AlertSystemState *result = 0 ;
  
  result = (CDM::AlertSystemState *)OSCLib::Data::OSCP::Defaults::AlertSystemState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_Annotation() {
  void * jresult ;
  CDM::Annotation *result = 0 ;
  
  result = (CDM::Annotation *)OSCLib::Data::OSCP::Defaults::Annotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_Base64Binary() {
  void * jresult ;
  CDM::Base64Binary *result = 0 ;
  
  result = (CDM::Base64Binary *)OSCLib::Data::OSCP::Defaults::Base64Binary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_BaseDemographics() {
  void * jresult ;
  CDM::BaseDemographics *result = 0 ;
  
  result = (CDM::BaseDemographics *)OSCLib::Data::OSCP::Defaults::BaseDemographics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_CauseInfo() {
  void * jresult ;
  CDM::CauseInfo *result = 0 ;
  
  result = (CDM::CauseInfo *)OSCLib::Data::OSCP::Defaults::CauseInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_CalibrationInfo() {
  void * jresult ;
  CDM::CalibrationInfo *result = 0 ;
  
  result = (CDM::CalibrationInfo *)OSCLib::Data::OSCP::Defaults::CalibrationInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_ChannelDescriptor() {
  void * jresult ;
  CDM::ChannelDescriptor *result = 0 ;
  
  result = (CDM::ChannelDescriptor *)OSCLib::Data::OSCP::Defaults::ChannelDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_ClinicalInfo() {
  void * jresult ;
  CDM::ClinicalInfo *result = 0 ;
  
  result = (CDM::ClinicalInfo *)OSCLib::Data::OSCP::Defaults::ClinicalInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_ClockDescriptor() {
  void * jresult ;
  CDM::ClockDescriptor *result = 0 ;
  
  result = (CDM::ClockDescriptor *)OSCLib::Data::OSCP::Defaults::ClockDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_ClockState() {
  void * jresult ;
  CDM::ClockState *result = 0 ;
  
  result = (CDM::ClockState *)OSCLib::Data::OSCP::Defaults::ClockState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_CodedValue() {
  void * jresult ;
  CDM::CodedValue *result = 0 ;
  
  result = (CDM::CodedValue *)OSCLib::Data::OSCP::Defaults::CodedValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_ComponentState() {
  void * jresult ;
  CDM::ComponentState *result = 0 ;
  
  result = (CDM::ComponentState *)OSCLib::Data::OSCP::Defaults::ComponentState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_DateTime() {
  void * jresult ;
  CDM::DateTime *result = 0 ;
  
  result = (CDM::DateTime *)OSCLib::Data::OSCP::Defaults::DateTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_DICOMNetworkAE() {
  void * jresult ;
  CDM::DICOMNetworkAE *result = 0 ;
  
  result = (CDM::DICOMNetworkAE *)OSCLib::Data::OSCP::Defaults::DICOMNetworkAE();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_DICOMDeviceDescriptor() {
  void * jresult ;
  CDM::DICOMDeviceDescriptor *result = 0 ;
  
  result = (CDM::DICOMDeviceDescriptor *)OSCLib::Data::OSCP::Defaults::DICOMDeviceDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_DICOMNetworkConnection() {
  void * jresult ;
  CDM::DICOMNetworkConnection *result = 0 ;
  
  result = (CDM::DICOMNetworkConnection *)OSCLib::Data::OSCP::Defaults::DICOMNetworkConnection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_DICOMTransferCapability() {
  void * jresult ;
  CDM::DICOMTransferCapability *result = 0 ;
  
  result = (CDM::DICOMTransferCapability *)OSCLib::Data::OSCP::Defaults::DICOMTransferCapability();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_Duration() {
  void * jresult ;
  CDM::Duration *result = 0 ;
  
  result = (CDM::Duration *)OSCLib::Data::OSCP::Defaults::Duration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_EnsembleContextDescriptor() {
  void * jresult ;
  CDM::EnsembleContextDescriptor *result = 0 ;
  
  result = (CDM::EnsembleContextDescriptor *)OSCLib::Data::OSCP::Defaults::EnsembleContextDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_EnsembleContextState() {
  void * jresult ;
  CDM::EnsembleContextState *result = 0 ;
  
  result = (CDM::EnsembleContextState *)OSCLib::Data::OSCP::Defaults::EnsembleContextState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_EnumNomenRef() {
  void * jresult ;
  CDM::EnumNomenRef *result = 0 ;
  
  result = (CDM::EnumNomenRef *)OSCLib::Data::OSCP::Defaults::EnumNomenRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_EnumStringMetricDescriptor() {
  void * jresult ;
  CDM::EnumStringMetricDescriptor *result = 0 ;
  
  result = (CDM::EnumStringMetricDescriptor *)OSCLib::Data::OSCP::Defaults::EnumStringMetricDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_EnumStringMetricState() {
  void * jresult ;
  CDM::EnumStringMetricState *result = 0 ;
  
  result = (CDM::EnumStringMetricState *)OSCLib::Data::OSCP::Defaults::EnumStringMetricState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_HydraMDSDescriptor() {
  void * jresult ;
  CDM::HydraMDSDescriptor *result = 0 ;
  
  result = (CDM::HydraMDSDescriptor *)OSCLib::Data::OSCP::Defaults::HydraMDSDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_HydraMDSState() {
  void * jresult ;
  CDM::HydraMDSState *result = 0 ;
  
  result = (CDM::HydraMDSState *)OSCLib::Data::OSCP::Defaults::HydraMDSState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_ImagingProcedure() {
  void * jresult ;
  CDM::ImagingProcedure *result = 0 ;
  
  result = (CDM::ImagingProcedure *)OSCLib::Data::OSCP::Defaults::ImagingProcedure();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_InstanceIdentifier() {
  void * jresult ;
  CDM::InstanceIdentifier *result = 0 ;
  
  result = (CDM::InstanceIdentifier *)OSCLib::Data::OSCP::Defaults::InstanceIdentifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_Language() {
  void * jresult ;
  CDM::Language *result = 0 ;
  
  result = (CDM::Language *)OSCLib::Data::OSCP::Defaults::Language();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_LimitAlertConditionDescriptor() {
  void * jresult ;
  CDM::LimitAlertConditionDescriptor *result = 0 ;
  
  result = (CDM::LimitAlertConditionDescriptor *)OSCLib::Data::OSCP::Defaults::LimitAlertConditionDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_LimitAlertConditionState() {
  void * jresult ;
  CDM::LimitAlertConditionState *result = 0 ;
  
  result = (CDM::LimitAlertConditionState *)OSCLib::Data::OSCP::Defaults::LimitAlertConditionState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_LocalizedText() {
  void * jresult ;
  CDM::LocalizedText *result = 0 ;
  
  result = (CDM::LocalizedText *)OSCLib::Data::OSCP::Defaults::LocalizedText();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_LocationContextDescriptor() {
  void * jresult ;
  CDM::LocationContextDescriptor *result = 0 ;
  
  result = (CDM::LocationContextDescriptor *)OSCLib::Data::OSCP::Defaults::LocationContextDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_LocationContextState() {
  void * jresult ;
  CDM::LocationContextState *result = 0 ;
  
  result = (CDM::LocationContextState *)OSCLib::Data::OSCP::Defaults::LocationContextState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_Measure() {
  void * jresult ;
  CDM::Measure *result = 0 ;
  
  result = (CDM::Measure *)OSCLib::Data::OSCP::Defaults::Measure();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_MeasurementState() {
  void * jresult ;
  CDM::MeasurementState *result = 0 ;
  
  result = (CDM::MeasurementState *)OSCLib::Data::OSCP::Defaults::MeasurementState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_MDDescription() {
  void * jresult ;
  CDM::MDDescription *result = 0 ;
  
  result = (CDM::MDDescription *)OSCLib::Data::OSCP::Defaults::MDDescription();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_MDState() {
  void * jresult ;
  CDM::MDState *result = 0 ;
  
  result = (CDM::MDState *)OSCLib::Data::OSCP::Defaults::MDState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_NumericMetricDescriptor() {
  void * jresult ;
  CDM::NumericMetricDescriptor *result = 0 ;
  
  result = (CDM::NumericMetricDescriptor *)OSCLib::Data::OSCP::Defaults::NumericMetricDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_NumericMetricState() {
  void * jresult ;
  CDM::NumericMetricState *result = 0 ;
  
  result = (CDM::NumericMetricState *)OSCLib::Data::OSCP::Defaults::NumericMetricState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_NumericMetricValue() {
  void * jresult ;
  CDM::NumericMetricValue *result = 0 ;
  
  result = (CDM::NumericMetricValue *)OSCLib::Data::OSCP::Defaults::NumericMetricValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_OperationState() {
  void * jresult ;
  CDM::OperationState *result = 0 ;
  
  result = (CDM::OperationState *)OSCLib::Data::OSCP::Defaults::OperationState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_OperatorContextDescriptor() {
  void * jresult ;
  CDM::OperatorContextDescriptor *result = 0 ;
  
  result = (CDM::OperatorContextDescriptor *)OSCLib::Data::OSCP::Defaults::OperatorContextDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_OperatorContextState() {
  void * jresult ;
  CDM::OperatorContextState *result = 0 ;
  
  result = (CDM::OperatorContextState *)OSCLib::Data::OSCP::Defaults::OperatorContextState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_Order() {
  void * jresult ;
  CDM::Order *result = 0 ;
  
  result = (CDM::Order *)OSCLib::Data::OSCP::Defaults::Order();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_OrderDetail() {
  void * jresult ;
  CDM::OrderDetail *result = 0 ;
  
  result = (CDM::OrderDetail *)OSCLib::Data::OSCP::Defaults::OrderDetail();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_PatientContextDescriptor() {
  void * jresult ;
  CDM::PatientContextDescriptor *result = 0 ;
  
  result = (CDM::PatientContextDescriptor *)OSCLib::Data::OSCP::Defaults::PatientContextDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_PatientContextState() {
  void * jresult ;
  CDM::PatientContextState *result = 0 ;
  
  result = (CDM::PatientContextState *)OSCLib::Data::OSCP::Defaults::PatientContextState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_PatientDemographicsCoreData() {
  void * jresult ;
  CDM::PatientDemographicsCoreData *result = 0 ;
  
  result = (CDM::PatientDemographicsCoreData *)OSCLib::Data::OSCP::Defaults::PatientDemographicsCoreData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_PersonParticipation() {
  void * jresult ;
  CDM::PersonParticipation *result = 0 ;
  
  result = (CDM::PersonParticipation *)OSCLib::Data::OSCP::Defaults::PersonParticipation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_PersonReference() {
  void * jresult ;
  CDM::PersonReference *result = 0 ;
  
  result = (CDM::PersonReference *)OSCLib::Data::OSCP::Defaults::PersonReference();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_ProductionSpecification() {
  void * jresult ;
  CDM::ProductionSpecification *result = 0 ;
  
  result = (CDM::ProductionSpecification *)OSCLib::Data::OSCP::Defaults::ProductionSpecification();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_Range() {
  void * jresult ;
  CDM::Range *result = 0 ;
  
  result = (CDM::Range *)OSCLib::Data::OSCP::Defaults::Range();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_RealTimeSampleArrayMetricDescriptor() {
  void * jresult ;
  CDM::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  result = (CDM::RealTimeSampleArrayMetricDescriptor *)OSCLib::Data::OSCP::Defaults::RealTimeSampleArrayMetricDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_RealTimeSampleArrayMetricState() {
  void * jresult ;
  CDM::RealTimeSampleArrayMetricState *result = 0 ;
  
  result = (CDM::RealTimeSampleArrayMetricState *)OSCLib::Data::OSCP::Defaults::RealTimeSampleArrayMetricState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_RealTimeSampleArrayValue() {
  void * jresult ;
  CDM::RealTimeSampleArrayValue *result = 0 ;
  
  result = (CDM::RealTimeSampleArrayValue *)OSCLib::Data::OSCP::Defaults::RealTimeSampleArrayValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_ReferencedVersion() {
  void * jresult ;
  CDM::ReferencedVersion *result = 0 ;
  
  result = (CDM::ReferencedVersion *)OSCLib::Data::OSCP::Defaults::ReferencedVersion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_RemedyInfo() {
  void * jresult ;
  CDM::RemedyInfo *result = 0 ;
  
  result = (CDM::RemedyInfo *)OSCLib::Data::OSCP::Defaults::RemedyInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_RTValueType() {
  void * jresult ;
  CDM::RTValueType *result = 0 ;
  
  result = (CDM::RTValueType *)OSCLib::Data::OSCP::Defaults::RTValueType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_SampleIndex() {
  void * jresult ;
  CDM::SampleIndex *result = 0 ;
  
  result = (CDM::SampleIndex *)OSCLib::Data::OSCP::Defaults::SampleIndex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_SCODescriptor() {
  void * jresult ;
  CDM::SCODescriptor *result = 0 ;
  
  result = (CDM::SCODescriptor *)OSCLib::Data::OSCP::Defaults::SCODescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_SetAlertStateOperationDescriptor() {
  void * jresult ;
  CDM::SetAlertStateOperationDescriptor *result = 0 ;
  
  result = (CDM::SetAlertStateOperationDescriptor *)OSCLib::Data::OSCP::Defaults::SetAlertStateOperationDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_SetContextOperationDescriptor() {
  void * jresult ;
  CDM::SetContextOperationDescriptor *result = 0 ;
  
  result = (CDM::SetContextOperationDescriptor *)OSCLib::Data::OSCP::Defaults::SetContextOperationDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_SetRangeOperationDescriptor() {
  void * jresult ;
  CDM::SetRangeOperationDescriptor *result = 0 ;
  
  result = (CDM::SetRangeOperationDescriptor *)OSCLib::Data::OSCP::Defaults::SetRangeOperationDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_SetStringOperationDescriptor() {
  void * jresult ;
  CDM::SetStringOperationDescriptor *result = 0 ;
  
  result = (CDM::SetStringOperationDescriptor *)OSCLib::Data::OSCP::Defaults::SetStringOperationDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_SetValueOperationDescriptor() {
  void * jresult ;
  CDM::SetValueOperationDescriptor *result = 0 ;
  
  result = (CDM::SetValueOperationDescriptor *)OSCLib::Data::OSCP::Defaults::SetValueOperationDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_StringMetricDescriptor() {
  void * jresult ;
  CDM::StringMetricDescriptor *result = 0 ;
  
  result = (CDM::StringMetricDescriptor *)OSCLib::Data::OSCP::Defaults::StringMetricDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_StringMetricState() {
  void * jresult ;
  CDM::StringMetricState *result = 0 ;
  
  result = (CDM::StringMetricState *)OSCLib::Data::OSCP::Defaults::StringMetricState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_StringMetricValue() {
  void * jresult ;
  CDM::StringMetricValue *result = 0 ;
  
  result = (CDM::StringMetricValue *)OSCLib::Data::OSCP::Defaults::StringMetricValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_SystemContext() {
  void * jresult ;
  CDM::SystemContext *result = 0 ;
  
  result = (CDM::SystemContext *)OSCLib::Data::OSCP::Defaults::SystemContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_SystemMetaData() {
  void * jresult ;
  CDM::SystemMetaData *result = 0 ;
  
  result = (CDM::SystemMetaData *)OSCLib::Data::OSCP::Defaults::SystemMetaData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_Timestamp() {
  void * jresult ;
  CDM::Timestamp *result = 0 ;
  
  result = (CDM::Timestamp *)OSCLib::Data::OSCP::Defaults::Timestamp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_TimeZone() {
  void * jresult ;
  CDM::TimeZone *result = 0 ;
  
  result = (CDM::TimeZone *)OSCLib::Data::OSCP::Defaults::TimeZone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_VersionCounter() {
  void * jresult ;
  CDM::VersionCounter *result = 0 ;
  
  result = (CDM::VersionCounter *)OSCLib::Data::OSCP::Defaults::VersionCounter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_VMDDescriptor() {
  void * jresult ;
  CDM::VMDDescriptor *result = 0 ;
  
  result = (CDM::VMDDescriptor *)OSCLib::Data::OSCP::Defaults::VMDDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_WorkflowContextDescriptor() {
  void * jresult ;
  CDM::WorkflowContextDescriptor *result = 0 ;
  
  result = (CDM::WorkflowContextDescriptor *)OSCLib::Data::OSCP::Defaults::WorkflowContextDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defaults_WorkflowContextState() {
  void * jresult ;
  CDM::WorkflowContextState *result = 0 ;
  
  result = (CDM::WorkflowContextState *)OSCLib::Data::OSCP::Defaults::WorkflowContextState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMDeviceDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)new OSCLib::Data::OSCP::DICOMDeviceDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMDeviceDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMDeviceDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)new OSCLib::Data::OSCP::DICOMDeviceDescriptor((OSCLib::Data::OSCP::DICOMDeviceDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DICOMDeviceDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMDeviceDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMDeviceDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::DICOMDeviceDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DICOMDeviceDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DICOMDeviceDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DICOMDeviceDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_addProductionSpecification(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  ProductionSpecification *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (ProductionSpecification *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ProductionSpecification const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addProductionSpecification((ProductionSpecification const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getProductionSpecifications(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getProductionSpecifications();
  jresult = new std::vector< OSCLib::Data::OSCP::ProductionSpecification >((const std::vector< OSCLib::Data::OSCP::ProductionSpecification > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_setMetaData(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  SystemMetaData *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (SystemMetaData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SystemMetaData const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setMetaData((SystemMetaData const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getMetaData(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  SystemMetaData result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getMetaData();
  jresult = new SystemMetaData((const SystemMetaData &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DICOMDeviceDescriptor_hasMetaData(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasMetaData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_setContext(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  SystemContext *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (SystemContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SystemContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setContext((SystemContext const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getContext(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  SystemContext result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getContext();
  jresult = new SystemContext((const SystemContext &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_setClock(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setClock((OSCLib::Data::OSCP::ClockDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getClock(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getClock();
  jresult = new OSCLib::Data::OSCP::ClockDescriptor((const OSCLib::Data::OSCP::ClockDescriptor &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DICOMDeviceDescriptor_hasClock(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasClock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_setDescription(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setDescription((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getDescription(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getDescription();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DICOMDeviceDescriptor_hasDescription(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasDescription();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_setStationName(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setStationName((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getStationName(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getStationName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DICOMDeviceDescriptor_hasStationName(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasStationName();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_setIssuerOfPatientID(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->setIssuerOfPatientID((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getIssuerOfPatientID(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getIssuerOfPatientID();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DICOMDeviceDescriptor_hasIssuerOfPatientID(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->hasIssuerOfPatientID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_addNetworkAE(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  DICOMNetworkAE *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (DICOMNetworkAE *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DICOMNetworkAE const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addNetworkAE((DICOMNetworkAE const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getNetworkAEs(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getNetworkAEs();
  jresult = new std::vector< OSCLib::Data::OSCP::DICOMNetworkAE >((const std::vector< OSCLib::Data::OSCP::DICOMNetworkAE > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_addNetworkConnection(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  DICOMNetworkConnection *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (DICOMNetworkConnection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DICOMNetworkConnection const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addNetworkConnection((DICOMNetworkConnection const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getNetworkConnection(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getNetworkConnection();
  jresult = new std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection >((const std::vector< OSCLib::Data::OSCP::DICOMNetworkConnection > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_addSoftwareVersion(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addSoftwareVersion((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getSoftwareVersions(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getSoftwareVersions();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_addInstitutionName(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addInstitutionName((LocalizedText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getInstitutionNames(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getInstitutionNames();
  jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_addInstitutionAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addInstitutionAddress((LocalizedText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getInstitutionAddresses(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getInstitutionAddresses();
  jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_addInstitutionalDepartmentName(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addInstitutionalDepartmentName((LocalizedText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getInstitutionalDepartmentNames(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getInstitutionalDepartmentNames();
  jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_addPrimaryDeviceType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addPrimaryDeviceType((LocalizedText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getPrimaryDeviceTypes(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getPrimaryDeviceTypes();
  jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_addPublicCertificate(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  OSCLib::Data::OSCP::Base64Binary *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Base64Binary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Base64Binary const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) &(arg1)->addPublicCertificate((OSCLib::Data::OSCP::Base64Binary const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMDeviceDescriptor_getPublicCertificates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::Base64Binary > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMDeviceDescriptor const *)arg1)->getPublicCertificates();
  jresult = new std::vector< OSCLib::Data::OSCP::Base64Binary >((const std::vector< OSCLib::Data::OSCP::Base64Binary > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMNetworkAE__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *)new OSCLib::Data::OSCP::DICOMNetworkAE();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMNetworkAE__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMNetworkAE const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *)new OSCLib::Data::OSCP::DICOMNetworkAE((OSCLib::Data::OSCP::DICOMNetworkAE const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DICOMNetworkAE(void * jarg1) {
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkAE_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMNetworkAE const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::DICOMNetworkAE const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAE_setAETitle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->setAETitle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DICOMNetworkAE_getAETitle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getAETitle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAE_setAssociationInitiator(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->setAssociationInitiator((bool const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DICOMNetworkAE_getAssociationInitiator(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getAssociationInitiator();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAE_setAssociationAcceptor(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->setAssociationAcceptor((bool const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DICOMNetworkAE_getAssociationAcceptor(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getAssociationAcceptor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAE_setDescription(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->setDescription((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DICOMNetworkAE_getDescription(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getDescription();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DICOMNetworkAE_hasDescription(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->hasDescription();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAE_addNetworkConnectionReference(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->addNetworkConnectionReference((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAE_getNetworkConnectionReferences(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getNetworkConnectionReferences();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAE_addTransferCapability(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  DICOMTransferCapability *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  arg2 = (DICOMTransferCapability *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DICOMTransferCapability const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->addTransferCapability((DICOMTransferCapability const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAE_getTransferCapabilities(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getTransferCapabilities();
  jresult = new std::vector< OSCLib::Data::OSCP::DICOMTransferCapability >((const std::vector< OSCLib::Data::OSCP::DICOMTransferCapability > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAE_addApplicationCluster(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  arg2 = (LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->addApplicationCluster((LocalizedText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAE_getApplicationClusters(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getApplicationClusters();
  jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAE_addSupportedCharacterSet(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkAE *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMNetworkAE *) &(arg1)->addSupportedCharacterSet((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkAE_getSupportedCharacterSets(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkAE *arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkAE *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkAE const *)arg1)->getSupportedCharacterSets();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMNetworkConnection__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  result = (OSCLib::Data::OSCP::DICOMNetworkConnection *)new OSCLib::Data::OSCP::DICOMNetworkConnection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMNetworkConnection__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMNetworkConnection const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMNetworkConnection *)new OSCLib::Data::OSCP::DICOMNetworkConnection((OSCLib::Data::OSCP::DICOMNetworkConnection const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DICOMNetworkConnection(void * jarg1) {
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMNetworkConnection_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMNetworkConnection const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::DICOMNetworkConnection const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkConnection_setid(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMNetworkConnection *) &(arg1)->setid((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DICOMNetworkConnection_getid(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkConnection const *)arg1)->getid();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkConnection_setHostname(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMNetworkConnection *) &(arg1)->setHostname((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DICOMNetworkConnection_getHostname(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkConnection const *)arg1)->getHostname();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkConnection_setPort(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DICOMNetworkConnection *) &(arg1)->setPort((unsigned short const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DICOMNetworkConnection_getPort(void * jarg1) {
  unsigned short jresult ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  unsigned short result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1; 
  result = (unsigned short)((OSCLib::Data::OSCP::DICOMNetworkConnection const *)arg1)->getPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DICOMNetworkConnection_hasPort(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::DICOMNetworkConnection const *)arg1)->hasPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkConnection_addTLSCipherSuite(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMNetworkConnection *) &(arg1)->addTLSCipherSuite((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMNetworkConnection_getTLSCipherSuites(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMNetworkConnection *arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMNetworkConnection *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMNetworkConnection const *)arg1)->getTLSCipherSuites();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMTransferCapability__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMTransferCapability *result = 0 ;
  
  result = (OSCLib::Data::OSCP::DICOMTransferCapability *)new OSCLib::Data::OSCP::DICOMTransferCapability();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DICOMTransferCapability__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMTransferCapability const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::DICOMTransferCapability *)new OSCLib::Data::OSCP::DICOMTransferCapability((OSCLib::Data::OSCP::DICOMTransferCapability const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DICOMTransferCapability(void * jarg1) {
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DICOMTransferCapability_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMTransferCapability const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::DICOMTransferCapability const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMTransferCapability_setSOPClass(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMTransferCapability *) &(arg1)->setSOPClass((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DICOMTransferCapability_getSOPClass(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMTransferCapability const *)arg1)->getSOPClass();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMTransferCapability_setTransferRole(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  DICOMTransferRole *arg2 = 0 ;
  DICOMTransferRole temp2 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg1; 
  temp2 = (DICOMTransferRole)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::DICOMTransferCapability *) &(arg1)->setTransferRole((DICOMTransferRole const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DICOMTransferCapability_getTransferRole(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  DICOMTransferRole result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg1; 
  result = (DICOMTransferRole)((OSCLib::Data::OSCP::DICOMTransferCapability const *)arg1)->getTransferRole();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMTransferCapability_addTransferSyntax(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::DICOMTransferCapability *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::DICOMTransferCapability *) &(arg1)->addTransferSyntax((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DICOMTransferCapability_getTransferSyntaxes(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::DICOMTransferCapability *arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMTransferCapability *)jarg1; 
  result = ((OSCLib::Data::OSCP::DICOMTransferCapability const *)arg1)->getTransferSyntaxes();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Duration__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  result = (OSCLib::Data::OSCP::Duration *)new OSCLib::Data::OSCP::Duration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Duration__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = 0 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Duration *)new OSCLib::Data::OSCP::Duration((OSCLib::Data::OSCP::Duration const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Duration(void * jarg1) {
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Duration_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Duration const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Duration const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Duration_setnegative(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->setnegative((bool const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Duration_getnegative(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Duration const *)arg1)->getnegative();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Duration_setyears(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->setyears((unsigned int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Duration_getyears(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int result;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  result = (unsigned int)((OSCLib::Data::OSCP::Duration const *)arg1)->getyears();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Duration_setmonths(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->setmonths((unsigned int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Duration_getmonths(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int result;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  result = (unsigned int)((OSCLib::Data::OSCP::Duration const *)arg1)->getmonths();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Duration_setdays(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->setdays((unsigned int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Duration_getdays(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int result;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  result = (unsigned int)((OSCLib::Data::OSCP::Duration const *)arg1)->getdays();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Duration_sethours(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->sethours((unsigned int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Duration_gethours(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int result;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  result = (unsigned int)((OSCLib::Data::OSCP::Duration const *)arg1)->gethours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Duration_setminutes(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->setminutes((unsigned int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Duration_getminutes(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  unsigned int result;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  result = (unsigned int)((OSCLib::Data::OSCP::Duration const *)arg1)->getminutes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Duration_setseconds(void * jarg1, double jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::Duration *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Duration *) &(arg1)->setseconds((double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Duration_getseconds(void * jarg1) {
  double jresult ;
  OSCLib::Data::OSCP::Duration *arg1 = (OSCLib::Data::OSCP::Duration *) 0 ;
  double result;
  
  arg1 = (OSCLib::Data::OSCP::Duration *)jarg1; 
  result = (double)((OSCLib::Data::OSCP::Duration const *)arg1)->getseconds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnsembleContextDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)new OSCLib::Data::OSCP::EnsembleContextDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnsembleContextDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)new OSCLib::Data::OSCP::EnsembleContextDescriptor((OSCLib::Data::OSCP::EnsembleContextDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnsembleContextDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::EnsembleContextDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnsembleContextDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnsembleContextDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnsembleContextDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  IntendedUse *arg2 = 0 ;
  IntendedUse temp2 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  temp2 = (IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) &(arg1)->setIntendedUse((IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EnsembleContextDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  result = (IntendedUse)((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnsembleContextDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnsembleContextState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::EnsembleContextState *)new OSCLib::Data::OSCP::EnsembleContextState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnsembleContextState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *)new OSCLib::Data::OSCP::EnsembleContextState((OSCLib::Data::OSCP::EnsembleContextState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnsembleContextState(void * jarg1) {
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnsembleContextState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnsembleContextState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnsembleContextState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnsembleContextState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getStateVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnsembleContextState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_setContextAssociation(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ContextAssociation *arg2 = 0 ;
  ContextAssociation temp2 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  temp2 = (ContextAssociation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setContextAssociation((ContextAssociation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EnsembleContextState_getContextAssociation(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ContextAssociation result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = (ContextAssociation)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getContextAssociation();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnsembleContextState_hasContextAssociation(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->hasContextAssociation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_setBindingMDIBVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  arg2 = (ReferencedVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ReferencedVersion const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setBindingMDIBVersion((ReferencedVersion const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_getBindingMDIBVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ReferencedVersion result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getBindingMDIBVersion();
  jresult = new ReferencedVersion((const ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_setUnbindingMDIBVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  arg2 = (ReferencedVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ReferencedVersion const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setUnbindingMDIBVersion((ReferencedVersion const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_getUnbindingMDIBVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  ReferencedVersion result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getUnbindingMDIBVersion();
  jresult = new ReferencedVersion((const ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnsembleContextState_hasUnbindingMDIBVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->hasUnbindingMDIBVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_setBindingStartTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  arg2 = (Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setBindingStartTime((Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_getBindingStartTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getBindingStartTime();
  jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnsembleContextState_hasBindingStartTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->hasBindingStartTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_setBindingEndTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  arg2 = (Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->setBindingEndTime((Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_getBindingEndTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getBindingEndTime();
  jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnsembleContextState_hasBindingEndTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->hasBindingEndTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_addValidator(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  arg2 = (InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->addValidator((InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_getValidators(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getValidators();
  jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_addIdentification(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  arg2 = (InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnsembleContextState *) &(arg1)->addIdentification((InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnsembleContextState_getIdentifications(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnsembleContextState *arg1 = (OSCLib::Data::OSCP::EnsembleContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  arg1 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnsembleContextState const *)arg1)->getIdentifications();
  jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_0(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::Activation arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::Activation)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_1(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertConditionKind arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionKind)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_2(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertConditionPriority arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertConditionPriority)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_3(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::AlertSignalManifestation arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::AlertSignalManifestation)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_4(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::CalibrationState arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::CalibrationState)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_5(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::ComponentActivation arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::ComponentActivation)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_6(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::ContextAssociation arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::ContextAssociation)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_7(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::DICOMTransferRole arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::DICOMTransferRole)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_8(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::GenerationMode arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::GenerationMode)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_9(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::InvocationState arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::InvocationState)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_10(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::MetricAvailability arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::MetricAvailability)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_11(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::MetricCategory arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::MetricCategory)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_12(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::MetricMeasurementValidity arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::MetricMeasurementValidity)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_13(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::MetricRetrievability arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::MetricRetrievability)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_14(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::MonitoredAlertLimits arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::MonitoredAlertLimits)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_15(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OperatingMode arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OperatingMode)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_16(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::PatientType arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::PatientType)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_17(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::PausableActivation arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::PausableActivation)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_18(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::PrimaryAlertSignalLocation arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::PrimaryAlertSignalLocation)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_19(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::Sex arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::Sex)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumToString_convert__SWIG_20(int jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SignalPresence arg1 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SignalPresence)jarg1; 
  result = OSCLib::Data::OSCP::EnumToString::convert(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumToString() {
  void * jresult ;
  OSCLib::Data::OSCP::EnumToString *result = 0 ;
  
  result = (OSCLib::Data::OSCP::EnumToString *)new OSCLib::Data::OSCP::EnumToString();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnumToString(void * jarg1) {
  OSCLib::Data::OSCP::EnumToString *arg1 = (OSCLib::Data::OSCP::EnumToString *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumToString *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumNomenRef__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::EnumNomenRef *result = 0 ;
  
  result = (OSCLib::Data::OSCP::EnumNomenRef *)new OSCLib::Data::OSCP::EnumNomenRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumNomenRef__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumNomenRef const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumNomenRef *)new OSCLib::Data::OSCP::EnumNomenRef((OSCLib::Data::OSCP::EnumNomenRef const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnumNomenRef(void * jarg1) {
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumNomenRef_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumNomenRef const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::EnumNomenRef const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumNomenRef_setCode(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumNomenRef *) &(arg1)->setCode((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumNomenRef_getCode(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumNomenRef const *)arg1)->getCode();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumNomenRef_setEnumIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  SampleIndex *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg1; 
  arg2 = (SampleIndex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SampleIndex const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumNomenRef *) &(arg1)->setEnumIndex((SampleIndex const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumNomenRef_getEnumIndex(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  SampleIndex result;
  
  arg1 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumNomenRef const *)arg1)->getEnumIndex();
  jresult = new SampleIndex((const SampleIndex &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnumNomenRef_hasEnumIndex(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnumNomenRef *arg1 = (OSCLib::Data::OSCP::EnumNomenRef *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumNomenRef const *)arg1)->hasEnumIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumStringMetricDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)new OSCLib::Data::OSCP::EnumStringMetricDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumStringMetricDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)new OSCLib::Data::OSCP::EnumStringMetricDescriptor((OSCLib::Data::OSCP::EnumStringMetricDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnumStringMetricDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::EnumStringMetricDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnumStringMetricDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnumStringMetricDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EnumStringMetricDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnumStringMetricDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_setUnit(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setUnit((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_getUnit(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getUnit();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_setMetricCategory(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricCategory temp2 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricCategory)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setMetricCategory((OSCLib::Data::OSCP::MetricCategory const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EnumStringMetricDescriptor_getMetricCategory(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::MetricCategory)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getMetricCategory();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_setAvailability(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricAvailability temp2 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricAvailability)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setAvailability((OSCLib::Data::OSCP::MetricAvailability const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EnumStringMetricDescriptor_getAvailability(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::MetricAvailability)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getAvailability();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_setMaxDelayTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->setMaxDelayTime((OSCLib::Data::OSCP::Duration const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_getMaxDelayTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getMaxDelayTime();
  jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnumStringMetricDescriptor_hasMaxDelayTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->hasMaxDelayTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_addBodySite(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->addBodySite((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_getBodySites(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getBodySites();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_addAllowedValue(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->addAllowedValue((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_getAllowedValues(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getAllowedValues();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_addEnumCodes(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::EnumNomenRef *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumNomenRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumNomenRef const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) &(arg1)->addEnumCodes((OSCLib::Data::OSCP::EnumNomenRef const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricDescriptor_getEnumCodes(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumNomenRef > result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricDescriptor const *)arg1)->getEnumCodes();
  jresult = new std::vector< OSCLib::Data::OSCP::EnumNomenRef >((const std::vector< OSCLib::Data::OSCP::EnumNomenRef > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumStringMetricState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::EnumStringMetricState *)new OSCLib::Data::OSCP::EnumStringMetricState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnumStringMetricState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *)new OSCLib::Data::OSCP::EnumStringMetricState((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnumStringMetricState(void * jarg1) {
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnumStringMetricState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumStringMetricState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnumStringMetricState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EnumStringMetricState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getStateVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnumStringMetricState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricState_setComponentActivationState(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentActivation temp2 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::ComponentActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setComponentActivationState((OSCLib::Data::OSCP::ComponentActivation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EnumStringMetricState_getComponentActivationState(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = (OSCLib::Data::OSCP::ComponentActivation)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getComponentActivationState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnumStringMetricState_hasComponentActivationState(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasComponentActivationState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricState_setCalibrationInfo(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CalibrationInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setCalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricState_getCalibrationInfo(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getCalibrationInfo();
  jresult = new OSCLib::Data::OSCP::CalibrationInfo((const OSCLib::Data::OSCP::CalibrationInfo &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnumStringMetricState_hasCalibrationInfo(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasCalibrationInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricState_setOperatingHours(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setOperatingHours((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EnumStringMetricState_getOperatingHours(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getOperatingHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnumStringMetricState_hasOperatingHours(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasOperatingHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricState_setOperatingCycles(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setOperatingCycles((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EnumStringMetricState_getOperatingCycles(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getOperatingCycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnumStringMetricState_hasOperatingCycles(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasOperatingCycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricState_setObservedValue(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  StringMetricValue *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  arg2 = (StringMetricValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringMetricValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::EnumStringMetricState *) &(arg1)->setObservedValue((StringMetricValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnumStringMetricState_getObservedValue(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  StringMetricValue result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->getObservedValue();
  jresult = new StringMetricValue((const StringMetricValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EnumStringMetricState_hasObservedValue(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::EnumStringMetricState const *)arg1)->hasObservedValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HydraMDSDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *)new OSCLib::Data::OSCP::HydraMDSDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HydraMDSDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *)new OSCLib::Data::OSCP::HydraMDSDescriptor((OSCLib::Data::OSCP::HydraMDSDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HydraMDSDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::HydraMDSDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HydraMDSDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HydraMDSDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_addProductionSpecification(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  ProductionSpecification *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  arg2 = (ProductionSpecification *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ProductionSpecification const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->addProductionSpecification((ProductionSpecification const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_getProductionSpecifications(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getProductionSpecifications();
  jresult = new std::vector< OSCLib::Data::OSCP::ProductionSpecification >((const std::vector< OSCLib::Data::OSCP::ProductionSpecification > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_setMetaData(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SystemMetaData *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  arg2 = (SystemMetaData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SystemMetaData const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setMetaData((SystemMetaData const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_getMetaData(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SystemMetaData result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getMetaData();
  jresult = new SystemMetaData((const SystemMetaData &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSDescriptor_hasMetaData(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasMetaData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_setContext(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SystemContext *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  arg2 = (SystemContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SystemContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setContext((SystemContext const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_getContext(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SystemContext result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getContext();
  jresult = new SystemContext((const SystemContext &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_setClock(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setClock((OSCLib::Data::OSCP::ClockDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_getClock(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::ClockDescriptor result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getClock();
  jresult = new OSCLib::Data::OSCP::ClockDescriptor((const OSCLib::Data::OSCP::ClockDescriptor &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSDescriptor_hasClock(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasClock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_setSCO(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SCODescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  arg2 = (SCODescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SCODescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setSCO((SCODescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_getSCO(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  SCODescriptor result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getSCO();
  jresult = new SCODescriptor((const SCODescriptor &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSDescriptor_hasSCO(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasSCO();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_setAlertSystem(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->setAlertSystem((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_getAlertSystem(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getAlertSystem();
  jresult = new OSCLib::Data::OSCP::AlertSystemDescriptor((const OSCLib::Data::OSCP::AlertSystemDescriptor &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSDescriptor_hasAlertSystem(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->hasAlertSystem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_addVMD(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  VMDDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  arg2 = (VMDDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VMDDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSDescriptor *) &(arg1)->addVMD((VMDDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSDescriptor_getVMDs(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSDescriptor const *)arg1)->getVMDs();
  jresult = new std::vector< OSCLib::Data::OSCP::VMDDescriptor >((const std::vector< OSCLib::Data::OSCP::VMDDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HydraMDSState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::HydraMDSState *)new OSCLib::Data::OSCP::HydraMDSState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HydraMDSState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSState *)new OSCLib::Data::OSCP::HydraMDSState((OSCLib::Data::OSCP::HydraMDSState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HydraMDSState(void * jarg1) {
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HydraMDSState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::HydraMDSState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::HydraMDSState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HydraMDSState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HydraMDSState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getStateVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSState_setComponentActivationState(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentActivation temp2 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::ComponentActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setComponentActivationState((OSCLib::Data::OSCP::ComponentActivation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HydraMDSState_getComponentActivationState(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = (OSCLib::Data::OSCP::ComponentActivation)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getComponentActivationState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSState_hasComponentActivationState(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasComponentActivationState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSState_setCalibrationInfo(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CalibrationInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setCalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSState_getCalibrationInfo(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getCalibrationInfo();
  jresult = new OSCLib::Data::OSCP::CalibrationInfo((const OSCLib::Data::OSCP::CalibrationInfo &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSState_hasCalibrationInfo(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasCalibrationInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSState_setOperatingHours(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setOperatingHours((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HydraMDSState_getOperatingHours(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getOperatingHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSState_hasOperatingHours(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasOperatingHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSState_setOperatingCycles(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setOperatingCycles((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HydraMDSState_getOperatingCycles(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getOperatingCycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSState_hasOperatingCycles(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasOperatingCycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSState_setLang(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  Language *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  arg2 = (Language *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Language const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::HydraMDSState *) &(arg1)->setLang((Language const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HydraMDSState_getLang(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  Language result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = ((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->getLang();
  jresult = new Language((const Language &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HydraMDSState_hasLang(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::HydraMDSState *arg1 = (OSCLib::Data::OSCP::HydraMDSState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::HydraMDSState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::HydraMDSState const *)arg1)->hasLang();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImagingProcedure__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  result = (OSCLib::Data::OSCP::ImagingProcedure *)new OSCLib::Data::OSCP::ImagingProcedure();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImagingProcedure__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ImagingProcedure const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *)new OSCLib::Data::OSCP::ImagingProcedure((OSCLib::Data::OSCP::ImagingProcedure const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImagingProcedure(void * jarg1) {
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImagingProcedure_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ImagingProcedure const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ImagingProcedure const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedure_setAccessionIdentifier(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  arg2 = (InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *) &(arg1)->setAccessionIdentifier((InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedure_getAccessionIdentifier(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier result;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  result = ((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getAccessionIdentifier();
  jresult = new InstanceIdentifier((const InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedure_setRequestedProcedureID(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  arg2 = (InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *) &(arg1)->setRequestedProcedureID((InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedure_getRequestedProcedureID(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier result;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  result = ((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getRequestedProcedureID();
  jresult = new InstanceIdentifier((const InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedure_setStudyInstanceUID(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  arg2 = (InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *) &(arg1)->setStudyInstanceUID((InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedure_getStudyInstanceUID(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier result;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  result = ((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getStudyInstanceUID();
  jresult = new InstanceIdentifier((const InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedure_setScheduledProcedureStepID(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  arg2 = (InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *) &(arg1)->setScheduledProcedureStepID((InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedure_getScheduledProcedureStepID(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  InstanceIdentifier result;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  result = ((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getScheduledProcedureStepID();
  jresult = new InstanceIdentifier((const InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedure_setModality(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *) &(arg1)->setModality((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedure_getModality(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  result = ((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getModality();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImagingProcedure_hasModality(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->hasModality();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedure_setProtocolCode(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ImagingProcedure *) &(arg1)->setProtocolCode((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImagingProcedure_getProtocolCode(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  result = ((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->getProtocolCode();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImagingProcedure_hasProtocolCode(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ImagingProcedure *arg1 = (OSCLib::Data::OSCP::ImagingProcedure *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ImagingProcedure const *)arg1)->hasProtocolCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InstanceIdentifier__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::InstanceIdentifier *result = 0 ;
  
  result = (OSCLib::Data::OSCP::InstanceIdentifier *)new OSCLib::Data::OSCP::InstanceIdentifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InstanceIdentifier__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InstanceIdentifier *)new OSCLib::Data::OSCP::InstanceIdentifier((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_InstanceIdentifier(void * jarg1) {
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstanceIdentifier_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InstanceIdentifier_setroot(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::InstanceIdentifier *) &(arg1)->setroot((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_InstanceIdentifier_getroot(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg1; 
  result = ((OSCLib::Data::OSCP::InstanceIdentifier const *)arg1)->getroot();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InstanceIdentifier_setextension(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::InstanceIdentifier *) &(arg1)->setextension((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_InstanceIdentifier_getextension(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg1; 
  result = ((OSCLib::Data::OSCP::InstanceIdentifier const *)arg1)->getextension();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InstanceIdentifier_hasextension(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::InstanceIdentifier const *)arg1)->hasextension();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InstanceIdentifier_addIdentifierName(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg1; 
  arg2 = (LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InstanceIdentifier *) &(arg1)->addIdentifierName((LocalizedText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InstanceIdentifier_getIdentifierNames(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  arg1 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg1; 
  result = ((OSCLib::Data::OSCP::InstanceIdentifier const *)arg1)->getIdentifierNames();
  jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Language__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::Language *result = 0 ;
  
  result = (OSCLib::Data::OSCP::Language *)new OSCLib::Data::OSCP::Language();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Language__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Language *arg1 = 0 ;
  OSCLib::Data::OSCP::Language *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Language *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Language const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Language *)new OSCLib::Data::OSCP::Language((OSCLib::Data::OSCP::Language const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Language(void * jarg1) {
  OSCLib::Data::OSCP::Language *arg1 = (OSCLib::Data::OSCP::Language *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Language *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Language_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::Language *arg1 = (OSCLib::Data::OSCP::Language *) 0 ;
  OSCLib::Data::OSCP::Language *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Language *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Language *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Language const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Language const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Language_get(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::Language *arg1 = (OSCLib::Data::OSCP::Language *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::Language *)jarg1; 
  result = ((OSCLib::Data::OSCP::Language const *)arg1)->get();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Language_set(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Language *arg1 = (OSCLib::Data::OSCP::Language *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::Language *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Language *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::Language *) &(arg1)->set((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LimitAlertConditionDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)new OSCLib::Data::OSCP::LimitAlertConditionDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LimitAlertConditionDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)new OSCLib::Data::OSCP::LimitAlertConditionDescriptor((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LimitAlertConditionDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_setKind(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertConditionKind *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionKind temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::AlertConditionKind)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setKind((OSCLib::Data::OSCP::AlertConditionKind const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_getKind(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertConditionKind result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::AlertConditionKind)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getKind();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_setPriority(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertConditionPriority *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionPriority temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::AlertConditionPriority)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setPriority((OSCLib::Data::OSCP::AlertConditionPriority const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_getPriority(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertConditionPriority result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::AlertConditionPriority)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getPriority();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_addSource(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->addSource((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_getSources(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getSources();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_addCauseInfo(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  OSCLib::Data::OSCP::CauseInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CauseInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CauseInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->addCauseInfo((OSCLib::Data::OSCP::CauseInfo const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_getCauseInfo(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CauseInfo > result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getCauseInfo();
  jresult = new std::vector< OSCLib::Data::OSCP::CauseInfo >((const std::vector< OSCLib::Data::OSCP::CauseInfo > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_setMaxLimits(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  Range *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  arg2 = (Range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Range const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setMaxLimits((Range const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_getMaxLimits(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  Range result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getMaxLimits();
  jresult = new Range((const Range &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_setAutoLimitSupported(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) &(arg1)->setAutoLimitSupported((bool const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_getAutoLimitSupported(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->getAutoLimitSupported();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LimitAlertConditionDescriptor_hasAutoLimitSupported(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const *)arg1)->hasAutoLimitSupported();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LimitAlertConditionState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *)new OSCLib::Data::OSCP::LimitAlertConditionState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LimitAlertConditionState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *)new OSCLib::Data::OSCP::LimitAlertConditionState((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LimitAlertConditionState(void * jarg1) {
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LimitAlertConditionState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LimitAlertConditionState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LimitAlertConditionState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LimitAlertConditionState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getStateVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LimitAlertConditionState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_setActivationState(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::PausableActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::PausableActivation temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::PausableActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setActivationState((OSCLib::Data::OSCP::PausableActivation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LimitAlertConditionState_getActivationState(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::PausableActivation result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = (OSCLib::Data::OSCP::PausableActivation)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getActivationState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_setRank(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setRank((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LimitAlertConditionState_getRank(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getRank();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LimitAlertConditionState_hasRank(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->hasRank();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_setPresence(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setPresence((bool const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LimitAlertConditionState_getPresence(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getPresence();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_setObservationTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  arg2 = (Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setObservationTime((Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_getObservationTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getObservationTime();
  jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LimitAlertConditionState_hasObservationTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->hasObservationTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_setLimits(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  Range *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  arg2 = (Range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Range const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setLimits((Range const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_getLimits(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  Range result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getLimits();
  jresult = new Range((const Range &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LimitAlertConditionState_hasLimits(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->hasLimits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_setMonitoredAlertLimits(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::MonitoredAlertLimits *arg2 = 0 ;
  OSCLib::Data::OSCP::MonitoredAlertLimits temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::MonitoredAlertLimits)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setMonitoredAlertLimits((OSCLib::Data::OSCP::MonitoredAlertLimits const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LimitAlertConditionState_getMonitoredAlertLimits(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::MonitoredAlertLimits result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = (OSCLib::Data::OSCP::MonitoredAlertLimits)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getMonitoredAlertLimits();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LimitAlertConditionState_setAutoLimitActivationState(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::PausableActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::PausableActivation temp2 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::PausableActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LimitAlertConditionState *) &(arg1)->setAutoLimitActivationState((OSCLib::Data::OSCP::PausableActivation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LimitAlertConditionState_getAutoLimitActivationState(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  OSCLib::Data::OSCP::PausableActivation result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = (OSCLib::Data::OSCP::PausableActivation)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->getAutoLimitActivationState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LimitAlertConditionState_hasAutoLimitActivationState(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LimitAlertConditionState const *)arg1)->hasAutoLimitActivationState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalizedText__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::LocalizedText *result = 0 ;
  
  result = (OSCLib::Data::OSCP::LocalizedText *)new OSCLib::Data::OSCP::LocalizedText();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalizedText__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = 0 ;
  OSCLib::Data::OSCP::LocalizedText *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocalizedText *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocalizedText *)new OSCLib::Data::OSCP::LocalizedText((OSCLib::Data::OSCP::LocalizedText const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LocalizedText(void * jarg1) {
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocalizedText *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalizedText_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocalizedText *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocalizedText const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::LocalizedText const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalizedText_setLang(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  OSCLib::Data::OSCP::Language *arg2 = 0 ;
  OSCLib::Data::OSCP::LocalizedText *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocalizedText *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Language *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Language const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocalizedText *) &(arg1)->setLang((OSCLib::Data::OSCP::Language const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalizedText_getLang(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  OSCLib::Data::OSCP::Language result;
  
  arg1 = (OSCLib::Data::OSCP::LocalizedText *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocalizedText const *)arg1)->getLang();
  jresult = new OSCLib::Data::OSCP::Language((const OSCLib::Data::OSCP::Language &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocalizedText_hasLang(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LocalizedText *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocalizedText const *)arg1)->hasLang();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LocalizedText_get(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::LocalizedText *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocalizedText const *)arg1)->get();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalizedText_set(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocalizedText *arg1 = (OSCLib::Data::OSCP::LocalizedText *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocalizedText *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocalizedText *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::LocalizedText *) &(arg1)->set((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocationContextDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::LocationContextDescriptor *)new OSCLib::Data::OSCP::LocationContextDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocationContextDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextDescriptor *)new OSCLib::Data::OSCP::LocationContextDescriptor((OSCLib::Data::OSCP::LocationContextDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LocationContextDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::LocationContextDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocationContextDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::LocationContextDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LocationContextDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextDescriptor *) &(arg1)->setDescriptorVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocationContextDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LocationContextDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LocationContextDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocationContextDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocationContextState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::LocationContextState *)new OSCLib::Data::OSCP::LocationContextState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocationContextState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *)new OSCLib::Data::OSCP::LocationContextState((OSCLib::Data::OSCP::LocationContextState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LocationContextState(void * jarg1) {
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocationContextState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocationContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::LocationContextState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LocationContextState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocationContextState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LocationContextState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setStateVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getStateVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocationContextState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_setContextAssociation(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation *arg2 = 0 ;
  OSCLib::Data::OSCP::ContextAssociation temp2 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::ContextAssociation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setContextAssociation((OSCLib::Data::OSCP::ContextAssociation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LocationContextState_getContextAssociation(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = (OSCLib::Data::OSCP::ContextAssociation)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getContextAssociation();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocationContextState_hasContextAssociation(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->hasContextAssociation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_setBindingMDIBVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  arg2 = (ReferencedVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ReferencedVersion const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setBindingMDIBVersion((ReferencedVersion const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_getBindingMDIBVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  ReferencedVersion result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getBindingMDIBVersion();
  jresult = new ReferencedVersion((const ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_setUnbindingMDIBVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  arg2 = (ReferencedVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ReferencedVersion const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setUnbindingMDIBVersion((ReferencedVersion const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_getUnbindingMDIBVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  ReferencedVersion result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getUnbindingMDIBVersion();
  jresult = new ReferencedVersion((const ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocationContextState_hasUnbindingMDIBVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->hasUnbindingMDIBVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_setBindingStartTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  arg2 = (Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setBindingStartTime((Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_getBindingStartTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getBindingStartTime();
  jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocationContextState_hasBindingStartTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->hasBindingStartTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_setBindingEndTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  arg2 = (Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->setBindingEndTime((Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_getBindingEndTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getBindingEndTime();
  jresult = new Timestamp((const Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocationContextState_hasBindingEndTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::LocationContextState const *)arg1)->hasBindingEndTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_addValidator(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->addValidator((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_getValidators(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getValidators();
  jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_addIdentification(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::LocationContextState *) &(arg1)->addIdentification((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocationContextState_getIdentifications(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::LocationContextState *arg1 = (OSCLib::Data::OSCP::LocationContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  arg1 = (OSCLib::Data::OSCP::LocationContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::LocationContextState const *)arg1)->getIdentifications();
  jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MDDescription__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *result = 0 ;
  
  result = (OSCLib::Data::OSCP::MDDescription *)new OSCLib::Data::OSCP::MDDescription();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MDDescription__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = 0 ;
  OSCLib::Data::OSCP::MDDescription *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::MDDescription const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDDescription *)new OSCLib::Data::OSCP::MDDescription((OSCLib::Data::OSCP::MDDescription const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MDDescription(void * jarg1) {
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDDescription_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  OSCLib::Data::OSCP::MDDescription *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::MDDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::MDDescription const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::MDDescription const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_setDescriptionVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::MDDescription *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  arg2 = (VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDDescription *) &(arg1)->setDescriptionVersion((VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_getDescriptionVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->getDescriptionVersion();
  jresult = new VersionCounter((const VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_hasDescriptionVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->hasDescriptionVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDDescription_addHydraMDSDescriptor(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->addHydraMDSDescriptor((OSCLib::Data::OSCP::HydraMDSDescriptor const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDDescription_addDicomMDSDescriptor(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  OSCLib::Data::OSCP::DICOMDeviceDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DICOMDeviceDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DICOMDeviceDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->addDicomMDSDescriptor((OSCLib::Data::OSCP::DICOMDeviceDescriptor const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_getFirstHydraMDSDescriptor(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg2 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->getFirstHydraMDSDescriptor(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ChannelDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::ClockDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_5(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_6(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_7(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_8(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_9(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_10(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  NumericMetricDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (NumericMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NumericMetricDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_11(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  OperatorContextDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OperatorContextDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OperatorContextDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_12(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  PatientContextDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (PatientContextDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PatientContextDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_13(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  RealTimeSampleArrayMetricDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (RealTimeSampleArrayMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealTimeSampleArrayMetricDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_14(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  StringMetricDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (StringMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringMetricDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_15(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  VMDDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (VMDDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VMDDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDDescription_findDescriptor__SWIG_16(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  WorkflowContextDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (WorkflowContextDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "WorkflowContextDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDDescription const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MDDescription_getOperationTargetForOperationHandle(void * jarg1, char * jarg2) {
  char * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->getOperationTargetForOperationHandle((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MDDescription_getFirstOperationHandleForOperationTarget(void * jarg1, char * jarg2) {
  char * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->getFirstOperationHandleForOperationTarget((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllAlertConditionDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllAlertConditionDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor >((const std::vector< OSCLib::Data::OSCP::AlertConditionDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllAlertSignalDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllAlertSignalDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor >((const std::vector< OSCLib::Data::OSCP::AlertSignalDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllAlertSystemDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllAlertSystemDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor >((const std::vector< OSCLib::Data::OSCP::AlertSystemDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllLimitAlertConditionDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllLimitAlertConditionDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor >((const std::vector< OSCLib::Data::OSCP::LimitAlertConditionDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllChannelDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllChannelDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::ChannelDescriptor >((const std::vector< OSCLib::Data::OSCP::ChannelDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllClockDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllClockDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::ClockDescriptor >((const std::vector< OSCLib::Data::OSCP::ClockDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllDICOMDeviceDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllDICOMDeviceDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor >((const std::vector< OSCLib::Data::OSCP::DICOMDeviceDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllEnumStringMetricDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllEnumStringMetricDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::EnumStringMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllHydraMDSDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllHydraMDSDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor >((const std::vector< OSCLib::Data::OSCP::HydraMDSDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllNumericMetricDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllNumericMetricDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::NumericMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllRealTimeSampleArrayMetricDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllRealTimeSampleArrayMetricDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllStringMetricDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllStringMetricDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::StringMetricDescriptor >((const std::vector< OSCLib::Data::OSCP::StringMetricDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDDescription_collectAllVMDDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDDescription *arg1 = (OSCLib::Data::OSCP::MDDescription *) 0 ;
  std::vector< OSCLib::Data::OSCP::VMDDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::MDDescription *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDDescription const *)arg1)->collectAllVMDDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::VMDDescriptor >((const std::vector< OSCLib::Data::OSCP::VMDDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MDIBContainer() {
  void * jresult ;
  OSCLib::Data::OSCP::MDIBContainer *result = 0 ;
  
  result = (OSCLib::Data::OSCP::MDIBContainer *)new OSCLib::Data::OSCP::MDIBContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MDIBContainer(void * jarg1) {
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDIBContainer_setMDDescription(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  OSCLib::Data::OSCP::MDDescription *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::MDDescription *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::MDDescription const & type is null", 0);
    return ;
  } 
  (arg1)->setMDDescription((OSCLib::Data::OSCP::MDDescription const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDIBContainer_getMDDescription(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  OSCLib::Data::OSCP::MDDescription result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->getMDDescription();
  jresult = new OSCLib::Data::OSCP::MDDescription((const OSCLib::Data::OSCP::MDDescription &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDIBContainer_setMDState(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  MDState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  arg2 = (MDState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MDState const & type is null", 0);
    return ;
  } 
  (arg1)->setMDState((MDState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDIBContainer_getMDState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  MDState result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->getMDState();
  jresult = new MDState((const MDState &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDIBContainer_setMDIBVersion(void * jarg1, unsigned long long jarg2) {
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  unsigned long long arg2 ;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  (arg1)->setMDIBVersion(arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_MDIBContainer_getMDIBVersion(void * jarg1) {
  unsigned long long jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  unsigned long long result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  result = (unsigned long long)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->getMDIBVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDIBContainer_findDescriptor__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDIBContainer_findDescriptor__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDIBContainer_findDescriptor__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDIBContainer_findDescriptor__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDIBContainer_findDescriptor__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDIBContainer_findDescriptor__SWIG_5(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  NumericMetricDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (NumericMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NumericMetricDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDIBContainer_findDescriptor__SWIG_6(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  RealTimeSampleArrayMetricDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (RealTimeSampleArrayMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealTimeSampleArrayMetricDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDIBContainer_findDescriptor__SWIG_7(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  StringMetricDescriptor *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (StringMetricDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringMetricDescriptor & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findDescriptor((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDIBContainer_findState__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDIBContainer_findState__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  NumericMetricState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (NumericMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NumericMetricState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDIBContainer_findState__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  RealTimeSampleArrayMetricState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (RealTimeSampleArrayMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealTimeSampleArrayMetricState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDIBContainer_findState__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDIBContainer *arg1 = (OSCLib::Data::OSCP::MDIBContainer *) 0 ;
  std::string *arg2 = 0 ;
  StringMetricState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDIBContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (StringMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringMetricState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDIBContainer const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MDState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::MDState *)new OSCLib::Data::OSCP::MDState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MDState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::MDState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *)new OSCLib::Data::OSCP::MDState((OSCLib::Data::OSCP::MDState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MDState(void * jarg1) {
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::MDState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::MDState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::MDState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::MDState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->getStateVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::AlertConditionState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::AlertSignalState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::AlertSystemState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::ClockState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::ComponentState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ComponentState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_5(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_6(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_7(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::HydraMDSState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_8(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_9(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::LocationContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_10(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::NumericMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_11(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::OperatorContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_12(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::PatientContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_13(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_14(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::StringMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDState_findState__SWIG_15(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg3 = 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState & type is null", 0);
    return 0;
  } 
  result = (bool)((OSCLib::Data::OSCP::MDState const *)arg1)->findState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findAlertConditionStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertConditionState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findAlertConditionStates();
  jresult = new std::vector< OSCLib::Data::OSCP::AlertConditionState >((const std::vector< OSCLib::Data::OSCP::AlertConditionState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findAlertSignalStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSignalState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findAlertSignalStates();
  jresult = new std::vector< OSCLib::Data::OSCP::AlertSignalState >((const std::vector< OSCLib::Data::OSCP::AlertSignalState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findAlertSystemStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::AlertSystemState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findAlertSystemStates();
  jresult = new std::vector< OSCLib::Data::OSCP::AlertSystemState >((const std::vector< OSCLib::Data::OSCP::AlertSystemState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findClockStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClockState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findClockStates();
  jresult = new std::vector< OSCLib::Data::OSCP::ClockState >((const std::vector< OSCLib::Data::OSCP::ClockState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findComponentStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::ComponentState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findComponentStates();
  jresult = new std::vector< OSCLib::Data::OSCP::ComponentState >((const std::vector< OSCLib::Data::OSCP::ComponentState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findEnsembleContextStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findEnsembleContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::EnsembleContextState >((const std::vector< OSCLib::Data::OSCP::EnsembleContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findEnumStringMetricStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnumStringMetricState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findEnumStringMetricStates();
  jresult = new std::vector< OSCLib::Data::OSCP::EnumStringMetricState >((const std::vector< OSCLib::Data::OSCP::EnumStringMetricState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findHydraMDSStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::HydraMDSState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findHydraMDSStates();
  jresult = new std::vector< OSCLib::Data::OSCP::HydraMDSState >((const std::vector< OSCLib::Data::OSCP::HydraMDSState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findLimitAlertConditionStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findLimitAlertConditionStates();
  jresult = new std::vector< OSCLib::Data::OSCP::LimitAlertConditionState >((const std::vector< OSCLib::Data::OSCP::LimitAlertConditionState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findLocationContextStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findLocationContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::LocationContextState >((const std::vector< OSCLib::Data::OSCP::LocationContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findNumericMetricStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::NumericMetricState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findNumericMetricStates();
  jresult = new std::vector< OSCLib::Data::OSCP::NumericMetricState >((const std::vector< OSCLib::Data::OSCP::NumericMetricState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findOperatorContextStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findOperatorContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::OperatorContextState >((const std::vector< OSCLib::Data::OSCP::OperatorContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findPatientContextStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findPatientContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::PatientContextState >((const std::vector< OSCLib::Data::OSCP::PatientContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findRealTimeSampleArrayMetricStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findRealTimeSampleArrayMetricStates();
  jresult = new std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState >((const std::vector< OSCLib::Data::OSCP::RealTimeSampleArrayMetricState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findStringMetricStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::StringMetricState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findStringMetricStates();
  jresult = new std::vector< OSCLib::Data::OSCP::StringMetricState >((const std::vector< OSCLib::Data::OSCP::StringMetricState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_findWorkflowContextStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  result = ((OSCLib::Data::OSCP::MDState const *)arg1)->findWorkflowContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::WorkflowContextState >((const std::vector< OSCLib::Data::OSCP::WorkflowContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::ClockState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ClockState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::ClockState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::ComponentState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ComponentState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ComponentState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::ComponentState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_7(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocationContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::LocationContextState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_8(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_9(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::HydraMDSState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::HydraMDSState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::HydraMDSState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_10(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_11(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::OperationState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperationState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::OperationState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_12(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperatorContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::OperatorContextState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_13(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PatientContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::PatientContextState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_14(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_15(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDState_addState__SWIG_16(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MDState *arg1 = (OSCLib::Data::OSCP::MDState *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::MDState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MDState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MDState *) &(arg1)->addState((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Measure__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::Measure *result = 0 ;
  
  result = (OSCLib::Data::OSCP::Measure *)new OSCLib::Data::OSCP::Measure();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Measure__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Measure *arg1 = 0 ;
  OSCLib::Data::OSCP::Measure *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Measure *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Measure const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Measure *)new OSCLib::Data::OSCP::Measure((OSCLib::Data::OSCP::Measure const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Measure(void * jarg1) {
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Measure *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Measure_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  OSCLib::Data::OSCP::Measure *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Measure *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Measure *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Measure const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Measure const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Measure_setMeasurementUnit(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::Measure *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Measure *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Measure *) &(arg1)->setMeasurementUnit((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Measure_getMeasurementUnit(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::Measure *)jarg1; 
  result = ((OSCLib::Data::OSCP::Measure const *)arg1)->getMeasurementUnit();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Measure_setMeasuredValue(void * jarg1, double jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::Measure *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Measure *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Measure *) &(arg1)->setMeasuredValue((double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Measure_getMeasuredValue(void * jarg1) {
  double jresult ;
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  double result;
  
  arg1 = (OSCLib::Data::OSCP::Measure *)jarg1; 
  result = (double)((OSCLib::Data::OSCP::Measure const *)arg1)->getMeasuredValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Measure_hasMeasuredValue(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Measure *arg1 = (OSCLib::Data::OSCP::Measure *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::Measure *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Measure const *)arg1)->hasMeasuredValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeasurementState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::MeasurementState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::MeasurementState *)new OSCLib::Data::OSCP::MeasurementState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeasurementState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = 0 ;
  OSCLib::Data::OSCP::MeasurementState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MeasurementState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::MeasurementState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::MeasurementState *)new OSCLib::Data::OSCP::MeasurementState((OSCLib::Data::OSCP::MeasurementState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeasurementState(void * jarg1) {
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MeasurementState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeasurementState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MeasurementState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::MeasurementState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::MeasurementState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::MeasurementState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeasurementState_setValidity(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  OSCLib::Data::OSCP::MetricMeasurementValidity *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricMeasurementValidity temp2 ;
  OSCLib::Data::OSCP::MeasurementState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MeasurementState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricMeasurementValidity)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::MeasurementState *) &(arg1)->setValidity((OSCLib::Data::OSCP::MetricMeasurementValidity const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeasurementState_getValidity(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  OSCLib::Data::OSCP::MetricMeasurementValidity result;
  
  arg1 = (OSCLib::Data::OSCP::MeasurementState *)jarg1; 
  result = (OSCLib::Data::OSCP::MetricMeasurementValidity)((OSCLib::Data::OSCP::MeasurementState const *)arg1)->getValidity();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeasurementState_setMode(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  OSCLib::Data::OSCP::GenerationMode *arg2 = 0 ;
  OSCLib::Data::OSCP::GenerationMode temp2 ;
  OSCLib::Data::OSCP::MeasurementState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MeasurementState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::GenerationMode)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::MeasurementState *) &(arg1)->setMode((OSCLib::Data::OSCP::GenerationMode const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeasurementState_getMode(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  OSCLib::Data::OSCP::GenerationMode result;
  
  arg1 = (OSCLib::Data::OSCP::MeasurementState *)jarg1; 
  result = (OSCLib::Data::OSCP::GenerationMode)((OSCLib::Data::OSCP::MeasurementState const *)arg1)->getMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeasurementState_hasMode(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MeasurementState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::MeasurementState const *)arg1)->hasMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeasurementState_setQI(void * jarg1, double jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::MeasurementState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::MeasurementState *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::MeasurementState *) &(arg1)->setQI((double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MeasurementState_getQI(void * jarg1) {
  double jresult ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  double result;
  
  arg1 = (OSCLib::Data::OSCP::MeasurementState *)jarg1; 
  result = (double)((OSCLib::Data::OSCP::MeasurementState const *)arg1)->getQI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeasurementState_hasQI(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::MeasurementState *arg1 = (OSCLib::Data::OSCP::MeasurementState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::MeasurementState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::MeasurementState const *)arg1)->hasQI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NumericMetricDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *)new OSCLib::Data::OSCP::NumericMetricDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NumericMetricDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *)new OSCLib::Data::OSCP::NumericMetricDescriptor((OSCLib::Data::OSCP::NumericMetricDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NumericMetricDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::NumericMetricDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NumericMetricDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NumericMetricDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_setUnit(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setUnit((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_getUnit(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getUnit();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_setMetricCategory(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricCategory temp2 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricCategory)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setMetricCategory((OSCLib::Data::OSCP::MetricCategory const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NumericMetricDescriptor_getMetricCategory(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::MetricCategory)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getMetricCategory();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_setAvailability(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricAvailability temp2 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricAvailability)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setAvailability((OSCLib::Data::OSCP::MetricAvailability const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NumericMetricDescriptor_getAvailability(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::MetricAvailability)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getAvailability();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_setMaxDelayTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setMaxDelayTime((OSCLib::Data::OSCP::Duration const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_getMaxDelayTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getMaxDelayTime();
  jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricDescriptor_hasMaxDelayTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->hasMaxDelayTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_addBodySite(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->addBodySite((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_getBodySites(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getBodySites();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_setResolution(void * jarg1, double jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setResolution((double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NumericMetricDescriptor_getResolution(void * jarg1) {
  double jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  double result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = (double)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getResolution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_setMeasurePeriod(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setMeasurePeriod((OSCLib::Data::OSCP::Duration const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_getMeasurePeriod(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getMeasurePeriod();
  jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricDescriptor_hasMeasurePeriod(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->hasMeasurePeriod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_setAveragingPeriod(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->setAveragingPeriod((OSCLib::Data::OSCP::Duration const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_getAveragingPeriod(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getAveragingPeriod();
  jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricDescriptor_hasAveragingPeriod(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->hasAveragingPeriod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_addTechnicalRange(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Range *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Range const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricDescriptor *) &(arg1)->addTechnicalRange((OSCLib::Data::OSCP::Range const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricDescriptor_getTechnicalRanges(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range > result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricDescriptor const *)arg1)->getTechnicalRanges();
  jresult = new std::vector< OSCLib::Data::OSCP::Range >((const std::vector< OSCLib::Data::OSCP::Range > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NumericMetricState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::NumericMetricState *)new OSCLib::Data::OSCP::NumericMetricState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NumericMetricState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricState *)new OSCLib::Data::OSCP::NumericMetricState((OSCLib::Data::OSCP::NumericMetricState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NumericMetricState(void * jarg1) {
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NumericMetricState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NumericMetricState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getStateVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_setComponentActivationState(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentActivation temp2 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::ComponentActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setComponentActivationState((OSCLib::Data::OSCP::ComponentActivation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NumericMetricState_getComponentActivationState(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = (OSCLib::Data::OSCP::ComponentActivation)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getComponentActivationState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricState_hasComponentActivationState(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasComponentActivationState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_setCalibrationInfo(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CalibrationInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setCalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_getCalibrationInfo(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getCalibrationInfo();
  jresult = new OSCLib::Data::OSCP::CalibrationInfo((const OSCLib::Data::OSCP::CalibrationInfo &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricState_hasCalibrationInfo(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasCalibrationInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_setOperatingHours(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setOperatingHours((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NumericMetricState_getOperatingHours(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getOperatingHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricState_hasOperatingHours(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasOperatingHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_setOperatingCycles(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setOperatingCycles((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NumericMetricState_getOperatingCycles(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getOperatingCycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricState_hasOperatingCycles(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasOperatingCycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_setObservedValue(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->setObservedValue((OSCLib::Data::OSCP::NumericMetricValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_getObservedValue(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::NumericMetricValue result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getObservedValue();
  jresult = new OSCLib::Data::OSCP::NumericMetricValue((const OSCLib::Data::OSCP::NumericMetricValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricState_hasObservedValue(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->hasObservedValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_addPhysiologicalRange(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  OSCLib::Data::OSCP::Range *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Range const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricState *) &(arg1)->addPhysiologicalRange((OSCLib::Data::OSCP::Range const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricState_getPhysiologicalRanges(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricState *arg1 = (OSCLib::Data::OSCP::NumericMetricState *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range > result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricState const *)arg1)->getPhysiologicalRanges();
  jresult = new std::vector< OSCLib::Data::OSCP::Range >((const std::vector< OSCLib::Data::OSCP::Range > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NumericMetricValue__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  result = (OSCLib::Data::OSCP::NumericMetricValue *)new OSCLib::Data::OSCP::NumericMetricValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NumericMetricValue__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricValue *)new OSCLib::Data::OSCP::NumericMetricValue((OSCLib::Data::OSCP::NumericMetricValue const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NumericMetricValue(void * jarg1) {
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NumericMetricValue_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricValue const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::NumericMetricValue const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricValue_setMeasurementState(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::MeasurementState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::MeasurementState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricValue *) &(arg1)->setMeasurementState((OSCLib::Data::OSCP::MeasurementState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricValue_getMeasurementState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::MeasurementState result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getMeasurementState();
  jresult = new OSCLib::Data::OSCP::MeasurementState((const OSCLib::Data::OSCP::MeasurementState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricValue_setStart_Time(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricValue *) &(arg1)->setStart_Time((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricValue_getStart_Time(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getStart_Time();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricValue_hasStart_Time(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->hasStart_Time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricValue_setStop_Time(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricValue *) &(arg1)->setStop_Time((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricValue_getStop_Time(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getStop_Time();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricValue_hasStop_Time(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->hasStop_Time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricValue_setObservationTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::NumericMetricValue *) &(arg1)->setObservationTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricValue_getObservationTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getObservationTime();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricValue_hasObservationTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->hasObservationTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NumericMetricValue_setValue(void * jarg1, double jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::NumericMetricValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::NumericMetricValue *) &(arg1)->setValue((double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NumericMetricValue_getValue(void * jarg1) {
  double jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  double result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  result = (double)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->getValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NumericMetricValue_hasValue(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::NumericMetricValue *arg1 = (OSCLib::Data::OSCP::NumericMetricValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::NumericMetricValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::NumericMetricValue const *)arg1)->hasValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperationInvocationContext_none() {
  void * jresult ;
  SwigValueWrapper< OSCLib::Data::OSCP::OperationInvocationContext > result;
  
  result = OSCLib::Data::OSCP::OperationInvocationContext::none();
  jresult = new OSCLib::Data::OSCP::OperationInvocationContext((const OSCLib::Data::OSCP::OperationInvocationContext &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OperationInvocationContext(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  OSCLib::Data::OSCP::OperationInvocationContext *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (unsigned int)jarg2; 
  result = (OSCLib::Data::OSCP::OperationInvocationContext *)new OSCLib::Data::OSCP::OperationInvocationContext((std::string const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OperationInvocationContext(void * jarg1) {
  OSCLib::Data::OSCP::OperationInvocationContext *arg1 = (OSCLib::Data::OSCP::OperationInvocationContext *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OperationInvocationContext_operationHandle_get(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg1 = (OSCLib::Data::OSCP::OperationInvocationContext *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg1; 
  result = (std::string *) & ((arg1)->operationHandle);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OperationInvocationContext_transactionId_get(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg1 = (OSCLib::Data::OSCP::OperationInvocationContext *) 0 ;
  unsigned int result;
  
  arg1 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg1; 
  result = (unsigned int)(unsigned int) ((arg1)->transactionId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OperationState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::OperationState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OperationState *)new OSCLib::Data::OSCP::OperationState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OperationState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperationState *arg1 = 0 ;
  OSCLib::Data::OSCP::OperationState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperationState *)new OSCLib::Data::OSCP::OperationState((OSCLib::Data::OSCP::OperationState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OperationState(void * jarg1) {
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperationState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  OSCLib::Data::OSCP::OperationState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperationState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::OperationState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperationState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::OperationState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OperationState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperationState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OperationState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperationState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperationState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::OperationState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OperationState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperationState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperationState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperationState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperationState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperationState const *)arg1)->getStateVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OperationState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperationState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperationState_setOperatingMode(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  OSCLib::Data::OSCP::OperatingMode *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatingMode temp2 ;
  OSCLib::Data::OSCP::OperationState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::OperatingMode)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::OperationState *) &(arg1)->setOperatingMode((OSCLib::Data::OSCP::OperatingMode const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OperationState_getOperatingMode(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::OperationState *arg1 = (OSCLib::Data::OSCP::OperationState *) 0 ;
  OSCLib::Data::OSCP::OperatingMode result;
  
  arg1 = (OSCLib::Data::OSCP::OperationState *)jarg1; 
  result = (OSCLib::Data::OSCP::OperatingMode)((OSCLib::Data::OSCP::OperationState const *)arg1)->getOperatingMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OperatorContextDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OperatorContextDescriptor *)new OSCLib::Data::OSCP::OperatorContextDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OperatorContextDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextDescriptor *)new OSCLib::Data::OSCP::OperatorContextDescriptor((OSCLib::Data::OSCP::OperatorContextDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OperatorContextDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::OperatorContextDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OperatorContextDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::OperatorContextDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OperatorContextDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OperatorContextDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::OperatorContextDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OperatorContextDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OperatorContextDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OperatorContextState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OperatorContextState *)new OSCLib::Data::OSCP::OperatorContextState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OperatorContextState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *)new OSCLib::Data::OSCP::OperatorContextState((OSCLib::Data::OSCP::OperatorContextState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OperatorContextState(void * jarg1) {
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OperatorContextState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperatorContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::OperatorContextState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OperatorContextState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OperatorContextState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OperatorContextState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getStateVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OperatorContextState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_setContextAssociation(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation *arg2 = 0 ;
  OSCLib::Data::OSCP::ContextAssociation temp2 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::ContextAssociation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setContextAssociation((OSCLib::Data::OSCP::ContextAssociation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OperatorContextState_getContextAssociation(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = (OSCLib::Data::OSCP::ContextAssociation)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getContextAssociation();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OperatorContextState_hasContextAssociation(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->hasContextAssociation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_setBindingMDIBVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ReferencedVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ReferencedVersion const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setBindingMDIBVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_getBindingMDIBVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getBindingMDIBVersion();
  jresult = new OSCLib::Data::OSCP::ReferencedVersion((const OSCLib::Data::OSCP::ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_setUnbindingMDIBVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ReferencedVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ReferencedVersion const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setUnbindingMDIBVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_getUnbindingMDIBVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getUnbindingMDIBVersion();
  jresult = new OSCLib::Data::OSCP::ReferencedVersion((const OSCLib::Data::OSCP::ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OperatorContextState_hasUnbindingMDIBVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->hasUnbindingMDIBVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_setBindingStartTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setBindingStartTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_getBindingStartTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getBindingStartTime();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OperatorContextState_hasBindingStartTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->hasBindingStartTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_setBindingEndTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->setBindingEndTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_getBindingEndTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getBindingEndTime();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OperatorContextState_hasBindingEndTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->hasBindingEndTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_addValidator(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->addValidator((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_getValidators(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getValidators();
  jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_addIdentification(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OperatorContextState *) &(arg1)->addIdentification((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OperatorContextState_getIdentifications(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OperatorContextState *arg1 = (OSCLib::Data::OSCP::OperatorContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  arg1 = (OSCLib::Data::OSCP::OperatorContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::OperatorContextState const *)arg1)->getIdentifications();
  jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OrderDetail__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::OrderDetail *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OrderDetail *)new OSCLib::Data::OSCP::OrderDetail();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OrderDetail__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = 0 ;
  OSCLib::Data::OSCP::OrderDetail *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OrderDetail const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OrderDetail *)new OSCLib::Data::OSCP::OrderDetail((OSCLib::Data::OSCP::OrderDetail const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OrderDetail(void * jarg1) {
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OrderDetail_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OrderDetail *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OrderDetail const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::OrderDetail const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderDetail_setStart(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::DateTime *arg2 = 0 ;
  OSCLib::Data::OSCP::OrderDetail *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DateTime const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OrderDetail *) &(arg1)->setStart((OSCLib::Data::OSCP::DateTime const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderDetail_getStart(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::DateTime result;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1; 
  result = ((OSCLib::Data::OSCP::OrderDetail const *)arg1)->getStart();
  jresult = new OSCLib::Data::OSCP::DateTime((const OSCLib::Data::OSCP::DateTime &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OrderDetail_hasStart(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OrderDetail const *)arg1)->hasStart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderDetail_setEnd(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::DateTime *arg2 = 0 ;
  OSCLib::Data::OSCP::OrderDetail *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DateTime const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OrderDetail *) &(arg1)->setEnd((OSCLib::Data::OSCP::DateTime const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderDetail_getEnd(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::DateTime result;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1; 
  result = ((OSCLib::Data::OSCP::OrderDetail const *)arg1)->getEnd();
  jresult = new OSCLib::Data::OSCP::DateTime((const OSCLib::Data::OSCP::DateTime &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OrderDetail_hasEnd(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::OrderDetail const *)arg1)->hasEnd();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderDetail_addPerformer(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::PersonParticipation *arg2 = 0 ;
  OSCLib::Data::OSCP::OrderDetail *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PersonParticipation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PersonParticipation const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OrderDetail *) &(arg1)->addPerformer((OSCLib::Data::OSCP::PersonParticipation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderDetail_getPerformers(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  std::vector< OSCLib::Data::OSCP::PersonParticipation > result;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1; 
  result = ((OSCLib::Data::OSCP::OrderDetail const *)arg1)->getPerformers();
  jresult = new std::vector< OSCLib::Data::OSCP::PersonParticipation >((const std::vector< OSCLib::Data::OSCP::PersonParticipation > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderDetail_addService(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::OrderDetail *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OrderDetail *) &(arg1)->addService((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderDetail_getServices(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OrderDetail *arg1 = (OSCLib::Data::OSCP::OrderDetail *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::OrderDetail *)jarg1; 
  result = ((OSCLib::Data::OSCP::OrderDetail const *)arg1)->getServices();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Order__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  result = (OSCLib::Data::OSCP::Order *)new OSCLib::Data::OSCP::Order();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Order__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Order const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *)new OSCLib::Data::OSCP::Order((OSCLib::Data::OSCP::Order const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Order(void * jarg1) {
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Order_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::Order *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Order *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Order const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Order const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_setVisitNumber(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setVisitNumber((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_getVisitNumber(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getVisitNumber();
  jresult = new OSCLib::Data::OSCP::InstanceIdentifier((const OSCLib::Data::OSCP::InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Order_hasVisitNumber(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->hasVisitNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_setPlacerOrderNumber(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setPlacerOrderNumber((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_getPlacerOrderNumber(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getPlacerOrderNumber();
  jresult = new OSCLib::Data::OSCP::InstanceIdentifier((const OSCLib::Data::OSCP::InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_setFillerOrderNumber(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setFillerOrderNumber((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_getFillerOrderNumber(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getFillerOrderNumber();
  jresult = new OSCLib::Data::OSCP::InstanceIdentifier((const OSCLib::Data::OSCP::InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Order_hasFillerOrderNumber(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->hasFillerOrderNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_setPatient(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PersonReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PersonReference const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setPatient((OSCLib::Data::OSCP::PersonReference const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_getPatient(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getPatient();
  jresult = new OSCLib::Data::OSCP::PersonReference((const OSCLib::Data::OSCP::PersonReference &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_setReferringPhysician(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PersonReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PersonReference const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setReferringPhysician((OSCLib::Data::OSCP::PersonReference const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_getReferringPhysician(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getReferringPhysician();
  jresult = new OSCLib::Data::OSCP::PersonReference((const OSCLib::Data::OSCP::PersonReference &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Order_hasReferringPhysician(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->hasReferringPhysician();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_setRequestingPhysician(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PersonReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PersonReference const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setRequestingPhysician((OSCLib::Data::OSCP::PersonReference const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_getRequestingPhysician(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::PersonReference result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getRequestingPhysician();
  jresult = new OSCLib::Data::OSCP::PersonReference((const OSCLib::Data::OSCP::PersonReference &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Order_hasRequestingPhysician(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->hasRequestingPhysician();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_setRequestedOrderDetail(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OrderDetail *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OrderDetail const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setRequestedOrderDetail((OSCLib::Data::OSCP::OrderDetail const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_getRequestedOrderDetail(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::OrderDetail result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getRequestedOrderDetail();
  jresult = new OSCLib::Data::OSCP::OrderDetail((const OSCLib::Data::OSCP::OrderDetail &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Order_hasRequestedOrderDetail(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->hasRequestedOrderDetail();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_setPerformedOrderDetail(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::OrderDetail *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OrderDetail *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OrderDetail const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->setPerformedOrderDetail((OSCLib::Data::OSCP::OrderDetail const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_getPerformedOrderDetail(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::OrderDetail result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getPerformedOrderDetail();
  jresult = new OSCLib::Data::OSCP::OrderDetail((const OSCLib::Data::OSCP::OrderDetail &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Order_hasPerformedOrderDetail(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Order const *)arg1)->hasPerformedOrderDetail();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_addReason(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClinicalInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->addReason((OSCLib::Data::OSCP::ClinicalInfo const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_getReasons(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getReasons();
  jresult = new std::vector< OSCLib::Data::OSCP::ClinicalInfo >((const std::vector< OSCLib::Data::OSCP::ClinicalInfo > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_addDangerCode(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->addDangerCode((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_getDangerCodes(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getDangerCodes();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_addRelevantClinicalInfo(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::ClinicalInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ClinicalInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClinicalInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->addRelevantClinicalInfo((OSCLib::Data::OSCP::ClinicalInfo const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_getRelevantClinicalInfos(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  std::vector< OSCLib::Data::OSCP::ClinicalInfo > result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getRelevantClinicalInfos();
  jresult = new std::vector< OSCLib::Data::OSCP::ClinicalInfo >((const std::vector< OSCLib::Data::OSCP::ClinicalInfo > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_addImagingProcedure(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  OSCLib::Data::OSCP::ImagingProcedure *arg2 = 0 ;
  OSCLib::Data::OSCP::Order *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ImagingProcedure *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ImagingProcedure const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Order *) &(arg1)->addImagingProcedure((OSCLib::Data::OSCP::ImagingProcedure const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_getImagingProcedures(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Order *arg1 = (OSCLib::Data::OSCP::Order *) 0 ;
  std::vector< OSCLib::Data::OSCP::ImagingProcedure > result;
  
  arg1 = (OSCLib::Data::OSCP::Order *)jarg1; 
  result = ((OSCLib::Data::OSCP::Order const *)arg1)->getImagingProcedures();
  jresult = new std::vector< OSCLib::Data::OSCP::ImagingProcedure >((const std::vector< OSCLib::Data::OSCP::ImagingProcedure > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PatientContextDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::PatientContextDescriptor *)new OSCLib::Data::OSCP::PatientContextDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PatientContextDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextDescriptor *)new OSCLib::Data::OSCP::PatientContextDescriptor((OSCLib::Data::OSCP::PatientContextDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PatientContextDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::PatientContextDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientContextDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::PatientContextDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PatientContextDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientContextDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::PatientContextDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PatientContextDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientContextDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PatientContextState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::PatientContextState *)new OSCLib::Data::OSCP::PatientContextState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PatientContextState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *)new OSCLib::Data::OSCP::PatientContextState((OSCLib::Data::OSCP::PatientContextState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PatientContextState(void * jarg1) {
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientContextState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PatientContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::PatientContextState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PatientContextState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientContextState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PatientContextState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getStateVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientContextState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_setContextAssociation(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation *arg2 = 0 ;
  OSCLib::Data::OSCP::ContextAssociation temp2 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::ContextAssociation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setContextAssociation((OSCLib::Data::OSCP::ContextAssociation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PatientContextState_getContextAssociation(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = (OSCLib::Data::OSCP::ContextAssociation)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getContextAssociation();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientContextState_hasContextAssociation(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasContextAssociation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_setBindingMDIBVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ReferencedVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ReferencedVersion const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setBindingMDIBVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_getBindingMDIBVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getBindingMDIBVersion();
  jresult = new OSCLib::Data::OSCP::ReferencedVersion((const OSCLib::Data::OSCP::ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_setUnbindingMDIBVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ReferencedVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ReferencedVersion const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setUnbindingMDIBVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_getUnbindingMDIBVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getUnbindingMDIBVersion();
  jresult = new OSCLib::Data::OSCP::ReferencedVersion((const OSCLib::Data::OSCP::ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientContextState_hasUnbindingMDIBVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasUnbindingMDIBVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_setBindingStartTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setBindingStartTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_getBindingStartTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getBindingStartTime();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientContextState_hasBindingStartTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasBindingStartTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_setBindingEndTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setBindingEndTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_getBindingEndTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getBindingEndTime();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientContextState_hasBindingEndTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasBindingEndTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_addValidator(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->addValidator((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_getValidators(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getValidators();
  jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_addIdentification(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->addIdentification((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_getIdentifications(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getIdentifications();
  jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_setCoreData(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientDemographicsCoreData const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientContextState *) &(arg1)->setCoreData((OSCLib::Data::OSCP::PatientDemographicsCoreData const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientContextState_getCoreData(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientContextState const *)arg1)->getCoreData();
  jresult = new OSCLib::Data::OSCP::PatientDemographicsCoreData((const OSCLib::Data::OSCP::PatientDemographicsCoreData &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientContextState_hasCoreData(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientContextState *arg1 = (OSCLib::Data::OSCP::PatientContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientContextState const *)arg1)->hasCoreData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PatientDemographicsCoreData__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)new OSCLib::Data::OSCP::PatientDemographicsCoreData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PatientDemographicsCoreData__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientDemographicsCoreData const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)new OSCLib::Data::OSCP::PatientDemographicsCoreData((OSCLib::Data::OSCP::PatientDemographicsCoreData const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PatientDemographicsCoreData(void * jarg1) {
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PatientDemographicsCoreData_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientDemographicsCoreData const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::PatientDemographicsCoreData const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_setGivenname(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setGivenname((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PatientDemographicsCoreData_getGivenname(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getGivenname();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientDemographicsCoreData_hasGivenname(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasGivenname();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_setFamilyname(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setFamilyname((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PatientDemographicsCoreData_getFamilyname(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getFamilyname();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientDemographicsCoreData_hasFamilyname(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasFamilyname();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_setBirthname(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setBirthname((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PatientDemographicsCoreData_getBirthname(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getBirthname();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientDemographicsCoreData_hasBirthname(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasBirthname();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_setTitle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setTitle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PatientDemographicsCoreData_getTitle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getTitle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientDemographicsCoreData_hasTitle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasTitle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_addMiddlename(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->addMiddlename((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_getMiddlenames(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getMiddlenames();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_setSex(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Sex *arg2 = 0 ;
  OSCLib::Data::OSCP::Sex temp2 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::Sex)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setSex((OSCLib::Data::OSCP::Sex const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PatientDemographicsCoreData_getSex(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Sex result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = (OSCLib::Data::OSCP::Sex)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getSex();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientDemographicsCoreData_hasSex(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasSex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_setPatientType(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::PatientType *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientType temp2 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::PatientType)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setPatientType((OSCLib::Data::OSCP::PatientType const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PatientDemographicsCoreData_getPatientType(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::PatientType result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = (OSCLib::Data::OSCP::PatientType)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getPatientType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientDemographicsCoreData_hasPatientType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasPatientType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_setDateOfBirth(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::DateTime *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::DateTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::DateTime const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setDateOfBirth((OSCLib::Data::OSCP::DateTime const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_getDateOfBirth(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::DateTime result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getDateOfBirth();
  jresult = new OSCLib::Data::OSCP::DateTime((const OSCLib::Data::OSCP::DateTime &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientDemographicsCoreData_hasDateOfBirth(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasDateOfBirth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_setHeight(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Measure *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Measure *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Measure const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setHeight((OSCLib::Data::OSCP::Measure const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_getHeight(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Measure result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getHeight();
  jresult = new OSCLib::Data::OSCP::Measure((const OSCLib::Data::OSCP::Measure &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientDemographicsCoreData_hasHeight(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_setWeight(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Measure *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Measure *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Measure const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setWeight((OSCLib::Data::OSCP::Measure const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_getWeight(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::Measure result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getWeight();
  jresult = new OSCLib::Data::OSCP::Measure((const OSCLib::Data::OSCP::Measure &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientDemographicsCoreData_hasWeight(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasWeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_setRace(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) &(arg1)->setRace((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PatientDemographicsCoreData_getRace(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = ((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->getRace();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PatientDemographicsCoreData_hasRace(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::PatientDemographicsCoreData *arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::PatientDemographicsCoreData *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::PatientDemographicsCoreData const *)arg1)->hasRace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PersonParticipation__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::PersonParticipation *result = 0 ;
  
  result = (OSCLib::Data::OSCP::PersonParticipation *)new OSCLib::Data::OSCP::PersonParticipation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PersonParticipation__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PersonParticipation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PersonParticipation const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonParticipation *)new OSCLib::Data::OSCP::PersonParticipation((OSCLib::Data::OSCP::PersonParticipation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PersonParticipation(void * jarg1) {
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PersonParticipation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonParticipation_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  OSCLib::Data::OSCP::PersonParticipation *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PersonParticipation *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PersonParticipation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PersonParticipation const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::PersonParticipation const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonParticipation_addName(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg2 = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PersonParticipation *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::BaseDemographics *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::BaseDemographics const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonParticipation *) &(arg1)->addName((OSCLib::Data::OSCP::BaseDemographics const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonParticipation_getNames(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > result;
  
  arg1 = (OSCLib::Data::OSCP::PersonParticipation *)jarg1; 
  result = ((OSCLib::Data::OSCP::PersonParticipation const *)arg1)->getNames();
  jresult = new std::vector< OSCLib::Data::OSCP::BaseDemographics >((const std::vector< OSCLib::Data::OSCP::BaseDemographics > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonParticipation_addRole(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PersonParticipation *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonParticipation *) &(arg1)->addRole((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonParticipation_getRoles(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::PersonParticipation *)jarg1; 
  result = ((OSCLib::Data::OSCP::PersonParticipation const *)arg1)->getRoles();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonParticipation_addIdentification(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::PersonParticipation *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PersonParticipation *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonParticipation *) &(arg1)->addIdentification((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonParticipation_getIdentifications(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonParticipation *arg1 = (OSCLib::Data::OSCP::PersonParticipation *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  arg1 = (OSCLib::Data::OSCP::PersonParticipation *)jarg1; 
  result = ((OSCLib::Data::OSCP::PersonParticipation const *)arg1)->getIdentifications();
  jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PersonReference__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::PersonReference *result = 0 ;
  
  result = (OSCLib::Data::OSCP::PersonReference *)new OSCLib::Data::OSCP::PersonReference();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PersonReference__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonReference *arg1 = 0 ;
  OSCLib::Data::OSCP::PersonReference *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PersonReference *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PersonReference const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonReference *)new OSCLib::Data::OSCP::PersonReference((OSCLib::Data::OSCP::PersonReference const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PersonReference(void * jarg1) {
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PersonReference *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersonReference_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  OSCLib::Data::OSCP::PersonReference *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PersonReference *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PersonReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PersonReference const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::PersonReference const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonReference_addName(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  OSCLib::Data::OSCP::BaseDemographics *arg2 = 0 ;
  OSCLib::Data::OSCP::PersonReference *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PersonReference *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::BaseDemographics *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::BaseDemographics const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonReference *) &(arg1)->addName((OSCLib::Data::OSCP::BaseDemographics const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonReference_getNames(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  std::vector< OSCLib::Data::OSCP::BaseDemographics > result;
  
  arg1 = (OSCLib::Data::OSCP::PersonReference *)jarg1; 
  result = ((OSCLib::Data::OSCP::PersonReference const *)arg1)->getNames();
  jresult = new std::vector< OSCLib::Data::OSCP::BaseDemographics >((const std::vector< OSCLib::Data::OSCP::BaseDemographics > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonReference_addIdentification(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::PersonReference *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::PersonReference *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::PersonReference *) &(arg1)->addIdentification((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersonReference_getIdentifications(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::PersonReference *arg1 = (OSCLib::Data::OSCP::PersonReference *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  arg1 = (OSCLib::Data::OSCP::PersonReference *)jarg1; 
  result = ((OSCLib::Data::OSCP::PersonReference const *)arg1)->getIdentifications();
  jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProductionSpecification__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::ProductionSpecification *result = 0 ;
  
  result = (OSCLib::Data::OSCP::ProductionSpecification *)new OSCLib::Data::OSCP::ProductionSpecification();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProductionSpecification__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ProductionSpecification const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ProductionSpecification *)new OSCLib::Data::OSCP::ProductionSpecification((OSCLib::Data::OSCP::ProductionSpecification const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProductionSpecification(void * jarg1) {
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProductionSpecification_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ProductionSpecification const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ProductionSpecification const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProductionSpecification_setspecType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ProductionSpecification *) &(arg1)->setspecType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProductionSpecification_getspecType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg1; 
  result = ((OSCLib::Data::OSCP::ProductionSpecification const *)arg1)->getspecType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProductionSpecification_setproductionSpec(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::ProductionSpecification *) &(arg1)->setproductionSpec((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ProductionSpecification_getproductionSpec(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg1; 
  result = ((OSCLib::Data::OSCP::ProductionSpecification const *)arg1)->getproductionSpec();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProductionSpecification_setcomponentId(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ProductionSpecification *) &(arg1)->setcomponentId((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProductionSpecification_getcomponentId(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier result;
  
  arg1 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg1; 
  result = ((OSCLib::Data::OSCP::ProductionSpecification const *)arg1)->getcomponentId();
  jresult = new OSCLib::Data::OSCP::InstanceIdentifier((const OSCLib::Data::OSCP::InstanceIdentifier &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProductionSpecification_hascomponentId(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::ProductionSpecification *arg1 = (OSCLib::Data::OSCP::ProductionSpecification *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::ProductionSpecification const *)arg1)->hascomponentId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Range__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::Range *result = 0 ;
  
  result = (OSCLib::Data::OSCP::Range *)new OSCLib::Data::OSCP::Range();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Range__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Range *arg1 = 0 ;
  OSCLib::Data::OSCP::Range *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Range const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Range *)new OSCLib::Data::OSCP::Range((OSCLib::Data::OSCP::Range const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Range(void * jarg1) {
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  OSCLib::Data::OSCP::Range *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Range const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Range const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Range_setLower(void * jarg1, double jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::Range *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Range *) &(arg1)->setLower((double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Range_getLower(void * jarg1) {
  double jresult ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double result;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1; 
  result = (double)((OSCLib::Data::OSCP::Range const *)arg1)->getLower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Range_hasLower(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Range const *)arg1)->hasLower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Range_setUpper(void * jarg1, double jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::Range *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Range *) &(arg1)->setUpper((double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Range_getUpper(void * jarg1) {
  double jresult ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double result;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1; 
  result = (double)((OSCLib::Data::OSCP::Range const *)arg1)->getUpper();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Range_hasUpper(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Range const *)arg1)->hasUpper();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Range_setStepWidth(void * jarg1, double jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::Range *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Range *) &(arg1)->setStepWidth((double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Range_getStepWidth(void * jarg1) {
  double jresult ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  double result;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1; 
  result = (double)((OSCLib::Data::OSCP::Range const *)arg1)->getStepWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Range_hasStepWidth(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::Range *arg1 = (OSCLib::Data::OSCP::Range *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::Range *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::Range const *)arg1)->hasStepWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealTimeSampleArrayMetricDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)new OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealTimeSampleArrayMetricDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)new OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RealTimeSampleArrayMetricDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_setUnit(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setUnit((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_getUnit(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getUnit();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_setMetricCategory(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricCategory temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricCategory)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setMetricCategory((OSCLib::Data::OSCP::MetricCategory const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_getMetricCategory(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::MetricCategory)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getMetricCategory();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_setAvailability(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricAvailability temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricAvailability)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setAvailability((OSCLib::Data::OSCP::MetricAvailability const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_getAvailability(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::MetricAvailability)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getAvailability();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_setMaxDelayTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setMaxDelayTime((OSCLib::Data::OSCP::Duration const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_getMaxDelayTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getMaxDelayTime();
  jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_hasMaxDelayTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->hasMaxDelayTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_addBodySite(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->addBodySite((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_getBodySites(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getBodySites();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_setSamplePeriod(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setSamplePeriod((OSCLib::Data::OSCP::Duration const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_getSamplePeriod(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getSamplePeriod();
  jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_setResolution(void * jarg1, double jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->setResolution((double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_getResolution(void * jarg1) {
  double jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  double result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = (double)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getResolution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_addTechnicalRange(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Range *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Range const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) &(arg1)->addTechnicalRange((OSCLib::Data::OSCP::Range const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricDescriptor_getTechnicalRanges(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::Range > result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricDescriptor const *)arg1)->getTechnicalRanges();
  jresult = new std::vector< OSCLib::Data::OSCP::Range >((const std::vector< OSCLib::Data::OSCP::Range > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealTimeSampleArrayMetricState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)new OSCLib::Data::OSCP::RealTimeSampleArrayMetricState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealTimeSampleArrayMetricState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)new OSCLib::Data::OSCP::RealTimeSampleArrayMetricState((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RealTimeSampleArrayMetricState(void * jarg1) {
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getStateVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_setComponentActivationState(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentActivation temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::ComponentActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setComponentActivationState((OSCLib::Data::OSCP::ComponentActivation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_getComponentActivationState(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = (OSCLib::Data::OSCP::ComponentActivation)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getComponentActivationState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_hasComponentActivationState(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasComponentActivationState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_setCalibrationInfo(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CalibrationInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setCalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_getCalibrationInfo(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getCalibrationInfo();
  jresult = new OSCLib::Data::OSCP::CalibrationInfo((const OSCLib::Data::OSCP::CalibrationInfo &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_hasCalibrationInfo(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasCalibrationInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_setOperatingHours(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setOperatingHours((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_getOperatingHours(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getOperatingHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_hasOperatingHours(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasOperatingHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_setOperatingCycles(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setOperatingCycles((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_getOperatingCycles(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getOperatingCycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_hasOperatingCycles(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasOperatingCycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_setObservedValue(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) &(arg1)->setObservedValue((OSCLib::Data::OSCP::RealTimeSampleArrayValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_getObservedValue(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->getObservedValue();
  jresult = new OSCLib::Data::OSCP::RealTimeSampleArrayValue((const OSCLib::Data::OSCP::RealTimeSampleArrayValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayMetricState_hasObservedValue(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const *)arg1)->hasObservedValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealTimeSampleArrayValue__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)new OSCLib::Data::OSCP::RealTimeSampleArrayValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealTimeSampleArrayValue__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)new OSCLib::Data::OSCP::RealTimeSampleArrayValue((OSCLib::Data::OSCP::RealTimeSampleArrayValue const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RealTimeSampleArrayValue(void * jarg1) {
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealTimeSampleArrayValue_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayValue const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::RealTimeSampleArrayValue const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayValue_setMeasurementState(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::MeasurementState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::MeasurementState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) &(arg1)->setMeasurementState((OSCLib::Data::OSCP::MeasurementState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayValue_getMeasurementState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::MeasurementState result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getMeasurementState();
  jresult = new OSCLib::Data::OSCP::MeasurementState((const OSCLib::Data::OSCP::MeasurementState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayValue_setStart_Time(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) &(arg1)->setStart_Time((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayValue_getStart_Time(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getStart_Time();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayValue_hasStart_Time(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->hasStart_Time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayValue_setStop_Time(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) &(arg1)->setStop_Time((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayValue_getStop_Time(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getStop_Time();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayValue_hasStop_Time(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->hasStop_Time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayValue_setObservationTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) &(arg1)->setObservationTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayValue_getObservationTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getObservationTime();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayValue_hasObservationTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->hasObservationTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayValue_setSamples(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::RTValueType *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RTValueType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RTValueType const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) &(arg1)->setSamples((OSCLib::Data::OSCP::RTValueType const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayValue_getSamples(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::RTValueType result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getSamples();
  jresult = new OSCLib::Data::OSCP::RTValueType((const OSCLib::Data::OSCP::RTValueType &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealTimeSampleArrayValue_hasSamples(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->hasSamples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayValue_addAnnotation(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  OSCLib::Data::OSCP::Annotation *arg2 = 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Annotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Annotation const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) &(arg1)->addAnnotation((OSCLib::Data::OSCP::Annotation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealTimeSampleArrayValue_getAnnotations(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RealTimeSampleArrayValue *arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *) 0 ;
  std::vector< OSCLib::Data::OSCP::Annotation > result;
  
  arg1 = (OSCLib::Data::OSCP::RealTimeSampleArrayValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::RealTimeSampleArrayValue const *)arg1)->getAnnotations();
  jresult = new std::vector< OSCLib::Data::OSCP::Annotation >((const std::vector< OSCLib::Data::OSCP::Annotation > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ReferencedVersion__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::ReferencedVersion *result = 0 ;
  
  result = (OSCLib::Data::OSCP::ReferencedVersion *)new OSCLib::Data::OSCP::ReferencedVersion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ReferencedVersion__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::ReferencedVersion *arg1 = 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ReferencedVersion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ReferencedVersion const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::ReferencedVersion *)new OSCLib::Data::OSCP::ReferencedVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ReferencedVersion(void * jarg1) {
  OSCLib::Data::OSCP::ReferencedVersion *arg1 = (OSCLib::Data::OSCP::ReferencedVersion *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ReferencedVersion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReferencedVersion_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::ReferencedVersion *arg1 = (OSCLib::Data::OSCP::ReferencedVersion *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ReferencedVersion *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ReferencedVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ReferencedVersion const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ReferencedVersion_get(void * jarg1) {
  long long jresult ;
  OSCLib::Data::OSCP::ReferencedVersion *arg1 = (OSCLib::Data::OSCP::ReferencedVersion *) 0 ;
  long long result;
  
  arg1 = (OSCLib::Data::OSCP::ReferencedVersion *)jarg1; 
  result = (long long)((OSCLib::Data::OSCP::ReferencedVersion const *)arg1)->get();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReferencedVersion_set(void * jarg1, long long jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::ReferencedVersion *arg1 = (OSCLib::Data::OSCP::ReferencedVersion *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  OSCLib::Data::OSCP::ReferencedVersion *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::ReferencedVersion *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::ReferencedVersion *) &(arg1)->set((long long const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RemedyInfo__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::RemedyInfo *result = 0 ;
  
  result = (OSCLib::Data::OSCP::RemedyInfo *)new OSCLib::Data::OSCP::RemedyInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RemedyInfo__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RemedyInfo *arg1 = 0 ;
  OSCLib::Data::OSCP::RemedyInfo *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RemedyInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RemedyInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RemedyInfo *)new OSCLib::Data::OSCP::RemedyInfo((OSCLib::Data::OSCP::RemedyInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RemedyInfo(void * jarg1) {
  OSCLib::Data::OSCP::RemedyInfo *arg1 = (OSCLib::Data::OSCP::RemedyInfo *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RemedyInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemedyInfo_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::RemedyInfo *arg1 = (OSCLib::Data::OSCP::RemedyInfo *) 0 ;
  OSCLib::Data::OSCP::RemedyInfo *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RemedyInfo *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RemedyInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RemedyInfo const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::RemedyInfo const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RemedyInfo_addDescription(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RemedyInfo *arg1 = (OSCLib::Data::OSCP::RemedyInfo *) 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::RemedyInfo *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RemedyInfo *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RemedyInfo *) &(arg1)->addDescription((OSCLib::Data::OSCP::LocalizedText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RemedyInfo_getDescriptions(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RemedyInfo *arg1 = (OSCLib::Data::OSCP::RemedyInfo *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  arg1 = (OSCLib::Data::OSCP::RemedyInfo *)jarg1; 
  result = ((OSCLib::Data::OSCP::RemedyInfo const *)arg1)->getDescriptions();
  jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RTValueType__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::RTValueType *result = 0 ;
  
  result = (OSCLib::Data::OSCP::RTValueType *)new OSCLib::Data::OSCP::RTValueType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RTValueType__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RTValueType *arg1 = 0 ;
  OSCLib::Data::OSCP::RTValueType *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RTValueType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RTValueType const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RTValueType *)new OSCLib::Data::OSCP::RTValueType((OSCLib::Data::OSCP::RTValueType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RTValueType(void * jarg1) {
  OSCLib::Data::OSCP::RTValueType *arg1 = (OSCLib::Data::OSCP::RTValueType *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RTValueType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RTValueType_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::RTValueType *arg1 = (OSCLib::Data::OSCP::RTValueType *) 0 ;
  OSCLib::Data::OSCP::RTValueType *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RTValueType *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RTValueType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RTValueType const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::RTValueType const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RTValueType_setValues(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::RTValueType *arg1 = (OSCLib::Data::OSCP::RTValueType *) 0 ;
  std::vector< double > *arg2 = 0 ;
  OSCLib::Data::OSCP::RTValueType *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::RTValueType *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::RTValueType *) &(arg1)->setValues((std::vector< double > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RTValueType_getValues(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::RTValueType *arg1 = (OSCLib::Data::OSCP::RTValueType *) 0 ;
  std::vector< double > result;
  
  arg1 = (OSCLib::Data::OSCP::RTValueType *)jarg1; 
  result = ((OSCLib::Data::OSCP::RTValueType const *)arg1)->getValues();
  jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SampleIndex__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::SampleIndex *result = 0 ;
  
  result = (OSCLib::Data::OSCP::SampleIndex *)new OSCLib::Data::OSCP::SampleIndex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SampleIndex__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SampleIndex *arg1 = 0 ;
  OSCLib::Data::OSCP::SampleIndex *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SampleIndex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SampleIndex const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SampleIndex *)new OSCLib::Data::OSCP::SampleIndex((OSCLib::Data::OSCP::SampleIndex const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SampleIndex(void * jarg1) {
  OSCLib::Data::OSCP::SampleIndex *arg1 = (OSCLib::Data::OSCP::SampleIndex *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SampleIndex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SampleIndex_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::SampleIndex *arg1 = (OSCLib::Data::OSCP::SampleIndex *) 0 ;
  OSCLib::Data::OSCP::SampleIndex *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SampleIndex *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SampleIndex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SampleIndex const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SampleIndex const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SampleIndex_get(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::SampleIndex *arg1 = (OSCLib::Data::OSCP::SampleIndex *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::SampleIndex *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::SampleIndex const *)arg1)->get();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SampleIndex_set(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SampleIndex *arg1 = (OSCLib::Data::OSCP::SampleIndex *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::SampleIndex *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SampleIndex *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SampleIndex *) &(arg1)->set((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SCODescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::SCODescriptor *)new OSCLib::Data::OSCP::SCODescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SCODescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SCODescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SCODescriptor *)new OSCLib::Data::OSCP::SCODescriptor((OSCLib::Data::OSCP::SCODescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SCODescriptor(void * jarg1) {
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCODescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::SCODescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SCODescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SCODescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SCODescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SCODescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SCODescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SCODescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SCODescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SCODescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SCODescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SCODescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SCODescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SCODescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_addProductionSpecification(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg2 = 0 ;
  OSCLib::Data::OSCP::SCODescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ProductionSpecification const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SCODescriptor *) &(arg1)->addProductionSpecification((OSCLib::Data::OSCP::ProductionSpecification const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_getProductionSpecifications(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->getProductionSpecifications();
  jresult = new std::vector< OSCLib::Data::OSCP::ProductionSpecification >((const std::vector< OSCLib::Data::OSCP::ProductionSpecification > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_collectAllActivateOperationDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->collectAllActivateOperationDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor >((const std::vector< OSCLib::Data::OSCP::ActivateOperationDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_collectAllSetAlertStateOperationDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->collectAllSetAlertStateOperationDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor >((const std::vector< OSCLib::Data::OSCP::SetAlertStateOperationDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_collectAllSetContextOperationDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->collectAllSetContextOperationDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor >((const std::vector< OSCLib::Data::OSCP::SetContextOperationDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_collectAllSetRangeOperationDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->collectAllSetRangeOperationDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor >((const std::vector< OSCLib::Data::OSCP::SetRangeOperationDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_collectAllSetStringOperationDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->collectAllSetStringOperationDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor >((const std::vector< OSCLib::Data::OSCP::SetStringOperationDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCODescriptor_collectAllSetValueOperationDescriptors(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SCODescriptor *arg1 = (OSCLib::Data::OSCP::SCODescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::SCODescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SCODescriptor const *)arg1)->collectAllSetValueOperationDescriptors();
  jresult = new std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor >((const std::vector< OSCLib::Data::OSCP::SetValueOperationDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetAlertStateOperationDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)new OSCLib::Data::OSCP::SetAlertStateOperationDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetAlertStateOperationDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)new OSCLib::Data::OSCP::SetAlertStateOperationDescriptor((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SetAlertStateOperationDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_setOperationTarget(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &(arg1)->setOperationTarget((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_getOperationTarget(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getOperationTarget();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_addModifiableElement(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) &(arg1)->addModifiableElement((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetAlertStateOperationDescriptor_getModifiableElements(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::SetAlertStateOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetAlertStateOperationDescriptor const *)arg1)->getModifiableElements();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetContextOperationDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)new OSCLib::Data::OSCP::SetContextOperationDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetContextOperationDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetContextOperationDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)new OSCLib::Data::OSCP::SetContextOperationDescriptor((OSCLib::Data::OSCP::SetContextOperationDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SetContextOperationDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetContextOperationDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetContextOperationDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SetContextOperationDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetContextOperationDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SetContextOperationDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetContextOperationDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetContextOperationDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetContextOperationDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptor_setOperationTarget(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &(arg1)->setOperationTarget((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SetContextOperationDescriptor_getOperationTarget(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getOperationTarget();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptor_addModifiableElement(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) &(arg1)->addModifiableElement((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetContextOperationDescriptor_getModifiableElements(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetContextOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::SetContextOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetContextOperationDescriptor const *)arg1)->getModifiableElements();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetRangeOperationDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)new OSCLib::Data::OSCP::SetRangeOperationDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetRangeOperationDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetRangeOperationDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)new OSCLib::Data::OSCP::SetRangeOperationDescriptor((OSCLib::Data::OSCP::SetRangeOperationDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SetRangeOperationDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRangeOperationDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetRangeOperationDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SetRangeOperationDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetRangeOperationDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetRangeOperationDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRangeOperationDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetRangeOperationDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_setOperationTarget(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->setOperationTarget((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_getOperationTarget(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getOperationTarget();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_addModifiableElement(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->addModifiableElement((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_getModifiableElements(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getModifiableElements();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_setAllowedMaxRange(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::Range *arg2 = 0 ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Range *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Range const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) &(arg1)->setAllowedMaxRange((OSCLib::Data::OSCP::Range const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetRangeOperationDescriptor_getAllowedMaxRange(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetRangeOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::Range result;
  
  arg1 = (OSCLib::Data::OSCP::SetRangeOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetRangeOperationDescriptor const *)arg1)->getAllowedMaxRange();
  jresult = new OSCLib::Data::OSCP::Range((const OSCLib::Data::OSCP::Range &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetStringOperationDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)new OSCLib::Data::OSCP::SetStringOperationDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetStringOperationDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetStringOperationDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)new OSCLib::Data::OSCP::SetStringOperationDescriptor((OSCLib::Data::OSCP::SetStringOperationDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SetStringOperationDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStringOperationDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetStringOperationDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SetStringOperationDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetStringOperationDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SetStringOperationDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetStringOperationDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetStringOperationDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetStringOperationDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptor_setOperationTarget(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &(arg1)->setOperationTarget((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SetStringOperationDescriptor_getOperationTarget(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getOperationTarget();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptor_addModifiableElement(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) &(arg1)->addModifiableElement((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetStringOperationDescriptor_getModifiableElements(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetStringOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::SetStringOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetStringOperationDescriptor const *)arg1)->getModifiableElements();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetValueOperationDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)new OSCLib::Data::OSCP::SetValueOperationDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SetValueOperationDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetValueOperationDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)new OSCLib::Data::OSCP::SetValueOperationDescriptor((OSCLib::Data::OSCP::SetValueOperationDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SetValueOperationDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValueOperationDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SetValueOperationDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SetValueOperationDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetValueOperationDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SetValueOperationDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetValueOperationDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetValueOperationDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetValueOperationDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptor_setOperationTarget(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &(arg1)->setOperationTarget((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SetValueOperationDescriptor_getOperationTarget(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getOperationTarget();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptor_addModifiableElement(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) &(arg1)->addModifiableElement((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SetValueOperationDescriptor_getModifiableElements(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SetValueOperationDescriptor *arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::SetValueOperationDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::SetValueOperationDescriptor const *)arg1)->getModifiableElements();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMetricDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *)new OSCLib::Data::OSCP::StringMetricDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMetricDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *)new OSCLib::Data::OSCP::StringMetricDescriptor((OSCLib::Data::OSCP::StringMetricDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringMetricDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::StringMetricDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringMetricDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringMetricDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_setUnit(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setUnit((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_getUnit(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getUnit();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_setMetricCategory(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricCategory temp2 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricCategory)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setMetricCategory((OSCLib::Data::OSCP::MetricCategory const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringMetricDescriptor_getMetricCategory(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricCategory result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::MetricCategory)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getMetricCategory();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_setAvailability(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability *arg2 = 0 ;
  OSCLib::Data::OSCP::MetricAvailability temp2 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::MetricAvailability)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setAvailability((OSCLib::Data::OSCP::MetricAvailability const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringMetricDescriptor_getAvailability(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::MetricAvailability result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::MetricAvailability)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getAvailability();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_setMaxDelayTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Duration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Duration const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->setMaxDelayTime((OSCLib::Data::OSCP::Duration const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_getMaxDelayTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::Duration result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getMaxDelayTime();
  jresult = new OSCLib::Data::OSCP::Duration((const OSCLib::Data::OSCP::Duration &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricDescriptor_hasMaxDelayTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->hasMaxDelayTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_addBodySite(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricDescriptor *) &(arg1)->addBodySite((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricDescriptor_getBodySites(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::CodedValue > result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricDescriptor const *)arg1)->getBodySites();
  jresult = new std::vector< OSCLib::Data::OSCP::CodedValue >((const std::vector< OSCLib::Data::OSCP::CodedValue > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMetricState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::StringMetricState *)new OSCLib::Data::OSCP::StringMetricState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMetricState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricState *)new OSCLib::Data::OSCP::StringMetricState((OSCLib::Data::OSCP::StringMetricState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringMetricState(void * jarg1) {
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringMetricState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringMetricState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getStateVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricState_setComponentActivationState(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentActivation temp2 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::ComponentActivation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setComponentActivationState((OSCLib::Data::OSCP::ComponentActivation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringMetricState_getComponentActivationState(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::ComponentActivation result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = (OSCLib::Data::OSCP::ComponentActivation)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getComponentActivationState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricState_hasComponentActivationState(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasComponentActivationState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricState_setCalibrationInfo(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CalibrationInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CalibrationInfo const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setCalibrationInfo((OSCLib::Data::OSCP::CalibrationInfo const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricState_getCalibrationInfo(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::CalibrationInfo result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getCalibrationInfo();
  jresult = new OSCLib::Data::OSCP::CalibrationInfo((const OSCLib::Data::OSCP::CalibrationInfo &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricState_hasCalibrationInfo(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasCalibrationInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricState_setOperatingHours(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setOperatingHours((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringMetricState_getOperatingHours(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getOperatingHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricState_hasOperatingHours(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasOperatingHours();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricState_setOperatingCycles(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setOperatingCycles((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringMetricState_getOperatingCycles(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getOperatingCycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricState_hasOperatingCycles(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasOperatingCycles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricState_setObservedValue(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricState *) &(arg1)->setObservedValue((OSCLib::Data::OSCP::StringMetricValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricState_getObservedValue(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  OSCLib::Data::OSCP::StringMetricValue result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricState const *)arg1)->getObservedValue();
  jresult = new OSCLib::Data::OSCP::StringMetricValue((const OSCLib::Data::OSCP::StringMetricValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricState_hasObservedValue(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricState *arg1 = (OSCLib::Data::OSCP::StringMetricState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricState const *)arg1)->hasObservedValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMetricValue__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  result = (OSCLib::Data::OSCP::StringMetricValue *)new OSCLib::Data::OSCP::StringMetricValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMetricValue__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricValue *)new OSCLib::Data::OSCP::StringMetricValue((OSCLib::Data::OSCP::StringMetricValue const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringMetricValue(void * jarg1) {
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMetricValue_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::StringMetricValue *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricValue const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::StringMetricValue const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricValue_setMeasurementState(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::MeasurementState *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::MeasurementState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::MeasurementState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricValue *) &(arg1)->setMeasurementState((OSCLib::Data::OSCP::MeasurementState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricValue_getMeasurementState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::MeasurementState result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getMeasurementState();
  jresult = new OSCLib::Data::OSCP::MeasurementState((const OSCLib::Data::OSCP::MeasurementState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricValue_setStart_Time(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricValue *) &(arg1)->setStart_Time((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricValue_getStart_Time(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getStart_Time();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricValue_hasStart_Time(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->hasStart_Time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricValue_setStop_Time(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricValue *) &(arg1)->setStop_Time((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricValue_getStop_Time(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getStop_Time();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricValue_hasStop_Time(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->hasStop_Time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricValue_setObservationTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::StringMetricValue *) &(arg1)->setObservationTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricValue_getObservationTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getObservationTime();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricValue_hasObservationTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->hasObservationTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMetricValue_setValue(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricValue *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::StringMetricValue *) &(arg1)->setValue((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringMetricValue_getValue(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  result = ((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->getValue();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMetricValue_hasValue(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::StringMetricValue *arg1 = (OSCLib::Data::OSCP::StringMetricValue *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::StringMetricValue *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::StringMetricValue const *)arg1)->hasValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SystemContext__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  result = (OSCLib::Data::OSCP::SystemContext *)new OSCLib::Data::OSCP::SystemContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SystemContext__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SystemContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemContext *)new OSCLib::Data::OSCP::SystemContext((OSCLib::Data::OSCP::SystemContext const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SystemContext(void * jarg1) {
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemContext_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::SystemContext *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SystemContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SystemContext const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SystemContext const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemContext_setEnsembleContext(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemContext *) &(arg1)->setEnsembleContext((OSCLib::Data::OSCP::EnsembleContextDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemContext_getEnsembleContext(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor result;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  result = ((OSCLib::Data::OSCP::SystemContext const *)arg1)->getEnsembleContext();
  jresult = new OSCLib::Data::OSCP::EnsembleContextDescriptor((const OSCLib::Data::OSCP::EnsembleContextDescriptor &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemContext_hasEnsembleContext(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->hasEnsembleContext();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemContext_setLocationContext(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemContext *) &(arg1)->setLocationContext((OSCLib::Data::OSCP::LocationContextDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemContext_getLocationContext(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor result;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  result = ((OSCLib::Data::OSCP::SystemContext const *)arg1)->getLocationContext();
  jresult = new OSCLib::Data::OSCP::LocationContextDescriptor((const OSCLib::Data::OSCP::LocationContextDescriptor &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemContext_hasLocationContext(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->hasLocationContext();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemContext_setOperatorContext(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemContext *) &(arg1)->setOperatorContext((OSCLib::Data::OSCP::OperatorContextDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemContext_getOperatorContext(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor result;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  result = ((OSCLib::Data::OSCP::SystemContext const *)arg1)->getOperatorContext();
  jresult = new OSCLib::Data::OSCP::OperatorContextDescriptor((const OSCLib::Data::OSCP::OperatorContextDescriptor &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemContext_hasOperatorContext(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->hasOperatorContext();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemContext_setPatientContext(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemContext *) &(arg1)->setPatientContext((OSCLib::Data::OSCP::PatientContextDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemContext_getPatientContext(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor result;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  result = ((OSCLib::Data::OSCP::SystemContext const *)arg1)->getPatientContext();
  jresult = new OSCLib::Data::OSCP::PatientContextDescriptor((const OSCLib::Data::OSCP::PatientContextDescriptor &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemContext_hasPatientContext(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->hasPatientContext();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemContext_setWorkflowContext(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemContext *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemContext *) &(arg1)->setWorkflowContext((OSCLib::Data::OSCP::WorkflowContextDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemContext_getWorkflowContext(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor result;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  result = ((OSCLib::Data::OSCP::SystemContext const *)arg1)->getWorkflowContext();
  jresult = new OSCLib::Data::OSCP::WorkflowContextDescriptor((const OSCLib::Data::OSCP::WorkflowContextDescriptor &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemContext_hasWorkflowContext(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SystemContext *arg1 = (OSCLib::Data::OSCP::SystemContext *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SystemContext *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SystemContext const *)arg1)->hasWorkflowContext();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SystemMetaData__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  result = (OSCLib::Data::OSCP::SystemMetaData *)new OSCLib::Data::OSCP::SystemMetaData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SystemMetaData__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SystemMetaData const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemMetaData *)new OSCLib::Data::OSCP::SystemMetaData((OSCLib::Data::OSCP::SystemMetaData const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SystemMetaData(void * jarg1) {
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemMetaData_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  OSCLib::Data::OSCP::SystemMetaData *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::SystemMetaData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::SystemMetaData const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::SystemMetaData const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemMetaData_setUDI(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SystemMetaData *) &(arg1)->setUDI((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SystemMetaData_getUDI(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  result = ((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->getUDI();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemMetaData_hasUDI(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->hasUDI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemMetaData_addManufacturer(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemMetaData *) &(arg1)->addManufacturer((OSCLib::Data::OSCP::LocalizedText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemMetaData_getManufacturer(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  result = ((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->getManufacturer();
  jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemMetaData_addModelName(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  OSCLib::Data::OSCP::LocalizedText *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocalizedText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocalizedText const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::SystemMetaData *) &(arg1)->addModelName((OSCLib::Data::OSCP::LocalizedText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemMetaData_getModelName(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocalizedText > result;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  result = ((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->getModelName();
  jresult = new std::vector< OSCLib::Data::OSCP::LocalizedText >((const std::vector< OSCLib::Data::OSCP::LocalizedText > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemMetaData_addModelNumber(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SystemMetaData *) &(arg1)->addModelNumber((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemMetaData_getModelNumber(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  result = ((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->getModelNumber();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemMetaData_addSerialNumber(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::SystemMetaData *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::SystemMetaData *) &(arg1)->addSerialNumber((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemMetaData_getSerialNumber(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::SystemMetaData *arg1 = (OSCLib::Data::OSCP::SystemMetaData *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::SystemMetaData *)jarg1; 
  result = ((OSCLib::Data::OSCP::SystemMetaData const *)arg1)->getSerialNumber();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Timestamp__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::Timestamp *result = 0 ;
  
  result = (OSCLib::Data::OSCP::Timestamp *)new OSCLib::Data::OSCP::Timestamp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Timestamp__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::Timestamp *arg1 = 0 ;
  OSCLib::Data::OSCP::Timestamp *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Timestamp *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::Timestamp *)new OSCLib::Data::OSCP::Timestamp((OSCLib::Data::OSCP::Timestamp const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Timestamp(void * jarg1) {
  OSCLib::Data::OSCP::Timestamp *arg1 = (OSCLib::Data::OSCP::Timestamp *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Timestamp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timestamp_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::Timestamp *arg1 = (OSCLib::Data::OSCP::Timestamp *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Timestamp *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::Timestamp const &)*arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Timestamp_get(void * jarg1) {
  long long jresult ;
  OSCLib::Data::OSCP::Timestamp *arg1 = (OSCLib::Data::OSCP::Timestamp *) 0 ;
  long long result;
  
  arg1 = (OSCLib::Data::OSCP::Timestamp *)jarg1; 
  result = (long long)((OSCLib::Data::OSCP::Timestamp const *)arg1)->get();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Timestamp_set(void * jarg1, long long jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::Timestamp *arg1 = (OSCLib::Data::OSCP::Timestamp *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  OSCLib::Data::OSCP::Timestamp *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::Timestamp *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::Timestamp *) &(arg1)->set((long long const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TimeZone__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::TimeZone *result = 0 ;
  
  result = (OSCLib::Data::OSCP::TimeZone *)new OSCLib::Data::OSCP::TimeZone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TimeZone__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::TimeZone *arg1 = 0 ;
  OSCLib::Data::OSCP::TimeZone *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::TimeZone *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::TimeZone const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::TimeZone *)new OSCLib::Data::OSCP::TimeZone((OSCLib::Data::OSCP::TimeZone const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TimeZone(void * jarg1) {
  OSCLib::Data::OSCP::TimeZone *arg1 = (OSCLib::Data::OSCP::TimeZone *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::TimeZone *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TimeZone_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::TimeZone *arg1 = (OSCLib::Data::OSCP::TimeZone *) 0 ;
  OSCLib::Data::OSCP::TimeZone *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::TimeZone *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::TimeZone *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::TimeZone const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::TimeZone const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TimeZone_set(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::TimeZone *arg1 = (OSCLib::Data::OSCP::TimeZone *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::TimeZone *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::TimeZone *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::TimeZone *) &(arg1)->set((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TimeZone_get(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::TimeZone *arg1 = (OSCLib::Data::OSCP::TimeZone *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::TimeZone *)jarg1; 
  result = ((OSCLib::Data::OSCP::TimeZone const *)arg1)->get();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VersionCounter__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::VersionCounter *result = 0 ;
  
  result = (OSCLib::Data::OSCP::VersionCounter *)new OSCLib::Data::OSCP::VersionCounter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VersionCounter__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::VersionCounter *arg1 = 0 ;
  OSCLib::Data::OSCP::VersionCounter *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VersionCounter *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VersionCounter *)new OSCLib::Data::OSCP::VersionCounter((OSCLib::Data::OSCP::VersionCounter const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VersionCounter(void * jarg1) {
  OSCLib::Data::OSCP::VersionCounter *arg1 = (OSCLib::Data::OSCP::VersionCounter *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VersionCounter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VersionCounter_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::VersionCounter *arg1 = (OSCLib::Data::OSCP::VersionCounter *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VersionCounter *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_VersionCounter_get(void * jarg1) {
  long long jresult ;
  OSCLib::Data::OSCP::VersionCounter *arg1 = (OSCLib::Data::OSCP::VersionCounter *) 0 ;
  long long result;
  
  arg1 = (OSCLib::Data::OSCP::VersionCounter *)jarg1; 
  result = (long long)((OSCLib::Data::OSCP::VersionCounter const *)arg1)->get();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VersionCounter_set(void * jarg1, long long jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::VersionCounter *arg1 = (OSCLib::Data::OSCP::VersionCounter *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  OSCLib::Data::OSCP::VersionCounter *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VersionCounter *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::VersionCounter *) &(arg1)->set((long long const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VMDDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::VMDDescriptor *)new OSCLib::Data::OSCP::VMDDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VMDDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VMDDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VMDDescriptor *)new OSCLib::Data::OSCP::VMDDescriptor((OSCLib::Data::OSCP::VMDDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VMDDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VMDDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VMDDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::VMDDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VMDDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_VMDDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VMDDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VMDDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VMDDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptor_addProductionSpecification(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::ProductionSpecification *arg2 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ProductionSpecification *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ProductionSpecification const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->addProductionSpecification((OSCLib::Data::OSCP::ProductionSpecification const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptor_getProductionSpecifications(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ProductionSpecification > result;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getProductionSpecifications();
  jresult = new std::vector< OSCLib::Data::OSCP::ProductionSpecification >((const std::vector< OSCLib::Data::OSCP::ProductionSpecification > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptor_setAlertSystem(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->setAlertSystem((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptor_getAlertSystem(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor result;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getAlertSystem();
  jresult = new OSCLib::Data::OSCP::AlertSystemDescriptor((const OSCLib::Data::OSCP::AlertSystemDescriptor &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VMDDescriptor_hasAlertSystem(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->hasAlertSystem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptor_addChannel(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  OSCLib::Data::OSCP::ChannelDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::VMDDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ChannelDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ChannelDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::VMDDescriptor *) &(arg1)->addChannel((OSCLib::Data::OSCP::ChannelDescriptor const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VMDDescriptor_getChannels(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::VMDDescriptor *arg1 = (OSCLib::Data::OSCP::VMDDescriptor *) 0 ;
  std::vector< OSCLib::Data::OSCP::ChannelDescriptor > result;
  
  arg1 = (OSCLib::Data::OSCP::VMDDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::VMDDescriptor const *)arg1)->getChannels();
  jresult = new std::vector< OSCLib::Data::OSCP::ChannelDescriptor >((const std::vector< OSCLib::Data::OSCP::ChannelDescriptor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WorkflowContextDescriptor__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *result = 0 ;
  
  result = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)new OSCLib::Data::OSCP::WorkflowContextDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WorkflowContextDescriptor__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextDescriptor const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)new OSCLib::Data::OSCP::WorkflowContextDescriptor((OSCLib::Data::OSCP::WorkflowContextDescriptor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WorkflowContextDescriptor(void * jarg1) {
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextDescriptor_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextDescriptor const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::WorkflowContextDescriptor const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextDescriptor_setType(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::CodedValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::CodedValue const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) &(arg1)->setType((OSCLib::Data::OSCP::CodedValue const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextDescriptor_getType(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::CodedValue result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->getType();
  jresult = new OSCLib::Data::OSCP::CodedValue((const OSCLib::Data::OSCP::CodedValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorkflowContextDescriptor_hasType(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->hasType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextDescriptor_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WorkflowContextDescriptor_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextDescriptor_setDescriptorVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) &(arg1)->setDescriptorVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextDescriptor_getDescriptorVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->getDescriptorVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorkflowContextDescriptor_hasDescriptorVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->hasDescriptorVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextDescriptor_setIntendedUse(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse *arg2 = 0 ;
  OSCLib::Data::OSCP::IntendedUse temp2 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::IntendedUse)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) &(arg1)->setIntendedUse((OSCLib::Data::OSCP::IntendedUse const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WorkflowContextDescriptor_getIntendedUse(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  OSCLib::Data::OSCP::IntendedUse result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  result = (OSCLib::Data::OSCP::IntendedUse)((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->getIntendedUse();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorkflowContextDescriptor_hasIntendedUse(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextDescriptor const *)arg1)->hasIntendedUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WorkflowContextState__SWIG_0() {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::WorkflowContextState *)new OSCLib::Data::OSCP::WorkflowContextState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WorkflowContextState__SWIG_1(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *)new OSCLib::Data::OSCP::WorkflowContextState((OSCLib::Data::OSCP::WorkflowContextState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WorkflowContextState(void * jarg1) {
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorkflowContextState_copyFrom(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState const & type is null", 0);
    return ;
  } 
  (arg1)->copyFrom((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_setHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WorkflowContextState_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorkflowContextState_hasHandle(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_setDescriptorHandle(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setDescriptorHandle((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WorkflowContextState_getDescriptorHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getDescriptorHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_setStateVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::VersionCounter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::VersionCounter const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setStateVersion((OSCLib::Data::OSCP::VersionCounter const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_getStateVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::VersionCounter result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getStateVersion();
  jresult = new OSCLib::Data::OSCP::VersionCounter((const OSCLib::Data::OSCP::VersionCounter &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorkflowContextState_hasStateVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasStateVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_setContextAssociation(void * jarg1, int jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation *arg2 = 0 ;
  OSCLib::Data::OSCP::ContextAssociation temp2 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  temp2 = (OSCLib::Data::OSCP::ContextAssociation)jarg2; 
  arg2 = &temp2; 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setContextAssociation((OSCLib::Data::OSCP::ContextAssociation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WorkflowContextState_getContextAssociation(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ContextAssociation result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = (OSCLib::Data::OSCP::ContextAssociation)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getContextAssociation();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorkflowContextState_hasContextAssociation(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasContextAssociation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_setBindingMDIBVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ReferencedVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ReferencedVersion const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setBindingMDIBVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_getBindingMDIBVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getBindingMDIBVersion();
  jresult = new OSCLib::Data::OSCP::ReferencedVersion((const OSCLib::Data::OSCP::ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_setUnbindingMDIBVersion(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ReferencedVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ReferencedVersion const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setUnbindingMDIBVersion((OSCLib::Data::OSCP::ReferencedVersion const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_getUnbindingMDIBVersion(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::ReferencedVersion result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getUnbindingMDIBVersion();
  jresult = new OSCLib::Data::OSCP::ReferencedVersion((const OSCLib::Data::OSCP::ReferencedVersion &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorkflowContextState_hasUnbindingMDIBVersion(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasUnbindingMDIBVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_setBindingStartTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setBindingStartTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_getBindingStartTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getBindingStartTime();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorkflowContextState_hasBindingStartTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasBindingStartTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_setBindingEndTime(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Timestamp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Timestamp const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setBindingEndTime((OSCLib::Data::OSCP::Timestamp const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_getBindingEndTime(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Timestamp result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getBindingEndTime();
  jresult = new OSCLib::Data::OSCP::Timestamp((const OSCLib::Data::OSCP::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorkflowContextState_hasBindingEndTime(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasBindingEndTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_addValidator(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->addValidator((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_getValidators(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getValidators();
  jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_addIdentification(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::InstanceIdentifier *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InstanceIdentifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::InstanceIdentifier const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->addIdentification((OSCLib::Data::OSCP::InstanceIdentifier const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_getIdentifications(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  std::vector< OSCLib::Data::OSCP::InstanceIdentifier > result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getIdentifications();
  jresult = new std::vector< OSCLib::Data::OSCP::InstanceIdentifier >((const std::vector< OSCLib::Data::OSCP::InstanceIdentifier > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_setOrderDetail(void * jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Order *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::Order *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::Order const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::WorkflowContextState *) &(arg1)->setOrderDetail((OSCLib::Data::OSCP::Order const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorkflowContextState_getOrderDetail(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  OSCLib::Data::OSCP::Order result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = ((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->getOrderDetail();
  jresult = new OSCLib::Data::OSCP::Order((const OSCLib::Data::OSCP::Order &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorkflowContextState_hasOrderDetail(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::WorkflowContextState *arg1 = (OSCLib::Data::OSCP::WorkflowContextState *) 0 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg1; 
  result = (bool)((OSCLib::Data::OSCP::WorkflowContextState const *)arg1)->hasOrderDetail();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FutureInvocationState() {
  void * jresult ;
  OSCLib::Data::OSCP::FutureInvocationState *result = 0 ;
  
  result = (OSCLib::Data::OSCP::FutureInvocationState *)new OSCLib::Data::OSCP::FutureInvocationState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FutureInvocationState(void * jarg1) {
  OSCLib::Data::OSCP::FutureInvocationState *arg1 = (OSCLib::Data::OSCP::FutureInvocationState *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FutureInvocationState_waitReceived(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::FutureInvocationState *arg1 = (OSCLib::Data::OSCP::FutureInvocationState *) 0 ;
  OSCLib::Data::OSCP::InvocationState arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::InvocationState)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->waitReceived(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FutureInvocationState_getTransactionId(void * jarg1) {
  int jresult ;
  OSCLib::Data::OSCP::FutureInvocationState *arg1 = (OSCLib::Data::OSCP::FutureInvocationState *) 0 ;
  int result;
  
  arg1 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg1; 
  result = (int)((OSCLib::Data::OSCP::FutureInvocationState const *)arg1)->getTransactionId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPCachedProvider() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPCachedProvider *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPCachedProvider *)new SwigDirector_OSCPCachedProvider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPCachedProvider(void * jarg1) {
  OSCLib::Data::OSCP::OSCPCachedProvider *arg1 = (OSCLib::Data::OSCP::OSCPCachedProvider *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPCachedProvider *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPCachedProvider_getMDDescription(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPCachedProvider *arg1 = (OSCLib::Data::OSCP::OSCPCachedProvider *) 0 ;
  OSCLib::Data::OSCP::MDDescription result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPCachedProvider *)jarg1; 
  result = (arg1)->getMDDescription();
  jresult = new OSCLib::Data::OSCP::MDDescription((const OSCLib::Data::OSCP::MDDescription &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPCachedProvider_setMDDescription__SWIG_0(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPCachedProvider *arg1 = (OSCLib::Data::OSCP::OSCPCachedProvider *) 0 ;
  OSCLib::Data::OSCP::MDDescription arg2 ;
  OSCLib::Data::OSCP::MDDescription *argp2 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPCachedProvider *)jarg1; 
  argp2 = (OSCLib::Data::OSCP::MDDescription *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null OSCLib::Data::OSCP::MDDescription", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setMDDescription(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPCachedProvider_setMDDescription__SWIG_1(void * jarg1, char * jarg2) {
  OSCLib::Data::OSCP::OSCPCachedProvider *arg1 = (OSCLib::Data::OSCP::OSCPCachedProvider *) 0 ;
  std::string arg2 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPCachedProvider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->setMDDescription(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPCachedProvider_director_connect(void *objarg) {
  OSCLib::Data::OSCP::OSCPCachedProvider *obj = (OSCLib::Data::OSCP::OSCPCachedProvider *)objarg;
  SwigDirector_OSCPCachedProvider *director = dynamic_cast<SwigDirector_OSCPCachedProvider *>(obj);
  if (director) {
    director->swig_connect_director();
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerEventHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)new SwigDirector_OSCPConsumerEventHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerEventHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerEventHandler_onOperationInvoked(void * jarg1, void * jarg2, int jarg3) {
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *) 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg2 = 0 ;
  OSCLib::Data::OSCP::InvocationState arg3 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::InvocationState)jarg3; 
  (arg1)->onOperationInvoked((OSCLib::Data::OSCP::OperationInvocationContext const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerEventHandler_onOperationInvokedSwigExplicitOSCPConsumerEventHandler(void * jarg1, void * jarg2, int jarg3) {
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *) 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg2 = 0 ;
  OSCLib::Data::OSCP::InvocationState arg3 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::InvocationState)jarg3; 
  (arg1)->OSCLib::Data::OSCP::OSCPConsumerEventHandler::onOperationInvoked((OSCLib::Data::OSCP::OperationInvocationContext const &)*arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPConsumerEventHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerEventHandler_director_connect(void *objarg, SwigDirector_OSCPConsumerEventHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPConsumerEventHandler::SWIG_Callback1_t callback1) {
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *obj = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)objarg;
  SwigDirector_OSCPConsumerEventHandler *director = dynamic_cast<SwigDirector_OSCPConsumerEventHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerAlertConditionStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *)new SwigDirector_OSCPConsumerAlertConditionStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerAlertConditionStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerAlertConditionStateHandler_onStateChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerAlertConditionStateHandler_director_connect(void *objarg, SwigDirector_OSCPConsumerAlertConditionStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPConsumerAlertConditionStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPConsumerAlertConditionStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *obj = (OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *)objarg;
  SwigDirector_OSCPConsumerAlertConditionStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerAlertConditionStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerAlertSignalStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *)new SwigDirector_OSCPConsumerAlertSignalStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerAlertSignalStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerAlertSignalStateHandler_onStateChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerAlertSignalStateHandler_director_connect(void *objarg, SwigDirector_OSCPConsumerAlertSignalStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPConsumerAlertSignalStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPConsumerAlertSignalStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *obj = (OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *)objarg;
  SwigDirector_OSCPConsumerAlertSignalStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerAlertSignalStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerAlertSystemStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *)new SwigDirector_OSCPConsumerAlertSystemStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerAlertSystemStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerAlertSystemStateHandler_onStateChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerAlertSystemStateHandler_director_connect(void *objarg, SwigDirector_OSCPConsumerAlertSystemStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPConsumerAlertSystemStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPConsumerAlertSystemStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *obj = (OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *)objarg;
  SwigDirector_OSCPConsumerAlertSystemStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerAlertSystemStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerConnectionLostHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerConnectionLostHandler_onConnectionLost(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *)jarg1; 
  (arg1)->onConnectionLost();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerConnectionLostHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *)new SwigDirector_OSCPConsumerConnectionLostHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerConnectionLostHandler_director_connect(void *objarg, SwigDirector_OSCPConsumerConnectionLostHandler::SWIG_Callback0_t callback0) {
  OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *obj = (OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *)objarg;
  SwigDirector_OSCPConsumerConnectionLostHandler *director = dynamic_cast<SwigDirector_OSCPConsumerConnectionLostHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerContextStateChangedHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerContextStateChangedHandler_onContextStateChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  (arg1)->onContextStateChanged((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerContextStateChangedHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *)new SwigDirector_OSCPConsumerContextStateChangedHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerContextStateChangedHandler_director_connect(void *objarg, SwigDirector_OSCPConsumerContextStateChangedHandler::SWIG_Callback0_t callback0) {
  OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *obj = (OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *)objarg;
  SwigDirector_OSCPConsumerContextStateChangedHandler *director = dynamic_cast<SwigDirector_OSCPConsumerContextStateChangedHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerEnumStringMetricStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *)new SwigDirector_OSCPConsumerEnumStringMetricStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerEnumStringMetricStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerEnumStringMetricStateHandler_onStateChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerEnumStringMetricStateHandler_director_connect(void *objarg, SwigDirector_OSCPConsumerEnumStringMetricStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPConsumerEnumStringMetricStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPConsumerEnumStringMetricStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *obj = (OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *)objarg;
  SwigDirector_OSCPConsumerEnumStringMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerEnumStringMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumer(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = 0 ;
  OSCLib::Data::OSCP::OSCPConsumer *result = 0 ;
  
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(((std::shared_ptr< const OSCLib::Data::OSCP::OSCPConsumer > *)jarg1) ? ((std::shared_ptr< const OSCLib::Data::OSCP::OSCPConsumer > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OSCPConsumer const & reference is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::OSCPConsumer *)new OSCLib::Data::OSCP::OSCPConsumer((OSCLib::Data::OSCP::OSCPConsumer const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumer(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPConsumer_getMDIB(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::MDIBContainer result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getMDIB();
  jresult = new OSCLib::Data::OSCP::MDIBContainer((const OSCLib::Data::OSCP::MDIBContainer &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPConsumer_getMDDescription(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::MDDescription result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getMDDescription();
  jresult = new OSCLib::Data::OSCP::MDDescription((const OSCLib::Data::OSCP::MDDescription &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPConsumer_getMDState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::MDState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getMDState();
  jresult = new OSCLib::Data::OSCP::MDState((const OSCLib::Data::OSCP::MDState &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_registerStateEventHandler(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *arg2 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg2; 
  result = (bool)(arg1)->registerStateEventHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_unregisterStateEventHandler(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::OSCPConsumerEventHandler *arg2 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg2; 
  result = (bool)(arg1)->unregisterStateEventHandler(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::AlertConditionState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::AlertSignalState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::AlertSystemState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ClockState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::ClockState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ClockState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::ComponentState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::ComponentState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ComponentState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_5(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_6(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_7(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_8(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::LocationContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_9(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::NumericMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_10(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::OperationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_11(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::OperatorContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_12(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::PatientContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_13(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::StringMetricState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_requestState__SWIG_14(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->requestState((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::AlertSystemState const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::AlertSignalState const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::AlertConditionState const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::NumericMetricState const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_6(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::StringMetricState const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_7(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::LocationContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::LocationContextState const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_8(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_9(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::OperatorContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::OperatorContextState const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_10(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::PatientContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::PatientContextState const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_11(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_12(void * jarg1, void * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_13(void * jarg1, void * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_14(void * jarg1, void * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_15(void * jarg1, void * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_16(void * jarg1, void * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_17(void * jarg1, void * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_18(void * jarg1, void * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_19(void * jarg1, void * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::LocationContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::LocationContextState const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_20(void * jarg1, void * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_21(void * jarg1, void * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::OperatorContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::OperatorContextState const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_22(void * jarg1, void * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::PatientContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::PatientContextState const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_commitState__SWIG_23(void * jarg1, void * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->commitState((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_activate__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Data::OSCP::FutureInvocationState *arg3 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OSCLib::Data::OSCP::FutureInvocationState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::FutureInvocationState & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->activate((std::string const &)*arg2,*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPConsumer_activate__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->activate((std::string const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumer_disconnect(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->disconnect();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSCPConsumer_isValid(void * jarg1) {
  unsigned int jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPConsumer_getProviderXAddr(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((OSCLib::Data::OSCP::OSCPConsumer const *)arg1)->getProviderXAddr();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumer_setConnectionLostHandler(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *arg2 = (OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler *)jarg2; 
  (arg1)->setConnectionLostHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumer_setContextStateChangedHandler(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *arg2 = (OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler *)jarg2; 
  (arg1)->setContextStateChangedHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumer_setSubscriptionLostHandler(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  OSCPConsumerSubscriptionLostHandler *arg2 = (OSCPConsumerSubscriptionLostHandler *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (OSCPConsumerSubscriptionLostHandler *)jarg2; 
  (arg1)->setSubscriptionLostHandler(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPConsumer_requestRawMDIB(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->requestRawMDIB();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPConsumer_getEndpointReference(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getEndpointReference();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_OSCPConsumer_getLastKnownMDIBVersion(void * jarg1) {
  unsigned long long jresult ;
  OSCLib::Data::OSCP::OSCPConsumer *arg1 = (OSCLib::Data::OSCP::OSCPConsumer *) 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > *smartarg1 = 0 ;
  unsigned long long result;
  
  
  smartarg1 = (std::shared_ptr<  OSCLib::Data::OSCP::OSCPConsumer > *)jarg1;
  arg1 = (OSCLib::Data::OSCP::OSCPConsumer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned long long)(arg1)->getLastKnownMDIBVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerLimitAlertConditionStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *)new SwigDirector_OSCPConsumerLimitAlertConditionStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerLimitAlertConditionStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerLimitAlertConditionStateHandler_onStateChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerLimitAlertConditionStateHandler_director_connect(void *objarg, SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPConsumerLimitAlertConditionStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *obj = (OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *)objarg;
  SwigDirector_OSCPConsumerLimitAlertConditionStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerLimitAlertConditionStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerNumericMetricStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *)new SwigDirector_OSCPConsumerNumericMetricStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerNumericMetricStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerNumericMetricStateHandler_onStateChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerNumericMetricStateHandler_director_connect(void *objarg, SwigDirector_OSCPConsumerNumericMetricStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPConsumerNumericMetricStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPConsumerNumericMetricStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *obj = (OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *)objarg;
  SwigDirector_OSCPConsumerNumericMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerNumericMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerRealTimeSampleArrayMetricStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *)new SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerRealTimeSampleArrayMetricStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerRealTimeSampleArrayMetricStateHandler_onStateChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerRealTimeSampleArrayMetricStateHandler_director_connect(void *objarg, SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *obj = (OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *)objarg;
  SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPConsumerStringMetricStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *)new SwigDirector_OSCPConsumerStringMetricStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerStringMetricStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerStringMetricStateHandler_onStateChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->onStateChanged((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerStringMetricStateHandler_director_connect(void *objarg, SwigDirector_OSCPConsumerStringMetricStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPConsumerStringMetricStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPConsumerStringMetricStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *obj = (OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *)objarg;
  SwigDirector_OSCPConsumerStringMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPConsumerStringMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPConsumerSubscriptionLostHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerSubscriptionLostHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerSubscriptionLostHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerSubscriptionLostHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPConsumerSubscriptionLostHandler_onSubscriptionLost(void * jarg1) {
  OSCLib::Data::OSCP::OSCPConsumerSubscriptionLostHandler *arg1 = (OSCLib::Data::OSCP::OSCPConsumerSubscriptionLostHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPConsumerSubscriptionLostHandler *)jarg1; 
  (arg1)->onSubscriptionLost();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderMDStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)new SwigDirector_OSCPProviderMDStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderMDStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderMDStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderMDStateHandler_notifyOperationInvoked(void * jarg1, void * jarg2, int jarg3) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg2 = 0 ;
  OSCLib::Data::OSCP::InvocationState arg3 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::InvocationState)jarg3; 
  (arg1)->notifyOperationInvoked((OSCLib::Data::OSCP::OperationInvocationContext const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderMDStateHandler_setAlertConditionPresence(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg4 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = jarg3 ? true : false; 
  arg4 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return ;
  } 
  (arg1)->setAlertConditionPresence(arg2,arg3,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderMDStateHandler__lock(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderMDStateHandler_unlock(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderMDStateHandler_getMutex(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  Poco::Mutex *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1; 
  result = (Poco::Mutex *) &(arg1)->getMutex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderMDStateHandler_getParentProvider(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  OSCLib::Data::OSCP::OSCPProvider *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1; 
  result = (OSCLib::Data::OSCP::OSCPProvider *) &(arg1)->getParentProvider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderMDStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderMDStateHandler::SWIG_Callback0_t callback0) {
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)objarg;
  SwigDirector_OSCPProviderMDStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderMDStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderActivateOperationHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)new SwigDirector_OSCPProviderActivateOperationHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderActivateOperationHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderActivateOperationHandler_onActivateRequest(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::MDIBContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::MDIBContainer const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onActivateRequest((OSCLib::Data::OSCP::MDIBContainer const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderActivateOperationHandler_onActivateRequestSwigExplicitOSCPProviderActivateOperationHandler(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::MDIBContainer *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::MDIBContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::MDIBContainer const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler::onActivateRequest((OSCLib::Data::OSCP::MDIBContainer const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderActivateOperationHandler_notifyMDIBObjectChanged__SWIG_0(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderActivateOperationHandler_notifyMDIBObjectChanged__SWIG_1(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderActivateOperationHandler_notifyMDIBObjectChanged__SWIG_2(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderActivateOperationHandler_notifyMDIBObjectChanged__SWIG_3(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderActivateOperationHandler_notifyMDIBObjectChanged__SWIG_4(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderActivateOperationHandler_notifyMDIBObjectChanged__SWIG_5(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderActivateOperationHandler_notifyMDIBObjectChanged__SWIG_6(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderActivateOperationHandler_director_connect(void *objarg, SwigDirector_OSCPProviderActivateOperationHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderActivateOperationHandler::SWIG_Callback1_t callback1) {
  OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *obj = (OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *)objarg;
  SwigDirector_OSCPProviderActivateOperationHandler *director = dynamic_cast<SwigDirector_OSCPProviderActivateOperationHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderAlertConditionStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *)new SwigDirector_OSCPProviderAlertConditionStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderAlertConditionStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderAlertConditionStateHandler_onStateChangeRequest(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::AlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderAlertConditionStateHandler_onStateChangeRequestSwigExplicitOSCPProviderAlertConditionStateHandler(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::AlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderAlertConditionStateHandler_sourceHasChanged(void * jarg1, char * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->sourceHasChanged((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderAlertConditionStateHandler_sourceHasChangedSwigExplicitOSCPProviderAlertConditionStateHandler(void * jarg1, char * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::sourceHasChanged((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderAlertConditionStateHandler_notifyMDIBObjectChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderAlertConditionStateHandler_getState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *)jarg1; 
  result = (arg1)->getState();
  jresult = new OSCLib::Data::OSCP::AlertConditionState((const OSCLib::Data::OSCP::AlertConditionState &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderAlertConditionStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderAlertConditionStateHandler_getHandleSwigExplicitOSCPProviderAlertConditionStateHandler(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler::getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderAlertConditionStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderAlertConditionStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderAlertConditionStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPProviderAlertConditionStateHandler::SWIG_Callback2_t callback2, SwigDirector_OSCPProviderAlertConditionStateHandler::SWIG_Callback3_t callback3) {
  OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *)objarg;
  SwigDirector_OSCPProviderAlertConditionStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderAlertConditionStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderAlertSignalStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *)new SwigDirector_OSCPProviderAlertSignalStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderAlertSignalStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderAlertSignalStateHandler_onStateChangeRequest(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::AlertSignalState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderAlertSignalStateHandler_onStateChangeRequestSwigExplicitOSCPProviderAlertSignalStateHandler(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::AlertSignalState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderAlertSignalStateHandler_notifyMDIBObjectChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderAlertSignalStateHandler_getState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *)jarg1; 
  result = (arg1)->getState();
  jresult = new OSCLib::Data::OSCP::AlertSignalState((const OSCLib::Data::OSCP::AlertSignalState &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderAlertSignalStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderAlertSignalStateHandler_getHandleSwigExplicitOSCPProviderAlertSignalStateHandler(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler::getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderAlertSignalStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderAlertSignalStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderAlertSignalStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPProviderAlertSignalStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *)objarg;
  SwigDirector_OSCPProviderAlertSignalStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderAlertSignalStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderAlertSystemStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *)new SwigDirector_OSCPProviderAlertSystemStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderAlertSystemStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderAlertSystemStateHandler_onStateChangeRequest(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::AlertSystemState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderAlertSystemStateHandler_onStateChangeRequestSwigExplicitOSCPProviderAlertSystemStateHandler(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::AlertSystemState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderAlertSystemStateHandler_notifyMDIBObjectChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderAlertSystemStateHandler_getState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *)jarg1; 
  result = (arg1)->getState();
  jresult = new OSCLib::Data::OSCP::AlertSystemState((const OSCLib::Data::OSCP::AlertSystemState &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderAlertSystemStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderAlertSystemStateHandler_getHandleSwigExplicitOSCPProviderAlertSystemStateHandler(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler::getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderAlertSystemStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderAlertSystemStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderAlertSystemStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPProviderAlertSystemStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *)objarg;
  SwigDirector_OSCPProviderAlertSystemStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderAlertSystemStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderClockStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *)new SwigDirector_OSCPProviderClockStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderClockStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderClockStateHandler_getState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *) 0 ;
  OSCLib::Data::OSCP::ClockState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *)jarg1; 
  result = (arg1)->getState();
  jresult = new OSCLib::Data::OSCP::ClockState((const OSCLib::Data::OSCP::ClockState &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderClockStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderClockStateHandler_getHandleSwigExplicitOSCPProviderClockStateHandler(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderClockStateHandler::getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderClockStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderClockStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderClockStateHandler::SWIG_Callback1_t callback1) {
  OSCLib::Data::OSCP::OSCPProviderClockStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderClockStateHandler *)objarg;
  SwigDirector_OSCPProviderClockStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderClockStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderComponentStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *)new SwigDirector_OSCPProviderComponentStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderComponentStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderComponentStateHandler_getState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *) 0 ;
  OSCLib::Data::OSCP::ComponentState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *)jarg1; 
  result = (arg1)->getState();
  jresult = new OSCLib::Data::OSCP::ComponentState((const OSCLib::Data::OSCP::ComponentState &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderComponentStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderComponentStateHandler_getHandleSwigExplicitOSCPProviderComponentStateHandler(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderComponentStateHandler::getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderComponentStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderComponentStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderComponentStateHandler::SWIG_Callback1_t callback1) {
  OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *)objarg;
  SwigDirector_OSCPProviderComponentStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderComponentStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderContextStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)new SwigDirector_OSCPProviderContextStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderContextStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_onStateChangeRequest(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg2 = 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg3 = 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg4 = 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg5 = 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg6 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg7 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnsembleContextState > const & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LocationContextState > const & type is null", 0);
    return 0;
  } 
  arg4 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::OperatorContextState > const & type is null", 0);
    return 0;
  } 
  arg5 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::PatientContextState > const & type is null", 0);
    return 0;
  } 
  arg6 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::WorkflowContextState > const & type is null", 0);
    return 0;
  } 
  arg7 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &)*arg2,(std::vector< OSCLib::Data::OSCP::LocationContextState > const &)*arg3,(std::vector< OSCLib::Data::OSCP::OperatorContextState > const &)*arg4,(std::vector< OSCLib::Data::OSCP::PatientContextState > const &)*arg5,(std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &)*arg6,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg7);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_onStateChangeRequestSwigExplicitOSCPProviderContextStateHandler(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > *arg2 = 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > *arg3 = 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > *arg4 = 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > *arg5 = 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > *arg6 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg7 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  arg2 = (std::vector< OSCLib::Data::OSCP::EnsembleContextState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::EnsembleContextState > const & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< OSCLib::Data::OSCP::LocationContextState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::LocationContextState > const & type is null", 0);
    return 0;
  } 
  arg4 = (std::vector< OSCLib::Data::OSCP::OperatorContextState > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::OperatorContextState > const & type is null", 0);
    return 0;
  } 
  arg5 = (std::vector< OSCLib::Data::OSCP::PatientContextState > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::PatientContextState > const & type is null", 0);
    return 0;
  } 
  arg6 = (std::vector< OSCLib::Data::OSCP::WorkflowContextState > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< OSCLib::Data::OSCP::WorkflowContextState > const & type is null", 0);
    return 0;
  } 
  arg7 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::onStateChangeRequest((std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &)*arg2,(std::vector< OSCLib::Data::OSCP::LocationContextState > const &)*arg3,(std::vector< OSCLib::Data::OSCP::OperatorContextState > const &)*arg4,(std::vector< OSCLib::Data::OSCP::PatientContextState > const &)*arg5,(std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &)*arg6,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg7);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_getEnsembleContextStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  result = (arg1)->getEnsembleContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::EnsembleContextState >((const std::vector< OSCLib::Data::OSCP::EnsembleContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_getEnsembleContextStatesSwigExplicitOSCPProviderContextStateHandler(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::EnsembleContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getEnsembleContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::EnsembleContextState >((const std::vector< OSCLib::Data::OSCP::EnsembleContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_getLocationContextStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  result = (arg1)->getLocationContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::LocationContextState >((const std::vector< OSCLib::Data::OSCP::LocationContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_getLocationContextStatesSwigExplicitOSCPProviderContextStateHandler(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::LocationContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getLocationContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::LocationContextState >((const std::vector< OSCLib::Data::OSCP::LocationContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_getOperatorContextStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  result = (arg1)->getOperatorContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::OperatorContextState >((const std::vector< OSCLib::Data::OSCP::OperatorContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_getOperatorContextStatesSwigExplicitOSCPProviderContextStateHandler(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::OperatorContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getOperatorContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::OperatorContextState >((const std::vector< OSCLib::Data::OSCP::OperatorContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_getPatientContextStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  result = (arg1)->getPatientContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::PatientContextState >((const std::vector< OSCLib::Data::OSCP::PatientContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_getPatientContextStatesSwigExplicitOSCPProviderContextStateHandler(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::PatientContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getPatientContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::PatientContextState >((const std::vector< OSCLib::Data::OSCP::PatientContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_getWorkflowContextStates(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  result = (arg1)->getWorkflowContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::WorkflowContextState >((const std::vector< OSCLib::Data::OSCP::WorkflowContextState > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_getWorkflowContextStatesSwigExplicitOSCPProviderContextStateHandler(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::vector< OSCLib::Data::OSCP::WorkflowContextState > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getWorkflowContextStates();
  jresult = new std::vector< OSCLib::Data::OSCP::WorkflowContextState >((const std::vector< OSCLib::Data::OSCP::WorkflowContextState > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_notifyMDIBObjectChanged__SWIG_0(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_notifyMDIBObjectChanged__SWIG_1(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocationContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::LocationContextState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_notifyMDIBObjectChanged__SWIG_2(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperatorContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::OperatorContextState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_notifyMDIBObjectChanged__SWIG_3(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PatientContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::PatientContextState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_notifyMDIBObjectChanged__SWIG_4(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_getHandleSwigExplicitOSCPProviderContextStateHandler(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderContextStateHandler::getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderContextStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderContextStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPProviderContextStateHandler::SWIG_Callback2_t callback2, SwigDirector_OSCPProviderContextStateHandler::SWIG_Callback3_t callback3, SwigDirector_OSCPProviderContextStateHandler::SWIG_Callback4_t callback4, SwigDirector_OSCPProviderContextStateHandler::SWIG_Callback5_t callback5, SwigDirector_OSCPProviderContextStateHandler::SWIG_Callback6_t callback6) {
  OSCLib::Data::OSCP::OSCPProviderContextStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderContextStateHandler *)objarg;
  SwigDirector_OSCPProviderContextStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderContextStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderEnumStringMetricStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *)new SwigDirector_OSCPProviderEnumStringMetricStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderEnumStringMetricStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderEnumStringMetricStateHandler_onStateChangeRequest(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderEnumStringMetricStateHandler_onStateChangeRequestSwigExplicitOSCPProviderEnumStringMetricStateHandler(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderEnumStringMetricStateHandler_notifyMDIBObjectChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderEnumStringMetricStateHandler_getState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *)jarg1; 
  result = (arg1)->getState();
  jresult = new OSCLib::Data::OSCP::EnumStringMetricState((const OSCLib::Data::OSCP::EnumStringMetricState &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderEnumStringMetricStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderEnumStringMetricStateHandler_getHandleSwigExplicitOSCPProviderEnumStringMetricStateHandler(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler::getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderEnumStringMetricStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderEnumStringMetricStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderEnumStringMetricStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPProviderEnumStringMetricStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *)objarg;
  SwigDirector_OSCPProviderEnumStringMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderEnumStringMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProvider() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProvider *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProvider *)new SwigDirector_OSCPProvider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProvider(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProvider_getMDIB(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::MDIBContainer result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  result = (arg1)->getMDIB();
  jresult = new OSCLib::Data::OSCP::MDIBContainer((const OSCLib::Data::OSCP::MDIBContainer &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProvider_getMDIBSwigExplicitOSCPProvider(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::MDIBContainer result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProvider::getMDIB();
  jresult = new OSCLib::Data::OSCP::MDIBContainer((const OSCLib::Data::OSCP::MDIBContainer &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProvider_getMDDescription(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::MDDescription result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  result = (arg1)->getMDDescription();
  jresult = new OSCLib::Data::OSCP::MDDescription((const OSCLib::Data::OSCP::MDDescription &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProvider_getMDState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::MDState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  result = (arg1)->getMDState();
  jresult = new OSCLib::Data::OSCP::MDState((const OSCLib::Data::OSCP::MDState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProvider_getMDStateSwigExplicitOSCPProvider(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::MDState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProvider::getMDState();
  jresult = new OSCLib::Data::OSCP::MDState((const OSCLib::Data::OSCP::MDState &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_addActivateOperationForDescriptor(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::ActivateOperationDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::ActivateOperationDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::ActivateOperationDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->addActivateOperationForDescriptor((OSCLib::Data::OSCP::ActivateOperationDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_createSetOperationForDescriptor__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertConditionDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::AlertConditionDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_createSetOperationForDescriptor__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSignalDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::AlertSignalDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_createSetOperationForDescriptor__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSystemDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::AlertSystemDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_createSetOperationForDescriptor__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::EnumStringMetricDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_createSetOperationForDescriptor__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::LimitAlertConditionDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_createSetOperationForDescriptor__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::NumericMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::NumericMetricDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_createSetOperationForDescriptor__SWIG_6(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::StringMetricDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::StringMetricDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_createSetOperationForDescriptor__SWIG_7(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::PatientContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PatientContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::PatientContextDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_createSetOperationForDescriptor__SWIG_8(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::LocationContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocationContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::LocationContextDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_createSetOperationForDescriptor__SWIG_9(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnsembleContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::EnsembleContextDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_createSetOperationForDescriptor__SWIG_10(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::OperatorContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperatorContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::OperatorContextDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_createSetOperationForDescriptor__SWIG_11(void * jarg1, void * jarg2, void * jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextDescriptor *arg2 = 0 ;
  OSCLib::Data::OSCP::HydraMDSDescriptor *arg3 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::WorkflowContextDescriptor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextDescriptor const & type is null", 0);
    return ;
  } 
  arg3 = (OSCLib::Data::OSCP::HydraMDSDescriptor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::HydraMDSDescriptor & type is null", 0);
    return ;
  } 
  (arg1)->createSetOperationForDescriptor((OSCLib::Data::OSCP::WorkflowContextDescriptor const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_0(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertSystemState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_1(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertSignalState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_2(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::AlertConditionState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_3(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_4(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::EnsembleContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnsembleContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnsembleContextState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::EnsembleContextState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_5(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_6(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::LocationContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LocationContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LocationContextState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::LocationContextState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_7(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_8(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::OperatorContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OperatorContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperatorContextState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::OperatorContextState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_9(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::PatientContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::PatientContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::PatientContextState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::PatientContextState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_10(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_11(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_notifyMDIBObjectChanged__SWIG_12(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::WorkflowContextState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::WorkflowContextState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::WorkflowContextState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::WorkflowContextState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_setAlertConditionPresence(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg4 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  arg4 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return ;
  } 
  (arg1)->setAlertConditionPresence((std::string const &)*arg2,arg3,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_evaluateAlertConditions(void * jarg1, char * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->evaluateAlertConditions((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_startup(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  (arg1)->startup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_shutdown(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  (arg1)->shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_addMDStateHandler(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg2 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg2; 
  (arg1)->addMDStateHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_removeMDStateHandler(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::OSCPProviderMDStateHandler *arg2 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg2; 
  (arg1)->removeMDStateHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_setEndpointReference(void * jarg1, char * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setEndpointReference((std::string const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProvider_getEndpointReference(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  result = ((OSCLib::Data::OSCP::OSCPProvider const *)arg1)->getEndpointReference();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProvider_getDeviceCharacteristics(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Dev::DeviceCharacteristics *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  result = (OSCLib::Dev::DeviceCharacteristics *) &((OSCLib::Data::OSCP::OSCPProvider const *)arg1)->getDeviceCharacteristics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_setDeviceCharacteristics(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Dev::DeviceCharacteristics *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Dev::DeviceCharacteristics *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Dev::DeviceCharacteristics const & type is null", 0);
    return ;
  } 
  (arg1)->setDeviceCharacteristics((OSCLib::Dev::DeviceCharacteristics const &)*arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_OSCPProvider_getMDIBVersion(void * jarg1) {
  unsigned long long jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  unsigned long long result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  result = (unsigned long long)((OSCLib::Data::OSCP::OSCPProvider const *)arg1)->getMDIBVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_incrementMDIBVersion(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  (arg1)->incrementMDIBVersion();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider__lock(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_unlock(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProvider_getMutex(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  Poco::Mutex *result = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  result = (Poco::Mutex *) &(arg1)->getMutex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_setPeriodicEventInterval(void * jarg1, int jarg2, int jarg3) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setPeriodicEventInterval(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProvider_getHandlesForPeriodicUpdate(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  result = (arg1)->getHandlesForPeriodicUpdate();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_addHandleForPeriodicEvent(void * jarg1, char * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->addHandleForPeriodicEvent((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_removeHandleForPeriodicEvent(void * jarg1, char * jarg2) {
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->removeHandleForPeriodicEvent((std::string const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequest__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequestSwigExplicitOSCPProvider__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::EnumStringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::EnumStringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::EnumStringMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::EnumStringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequest__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::NumericMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequestSwigExplicitOSCPProvider__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::NumericMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequest__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::StringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequestSwigExplicitOSCPProvider__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::StringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequest__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequestSwigExplicitOSCPProvider__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequest__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::AlertSystemState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequestSwigExplicitOSCPProvider__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSystemState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSystemState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSystemState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::AlertSystemState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequest__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::AlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequestSwigExplicitOSCPProvider__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertConditionState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::AlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequest__SWIG_6(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::AlertSignalState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequestSwigExplicitOSCPProvider__SWIG_6(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::AlertSignalState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::AlertSignalState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::AlertSignalState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::AlertSignalState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequest__SWIG_7(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequest((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProvider_onStateChangeRequestSwigExplicitOSCPProvider__SWIG_7(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProvider *arg1 = (OSCLib::Data::OSCP::OSCPProvider *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  SwigDirector_OSCPProvider *darg = 0;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProvider *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_OSCPProvider *>(arg1);
  result = (OSCLib::Data::OSCP::InvocationState)(darg)->onStateChangeRequestSwigPublic((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProvider_director_connect(void *objarg, SwigDirector_OSCPProvider::SWIG_Callback0_t callback0, SwigDirector_OSCPProvider::SWIG_Callback1_t callback1, SwigDirector_OSCPProvider::SWIG_Callback2_t callback2, SwigDirector_OSCPProvider::SWIG_Callback3_t callback3, SwigDirector_OSCPProvider::SWIG_Callback4_t callback4, SwigDirector_OSCPProvider::SWIG_Callback5_t callback5, SwigDirector_OSCPProvider::SWIG_Callback6_t callback6, SwigDirector_OSCPProvider::SWIG_Callback7_t callback7, SwigDirector_OSCPProvider::SWIG_Callback8_t callback8, SwigDirector_OSCPProvider::SWIG_Callback9_t callback9, SwigDirector_OSCPProvider::SWIG_Callback10_t callback10) {
  OSCLib::Data::OSCP::OSCPProvider *obj = (OSCLib::Data::OSCP::OSCPProvider *)objarg;
  SwigDirector_OSCPProvider *director = dynamic_cast<SwigDirector_OSCPProvider *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderHydraMDSStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *)new SwigDirector_OSCPProviderHydraMDSStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderHydraMDSStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderHydraMDSStateHandler_getState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *) 0 ;
  OSCLib::Data::OSCP::HydraMDSState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *)jarg1; 
  result = (arg1)->getState();
  jresult = new OSCLib::Data::OSCP::HydraMDSState((const OSCLib::Data::OSCP::HydraMDSState &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderHydraMDSStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderHydraMDSStateHandler_getHandleSwigExplicitOSCPProviderHydraMDSStateHandler(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler::getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderHydraMDSStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderHydraMDSStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderHydraMDSStateHandler::SWIG_Callback1_t callback1) {
  OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *)objarg;
  SwigDirector_OSCPProviderHydraMDSStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderHydraMDSStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderLimitAlertConditionStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *)new SwigDirector_OSCPProviderLimitAlertConditionStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderLimitAlertConditionStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderLimitAlertConditionStateHandler_onStateChangeRequest(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderLimitAlertConditionStateHandler_onStateChangeRequestSwigExplicitOSCPProviderLimitAlertConditionStateHandler(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderLimitAlertConditionStateHandler_sourceHasChanged(void * jarg1, char * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->sourceHasChanged((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderLimitAlertConditionStateHandler_sourceHasChangedSwigExplicitOSCPProviderLimitAlertConditionStateHandler(void * jarg1, char * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::sourceHasChanged((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderLimitAlertConditionStateHandler_notifyMDIBObjectChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::LimitAlertConditionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::LimitAlertConditionState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::LimitAlertConditionState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderLimitAlertConditionStateHandler_getState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  OSCLib::Data::OSCP::LimitAlertConditionState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *)jarg1; 
  result = (arg1)->getState();
  jresult = new OSCLib::Data::OSCP::LimitAlertConditionState((const OSCLib::Data::OSCP::LimitAlertConditionState &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderLimitAlertConditionStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderLimitAlertConditionStateHandler_getHandleSwigExplicitOSCPProviderLimitAlertConditionStateHandler(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler::getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderLimitAlertConditionStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderLimitAlertConditionStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderLimitAlertConditionStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPProviderLimitAlertConditionStateHandler::SWIG_Callback2_t callback2, SwigDirector_OSCPProviderLimitAlertConditionStateHandler::SWIG_Callback3_t callback3) {
  OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *)objarg;
  SwigDirector_OSCPProviderLimitAlertConditionStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderLimitAlertConditionStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderNumericMetricStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *)new SwigDirector_OSCPProviderNumericMetricStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderNumericMetricStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderNumericMetricStateHandler_onStateChangeRequest(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::NumericMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderNumericMetricStateHandler_onStateChangeRequestSwigExplicitOSCPProviderNumericMetricStateHandler(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::NumericMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderNumericMetricStateHandler_notifyMDIBObjectChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::NumericMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::NumericMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::NumericMetricState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderNumericMetricStateHandler_getState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::NumericMetricState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *)jarg1; 
  result = (arg1)->getState();
  jresult = new OSCLib::Data::OSCP::NumericMetricState((const OSCLib::Data::OSCP::NumericMetricState &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderNumericMetricStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderNumericMetricStateHandler_getHandleSwigExplicitOSCPProviderNumericMetricStateHandler(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler::getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderNumericMetricStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderNumericMetricStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderNumericMetricStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPProviderNumericMetricStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *)objarg;
  SwigDirector_OSCPProviderNumericMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderNumericMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderRealTimeSampleArrayMetricStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *)new SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderRealTimeSampleArrayMetricStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderRealTimeSampleArrayMetricStateHandler_onStateChangeRequest(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderRealTimeSampleArrayMetricStateHandler_onStateChangeRequestSwigExplicitOSCPProviderRealTimeSampleArrayMetricStateHandler(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderRealTimeSampleArrayMetricStateHandler_notifyMDIBObjectChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::RealTimeSampleArrayMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderRealTimeSampleArrayMetricStateHandler_getState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::RealTimeSampleArrayMetricState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *)jarg1; 
  result = (arg1)->getState();
  jresult = new OSCLib::Data::OSCP::RealTimeSampleArrayMetricState((const OSCLib::Data::OSCP::RealTimeSampleArrayMetricState &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderRealTimeSampleArrayMetricStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderRealTimeSampleArrayMetricStateHandler_getHandleSwigExplicitOSCPProviderRealTimeSampleArrayMetricStateHandler(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler::getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderRealTimeSampleArrayMetricStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *)objarg;
  SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPProviderStringMetricStateHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *)new SwigDirector_OSCPProviderStringMetricStateHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPProviderStringMetricStateHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderStringMetricStateHandler_onStateChangeRequest(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->onStateChangeRequest((OSCLib::Data::OSCP::StringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSCPProviderStringMetricStateHandler_onStateChangeRequestSwigExplicitOSCPProviderStringMetricStateHandler(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  OSCLib::Data::OSCP::OperationInvocationContext *arg3 = 0 ;
  OSCLib::Data::OSCP::InvocationState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return 0;
  } 
  arg3 = (OSCLib::Data::OSCP::OperationInvocationContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::OperationInvocationContext const & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Data::OSCP::InvocationState)(arg1)->OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::onStateChangeRequest((OSCLib::Data::OSCP::StringMetricState const &)*arg2,(OSCLib::Data::OSCP::OperationInvocationContext const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderStringMetricStateHandler_notifyMDIBObjectChanged(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::StringMetricState *arg2 = 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::StringMetricState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OSCLib::Data::OSCP::StringMetricState const & type is null", 0);
    return ;
  } 
  (arg1)->notifyMDIBObjectChanged((OSCLib::Data::OSCP::StringMetricState const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPProviderStringMetricStateHandler_getState(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  OSCLib::Data::OSCP::StringMetricState result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *)jarg1; 
  result = (arg1)->getState();
  jresult = new OSCLib::Data::OSCP::StringMetricState((const OSCLib::Data::OSCP::StringMetricState &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderStringMetricStateHandler_getHandle(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *)jarg1; 
  result = (arg1)->getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OSCPProviderStringMetricStateHandler_getHandleSwigExplicitOSCPProviderStringMetricStateHandler(void * jarg1) {
  char * jresult ;
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *) 0 ;
  std::string result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *)jarg1; 
  result = (arg1)->OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler::getHandle();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPProviderStringMetricStateHandler_director_connect(void *objarg, SwigDirector_OSCPProviderStringMetricStateHandler::SWIG_Callback0_t callback0, SwigDirector_OSCPProviderStringMetricStateHandler::SWIG_Callback1_t callback1, SwigDirector_OSCPProviderStringMetricStateHandler::SWIG_Callback2_t callback2) {
  OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *obj = (OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *)objarg;
  SwigDirector_OSCPProviderStringMetricStateHandler *director = dynamic_cast<SwigDirector_OSCPProviderStringMetricStateHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPHelloReceivedHandler() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *)new SwigDirector_OSCPHelloReceivedHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPHelloReceivedHandler(void * jarg1) {
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *arg1 = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPHelloReceivedHandler_helloReceived(void * jarg1, char * jarg2) {
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *arg1 = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *) 0 ;
  std::string arg2 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->helloReceived(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPHelloReceivedHandler_helloReceivedSwigExplicitOSCPHelloReceivedHandler(void * jarg1, char * jarg2) {
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *arg1 = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *) 0 ;
  std::string arg2 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->OSCLib::Data::OSCP::OSCPHelloReceivedHandler::helloReceived(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPHelloReceivedHandler_director_connect(void *objarg, SwigDirector_OSCPHelloReceivedHandler::SWIG_Callback0_t callback0) {
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *obj = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *)objarg;
  SwigDirector_OSCPHelloReceivedHandler *director = dynamic_cast<SwigDirector_OSCPHelloReceivedHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSCPServiceManager() {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPServiceManager *result = 0 ;
  
  result = (OSCLib::Data::OSCP::OSCPServiceManager *)new OSCLib::Data::OSCP::OSCPServiceManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSCPServiceManager(void * jarg1) {
  OSCLib::Data::OSCP::OSCPServiceManager *arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPServiceManager_connect(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPServiceManager *arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->connect((std::string const &)*arg2);
  jresult = result ? new std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPServiceManager_discoverEndpointReference(void * jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPServiceManager *arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->discoverEndpointReference((std::string const &)*arg2);
  jresult = result ? new std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSCPServiceManager_discoverOSCP(void * jarg1) {
  void * jresult ;
  OSCLib::Data::OSCP::OSCPServiceManager *arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *) 0 ;
  std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > result;
  
  arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *)jarg1; 
  result = (arg1)->discoverOSCP();
  jresult = new std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > >((const std::vector< std::shared_ptr< OSCLib::Data::OSCP::OSCPConsumer > > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPServiceManager_setHelloReceivedHandler(void * jarg1, void * jarg2) {
  OSCLib::Data::OSCP::OSCPServiceManager *arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *) 0 ;
  OSCLib::Data::OSCP::OSCPHelloReceivedHandler *arg2 = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *) 0 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *)jarg1; 
  arg2 = (OSCLib::Data::OSCP::OSCPHelloReceivedHandler *)jarg2; 
  (arg1)->setHelloReceivedHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSCPServiceManager_helloReceived(void * jarg1, char * jarg2) {
  OSCLib::Data::OSCP::OSCPServiceManager *arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *) 0 ;
  std::string arg2 ;
  
  arg1 = (OSCLib::Data::OSCP::OSCPServiceManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->helloReceived(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DeviceCharacteristics() {
  void * jresult ;
  OSCLib::Dev::DeviceCharacteristics *result = 0 ;
  
  result = (OSCLib::Dev::DeviceCharacteristics *)new OSCLib::Dev::DeviceCharacteristics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DeviceCharacteristics(void * jarg1) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceCharacteristics_setManufacturer(void * jarg1, char * jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setManufacturer((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceCharacteristics_setManufacturerUrl(void * jarg1, char * jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setManufacturerUrl((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceCharacteristics_addModelName(void * jarg1, char * jarg2, char * jarg3) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->addModelName((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DeviceCharacteristics_getManufacturer(void * jarg1) {
  char * jresult ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getManufacturer();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DeviceCharacteristics_getManufacturerUrl(void * jarg1) {
  char * jresult ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getManufacturerUrl();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DeviceCharacteristics_getModelName(void * jarg1, char * jarg2) {
  char * jresult ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getModelName((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DeviceCharacteristics_getModelNames(void * jarg1) {
  void * jresult ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  OSCLib::Dev::LocalizedString *result = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  result = (OSCLib::Dev::LocalizedString *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getModelNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DeviceCharacteristics_getModelNumber(void * jarg1) {
  char * jresult ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getModelNumber();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DeviceCharacteristics_getModelUrl(void * jarg1) {
  char * jresult ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getModelUrl();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DeviceCharacteristics_getPresentationUrl(void * jarg1) {
  char * jresult ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getPresentationUrl();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceCharacteristics_setModelNumber(void * jarg1, char * jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setModelNumber((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceCharacteristics_setModelUrl(void * jarg1, char * jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setModelUrl((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceCharacteristics_setPresentationUrl(void * jarg1, char * jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setPresentationUrl((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceCharacteristics_addFriendlyName(void * jarg1, char * jarg2, char * jarg3) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->addFriendlyName((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DeviceCharacteristics_getFriendlyName(void * jarg1, char * jarg2) {
  char * jresult ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getFriendlyName((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DeviceCharacteristics_getFriendlyNames(void * jarg1) {
  void * jresult ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  OSCLib::Dev::LocalizedString *result = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  result = (OSCLib::Dev::LocalizedString *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getFriendlyNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DeviceCharacteristics_getFirmwareVersion(void * jarg1) {
  char * jresult ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getFirmwareVersion();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DeviceCharacteristics_getSerialNumber(void * jarg1) {
  char * jresult ;
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  result = (std::string *) &((OSCLib::Dev::DeviceCharacteristics const *)arg1)->getSerialNumber();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceCharacteristics_setFirmwareVersion(void * jarg1, char * jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setFirmwareVersion((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceCharacteristics_setSerialNumber(void * jarg1, char * jarg2) {
  OSCLib::Dev::DeviceCharacteristics *arg1 = (OSCLib::Dev::DeviceCharacteristics *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OSCLib::Dev::DeviceCharacteristics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setSerialNumber((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugOut_DEBUG_LEVEL_set(int jarg1) {
  OSCLib::Util::DebugOut::LogLevel arg1 ;
  
  arg1 = (OSCLib::Util::DebugOut::LogLevel)jarg1; 
  OSCLib::Util::DebugOut::DEBUG_LEVEL = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugOut_DEBUG_LEVEL_get() {
  int jresult ;
  OSCLib::Util::DebugOut::LogLevel result;
  
  result = (OSCLib::Util::DebugOut::LogLevel)OSCLib::Util::DebugOut::DEBUG_LEVEL;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DebugOut__SWIG_0(int jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  OSCLib::Util::DebugOut::LogLevel arg1 ;
  std::ostream *arg2 = 0 ;
  std::string *arg3 = 0 ;
  OSCLib::Util::DebugOut *result = 0 ;
  
  arg1 = (OSCLib::Util::DebugOut::LogLevel)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (OSCLib::Util::DebugOut *)new OSCLib::Util::DebugOut(arg1,*arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DebugOut__SWIG_1(int jarg1, void * jarg2) {
  void * jresult ;
  OSCLib::Util::DebugOut::LogLevel arg1 ;
  std::ostream *arg2 = 0 ;
  OSCLib::Util::DebugOut *result = 0 ;
  
  arg1 = (OSCLib::Util::DebugOut::LogLevel)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Util::DebugOut *)new OSCLib::Util::DebugOut(arg1,*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DebugOut__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  std::ostream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  OSCLib::Util::DebugOut *result = 0 ;
  
  arg1 = (std::ostream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Util::DebugOut *)new OSCLib::Util::DebugOut(*arg1,(std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DebugOut__SWIG_3(void * jarg1) {
  void * jresult ;
  std::ostream *arg1 = 0 ;
  OSCLib::Util::DebugOut *result = 0 ;
  
  arg1 = (std::ostream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return 0;
  } 
  result = (OSCLib::Util::DebugOut *)new OSCLib::Util::DebugOut(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DebugOut__SWIG_4(int jarg1, char * jarg2) {
  void * jresult ;
  OSCLib::Util::DebugOut::LogLevel arg1 ;
  std::string *arg2 = 0 ;
  OSCLib::Util::DebugOut *result = 0 ;
  
  arg1 = (OSCLib::Util::DebugOut::LogLevel)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OSCLib::Util::DebugOut *)new OSCLib::Util::DebugOut(arg1,(std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DebugOut__SWIG_5(int jarg1) {
  void * jresult ;
  OSCLib::Util::DebugOut::LogLevel arg1 ;
  OSCLib::Util::DebugOut *result = 0 ;
  
  arg1 = (OSCLib::Util::DebugOut::LogLevel)jarg1; 
  result = (OSCLib::Util::DebugOut *)new OSCLib::Util::DebugOut(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DebugOut(void * jarg1) {
  OSCLib::Util::DebugOut *arg1 = (OSCLib::Util::DebugOut *) 0 ;
  
  arg1 = (OSCLib::Util::DebugOut *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugOut_openLogFile__SWIG_0(char * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  result = (bool)OSCLib::Util::DebugOut::openLogFile((std::string const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugOut_openLogFile__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)OSCLib::Util::DebugOut::openLogFile((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugOut_closeLogFile() {
  OSCLib::Util::DebugOut::closeLogFile();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugOut_flush(void * jarg1) {
  OSCLib::Util::DebugOut *arg1 = (OSCLib::Util::DebugOut *) 0 ;
  
  arg1 = (OSCLib::Util::DebugOut *)jarg1; 
  (arg1)->flush();
}


SWIGEXPORT OSCLib::Data::OSCP::OSCPConsumerEventHandler * SWIGSTDCALL CSharp_OSCPConsumerAlertConditionStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPConsumerEventHandler * SWIGSTDCALL CSharp_OSCPConsumerAlertSignalStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPConsumerEventHandler * SWIGSTDCALL CSharp_OSCPConsumerAlertSystemStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPConsumerEventHandler * SWIGSTDCALL CSharp_OSCPConsumerEnumStringMetricStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPConsumerEventHandler * SWIGSTDCALL CSharp_OSCPConsumerLimitAlertConditionStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPConsumerEventHandler * SWIGSTDCALL CSharp_OSCPConsumerNumericMetricStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPConsumerEventHandler * SWIGSTDCALL CSharp_OSCPConsumerRealTimeSampleArrayMetricStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPConsumerEventHandler * SWIGSTDCALL CSharp_OSCPConsumerStringMetricStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPConsumerEventHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderActivateOperationHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderAlertConditionStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderAlertSignalStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderAlertSystemStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderClockStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderClockStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderComponentStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderComponentStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderContextStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderContextStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderEnumStringMetricStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderHydraMDSStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderLimitAlertConditionStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderNumericMetricStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderRealTimeSampleArrayMetricStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

SWIGEXPORT OSCLib::Data::OSCP::OSCPProviderMDStateHandler * SWIGSTDCALL CSharp_OSCPProviderStringMetricStateHandler_SWIGUpcast(OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler *jarg1) {
    return (OSCLib::Data::OSCP::OSCPProviderMDStateHandler *)jarg1;
}

#ifdef __cplusplus
}
#endif

