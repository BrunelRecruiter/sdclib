/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_OSCLib_WRAP_H_
#define SWIG_OSCLib_WRAP_H_

class SwigDirector_OSCPCachedProvider : public OSCLib::Data::OSCP::OSCPCachedProvider, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPCachedProvider(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPCachedProvider();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_OSCPConsumerEventHandler : public OSCLib::Data::OSCP::OSCPConsumerEventHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPConsumerEventHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPConsumerEventHandler();
    virtual void onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is);
    virtual std::string getHandle();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_OSCPConsumerAlertConditionStateHandler : public OSCLib::Data::OSCP::OSCPConsumerAlertConditionStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPConsumerAlertConditionStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPConsumerAlertConditionStateHandler();
    virtual void onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is);
    virtual std::string getHandle();
    virtual void onStateChanged(OSCLib::Data::OSCP::AlertConditionState const &state);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPConsumerAlertSignalStateHandler : public OSCLib::Data::OSCP::OSCPConsumerAlertSignalStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPConsumerAlertSignalStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPConsumerAlertSignalStateHandler();
    virtual void onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is);
    virtual std::string getHandle();
    virtual void onStateChanged(OSCLib::Data::OSCP::AlertSignalState const &state);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPConsumerAlertSystemStateHandler : public OSCLib::Data::OSCP::OSCPConsumerAlertSystemStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPConsumerAlertSystemStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPConsumerAlertSystemStateHandler();
    virtual void onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is);
    virtual std::string getHandle();
    virtual void onStateChanged(OSCLib::Data::OSCP::AlertSystemState const &state);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPConsumerConnectionLostHandler : public OSCLib::Data::OSCP::OSCPConsumerConnectionLostHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPConsumerConnectionLostHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPConsumerConnectionLostHandler();
    virtual void onConnectionLost();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_OSCPConsumerContextStateChangedHandler : public OSCLib::Data::OSCP::OSCPConsumerContextStateChangedHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPConsumerContextStateChangedHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPConsumerContextStateChangedHandler();
    virtual void onContextStateChanged(std::vector< std::string > const &handles);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_OSCPConsumerEnumStringMetricStateHandler : public OSCLib::Data::OSCP::OSCPConsumerEnumStringMetricStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPConsumerEnumStringMetricStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPConsumerEnumStringMetricStateHandler();
    virtual void onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is);
    virtual std::string getHandle();
    virtual void onStateChanged(OSCLib::Data::OSCP::EnumStringMetricState const &state);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPConsumerLimitAlertConditionStateHandler : public OSCLib::Data::OSCP::OSCPConsumerLimitAlertConditionStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPConsumerLimitAlertConditionStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPConsumerLimitAlertConditionStateHandler();
    virtual void onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is);
    virtual std::string getHandle();
    virtual void onStateChanged(OSCLib::Data::OSCP::LimitAlertConditionState const &state);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPConsumerNumericMetricStateHandler : public OSCLib::Data::OSCP::OSCPConsumerNumericMetricStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPConsumerNumericMetricStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPConsumerNumericMetricStateHandler();
    virtual void onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is);
    virtual std::string getHandle();
    virtual void onStateChanged(OSCLib::Data::OSCP::NumericMetricState const &state);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler : public OSCLib::Data::OSCP::OSCPConsumerRealTimeSampleArrayMetricStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPConsumerRealTimeSampleArrayMetricStateHandler();
    virtual void onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is);
    virtual std::string getHandle();
    virtual void onStateChanged(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &state);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPConsumerStringMetricStateHandler : public OSCLib::Data::OSCP::OSCPConsumerStringMetricStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPConsumerStringMetricStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPConsumerStringMetricStateHandler();
    virtual void onOperationInvoked(OSCLib::Data::OSCP::OperationInvocationContext const &oic, OSCLib::Data::OSCP::InvocationState is);
    virtual std::string getHandle();
    virtual void onStateChanged(OSCLib::Data::OSCP::StringMetricState const &state);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPProviderMDStateHandler : public OSCLib::Data::OSCP::OSCPProviderMDStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderMDStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderMDStateHandler();
    virtual std::string getHandle();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_OSCPProviderActivateOperationHandler : public OSCLib::Data::OSCP::OSCPProviderActivateOperationHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderActivateOperationHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderActivateOperationHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::InvocationState onActivateRequest(OSCLib::Data::OSCP::MDIBContainer const &mdib, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_OSCPProviderAlertConditionStateHandler : public OSCLib::Data::OSCP::OSCPProviderAlertConditionStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderAlertConditionStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderAlertConditionStateHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::AlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual void sourceHasChanged(std::string const &sourceHandle);
    virtual OSCLib::Data::OSCP::AlertConditionState getState();
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    bool swig_override[4];
};

class SwigDirector_OSCPProviderAlertSignalStateHandler : public OSCLib::Data::OSCP::OSCPProviderAlertSignalStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderAlertSignalStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderAlertSignalStateHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::AlertSignalState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::AlertSignalState getState();
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPProviderAlertSystemStateHandler : public OSCLib::Data::OSCP::OSCPProviderAlertSystemStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderAlertSystemStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderAlertSystemStateHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::AlertSystemState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::AlertSystemState getState();
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPProviderClockStateHandler : public OSCLib::Data::OSCP::OSCPProviderClockStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderClockStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderClockStateHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::ClockState getState();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_OSCPProviderComponentStateHandler : public OSCLib::Data::OSCP::OSCPProviderComponentStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderComponentStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderComponentStateHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::ComponentState getState();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_OSCPProviderContextStateHandler : public OSCLib::Data::OSCP::OSCPProviderContextStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderContextStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderContextStateHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(std::vector< OSCLib::Data::OSCP::EnsembleContextState > const &ecStates, std::vector< OSCLib::Data::OSCP::LocationContextState > const &lcStates, std::vector< OSCLib::Data::OSCP::OperatorContextState > const &ocStates, std::vector< OSCLib::Data::OSCP::PatientContextState > const &pcStates, std::vector< OSCLib::Data::OSCP::WorkflowContextState > const &wcStates, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual std::vector< OSCLib::Data::OSCP::EnsembleContextState > getEnsembleContextStates();
    virtual std::vector< OSCLib::Data::OSCP::LocationContextState > getLocationContextStates();
    virtual std::vector< OSCLib::Data::OSCP::OperatorContextState > getOperatorContextStates();
    virtual std::vector< OSCLib::Data::OSCP::PatientContextState > getPatientContextStates();
    virtual std::vector< OSCLib::Data::OSCP::WorkflowContextState > getWorkflowContextStates();
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_OSCPProviderEnumStringMetricStateHandler : public OSCLib::Data::OSCP::OSCPProviderEnumStringMetricStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderEnumStringMetricStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderEnumStringMetricStateHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::EnumStringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::EnumStringMetricState getState();
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPProvider : public OSCLib::Data::OSCP::OSCPProvider, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProvider(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProvider();
    virtual OSCLib::Data::OSCP::MDIBContainer getMDIB();
    virtual OSCLib::Data::OSCP::MDDescription getMDDescription();
    virtual OSCLib::Data::OSCP::MDState getMDState();
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::EnumStringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequestSwigPublic(OSCLib::Data::OSCP::EnumStringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
      return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
    }
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::NumericMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequestSwigPublic(OSCLib::Data::OSCP::NumericMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
      return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
    }
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::StringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequestSwigPublic(OSCLib::Data::OSCP::StringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
      return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
    }
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequestSwigPublic(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
      return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
    }
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::AlertSystemState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequestSwigPublic(OSCLib::Data::OSCP::AlertSystemState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
      return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
    }
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::AlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequestSwigPublic(OSCLib::Data::OSCP::AlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
      return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
    }
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::AlertSignalState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequestSwigPublic(OSCLib::Data::OSCP::AlertSignalState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
      return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
    }
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::LimitAlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequestSwigPublic(OSCLib::Data::OSCP::LimitAlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic) {
      return OSCLib::Data::OSCP::OSCPProvider::onStateChangeRequest(state,oic);
    }
public:
    bool swig_overrides(int n) {
      return (n < 11 ? swig_override[n] : false);
    }
protected:
    bool swig_override[11];
};

class SwigDirector_OSCPProviderHydraMDSStateHandler : public OSCLib::Data::OSCP::OSCPProviderHydraMDSStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderHydraMDSStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderHydraMDSStateHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::HydraMDSState getState();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_OSCPProviderLimitAlertConditionStateHandler : public OSCLib::Data::OSCP::OSCPProviderLimitAlertConditionStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderLimitAlertConditionStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderLimitAlertConditionStateHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::LimitAlertConditionState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual void sourceHasChanged(std::string const &sourceHandle);
    virtual OSCLib::Data::OSCP::LimitAlertConditionState getState();
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    bool swig_override[4];
};

class SwigDirector_OSCPProviderNumericMetricStateHandler : public OSCLib::Data::OSCP::OSCPProviderNumericMetricStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderNumericMetricStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderNumericMetricStateHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::NumericMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::NumericMetricState getState();
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler : public OSCLib::Data::OSCP::OSCPProviderRealTimeSampleArrayMetricStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderRealTimeSampleArrayMetricStateHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::RealTimeSampleArrayMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::RealTimeSampleArrayMetricState getState();
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPProviderStringMetricStateHandler : public OSCLib::Data::OSCP::OSCPProviderStringMetricStateHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPProviderStringMetricStateHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPProviderStringMetricStateHandler();
    virtual std::string getHandle();
    virtual OSCLib::Data::OSCP::InvocationState onStateChangeRequest(OSCLib::Data::OSCP::StringMetricState const &state, OSCLib::Data::OSCP::OperationInvocationContext const &oic);
    virtual OSCLib::Data::OSCP::StringMetricState getState();
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_OSCPHelloReceivedHandler : public OSCLib::Data::OSCP::OSCPHelloReceivedHandler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_OSCPHelloReceivedHandler(JNIEnv *jenv);
    virtual ~SwigDirector_OSCPHelloReceivedHandler();
    virtual void helloReceived(std::string const &epr);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};


#endif
