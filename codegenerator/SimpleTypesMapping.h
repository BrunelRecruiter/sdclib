/*
 * SimpleTypesMapping.h
 *
 *  Created on: 22.06.2017
 *      Author: buerger
 *
 *  This file is autogenerated.
 *
 *  Do not edit this file. For customization please edit the SimpleTypesMapping_beginning.hxx or SimpleTypesMapping_ending.hxx
 */

#ifndef SIMPLETYPESMAPPING_H_
#define SIMPLETYPESMAPPING_H_

#include "osdm-fwd.hxx"

namespace OSCLib {
namespace Data {
namespace OSCP {

typedef unsigned long Timestamp;
typedef unsigned long VersionCounter;
typedef unsigned long ReferencedVersion;
typedef std::string CodeIdentifier;
typedef std::string SymbolicCodeName;
typedef std::string LocalizedTextRef;
typedef std::string Handle;
typedef std::string HandleRef;
typedef double QualityIndicator;
typedef std::string TimeZone;
typedef unsigned int TransactionId;


enum class MeasurementValidity
{
	Vld,
	Vldated,
	Ong,
	Qst,
	Calib,
	Inv,
	Oflw,
	Uflw,
	NA
};

enum class SafetyClassification
{
	Inf,
	MedA,
	MedB,
	MedC
};

enum class ComponentActivation
{
	On,
	NotRdy,
	StndBy,
	Off,
	Shtdn,
	Fail
};

enum class CalibrationState
{
	No,
	Req,
	Cal
};

enum class CalibrationType
{
	Offset,
	Gain,
	TP,
	Unspec
};

enum class MdsOperatingMode
{
	Nml,
	Dmo,
	Srv,
	Mtn
};

enum class AlertActivation
{
	On,
	Off,
	Psd
};

enum class AlertConditionKind
{
	Phy,
	Tec,
	Oth
};

enum class AlertConditionPriority
{
	Lo,
	Me,
	Hi,
	None
};

enum class AlertConditionMonitoredLimits
{
	All,
	LoOff,
	HiOff,
	None
};

enum class AlertSignalManifestation
{
	Aud,
	Vis,
	Tan,
	Oth
};

enum class AlertSignalPresence
{
	On,
	Off,
	Latch,
	Ack
};

enum class AlertSignalPrimaryLocation
{
	Loc,
	Rem
};

enum class GenerationMode
{
	Real,
	Test,
	Demo
};

enum class MetricCategory
{
	Unspec,
	Msrmt,
	Clc,
	Set,
	Preset,
	Rcmm
};

enum class DerivationMethod
{
	Auto,
	Man
};

enum class MetricAvailability
{
	Intr,
	Cont
};

enum class OperatingMode
{
	Dis,
	En,
	NA
};

enum class ContextAssociation
{
	No,
	Pre,
	Assoc,
	Dis
};

enum class Sex
{
	Unspec,
	M,
	F,
	Unkn
};

enum class PatientType
{
	Unspec,
	Ad,
	Ped,
	Neo
};

enum class InvocationState
{
	Wait,
	Start,
	Cnclld,
	CnclldMan,
	Fin,
	FinMod,
	Fail
};

enum class InvocationError
{
	Unspec,
	Unkn,
	Inv,
	Oth
};

enum class DescriptionModificationType
{
	Crt,
	Upt,
	Del
};

enum class RetrievabilityMethod
{
	Get,
	Per,
	Ep,
	Strm
};

class EnumToString {
public:
	static static std::string convert(MeasurementValidity source);
	static static std::string convert(SafetyClassification source);
	static static std::string convert(ComponentActivation source);
	static static std::string convert(CalibrationState source);
	static static std::string convert(CalibrationType source);
	static static std::string convert(MdsOperatingMode source);
	static static std::string convert(AlertActivation source);
	static static std::string convert(AlertConditionKind source);
	static static std::string convert(AlertConditionPriority source);
	static static std::string convert(AlertConditionMonitoredLimits source);
	static static std::string convert(AlertSignalManifestation source);
	static static std::string convert(AlertSignalPresence source);
	static static std::string convert(AlertSignalPrimaryLocation source);
	static static std::string convert(GenerationMode source);
	static static std::string convert(MetricCategory source);
	static static std::string convert(DerivationMethod source);
	static static std::string convert(MetricAvailability source);
	static static std::string convert(OperatingMode source);
	static static std::string convert(ContextAssociation source);
	static static std::string convert(Sex source);
	static static std::string convert(PatientType source);
	static static std::string convert(InvocationState source);
	static static std::string convert(InvocationError source);
	static static std::string convert(DescriptionModificationType source);
	static static std::string convert(RetrievabilityMethod source);
};


} /* namespace OSCP */
} /* namespace Data */
} /* namespace OSCLib */

#endif /* SIMPLETYPESMAPPING_H_ */
