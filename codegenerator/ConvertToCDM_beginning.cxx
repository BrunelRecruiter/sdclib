#include "osdm.hxx"
#include "OSCLib/Data/OSCP/MDIB/SimpleTypesMapping.h"
#include "OSCLib/Data/OSCP/MDIB/ConvertToCDM.h"

#include <stdexcept>


/*
 * ConvertToCDM.cpp
 *
 *  Created on: 22.06.2017
 *      Author: buerger
 *
 *  This file is autogenerated.
 *
 *  Do not edit this file. For customization please edit the ConvertToCDM_beginning.cxx or ConvertToCDM_ending.cxx
 */


namespace OSCLib {
namespace Data {
namespace OSCP {

ConvertToCDM::ConvertToCDM() {

}

ConvertToCDM::~ConvertToCDM() {

}


bool ConvertToCDM::convert(const bool & source) {
	return source;
}

double ConvertToCDM::convert(const double & source) {
	return source;
}

unsigned int ConvertToCDM::convert(const unsigned int & source) {
	return source;
}

int ConvertToCDM::convert(const int & source) {
	return source;
}

long ConvertToCDM::convert(const long & source) {
	return source;
}

long long ConvertToCDM::convert(const long long & source) {
	return source;
}

std::string ConvertToCDM::convert(const std::string & source) {
	return source;
}

unsigned short int ConvertToCDM::convert(const unsigned short int & source) {
	return source;
}

unsigned long ConvertToCDM::convert(const unsigned long & source){
	return source;
}

unsigned long long ConvertToCDM::convert(const unsigned long long & source) {
	return source;
}

xml_schema::Duration ConvertToCDM::convert(const xml_schema::Duration & source) {
	return source;
}

xml_schema::Qname ConvertToCDM::convert(const xml_schema::Qname & source) {
	return source;
}

xml_schema::Language ConvertToCDM::convert(const xml_schema::Language & source) {
	return source;
}

xml_schema::Uri ConvertToCDM::convert(const xml_schema::Uri & source) {
	return source;
}

xml_schema::DateTime ConvertToCDM::convert(const xml_schema::DateTime & source) {
	return source;
}


template <class WrapperType>
std::unique_ptr<typename WrapperType::WrappedType> ConvertToCDM::convert(const WrapperType & source) {
	return std::unique_ptr<typename WrapperType::WrappedType>(source.data->_clone());
}


// autogenerated code


