/*
 * Defaults.h
 *
 *  Created on: 20.07.2017
 *      Author: buerger
 *
 *  This file is autogenerated.
 *
 *  Do not edit this file. For customization please edit the Defaults_beginning.h or Defaults_ending.h
 */

#ifndef DATA_SDC_MDIB_DEFAULTS_H_
#define DATA_SDC_MDIB_DEFAULTS_H_

#include "SDCLib/Data/SDC/MDIB/MDIB-fwd.h"
#include "osdm-fwd.hxx"

namespace SDCLib {
namespace Data {
namespace SDC {

extern const std::string NOT_ASSIGNED;

class Defaults {
public:
	Defaults();
	virtual ~Defaults();
	static CDM::Mdib * MdibInit();
	static CDM::MdDescription * MdDescriptionInit();
	static CDM::MdState * MdStateInit();
	static CDM::LocalizedText * LocalizedTextInit();
	static CDM::CodedValue * CodedValueInit(CodeIdentifier code);
	static CDM::Translation * TranslationInit(CodeIdentifier code);
	static CDM::InstanceIdentifier * InstanceIdentifierInit();
	static CDM::Range * RangeInit();
	static CDM::Measurement * MeasurementInit(CodedValue measurementunit, double measuredvalue);
	static CDM::ApprovedJurisdictions * ApprovedJurisdictionsInit();
	static CDM::OperatingJurisdiction * OperatingJurisdictionInit();
	static CDM::PhysicalConnectorInfo * PhysicalConnectorInfoInit();
	static CDM::ProductionSpecification * ProductionSpecificationInit(CodedValue spectype, std::string productionspec);
	static CDM::CalibrationInfo * CalibrationInfoInit();
	static CDM::CalibrationDocumentation * CalibrationDocumentationInit();
	static CDM::CalibrationResult * CalibrationResultInit(CodedValue code, Measurement value);
	static CDM::MdsDescriptor * MdsDescriptorInit(Handle handle);
	static CDM::MetaData * MetaDataInit();
	static CDM::Udi * UdiInit(std::string deviceidentifier, std::string humanreadableform, InstanceIdentifier issuer);
	static CDM::MdsState * MdsStateInit(HandleRef descriptorhandle);
	static CDM::VmdDescriptor * VmdDescriptorInit(Handle handle);
	static CDM::VmdState * VmdStateInit(HandleRef descriptorhandle);
	static CDM::ChannelDescriptor * ChannelDescriptorInit(Handle handle);
	static CDM::ChannelState * ChannelStateInit(HandleRef descriptorhandle);
	static CDM::SystemSignalActivation * SystemSignalActivationInit(AlertSignalManifestation manifestation, AlertActivation state);
	static CDM::AlertSystemDescriptor * AlertSystemDescriptorInit(Handle handle);
	static CDM::AlertSystemState * AlertSystemStateInit(HandleRef descriptorhandle, AlertActivation activationstate);
	static CDM::CauseInfo * CauseInfoInit();
	static CDM::RemedyInfo * RemedyInfoInit();
	static CDM::AlertConditionDescriptor * AlertConditionDescriptorInit(Handle handle, AlertConditionKind kind, AlertConditionPriority priority);
	static CDM::AlertConditionState * AlertConditionStateInit(HandleRef descriptorhandle, AlertActivation activationstate);
	static CDM::LimitAlertConditionDescriptor * LimitAlertConditionDescriptorInit(Handle handle, AlertConditionKind kind, AlertConditionPriority priority, Range maxlimits);
	static CDM::LimitAlertConditionState * LimitAlertConditionStateInit(HandleRef descriptorhandle, AlertActivation activationstate, Range limits, AlertConditionMonitoredLimits monitoredalertlimits);
	static CDM::AlertSignalDescriptor * AlertSignalDescriptorInit(Handle handle, AlertSignalManifestation manifestation, bool latching);
	static CDM::AlertSignalState * AlertSignalStateInit(HandleRef descriptorhandle, AlertActivation activationstate);
	static CDM::MetricQuality * MetricQualityInit(MeasurementValidity validity);
	static CDM::Annotation * AnnotationInit(CodedValue type);
	static CDM::NumericMetricValue * NumericMetricValueInit(MetricQuality metricquality);
	static CDM::StringMetricValue * StringMetricValueInit(MetricQuality metricquality);
	static CDM::SampleArrayValue * SampleArrayValueInit(MetricQuality metricquality);
	static CDM::ApplyAnnotation * ApplyAnnotationInit(unsigned int annotationindex, unsigned int sampleindex);
	static CDM::Relation * RelationInit(Kind kind, EntryRef entries);
	static CDM::NumericMetricDescriptor * NumericMetricDescriptorInit(Handle handle, CodedValue unit, MetricCategory metriccategory, MetricAvailability metricavailability, double resolution);
	static CDM::NumericMetricState * NumericMetricStateInit(HandleRef descriptorhandle);
	static CDM::StringMetricDescriptor * StringMetricDescriptorInit(Handle handle, CodedValue unit, MetricCategory metriccategory, MetricAvailability metricavailability);
	static CDM::StringMetricState * StringMetricStateInit(HandleRef descriptorhandle);
	static CDM::EnumStringMetricDescriptor * EnumStringMetricDescriptorInit(Handle handle, CodedValue unit, MetricCategory metriccategory, MetricAvailability metricavailability);
	static CDM::AllowedValue * AllowedValueInit(std::string value);
	static CDM::EnumStringMetricState * EnumStringMetricStateInit(HandleRef descriptorhandle);
	static CDM::RealTimeSampleArrayMetricDescriptor * RealTimeSampleArrayMetricDescriptorInit(Handle handle, CodedValue unit, MetricCategory metriccategory, MetricAvailability metricavailability, double resolution, xml_schema::Duration sampleperiod);
	static CDM::RealTimeSampleArrayMetricState * RealTimeSampleArrayMetricStateInit(HandleRef descriptorhandle);
	static CDM::DistributionSampleArrayMetricDescriptor * DistributionSampleArrayMetricDescriptorInit(Handle handle, CodedValue unit, MetricCategory metriccategory, MetricAvailability metricavailability, CodedValue domainunit, Range distributionrange, double resolution);
	static CDM::DistributionSampleArrayMetricState * DistributionSampleArrayMetricStateInit(HandleRef descriptorhandle);
	static CDM::ScoDescriptor * ScoDescriptorInit(Handle handle);
	static CDM::ScoState * ScoStateInit(HandleRef descriptorhandle);
	static CDM::OperationGroup * OperationGroupInit(CodedValue type);
	static CDM::SetValueOperationDescriptor * SetValueOperationDescriptorInit(Handle handle, HandleRef operationtarget);
	static CDM::SetValueOperationState * SetValueOperationStateInit(HandleRef descriptorhandle, OperatingMode operatingmode);
	static CDM::SetStringOperationDescriptor * SetStringOperationDescriptorInit(Handle handle, HandleRef operationtarget);
	static CDM::SetStringOperationState * SetStringOperationStateInit(HandleRef descriptorhandle, OperatingMode operatingmode);
	static CDM::AllowedValues * AllowedValuesInit();
	static CDM::ActivateOperationDescriptor * ActivateOperationDescriptorInit(Handle handle, HandleRef operationtarget);
	static CDM::Argument * ArgumentInit(CodedValue argname, xml_schema::Qname arg);
	static CDM::ActivateOperationState * ActivateOperationStateInit(HandleRef descriptorhandle, OperatingMode operatingmode);
	static CDM::SetContextStateOperationDescriptor * SetContextStateOperationDescriptorInit(Handle handle, HandleRef operationtarget);
	static CDM::SetContextStateOperationState * SetContextStateOperationStateInit(HandleRef descriptorhandle, OperatingMode operatingmode);
	static CDM::SetMetricStateOperationDescriptor * SetMetricStateOperationDescriptorInit(Handle handle, HandleRef operationtarget);
	static CDM::SetMetricStateOperationState * SetMetricStateOperationStateInit(HandleRef descriptorhandle, OperatingMode operatingmode);
	static CDM::SetComponentStateOperationDescriptor * SetComponentStateOperationDescriptorInit(Handle handle, HandleRef operationtarget);
	static CDM::SetComponentStateOperationState * SetComponentStateOperationStateInit(HandleRef descriptorhandle, OperatingMode operatingmode);
	static CDM::SetAlertStateOperationDescriptor * SetAlertStateOperationDescriptorInit(Handle handle, HandleRef operationtarget);
	static CDM::SetAlertStateOperationState * SetAlertStateOperationStateInit(HandleRef descriptorhandle, OperatingMode operatingmode);
	static CDM::ClockDescriptor * ClockDescriptorInit(Handle handle);
	static CDM::ClockState * ClockStateInit(HandleRef descriptorhandle, bool remotesync);
	static CDM::BatteryDescriptor * BatteryDescriptorInit(Handle handle);
	static CDM::BatteryState * BatteryStateInit(HandleRef descriptorhandle);
	static CDM::SystemContextDescriptor * SystemContextDescriptorInit(Handle handle);
	static CDM::SystemContextState * SystemContextStateInit(HandleRef descriptorhandle);
	static CDM::BaseDemographics * BaseDemographicsInit();
	static CDM::PersonReference * PersonReferenceInit();
	static CDM::LocationDetail * LocationDetailInit();
	static CDM::PatientContextDescriptor * PatientContextDescriptorInit(Handle handle);
	static CDM::PatientDemographicsCoreData * PatientDemographicsCoreDataInit();
	static CDM::NeonatalPatientDemographicsCoreData * NeonatalPatientDemographicsCoreDataInit();
	static CDM::PatientContextState * PatientContextStateInit(HandleRef descriptorhandle, Handle handle);
	static CDM::LocationContextDescriptor * LocationContextDescriptorInit(Handle handle);
	static CDM::LocationContextState * LocationContextStateInit(HandleRef descriptorhandle, Handle handle);
	static CDM::WorkflowContextDescriptor * WorkflowContextDescriptorInit(Handle handle);
	static CDM::ClinicalInfo * ClinicalInfoInit();
	static CDM::RelatedMeasurement * RelatedMeasurementInit(Measurement value);
	static CDM::ReferenceRange * ReferenceRangeInit(Range range);
	static CDM::ImagingProcedure * ImagingProcedureInit(InstanceIdentifier accessionidentifier, InstanceIdentifier requestedprocedureid, InstanceIdentifier studyinstanceuid, InstanceIdentifier scheduledprocedurestepid);
	static CDM::LocationReference * LocationReferenceInit();
	static CDM::OrderDetail * OrderDetailInit();
	static CDM::PersonParticipation * PersonParticipationInit();
	static CDM::WorkflowContextState * WorkflowContextStateInit(HandleRef descriptorhandle, Handle handle);
	static CDM::WorkflowDetail * WorkflowDetailInit(PersonReference patient);
	static CDM::RequestedOrderDetail * RequestedOrderDetailInit(InstanceIdentifier placerordernumber);
	static CDM::PerformedOrderDetail * PerformedOrderDetailInit();
	static CDM::OperatorContextDescriptor * OperatorContextDescriptorInit(Handle handle);
	static CDM::OperatorContextState * OperatorContextStateInit(HandleRef descriptorhandle, Handle handle);
	static CDM::MeansContextDescriptor * MeansContextDescriptorInit(Handle handle);
	static CDM::MeansContextState * MeansContextStateInit(HandleRef descriptorhandle, Handle handle);
	static CDM::EnsembleContextDescriptor * EnsembleContextDescriptorInit(Handle handle);
	static CDM::EnsembleContextState * EnsembleContextStateInit(HandleRef descriptorhandle, Handle handle);
	static CDM::ContainmentTree * ContainmentTreeInit();
	static CDM::ContainmentTreeEntry * ContainmentTreeEntryInit();
	static CDM::DicomTransferCapability * DicomTransferCapabilityInit(std::string sopclass, DicomTransferRole transferrole);
	static CDM::DicomNetworkAe * DicomNetworkAeInit(std::string aetitle, xml_schema::Idrefs networkconnectionreference, bool associationinitiator, bool associationacceptor);
	static CDM::DicomNetworkConnection * DicomNetworkConnectionInit(xml_schema::Id id, std::string hostname);
	static CDM::DicomDeviceDescriptor * DicomDeviceDescriptorInit(Handle handle);
};

} /* namespace SDC */
} /* namespace Data */
} /* namespace SDCLib */

#endif /* DATA_SDC_MDIB_DEFAULTS_H_ */
